
STM32MAX749Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010504  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08010698  08010698  00011698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b98  08010b98  0001234c  2**0
                  CONTENTS
  4 .ARM          00000008  08010b98  08010b98  00011b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ba0  08010ba0  0001234c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ba0  08010ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ba4  08010ba4  00011ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  08010ba8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001234c  2**0
                  CONTENTS
 10 .bss          00001914  2000034c  2000034c  0001234c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001c60  20001c60  0001234c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001234c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a59  00000000  00000000  0001237c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004066  00000000  00000000  00029dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0002de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7d  00000000  00000000  0002f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cfb  00000000  00000000  00030245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0d3  00000000  00000000  00052f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf02e  00000000  00000000  00070013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f041  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006988  00000000  00000000  0012f084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00135a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801067c 	.word	0x0801067c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	0801067c 	.word	0x0801067c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <Read_ADC_Value>:
static void platform_init(void);


// Function to read ADC value from channel IN2 (PA1)
uint32_t Read_ADC_Value(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // Start the ADC conversion
 8000cf8:	480b      	ldr	r0, [pc, #44]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000cfa:	f001 fa07 	bl	800210c <HAL_ADC_Start>

    // Wait for the conversion to complete
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8000d02:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000d04:	f001 fb4e 	bl	80023a4 <HAL_ADC_PollForConversion>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d105      	bne.n	8000d1a <Read_ADC_Value+0x26>
    {
        ADC_val = HAL_ADC_GetValue(&hadc1);  // Read the ADC converted value
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000d10:	f001 fc4a 	bl	80025a8 <HAL_ADC_GetValue>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <Read_ADC_Value+0x38>)
 8000d18:	6013      	str	r3, [r2, #0]
    }

    HAL_ADC_Stop(&hadc1);  // Stop the ADC
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000d1c:	f001 fb0c 	bl	8002338 <HAL_ADC_Stop>
    return ADC_val;      // Return the ADC value
 8000d20:	4b02      	ldr	r3, [pc, #8]	@ (8000d2c <Read_ADC_Value+0x38>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000368 	.word	0x20000368
 8000d2c:	2000054c 	.word	0x2000054c

08000d30 <Set_DAC_Output>:

void Set_DAC_Output(uint32_t value)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    if(value > 4095) value = 4095;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d3e:	d302      	bcc.n	8000d46 <Set_DAC_Output+0x16>
 8000d40:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000d44:	607b      	str	r3, [r7, #4]
    else if(value < 0) value = 0;

	// Start the DAC if not already started
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d46:	2100      	movs	r1, #0
 8000d48:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <Set_DAC_Output+0x34>)
 8000d4a:	f002 faef 	bl	800332c <HAL_DAC_Start>

    // Set the DAC value (assuming a 12-bit value)
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <Set_DAC_Output+0x34>)
 8000d56:	f002 fac4 	bl	80032e2 <HAL_DAC_SetValue>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200003b8 	.word	0x200003b8

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	b09d      	sub	sp, #116	@ 0x74
 8000d6c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6e:	f000 ff63 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d72:	f000 f945 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d76:	f000 fb21 	bl	80013bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d7a:	f000 fa41 	bl	8001200 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d7e:	f000 fadf 	bl	8001340 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d82:	f000 f9a3 	bl	80010cc <MX_ADC1_Init>
  MX_DAC_Init();
 8000d86:	f000 fa11 	bl	80011ac <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000d8a:	f00a fbfb 	bl	800b584 <MX_USB_DEVICE_Init>
  MX_OPAMP1_Init();
 8000d8e:	f000 fab7 	bl	8001300 <MX_OPAMP1_Init>
  MX_I2C2_Init();
 8000d92:	f000 fa75 	bl	8001280 <MX_I2C2_Init>
  // Buffer for USB_COM
  char txBuf[64];

  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000d96:	4b88      	ldr	r3, [pc, #544]	@ (8000fb8 <main+0x250>)
 8000d98:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8000d9a:	4b88      	ldr	r3, [pc, #544]	@ (8000fbc <main+0x254>)
 8000d9c:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 8000d9e:	4b88      	ldr	r3, [pc, #544]	@ (8000fc0 <main+0x258>)
 8000da0:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 8000da2:	4b88      	ldr	r3, [pc, #544]	@ (8000fc4 <main+0x25c>)
 8000da4:	617b      	str	r3, [r7, #20]

  /* Init test platform */
  platform_init();
 8000da6:	f000 fbcc 	bl	8001542 <platform_init>

  /* Check device ID */
  stts22h_dev_id_get(&dev_ctx, &whoamI);
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4986      	ldr	r1, [pc, #536]	@ (8000fc8 <main+0x260>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fe2e 	bl	8001a12 <stts22h_dev_id_get>

  while(1)
  {
	  stts22h_dev_id_get(&dev_ctx, &whoamI);
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4983      	ldr	r1, [pc, #524]	@ (8000fc8 <main+0x260>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fe28 	bl	8001a12 <stts22h_dev_id_get>
	  if (whoamI == STTS22H_ID) break;
 8000dc2:	4b81      	ldr	r3, [pc, #516]	@ (8000fc8 <main+0x260>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8000dc8:	d1f5      	bne.n	8000db6 <main+0x4e>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8000dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dce:	f000 ff99 	bl	8001d04 <HAL_Delay>
	uint8_t flag;
	stts22h_temp_flag_data_ready_get(&dev_ctx, &flag);
 8000dd2:	1dfa      	adds	r2, r7, #7
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fdca 	bl	8001974 <stts22h_temp_flag_data_ready_get>

	if (flag)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d02b      	beq.n	8000e3e <main+0xd6>
	{
	  /* Read temperature data */
	  memset(&data_raw_temperature, 0, sizeof(int16_t));
 8000de6:	4b79      	ldr	r3, [pc, #484]	@ (8000fcc <main+0x264>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	801a      	strh	r2, [r3, #0]
	  stts22h_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4976      	ldr	r1, [pc, #472]	@ (8000fcc <main+0x264>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fddd 	bl	80019b2 <stts22h_temperature_raw_get>
	  temperature_degC = stts22h_from_lsb_to_celsius(data_raw_temperature);
 8000df8:	4b74      	ldr	r3, [pc, #464]	@ (8000fcc <main+0x264>)
 8000dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd9e 	bl	8001940 <stts22h_from_lsb_to_celsius>
 8000e04:	eef0 7a40 	vmov.f32	s15, s0
 8000e08:	4b71      	ldr	r3, [pc, #452]	@ (8000fd0 <main+0x268>)
 8000e0a:	edc3 7a00 	vstr	s15, [r3]
	  snprintf(tx_buffer, sizeof(tx_buffer), "Measured temperature: %0.3f C\r\n", temperature_degC);
 8000e0e:	4b70      	ldr	r3, [pc, #448]	@ (8000fd0 <main+0x268>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fb98 	bl	8000548 <__aeabi_f2d>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	e9cd 2300 	strd	r2, r3, [sp]
 8000e20:	4a6c      	ldr	r2, [pc, #432]	@ (8000fd4 <main+0x26c>)
 8000e22:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e26:	486c      	ldr	r0, [pc, #432]	@ (8000fd8 <main+0x270>)
 8000e28:	f00b ffb8 	bl	800cd9c <sniprintf>
	  CDC_Transmit_FS((uint8_t *) tx_buffer, strlen(tx_buffer));
 8000e2c:	486a      	ldr	r0, [pc, #424]	@ (8000fd8 <main+0x270>)
 8000e2e:	f7ff fa1f 	bl	8000270 <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	4867      	ldr	r0, [pc, #412]	@ (8000fd8 <main+0x270>)
 8000e3a:	f00a fc77 	bl	800b72c <CDC_Transmit_FS>
	}


//	if(rxBuf[0] == 117) (DAC_val = DAC_val + 1);
//	else if(rxBuf[0] == 100) (DAC_val = DAC_val - 1);
	ADC_val = Read_ADC_Value();
 8000e3e:	f7ff ff59 	bl	8000cf4 <Read_ADC_Value>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a65      	ldr	r2, [pc, #404]	@ (8000fdc <main+0x274>)
 8000e46:	6013      	str	r3, [r2, #0]
	measured_voltage = ((float)ADC_val / 4095) * 3.3;
 8000e48:	4b64      	ldr	r3, [pc, #400]	@ (8000fdc <main+0x274>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e54:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8000fe0 <main+0x278>
 8000e58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e5c:	ee16 0a90 	vmov	r0, s13
 8000e60:	f7ff fb72 	bl	8000548 <__aeabi_f2d>
 8000e64:	a350      	add	r3, pc, #320	@ (adr r3, 8000fa8 <main+0x240>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fbc5 	bl	80005f8 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff feb7 	bl	8000be8 <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a59      	ldr	r2, [pc, #356]	@ (8000fe4 <main+0x27c>)
 8000e7e:	6013      	str	r3, [r2, #0]
	voltage_setpoint = nominal_voltage - (temperature_degC - NOMINAL_TEMPERATURE)*TEMPERATURE_COEFICCIENT;
 8000e80:	4b59      	ldr	r3, [pc, #356]	@ (8000fe8 <main+0x280>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fb5f 	bl	8000548 <__aeabi_f2d>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460d      	mov	r5, r1
 8000e8e:	4b50      	ldr	r3, [pc, #320]	@ (8000fd0 <main+0x268>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e9c:	ee17 0a90 	vmov	r0, s15
 8000ea0:	f7ff fb52 	bl	8000548 <__aeabi_f2d>
 8000ea4:	a342      	add	r3, pc, #264	@ (adr r3, 8000fb0 <main+0x248>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fba5 	bl	80005f8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	f7ff f9e7 	bl	8000288 <__aeabi_dsub>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fe91 	bl	8000be8 <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a48      	ldr	r2, [pc, #288]	@ (8000fec <main+0x284>)
 8000eca:	6013      	str	r3, [r2, #0]

	if (measured_voltage < voltage_setpoint)
 8000ecc:	4b45      	ldr	r3, [pc, #276]	@ (8000fe4 <main+0x27c>)
 8000ece:	ed93 7a00 	vldr	s14, [r3]
 8000ed2:	4b46      	ldr	r3, [pc, #280]	@ (8000fec <main+0x284>)
 8000ed4:	edd3 7a00 	vldr	s15, [r3]
 8000ed8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee0:	d505      	bpl.n	8000eee <main+0x186>
	{
		DAC_val++;
 8000ee2:	4b43      	ldr	r3, [pc, #268]	@ (8000ff0 <main+0x288>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a41      	ldr	r2, [pc, #260]	@ (8000ff0 <main+0x288>)
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e004      	b.n	8000ef8 <main+0x190>
	}
	else
	{
		DAC_val--;
 8000eee:	4b40      	ldr	r3, [pc, #256]	@ (8000ff0 <main+0x288>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff0 <main+0x288>)
 8000ef6:	6013      	str	r3, [r2, #0]
	}

	if(DAC_val > 4095) DAC_val = 4095;
 8000ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff0 <main+0x288>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f00:	d303      	bcc.n	8000f0a <main+0x1a2>
 8000f02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <main+0x288>)
 8000f04:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000f08:	601a      	str	r2, [r3, #0]
	else if (DAC_val < 0) DAC_val = 0;

	DAC_voltage = ((float)DAC_val/4095)*3.3;
 8000f0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ff0 <main+0x288>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f16:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000fe0 <main+0x278>
 8000f1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f1e:	ee16 0a90 	vmov	r0, s13
 8000f22:	f7ff fb11 	bl	8000548 <__aeabi_f2d>
 8000f26:	a320      	add	r3, pc, #128	@ (adr r3, 8000fa8 <main+0x240>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb64 	bl	80005f8 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fe56 	bl	8000be8 <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff4 <main+0x28c>)
 8000f40:	6013      	str	r3, [r2, #0]

	Set_DAC_Output(DAC_val);
 8000f42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <main+0x288>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fef2 	bl	8000d30 <Set_DAC_Output>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f50:	4829      	ldr	r0, [pc, #164]	@ (8000ff8 <main+0x290>)
 8000f52:	f002 fc15 	bl	8003780 <HAL_GPIO_TogglePin>
	snprintf(txBuf, sizeof(txBuf), "DAC: %0.3f V\t ADC value: %ld \t Measured voltage: %0.3f \r\n", DAC_voltage, ADC_val, measured_voltage);
 8000f56:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <main+0x28c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff faf4 	bl	8000548 <__aeabi_f2d>
 8000f60:	4604      	mov	r4, r0
 8000f62:	460d      	mov	r5, r1
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <main+0x274>)
 8000f66:	681e      	ldr	r6, [r3, #0]
 8000f68:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <main+0x27c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff faeb 	bl	8000548 <__aeabi_f2d>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	f107 0018 	add.w	r0, r7, #24
 8000f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f7e:	9602      	str	r6, [sp, #8]
 8000f80:	e9cd 4500 	strd	r4, r5, [sp]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <main+0x294>)
 8000f86:	2140      	movs	r1, #64	@ 0x40
 8000f88:	f00b ff08 	bl	800cd9c <sniprintf>
	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f96d 	bl	8000270 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00a fbc3 	bl	800b72c <CDC_Transmit_FS>
  {
 8000fa6:	e710      	b.n	8000dca <main+0x62>
 8000fa8:	66666666 	.word	0x66666666
 8000fac:	400a6666 	.word	0x400a6666
 8000fb0:	b020c49c 	.word	0xb020c49c
 8000fb4:	3fa16872 	.word	0x3fa16872
 8000fb8:	080014b9 	.word	0x080014b9
 8000fbc:	080014f3 	.word	0x080014f3
 8000fc0:	0800152d 	.word	0x0800152d
 8000fc4:	20000420 	.word	0x20000420
 8000fc8:	20000564 	.word	0x20000564
 8000fcc:	2000055c 	.word	0x2000055c
 8000fd0:	20000560 	.word	0x20000560
 8000fd4:	08010698 	.word	0x08010698
 8000fd8:	20000568 	.word	0x20000568
 8000fdc:	2000054c 	.word	0x2000054c
 8000fe0:	457ff000 	.word	0x457ff000
 8000fe4:	20000558 	.word	0x20000558
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000550 	.word	0x20000550
 8000ff4:	20000554 	.word	0x20000554
 8000ff8:	48001000 	.word	0x48001000
 8000ffc:	080106b8 	.word	0x080106b8

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b09e      	sub	sp, #120	@ 0x78
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800100a:	2228      	movs	r2, #40	@ 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00b ff5b 	bl	800ceca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	223c      	movs	r2, #60	@ 0x3c
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00b ff4d 	bl	800ceca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001030:	2303      	movs	r3, #3
 8001032:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001034:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001038:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103e:	2301      	movs	r3, #1
 8001040:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001042:	2310      	movs	r3, #16
 8001044:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800104e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001050:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001054:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800105a:	4618      	mov	r0, r3
 800105c:	f004 ff3c 	bl	8005ed8 <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001066:	f000 fa73 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800107a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001080:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001084:	2101      	movs	r1, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f005 ff64 	bl	8006f54 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001092:	f000 fa5d 	bl	8001550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <SystemClock_Config+0xc8>)
 8001098:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800109a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80010a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f006 f91f 	bl	80072f4 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010bc:	f000 fa48 	bl	8001550 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3778      	adds	r7, #120	@ 0x78
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	000200e0 	.word	0x000200e0

080010cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 80010f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001102:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 800110a:	2200      	movs	r2, #0
 800110c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110e:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001118:	2200      	movs	r2, #0
 800111a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b22      	ldr	r3, [pc, #136]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 800111e:	2201      	movs	r2, #1
 8001120:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 800112a:	2201      	movs	r2, #1
 800112c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001138:	2204      	movs	r2, #4
 800113a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 800113e:	2200      	movs	r2, #0
 8001140:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001148:	4817      	ldr	r0, [pc, #92]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 800114a:	f000 fdff 	bl	8001d4c <HAL_ADC_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001154:	f000 f9fc 	bl	8001550 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001164:	f001 fd18 	bl	8002b98 <HAL_ADCEx_MultiModeConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800116e:	f000 f9ef 	bl	8001550 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001176:	2301      	movs	r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <MX_ADC1_Init+0xdc>)
 8001190:	f001 fa18 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800119a:	f000 f9d9 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000368 	.word	0x20000368

080011ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011be:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <MX_DAC_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011c4:	f002 f86b 	bl	800329e <HAL_DAC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80011ce:	f000 f9bf 	bl	8001550 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_DAC_Init+0x4c>)
 80011e2:	f002 f8ee 	bl	80033c2 <HAL_DAC_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80011ec:	f000 f9b0 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200003b8 	.word	0x200003b8
 80011fc:	40007400 	.word	0x40007400

08001200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	@ (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 800120a:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	@ (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	@ (8001274 <MX_I2C1_Init+0x74>)
 800123c:	f002 faba 	bl	80037b4 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 f983 	bl	8001550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	@ (8001274 <MX_I2C1_Init+0x74>)
 800124e:	f003 f83d 	bl	80042cc <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 f97a 	bl	8001550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_I2C1_Init+0x74>)
 8001260:	f003 f87f 	bl	8004362 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 f971 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200003cc 	.word	0x200003cc
 8001278:	40005400 	.word	0x40005400
 800127c:	0010020a 	.word	0x0010020a

08001280 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <MX_I2C2_Init+0x74>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <MX_I2C2_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800128a:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_I2C2_Init+0x74>)
 800128c:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <MX_I2C2_Init+0x7c>)
 800128e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001290:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <MX_I2C2_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_I2C2_Init+0x74>)
 8001298:	2201      	movs	r2, #1
 800129a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_I2C2_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_I2C2_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <MX_I2C2_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_I2C2_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_I2C2_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ba:	480e      	ldr	r0, [pc, #56]	@ (80012f4 <MX_I2C2_Init+0x74>)
 80012bc:	f002 fa7a 	bl	80037b4 <HAL_I2C_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012c6:	f000 f943 	bl	8001550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ca:	2100      	movs	r1, #0
 80012cc:	4809      	ldr	r0, [pc, #36]	@ (80012f4 <MX_I2C2_Init+0x74>)
 80012ce:	f002 fffd 	bl	80042cc <HAL_I2CEx_ConfigAnalogFilter>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012d8:	f000 f93a 	bl	8001550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_I2C2_Init+0x74>)
 80012e0:	f003 f83f 	bl	8004362 <HAL_I2CEx_ConfigDigitalFilter>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 f931 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000420 	.word	0x20000420
 80012f8:	40005800 	.word	0x40005800
 80012fc:	00201d2b 	.word	0x00201d2b

08001300 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_OPAMP1_Init+0x38>)
 8001306:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <MX_OPAMP1_Init+0x3c>)
 8001308:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_OPAMP1_Init+0x38>)
 800130c:	2260      	movs	r2, #96	@ 0x60
 800130e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_OPAMP1_Init+0x38>)
 8001312:	2208      	movs	r2, #8
 8001314:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_OPAMP1_Init+0x38>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_OPAMP1_Init+0x38>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_OPAMP1_Init+0x38>)
 8001324:	f003 f86a 	bl	80043fc <HAL_OPAMP_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 800132e:	f000 f90f 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000474 	.word	0x20000474
 800133c:	40010038 	.word	0x40010038

08001340 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <MX_SPI1_Init+0x78>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800134c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001358:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800135a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800135e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800136e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001372:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001376:	2208      	movs	r2, #8
 8001378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800138e:	2207      	movs	r2, #7
 8001390:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800139a:	2208      	movs	r2, #8
 800139c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_SPI1_Init+0x74>)
 80013a0:	f006 f958 	bl	8007654 <HAL_SPI_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 f8d1 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200004a8 	.word	0x200004a8
 80013b8:	40013000 	.word	0x40013000

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a30      	ldr	r2, [pc, #192]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 80013f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a2a      	ldr	r2, [pc, #168]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001408:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a24      	ldr	r2, [pc, #144]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <MX_GPIO_Init+0xf4>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800144a:	2200      	movs	r2, #0
 800144c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001450:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <MX_GPIO_Init+0xf8>)
 8001452:	f002 f97d 	bl	8003750 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001456:	2337      	movs	r3, #55	@ 0x37
 8001458:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800145a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4812      	ldr	r0, [pc, #72]	@ (80014b4 <MX_GPIO_Init+0xf8>)
 800146c:	f001 fff6 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001470:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001474:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	480a      	ldr	r0, [pc, #40]	@ (80014b4 <MX_GPIO_Init+0xf8>)
 800148a:	f001 ffe7 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148e:	2301      	movs	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f001 ffda 	bl	800345c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48001000 	.word	0x48001000

080014b8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af04      	add	r7, sp, #16
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	461a      	mov	r2, r3
 80014c4:	460b      	mov	r3, r1
 80014c6:	72fb      	strb	r3, [r7, #11]
 80014c8:	4613      	mov	r3, r2
 80014ca:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Write(handle, STTS22H_I2C_ADD_L, reg,
 80014cc:	7afb      	ldrb	r3, [r7, #11]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	893b      	ldrh	r3, [r7, #8]
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	217f      	movs	r1, #127	@ 0x7f
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f002 fa02 	bl	80038ec <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
#elif defined(SPC584B_DIS)
  i2c_lld_write(handle,  STTS22H_I2C_ADD_L & 0xFE, reg, (uint8_t*) bufp, len);
#endif
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b088      	sub	sp, #32
 80014f6:	af04      	add	r7, sp, #16
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	461a      	mov	r2, r3
 80014fe:	460b      	mov	r3, r1
 8001500:	72fb      	strb	r3, [r7, #11]
 8001502:	4613      	mov	r3, r2
 8001504:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Read(handle, STTS22H_I2C_ADD_L, reg,
 8001506:	7afb      	ldrb	r3, [r7, #11]
 8001508:	b29a      	uxth	r2, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	893b      	ldrh	r3, [r7, #8]
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	217f      	movs	r1, #127	@ 0x7f
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f002 faf9 	bl	8003b14 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
#elif defined(SPC584B_DIS)
  i2c_lld_read(handle, STTS22H_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
#if defined(NUCLEO_F401RE)
  HAL_Delay(ms);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fbe5 	bl	8001d04 <HAL_Delay>
#elif defined(SPC584B_DIS)
  osalThreadDelayMilliseconds(ms);
#endif
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <Error_Handler+0x8>

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_MspInit+0x44>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_MspInit+0x44>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_MspInit+0x44>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x44>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x44>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x44>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001592:	2007      	movs	r0, #7
 8001594:	f001 fe42 	bl	800321c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015c4:	d124      	bne.n	8001610 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_ADC_MspInit+0x74>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <HAL_ADC_MspInit+0x74>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_ADC_MspInit+0x74>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_ADC_MspInit+0x74>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <HAL_ADC_MspInit+0x74>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_ADC_MspInit+0x74>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015f6:	2302      	movs	r3, #2
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160c:	f001 ff26 	bl	800345c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	@ 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <HAL_DAC_MspInit+0x74>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d124      	bne.n	8001688 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_DAC_MspInit+0x78>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <HAL_DAC_MspInit+0x78>)
 8001644:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_DAC_MspInit+0x78>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <HAL_DAC_MspInit+0x78>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a0e      	ldr	r2, [pc, #56]	@ (8001694 <HAL_DAC_MspInit+0x78>)
 800165c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001660:	6153      	str	r3, [r2, #20]
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <HAL_DAC_MspInit+0x78>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800166e:	2310      	movs	r3, #16
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2303      	movs	r3, #3
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f001 feea 	bl	800345c <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40007400 	.word	0x40007400
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001774 <HAL_I2C_MspInit+0xdc>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d128      	bne.n	800170c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a2e      	ldr	r2, [pc, #184]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80016d2:	23c0      	movs	r3, #192	@ 0xc0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d6:	2312      	movs	r3, #18
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016da:	2301      	movs	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e2:	2304      	movs	r3, #4
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4823      	ldr	r0, [pc, #140]	@ (800177c <HAL_I2C_MspInit+0xe4>)
 80016ee:	f001 feb5 	bl	800345c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f2:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a20      	ldr	r2, [pc, #128]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 80016f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800170a:	e02e      	b.n	800176a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <HAL_I2C_MspInit+0xe8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d129      	bne.n	800176a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 800171c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001720:	6153      	str	r3, [r2, #20]
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800172e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001740:	2304      	movs	r3, #4
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174e:	f001 fe85 	bl	800345c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 8001758:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_I2C_MspInit+0xe0>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	bf00      	nop
 800176c:	3730      	adds	r7, #48	@ 0x30
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400
 8001780:	40005800 	.word	0x40005800

08001784 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0f      	ldr	r2, [pc, #60]	@ (80017e0 <HAL_OPAMP_MspInit+0x5c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d118      	bne.n	80017d8 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_OPAMP_MspInit+0x60>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <HAL_OPAMP_MspInit+0x60>)
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_OPAMP_MspInit+0x60>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017be:	230c      	movs	r3, #12
 80017c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c2:	2303      	movs	r3, #3
 80017c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d4:	f001 fe42 	bl	800345c <HAL_GPIO_Init>

  /* USER CODE END OPAMP1_MspInit 1 */

  }

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010038 	.word	0x40010038
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a17      	ldr	r2, [pc, #92]	@ (8001864 <HAL_SPI_MspInit+0x7c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d128      	bne.n	800185c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001814:	6193      	str	r3, [r2, #24]
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <HAL_SPI_MspInit+0x80>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800183a:	23e0      	movs	r3, #224	@ 0xe0
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800184a:	2305      	movs	r3, #5
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001858:	f001 fe00 	bl	800345c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40013000 	.word	0x40013000
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c2:	f000 f9ff 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80018d2:	f002 ff24 	bl	800471e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20001620 	.word	0x20001620

080018e0 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	461a      	mov	r2, r3
 80018ec:	460b      	mov	r3, r1
 80018ee:	72fb      	strb	r3, [r7, #11]
 80018f0:	4613      	mov	r3, r2
 80018f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685c      	ldr	r4, [r3, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68d8      	ldr	r0, [r3, #12]
 80018fc:	893b      	ldrh	r3, [r7, #8]
 80018fe:	7af9      	ldrb	r1, [r7, #11]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	47a0      	blx	r4
 8001904:	6178      	str	r0, [r7, #20]

  return ret;
 8001906:	697b      	ldr	r3, [r7, #20]
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}

08001910 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	460b      	mov	r3, r1
 800191e:	72fb      	strb	r3, [r7, #11]
 8001920:	4613      	mov	r3, r2
 8001922:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681c      	ldr	r4, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68d8      	ldr	r0, [r3, #12]
 800192c:	893b      	ldrh	r3, [r7, #8]
 800192e:	7af9      	ldrb	r1, [r7, #11]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	47a0      	blx	r4
 8001934:	6178      	str	r0, [r7, #20]

  return ret;
 8001936:	697b      	ldr	r3, [r7, #20]
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}

08001940 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001956:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001970 <stts22h_from_lsb_to_celsius+0x30>
 800195a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800195e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	42c80000 	.word	0x42c80000

08001974 <stts22h_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  stts22h_status_t status;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_STATUS, (uint8_t *)&status, 1);
 800197e:	f107 0208 	add.w	r2, r7, #8
 8001982:	2301      	movs	r3, #1
 8001984:	2105      	movs	r1, #5
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffaa 	bl	80018e0 <stts22h_read_reg>
 800198c:	60f8      	str	r0, [r7, #12]

  if (status.busy == PROPERTY_DISABLE)
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <stts22h_temp_flag_data_ready_get+0x2e>
  {
    *val = PROPERTY_ENABLE;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	e002      	b.n	80019a8 <stts22h_temp_flag_data_ready_get+0x34>
  }

  else
  {
    *val = PROPERTY_DISABLE;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  uint8_t buff0[1];
  uint8_t buff1[1];
  int32_t ret;

  stts22h_write_reg(ctx, 0x04U, 1, 1);
 80019bc:	2301      	movs	r3, #1
 80019be:	2201      	movs	r2, #1
 80019c0:	2104      	movs	r1, #4
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa4 	bl	8001910 <stts22h_write_reg>
  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff0, 1);
 80019c8:	f107 0210 	add.w	r2, r7, #16
 80019cc:	2301      	movs	r3, #1
 80019ce:	2106      	movs	r1, #6
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff85 	bl	80018e0 <stts22h_read_reg>
 80019d6:	6178      	str	r0, [r7, #20]
  ret = stts22h_read_reg(ctx, STTS22H_TEMP_H_OUT, buff1, 1);
 80019d8:	f107 020c 	add.w	r2, r7, #12
 80019dc:	2301      	movs	r3, #1
 80019de:	2107      	movs	r1, #7
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff7d 	bl	80018e0 <stts22h_read_reg>
 80019e6:	6178      	str	r0, [r7, #20]
  *val = (int16_t)buff1[0];
 80019e8:	7b3b      	ldrb	r3, [r7, #12]
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff0[0];
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	7c3a      	ldrb	r2, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	801a      	strh	r2, [r3, #0]

  return ret;
 8001a08:	697b      	ldr	r3, [r7, #20]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff5c 	bl	80018e0 <stts22h_read_reg>
 8001a28:	60f8      	str	r0, [r7, #12]

  return ret;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	f00b fa8f 	bl	800cf70 <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:

void _exit (int status)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <_exit+0x12>

08001a7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00a      	b.n	8001aa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8c:	f3af 8000 	nop.w
 8001a90:	4601      	mov	r1, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf0      	blt.n	8001a8c <_read+0x12>
  }

  return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e009      	b.n	8001ada <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbf1      	blt.n	8001ac6 <_write+0x12>
  }
  return len;
 8001ae2:	687b      	ldr	r3, [r7, #4]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_close>:

int _close(int file)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b14:	605a      	str	r2, [r3, #4]
  return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_isatty>:

int _isatty(int file)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f00b f9f4 	bl	800cf70 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000a000 	.word	0x2000a000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	20000950 	.word	0x20000950
 8001bbc:	20001c60 	.word	0x20001c60

08001bc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <SystemInit+0x20>)
 8001bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <SystemInit+0x20>)
 8001bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be8:	f7ff ffea 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bee:	490d      	ldr	r1, [pc, #52]	@ (8001c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <LoopForever+0xe>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c04:	4c0a      	ldr	r4, [pc, #40]	@ (8001c30 <LoopForever+0x16>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c12:	f00b f9b3 	bl	800cf7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c16:	f7ff f8a7 	bl	8000d68 <main>

08001c1a <LoopForever>:

LoopForever:
    b LoopForever
 8001c1a:	e7fe      	b.n	8001c1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c1c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001c28:	08010ba8 	.word	0x08010ba8
  ldr r2, =_sbss
 8001c2c:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001c30:	20001c60 	.word	0x20001c60

08001c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC1_2_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_Init+0x28>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_Init+0x28>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f001 fae7 	bl	800321c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fc82 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000

08001c64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 faff 	bl	8003286 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f001 fac7 	bl	8003232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	@ (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000010 	.word	0x20000010
 8001cc0:	2000000c 	.word	0x2000000c

08001cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	20000954 	.word	0x20000954

08001cec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000954 	.word	0x20000954

08001d04 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000010 	.word	0x20000010

08001d4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b09a      	sub	sp, #104	@ 0x68
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e1c9      	b.n	8002100 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d176      	bne.n	8001e6c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d152      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fbff 	bl	80015a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d13b      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f001 f845 	bl	8002e44 <ADC_Disable>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d12f      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
 8001dcc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d12b      	bne.n	8001e2c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ddc:	f023 0302 	bic.w	r3, r3, #2
 8001de0:	f043 0202 	orr.w	r2, r3, #2
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001df6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e06:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e08:	4b86      	ldr	r3, [pc, #536]	@ (8002024 <HAL_ADC_Init+0x2d8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a86      	ldr	r2, [pc, #536]	@ (8002028 <HAL_ADC_Init+0x2dc>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0c9a      	lsrs	r2, r3, #18
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f9      	bne.n	8001e20 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e48:	d110      	bne.n	8001e6c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f023 0312 	bic.w	r3, r3, #18
 8001e52:	f043 0210 	orr.w	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f040 8136 	bne.w	80020e6 <HAL_ADC_Init+0x39a>
 8001e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8131 	bne.w	80020e6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8129 	bne.w	80020e6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eac:	d004      	beq.n	8001eb8 <HAL_ADC_Init+0x16c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800202c <HAL_ADC_Init+0x2e0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_Init+0x170>
 8001eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8002030 <HAL_ADC_Init+0x2e4>)
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_Init+0x172>
 8001ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8002034 <HAL_ADC_Init+0x2e8>)
 8001ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ec8:	d102      	bne.n	8001ed0 <HAL_ADC_Init+0x184>
 8001eca:	4b58      	ldr	r3, [pc, #352]	@ (800202c <HAL_ADC_Init+0x2e0>)
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e01a      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	@ (800202c <HAL_ADC_Init+0x2e0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d103      	bne.n	8001ee2 <HAL_ADC_Init+0x196>
 8001eda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e011      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a54      	ldr	r2, [pc, #336]	@ (8002038 <HAL_ADC_Init+0x2ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d102      	bne.n	8001ef2 <HAL_ADC_Init+0x1a6>
 8001eec:	4b53      	ldr	r3, [pc, #332]	@ (800203c <HAL_ADC_Init+0x2f0>)
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e009      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a51      	ldr	r2, [pc, #324]	@ (800203c <HAL_ADC_Init+0x2f0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d102      	bne.n	8001f02 <HAL_ADC_Init+0x1b6>
 8001efc:	4b4e      	ldr	r3, [pc, #312]	@ (8002038 <HAL_ADC_Init+0x2ec>)
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e001      	b.n	8001f06 <HAL_ADC_Init+0x1ba>
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d108      	bne.n	8001f26 <HAL_ADC_Init+0x1da>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Init+0x1da>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_Init+0x1dc>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11c      	bne.n	8001f66 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d010      	beq.n	8001f54 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_ADC_Init+0x202>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x202>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_ADC_Init+0x204>
 8001f4e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f64:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e5b      	ldrb	r3, [r3, #25]
 8001f6a:	035b      	lsls	r3, r3, #13
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f70:	2a01      	cmp	r2, #1
 8001f72:	d002      	beq.n	8001f7a <HAL_ADC_Init+0x22e>
 8001f74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f78:	e000      	b.n	8001f7c <HAL_ADC_Init+0x230>
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d11b      	bne.n	8001fd2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7e5b      	ldrb	r3, [r3, #25]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	045a      	lsls	r2, r3, #17
 8001faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fb4:	e00d      	b.n	8001fd2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d03a      	beq.n	8002050 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <HAL_ADC_Init+0x2ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_ADC_Init+0x2a2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <HAL_ADC_Init+0x2f0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d128      	bne.n	8002040 <HAL_ADC_Init+0x2f4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001ff6:	d012      	beq.n	800201e <HAL_ADC_Init+0x2d2>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002000:	d00a      	beq.n	8002018 <HAL_ADC_Init+0x2cc>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800200a:	d002      	beq.n	8002012 <HAL_ADC_Init+0x2c6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	e018      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 8002012:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002016:	e015      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 8002018:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 800201c:	e012      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 800201e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002022:	e00f      	b.n	8002044 <HAL_ADC_Init+0x2f8>
 8002024:	20000008 	.word	0x20000008
 8002028:	431bde83 	.word	0x431bde83
 800202c:	50000100 	.word	0x50000100
 8002030:	50000300 	.word	0x50000300
 8002034:	50000700 	.word	0x50000700
 8002038:	50000400 	.word	0x50000400
 800203c:	50000500 	.word	0x50000500
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002048:	4313      	orrs	r3, r2
 800204a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800204c:	4313      	orrs	r3, r2
 800204e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d114      	bne.n	8002088 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800206c:	f023 0302 	bic.w	r3, r3, #2
 8002070:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7e1b      	ldrb	r3, [r3, #24]
 8002076:	039a      	lsls	r2, r3, #14
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4313      	orrs	r3, r2
 8002082:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002084:	4313      	orrs	r3, r2
 8002086:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <HAL_ADC_Init+0x3bc>)
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002098:	430b      	orrs	r3, r1
 800209a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10c      	bne.n	80020be <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f023 010f 	bic.w	r1, r3, #15
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80020bc:	e007      	b.n	80020ce <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 020f 	bic.w	r2, r2, #15
 80020cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f023 0303 	bic.w	r3, r3, #3
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80020e4:	e00a      	b.n	80020fc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f023 0312 	bic.w	r3, r3, #18
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80020fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002100:	4618      	mov	r0, r3
 8002102:	3768      	adds	r7, #104	@ 0x68
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fff0c007 	.word	0xfff0c007

0800210c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80f9 	bne.w	800231a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Start+0x2a>
 8002132:	2302      	movs	r3, #2
 8002134:	e0f4      	b.n	8002320 <HAL_ADC_Start+0x214>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fe1c 	bl	8002d7c <ADC_Enable>
 8002144:	4603      	mov	r3, r0
 8002146:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 80e0 	bne.w	8002310 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800216c:	d004      	beq.n	8002178 <HAL_ADC_Start+0x6c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6d      	ldr	r2, [pc, #436]	@ (8002328 <HAL_ADC_Start+0x21c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d106      	bne.n	8002186 <HAL_ADC_Start+0x7a>
 8002178:	4b6c      	ldr	r3, [pc, #432]	@ (800232c <HAL_ADC_Start+0x220>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <HAL_ADC_Start+0x9a>
 8002184:	e005      	b.n	8002192 <HAL_ADC_Start+0x86>
 8002186:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_ADC_Start+0x224>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_ADC_Start+0x9a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800219a:	d004      	beq.n	80021a6 <HAL_ADC_Start+0x9a>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a64      	ldr	r2, [pc, #400]	@ (8002334 <HAL_ADC_Start+0x228>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d115      	bne.n	80021d2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d036      	beq.n	800222e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021d0:	e02d      	b.n	800222e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021e6:	d004      	beq.n	80021f2 <HAL_ADC_Start+0xe6>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002328 <HAL_ADC_Start+0x21c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10a      	bne.n	8002208 <HAL_ADC_Start+0xfc>
 80021f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e008      	b.n	800221a <HAL_ADC_Start+0x10e>
 8002208:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <HAL_ADC_Start+0x228>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002226:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800223a:	d106      	bne.n	800224a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	f023 0206 	bic.w	r2, r3, #6
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44
 8002248:	e002      	b.n	8002250 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	221c      	movs	r2, #28
 800225e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002268:	d004      	beq.n	8002274 <HAL_ADC_Start+0x168>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2e      	ldr	r2, [pc, #184]	@ (8002328 <HAL_ADC_Start+0x21c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d106      	bne.n	8002282 <HAL_ADC_Start+0x176>
 8002274:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <HAL_ADC_Start+0x220>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03e      	beq.n	80022fe <HAL_ADC_Start+0x1f2>
 8002280:	e005      	b.n	800228e <HAL_ADC_Start+0x182>
 8002282:	4b2b      	ldr	r3, [pc, #172]	@ (8002330 <HAL_ADC_Start+0x224>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2b00      	cmp	r3, #0
 800228c:	d037      	beq.n	80022fe <HAL_ADC_Start+0x1f2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_Start+0x196>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a22      	ldr	r2, [pc, #136]	@ (8002328 <HAL_ADC_Start+0x21c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d106      	bne.n	80022b0 <HAL_ADC_Start+0x1a4>
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_ADC_Start+0x220>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d027      	beq.n	80022fe <HAL_ADC_Start+0x1f2>
 80022ae:	e005      	b.n	80022bc <HAL_ADC_Start+0x1b0>
 80022b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HAL_ADC_Start+0x224>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d020      	beq.n	80022fe <HAL_ADC_Start+0x1f2>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022c4:	d004      	beq.n	80022d0 <HAL_ADC_Start+0x1c4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <HAL_ADC_Start+0x21c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d106      	bne.n	80022de <HAL_ADC_Start+0x1d2>
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <HAL_ADC_Start+0x220>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2b09      	cmp	r3, #9
 80022da:	d010      	beq.n	80022fe <HAL_ADC_Start+0x1f2>
 80022dc:	e005      	b.n	80022ea <HAL_ADC_Start+0x1de>
 80022de:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <HAL_ADC_Start+0x224>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2b09      	cmp	r3, #9
 80022e8:	d009      	beq.n	80022fe <HAL_ADC_Start+0x1f2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_Start+0x1f2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002334 <HAL_ADC_Start+0x228>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10f      	bne.n	800231e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0204 	orr.w	r2, r2, #4
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	e006      	b.n	800231e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002318:	e001      	b.n	800231e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800231a:	2302      	movs	r3, #2
 800231c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	50000100 	.word	0x50000100
 800232c:	50000300 	.word	0x50000300
 8002330:	50000700 	.word	0x50000700
 8002334:	50000400 	.word	0x50000400

08002338 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Stop+0x1a>
 800234e:	2302      	movs	r3, #2
 8002350:	e023      	b.n	800239a <HAL_ADC_Stop+0x62>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800235a:	216c      	movs	r1, #108	@ 0x6c
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fdd7 	bl	8002f10 <ADC_ConversionStop>
 8002362:	4603      	mov	r3, r0
 8002364:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fd69 	bl	8002e44 <ADC_Disable>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d102      	bne.n	80023c0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80023ba:	2308      	movs	r3, #8
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e03a      	b.n	8002436 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c8:	d004      	beq.n	80023d4 <HAL_ADC_PollForConversion+0x30>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a72      	ldr	r2, [pc, #456]	@ (8002598 <HAL_ADC_PollForConversion+0x1f4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_PollForConversion+0x34>
 80023d4:	4b71      	ldr	r3, [pc, #452]	@ (800259c <HAL_ADC_PollForConversion+0x1f8>)
 80023d6:	e000      	b.n	80023da <HAL_ADC_PollForConversion+0x36>
 80023d8:	4b71      	ldr	r3, [pc, #452]	@ (80025a0 <HAL_ADC_PollForConversion+0x1fc>)
 80023da:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d112      	bne.n	800240e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d11d      	bne.n	8002432 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0bf      	b.n	800258e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0ad      	b.n	800258e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002432:	230c      	movs	r3, #12
 8002434:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800243e:	d004      	beq.n	800244a <HAL_ADC_PollForConversion+0xa6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a54      	ldr	r2, [pc, #336]	@ (8002598 <HAL_ADC_PollForConversion+0x1f4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d106      	bne.n	8002458 <HAL_ADC_PollForConversion+0xb4>
 800244a:	4b54      	ldr	r3, [pc, #336]	@ (800259c <HAL_ADC_PollForConversion+0x1f8>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2b00      	cmp	r3, #0
 8002454:	d010      	beq.n	8002478 <HAL_ADC_PollForConversion+0xd4>
 8002456:	e005      	b.n	8002464 <HAL_ADC_PollForConversion+0xc0>
 8002458:	4b51      	ldr	r3, [pc, #324]	@ (80025a0 <HAL_ADC_PollForConversion+0x1fc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_ADC_PollForConversion+0xd4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800246c:	d004      	beq.n	8002478 <HAL_ADC_PollForConversion+0xd4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4c      	ldr	r2, [pc, #304]	@ (80025a4 <HAL_ADC_PollForConversion+0x200>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d104      	bne.n	8002482 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e00f      	b.n	80024a2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248a:	d004      	beq.n	8002496 <HAL_ADC_PollForConversion+0xf2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a41      	ldr	r2, [pc, #260]	@ (8002598 <HAL_ADC_PollForConversion+0x1f4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d102      	bne.n	800249c <HAL_ADC_PollForConversion+0xf8>
 8002496:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800249a:	e000      	b.n	800249e <HAL_ADC_PollForConversion+0xfa>
 800249c:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_ADC_PollForConversion+0x200>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80024a2:	f7ff fc23 	bl	8001cec <HAL_GetTick>
 80024a6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024a8:	e021      	b.n	80024ee <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d01d      	beq.n	80024ee <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_ADC_PollForConversion+0x124>
 80024b8:	f7ff fc18 	bl	8001cec <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d212      	bcs.n	80024ee <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e04f      	b.n	800258e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0d6      	beq.n	80024aa <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002512:	2b00      	cmp	r3, #0
 8002514:	d131      	bne.n	800257a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800251c:	2b00      	cmp	r3, #0
 800251e:	d12c      	bne.n	800257a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b08      	cmp	r3, #8
 800252c:	d125      	bne.n	800257a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d112      	bne.n	8002562 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d112      	bne.n	800257a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002560:	e00b      	b.n	800257a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	50000100 	.word	0x50000100
 800259c:	50000300 	.word	0x50000300
 80025a0:	50000700 	.word	0x50000700
 80025a4:	50000400 	.word	0x50000400

080025a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b09b      	sub	sp, #108	@ 0x6c
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x22>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e2c8      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5b4>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 82ac 	bne.w	8002b56 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d81c      	bhi.n	8002640 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	461a      	mov	r2, r3
 800261a:	231f      	movs	r3, #31
 800261c:	4093      	lsls	r3, r2
 800261e:	43db      	mvns	r3, r3
 8002620:	4019      	ands	r1, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa00 f203 	lsl.w	r2, r0, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
 800263e:	e063      	b.n	8002708 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d81e      	bhi.n	8002686 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	3b1e      	subs	r3, #30
 800265c:	221f      	movs	r2, #31
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	4019      	ands	r1, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	3b1e      	subs	r3, #30
 8002678:	fa00 f203 	lsl.w	r2, r0, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34
 8002684:	e040      	b.n	8002708 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b0e      	cmp	r3, #14
 800268c:	d81e      	bhi.n	80026cc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	3b3c      	subs	r3, #60	@ 0x3c
 80026a2:	221f      	movs	r2, #31
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	4019      	ands	r1, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	3b3c      	subs	r3, #60	@ 0x3c
 80026be:	fa00 f203 	lsl.w	r2, r0, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80026ca:	e01d      	b.n	8002708 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	3b5a      	subs	r3, #90	@ 0x5a
 80026e0:	221f      	movs	r2, #31
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	4019      	ands	r1, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	3b5a      	subs	r3, #90	@ 0x5a
 80026fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 80e5 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b09      	cmp	r3, #9
 800271e:	d91c      	bls.n	800275a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	2207      	movs	r2, #7
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	4019      	ands	r1, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6898      	ldr	r0, [r3, #8]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	3b1e      	subs	r3, #30
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	619a      	str	r2, [r3, #24]
 8002758:	e019      	b.n	800278e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6959      	ldr	r1, [r3, #20]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	2207      	movs	r2, #7
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	4019      	ands	r1, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6898      	ldr	r0, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	fa00 f203 	lsl.w	r2, r0, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	08db      	lsrs	r3, r3, #3
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d84f      	bhi.n	8002850 <HAL_ADC_ConfigChannel+0x28c>
 80027b0:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <HAL_ADC_ConfigChannel+0x1f4>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027eb 	.word	0x080027eb
 80027c0:	0800280d 	.word	0x0800280d
 80027c4:	0800282f 	.word	0x0800282f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ce:	4b99      	ldr	r3, [pc, #612]	@ (8002a34 <HAL_ADC_ConfigChannel+0x470>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	0691      	lsls	r1, r2, #26
 80027d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027da:	430a      	orrs	r2, r1
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027e6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027e8:	e07b      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027f0:	4b90      	ldr	r3, [pc, #576]	@ (8002a34 <HAL_ADC_ConfigChannel+0x470>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	0691      	lsls	r1, r2, #26
 80027fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027fc:	430a      	orrs	r2, r1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002808:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800280a:	e06a      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002812:	4b88      	ldr	r3, [pc, #544]	@ (8002a34 <HAL_ADC_ConfigChannel+0x470>)
 8002814:	4013      	ands	r3, r2
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	0691      	lsls	r1, r2, #26
 800281c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800281e:	430a      	orrs	r2, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800282a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800282c:	e059      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002834:	4b7f      	ldr	r3, [pc, #508]	@ (8002a34 <HAL_ADC_ConfigChannel+0x470>)
 8002836:	4013      	ands	r3, r2
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	0691      	lsls	r1, r2, #26
 800283e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002840:	430a      	orrs	r2, r1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800284c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800284e:	e048      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002856:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	069b      	lsls	r3, r3, #26
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002872:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800287a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	069b      	lsls	r3, r3, #26
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002896:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800289e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	069b      	lsls	r3, r3, #26
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028ba:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	069b      	lsls	r3, r3, #26
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d107      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028de:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80028e0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d108      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x33e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x33e>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_ADC_ConfigChannel+0x340>
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 8131 	bne.w	8002b6c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d00f      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2201      	movs	r2, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43da      	mvns	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	400a      	ands	r2, r1
 800292c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002930:	e049      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2201      	movs	r2, #1
 8002940:	409a      	lsls	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d91c      	bls.n	800298e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	3b1b      	subs	r3, #27
 8002966:	2207      	movs	r2, #7
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	4019      	ands	r1, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6898      	ldr	r0, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	3b1b      	subs	r3, #27
 8002980:	fa00 f203 	lsl.w	r2, r0, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e01b      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6959      	ldr	r1, [r3, #20]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	2207      	movs	r2, #7
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	4019      	ands	r1, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6898      	ldr	r0, [r3, #8]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	fa00 f203 	lsl.w	r2, r0, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ce:	d004      	beq.n	80029da <HAL_ADC_ConfigChannel+0x416>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a18      	ldr	r2, [pc, #96]	@ (8002a38 <HAL_ADC_ConfigChannel+0x474>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x41a>
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_ADC_ConfigChannel+0x478>)
 80029dc:	e000      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x41c>
 80029de:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_ADC_ConfigChannel+0x47c>)
 80029e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d015      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029fa:	2b11      	cmp	r3, #17
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	f040 80ac 	bne.w	8002b6c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 80a5 	bne.w	8002b6c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2a:	d10b      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x480>
 8002a2c:	4b02      	ldr	r3, [pc, #8]	@ (8002a38 <HAL_ADC_ConfigChannel+0x474>)
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e023      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x4b6>
 8002a32:	bf00      	nop
 8002a34:	83fff000 	.word	0x83fff000
 8002a38:	50000100 	.word	0x50000100
 8002a3c:	50000300 	.word	0x50000300
 8002a40:	50000700 	.word	0x50000700
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a4e      	ldr	r2, [pc, #312]	@ (8002b84 <HAL_ADC_ConfigChannel+0x5c0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d103      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x492>
 8002a4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e011      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x4b6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8002b88 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d102      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x4a2>
 8002a60:	4b4a      	ldr	r3, [pc, #296]	@ (8002b8c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e009      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x4b6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a48      	ldr	r2, [pc, #288]	@ (8002b8c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d102      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x4b2>
 8002a70:	4b45      	ldr	r3, [pc, #276]	@ (8002b88 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e001      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x4b6>
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d108      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x4d6>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x4d6>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x4d8>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d150      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x4fe>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x4fe>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x500>
 8002ac2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d13c      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d11d      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x548>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ad8:	d118      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b90 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <HAL_ADC_ConfigChannel+0x5d0>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9a      	lsrs	r2, r3, #18
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b0a:	e02e      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b11      	cmp	r3, #17
 8002b12:	d10b      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x568>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b1c:	d106      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b2a:	e01e      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b12      	cmp	r3, #18
 8002b32:	d11a      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b40:	e013      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b54:	e00a      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b68:	e000      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b6a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	376c      	adds	r7, #108	@ 0x6c
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	50000100 	.word	0x50000100
 8002b88:	50000400 	.word	0x50000400
 8002b8c:	50000500 	.word	0x50000500
 8002b90:	20000008 	.word	0x20000008
 8002b94:	431bde83 	.word	0x431bde83

08002b98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b099      	sub	sp, #100	@ 0x64
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bb0:	d102      	bne.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	e01a      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d103      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002bc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	e011      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a67      	ldr	r2, [pc, #412]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d102      	bne.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bd4:	4b66      	ldr	r3, [pc, #408]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	e009      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a64      	ldr	r2, [pc, #400]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002be4:	4b61      	ldr	r3, [pc, #388]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e001      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b0      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0a9      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 808d 	bne.w	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 8086 	bne.w	8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c34:	d004      	beq.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4b      	ldr	r2, [pc, #300]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c40:	4b4c      	ldr	r3, [pc, #304]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002c42:	e000      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c44:	4b4c      	ldr	r3, [pc, #304]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002c46:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d040      	beq.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c62:	035b      	lsls	r3, r3, #13
 8002c64:	430b      	orrs	r3, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c6a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d108      	bne.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d15c      	bne.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002cae:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d14b      	bne.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cbc:	f023 030f 	bic.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	6811      	ldr	r1, [r2, #0]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	6892      	ldr	r2, [r2, #8]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cce:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd0:	e03c      	b.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cdc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d108      	bne.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d123      	bne.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002d20:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d112      	bne.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d2e:	f023 030f 	bic.w	r3, r3, #15
 8002d32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d34:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d36:	e009      	b.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002d4a:	e000      	b.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d4c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3764      	adds	r7, #100	@ 0x64
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	50000100 	.word	0x50000100
 8002d6c:	50000400 	.word	0x50000400
 8002d70:	50000500 	.word	0x50000500
 8002d74:	50000300 	.word	0x50000300
 8002d78:	50000700 	.word	0x50000700

08002d7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <ADC_Enable+0x2c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <ADC_Enable+0x2c>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <ADC_Enable+0x2e>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d143      	bne.n	8002e36 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <ADC_Enable+0xc4>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	f043 0210 	orr.w	r2, r3, #16
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e02f      	b.n	8002e38 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002de8:	f7fe ff80 	bl	8001cec <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dee:	e01b      	b.n	8002e28 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002df0:	f7fe ff7c 	bl	8001cec <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d914      	bls.n	8002e28 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d00d      	beq.n	8002e28 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d1dc      	bne.n	8002df0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	8000003f 	.word	0x8000003f

08002e44 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d108      	bne.n	8002e70 <ADC_Disable+0x2c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <ADC_Disable+0x2c>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <ADC_Disable+0x2e>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d047      	beq.n	8002f06 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030d 	and.w	r3, r3, #13
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10f      	bne.n	8002ea4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0202 	orr.w	r2, r2, #2
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe ff26 	bl	8001cec <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ea2:	e029      	b.n	8002ef8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f043 0210 	orr.w	r2, r3, #16
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e023      	b.n	8002f08 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ec0:	f7fe ff14 	bl	8001cec <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d914      	bls.n	8002ef8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d10d      	bne.n	8002ef8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f043 0210 	orr.w	r2, r3, #16
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e007      	b.n	8002f08 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d0dc      	beq.n	8002ec0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 809b 	beq.w	800306c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f44:	d12a      	bne.n	8002f9c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d126      	bne.n	8002f9c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d122      	bne.n	8002f9c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002f56:	230c      	movs	r3, #12
 8002f58:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002f5a:	e014      	b.n	8002f86 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	@ (8003078 <ADC_ConversionStop+0x168>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d90d      	bls.n	8002f80 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e076      	b.n	800306e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	3301      	adds	r3, #1
 8002f84:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b40      	cmp	r3, #64	@ 0x40
 8002f92:	d1e3      	bne.n	8002f5c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2240      	movs	r2, #64	@ 0x40
 8002f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b60      	cmp	r3, #96	@ 0x60
 8002fa0:	d015      	beq.n	8002fce <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d10e      	bne.n	8002fce <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0210 	orr.w	r2, r2, #16
 8002fcc:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d015      	beq.n	8003000 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d10e      	bne.n	8003000 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0220 	orr.w	r2, r2, #32
 8002ffe:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b60      	cmp	r3, #96	@ 0x60
 8003004:	d005      	beq.n	8003012 <ADC_ConversionStop+0x102>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b6c      	cmp	r3, #108	@ 0x6c
 800300a:	d105      	bne.n	8003018 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800300c:	230c      	movs	r3, #12
 800300e:	617b      	str	r3, [r7, #20]
        break;
 8003010:	e005      	b.n	800301e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003012:	2308      	movs	r3, #8
 8003014:	617b      	str	r3, [r7, #20]
        break;
 8003016:	e002      	b.n	800301e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003018:	2304      	movs	r3, #4
 800301a:	617b      	str	r3, [r7, #20]
        break;
 800301c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800301e:	f7fe fe65 	bl	8001cec <HAL_GetTick>
 8003022:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003024:	e01b      	b.n	800305e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003026:	f7fe fe61 	bl	8001cec <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b0b      	cmp	r3, #11
 8003032:	d914      	bls.n	800305e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1dc      	bne.n	8003026 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	000993ff 	.word	0x000993ff

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	@ (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	@ (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	@ (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	@ 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
         );
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	@ 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e8:	d301      	bcc.n	80031ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <SysTick_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f6:	210f      	movs	r1, #15
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f7ff ff8e 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <SysTick_Config+0x40>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <SysTick_Config+0x40>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff29 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003244:	f7ff ff3e 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f7ff ff8e 	bl	8003170 <NVIC_EncodePriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff5d 	bl	800311c <__NVIC_SetPriority>
}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff31 	bl	80030e0 <__NVIC_EnableIRQ>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffa2 	bl	80031d8 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e014      	b.n	80032da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	791b      	ldrb	r3, [r3, #4]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fe f9ab 	bl	800161c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80032e2:	b480      	push	{r7}
 80032e4:	b087      	sub	sp, #28
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	3308      	adds	r3, #8
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e004      	b.n	8003316 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3314      	adds	r3, #20
 8003314:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	461a      	mov	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	795b      	ldrb	r3, [r3, #5]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_DAC_Start+0x16>
 800333e:	2302      	movs	r3, #2
 8003340:	e039      	b.n	80033b6 <HAL_DAC_Start+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	2201      	movs	r2, #1
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	409a      	lsls	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10f      	bne.n	8003388 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003372:	2b3c      	cmp	r3, #60	@ 0x3c
 8003374:	d118      	bne.n	80033a8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e00f      	b.n	80033a8 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003392:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8003396:	d107      	bne.n	80033a8 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0202 	orr.w	r2, r2, #2
 80033a6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	795b      	ldrb	r3, [r3, #5]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_DAC_ConfigChannel+0x20>
 80033de:	2302      	movs	r3, #2
 80033e0:	e036      	b.n	8003450 <HAL_DAC_ConfigChannel+0x8e>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2202      	movs	r2, #2
 80033ec:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80033f6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4013      	ands	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	22c0      	movs	r2, #192	@ 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43da      	mvns	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	400a      	ands	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346a:	e154      	b.n	8003716 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8146 	beq.w	8003710 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d005      	beq.n	800349c <HAL_GPIO_Init+0x40>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d130      	bne.n	80034fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d2:	2201      	movs	r2, #1
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0201 	and.w	r2, r3, #1
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b03      	cmp	r3, #3
 8003508:	d017      	beq.n	800353a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	2203      	movs	r2, #3
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d123      	bne.n	800358e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	08da      	lsrs	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3208      	adds	r2, #8
 8003588:	6939      	ldr	r1, [r7, #16]
 800358a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2203      	movs	r2, #3
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80a0 	beq.w	8003710 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d0:	4b58      	ldr	r3, [pc, #352]	@ (8003734 <HAL_GPIO_Init+0x2d8>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4a57      	ldr	r2, [pc, #348]	@ (8003734 <HAL_GPIO_Init+0x2d8>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6193      	str	r3, [r2, #24]
 80035dc:	4b55      	ldr	r3, [pc, #340]	@ (8003734 <HAL_GPIO_Init+0x2d8>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035e8:	4a53      	ldr	r2, [pc, #332]	@ (8003738 <HAL_GPIO_Init+0x2dc>)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003612:	d019      	beq.n	8003648 <HAL_GPIO_Init+0x1ec>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a49      	ldr	r2, [pc, #292]	@ (800373c <HAL_GPIO_Init+0x2e0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_GPIO_Init+0x1e8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a48      	ldr	r2, [pc, #288]	@ (8003740 <HAL_GPIO_Init+0x2e4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00d      	beq.n	8003640 <HAL_GPIO_Init+0x1e4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a47      	ldr	r2, [pc, #284]	@ (8003744 <HAL_GPIO_Init+0x2e8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <HAL_GPIO_Init+0x1e0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <HAL_GPIO_Init+0x2ec>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_GPIO_Init+0x1dc>
 8003634:	2304      	movs	r3, #4
 8003636:	e008      	b.n	800364a <HAL_GPIO_Init+0x1ee>
 8003638:	2305      	movs	r3, #5
 800363a:	e006      	b.n	800364a <HAL_GPIO_Init+0x1ee>
 800363c:	2303      	movs	r3, #3
 800363e:	e004      	b.n	800364a <HAL_GPIO_Init+0x1ee>
 8003640:	2302      	movs	r3, #2
 8003642:	e002      	b.n	800364a <HAL_GPIO_Init+0x1ee>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_GPIO_Init+0x1ee>
 8003648:	2300      	movs	r3, #0
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	f002 0203 	and.w	r2, r2, #3
 8003650:	0092      	lsls	r2, r2, #2
 8003652:	4093      	lsls	r3, r2
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800365a:	4937      	ldr	r1, [pc, #220]	@ (8003738 <HAL_GPIO_Init+0x2dc>)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	3302      	adds	r3, #2
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003668:	4b38      	ldr	r3, [pc, #224]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800368c:	4a2f      	ldr	r2, [pc, #188]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003692:	4b2e      	ldr	r3, [pc, #184]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036b6:	4a25      	ldr	r2, [pc, #148]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036bc:	4b23      	ldr	r3, [pc, #140]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036e0:	4a1a      	ldr	r2, [pc, #104]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e6:	4b19      	ldr	r3, [pc, #100]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800370a:	4a10      	ldr	r2, [pc, #64]	@ (800374c <HAL_GPIO_Init+0x2f0>)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3301      	adds	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	f47f aea3 	bne.w	800346c <HAL_GPIO_Init+0x10>
  }
}
 8003726:	bf00      	nop
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40021000 	.word	0x40021000
 8003738:	40010000 	.word	0x40010000
 800373c:	48000400 	.word	0x48000400
 8003740:	48000800 	.word	0x48000800
 8003744:	48000c00 	.word	0x48000c00
 8003748:	48001000 	.word	0x48001000
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
 800375c:	4613      	mov	r3, r2
 800375e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003760:	787b      	ldrb	r3, [r7, #1]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800376c:	e002      	b.n	8003774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4013      	ands	r3, r2
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43d9      	mvns	r1, r3
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	400b      	ands	r3, r1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	619a      	str	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e08d      	b.n	80038e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd ff5c 	bl	8001698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	@ 0x24
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003804:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003814:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	e006      	b.n	800383c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800383a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d108      	bne.n	8003856 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	e007      	b.n	8003866 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003864:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003878:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003888:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69d9      	ldr	r1, [r3, #28]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	817b      	strh	r3, [r7, #10]
 80038fe:	460b      	mov	r3, r1
 8003900:	813b      	strh	r3, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	f040 80f9 	bne.w	8003b06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_I2C_Mem_Write+0x34>
 800391a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003926:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0ed      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_I2C_Mem_Write+0x4e>
 8003936:	2302      	movs	r3, #2
 8003938:	e0e6      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003942:	f7fe f9d3 	bl	8001cec <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2319      	movs	r3, #25
 800394e:	2201      	movs	r2, #1
 8003950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fac3 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0d1      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2221      	movs	r2, #33	@ 0x21
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2240      	movs	r2, #64	@ 0x40
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800398c:	88f8      	ldrh	r0, [r7, #6]
 800398e:	893a      	ldrh	r2, [r7, #8]
 8003990:	8979      	ldrh	r1, [r7, #10]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	4603      	mov	r3, r0
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f9d3 	bl	8003d48 <I2C_RequestMemoryWrite>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0a9      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2bff      	cmp	r3, #255	@ 0xff
 80039bc:	d90e      	bls.n	80039dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	22ff      	movs	r2, #255	@ 0xff
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	8979      	ldrh	r1, [r7, #10]
 80039cc:	2300      	movs	r3, #0
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fc47 	bl	8004268 <I2C_TransferConfig>
 80039da:	e00f      	b.n	80039fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fc36 	bl	8004268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fac6 	bl	8003f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e07b      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d034      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0x1c8>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d130      	bne.n	8003ab4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fa3f 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e04d      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2bff      	cmp	r3, #255	@ 0xff
 8003a74:	d90e      	bls.n	8003a94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	22ff      	movs	r2, #255	@ 0xff
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	8979      	ldrh	r1, [r7, #10]
 8003a84:	2300      	movs	r3, #0
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fbeb 	bl	8004268 <I2C_TransferConfig>
 8003a92:	e00f      	b.n	8003ab4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	8979      	ldrh	r1, [r7, #10]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fbda 	bl	8004268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d19e      	bne.n	80039fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 faac 	bl	8004020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e01a      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <HAL_I2C_Mem_Write+0x224>)
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	fe00e800 	.word	0xfe00e800

08003b14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	460b      	mov	r3, r1
 8003b28:	813b      	strh	r3, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	f040 80fd 	bne.w	8003d36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_I2C_Mem_Read+0x34>
 8003b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0f1      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_Mem_Read+0x4e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0ea      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b6a:	f7fe f8bf 	bl	8001cec <HAL_GetTick>
 8003b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2319      	movs	r3, #25
 8003b76:	2201      	movs	r2, #1
 8003b78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f9af 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0d5      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2222      	movs	r2, #34	@ 0x22
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2240      	movs	r2, #64	@ 0x40
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bb4:	88f8      	ldrh	r0, [r7, #6]
 8003bb6:	893a      	ldrh	r2, [r7, #8]
 8003bb8:	8979      	ldrh	r1, [r7, #10]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f913 	bl	8003df0 <I2C_RequestMemoryRead>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0ad      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2bff      	cmp	r3, #255	@ 0xff
 8003be4:	d90e      	bls.n	8003c04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	8979      	ldrh	r1, [r7, #10]
 8003bf4:	4b52      	ldr	r3, [pc, #328]	@ (8003d40 <HAL_I2C_Mem_Read+0x22c>)
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fb33 	bl	8004268 <I2C_TransferConfig>
 8003c02:	e00f      	b.n	8003c24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	8979      	ldrh	r1, [r7, #10]
 8003c16:	4b4a      	ldr	r3, [pc, #296]	@ (8003d40 <HAL_I2C_Mem_Read+0x22c>)
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fb22 	bl	8004268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f956 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07c      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d034      	beq.n	8003ce4 <HAL_I2C_Mem_Read+0x1d0>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d130      	bne.n	8003ce4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f927 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e04d      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2bff      	cmp	r3, #255	@ 0xff
 8003ca4:	d90e      	bls.n	8003cc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fad3 	bl	8004268 <I2C_TransferConfig>
 8003cc2:	e00f      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	8979      	ldrh	r1, [r7, #10]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fac2 	bl	8004268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d19a      	bne.n	8003c24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f994 	bl	8004020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e01a      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2220      	movs	r2, #32
 8003d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <HAL_I2C_Mem_Read+0x230>)
 8003d16:	400b      	ands	r3, r1
 8003d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	80002400 	.word	0x80002400
 8003d44:	fe00e800 	.word	0xfe00e800

08003d48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	817b      	strh	r3, [r7, #10]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	813b      	strh	r3, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	8979      	ldrh	r1, [r7, #10]
 8003d68:	4b20      	ldr	r3, [pc, #128]	@ (8003dec <I2C_RequestMemoryWrite+0xa4>)
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fa79 	bl	8004268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f909 	bl	8003f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e02c      	b.n	8003de4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d90:	893b      	ldrh	r3, [r7, #8]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d9a:	e015      	b.n	8003dc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d9c:	893b      	ldrh	r3, [r7, #8]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	69b9      	ldr	r1, [r7, #24]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f8ef 	bl	8003f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e012      	b.n	8003de4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dbe:	893b      	ldrh	r3, [r7, #8]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2180      	movs	r1, #128	@ 0x80
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f884 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	80002000 	.word	0x80002000

08003df0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	817b      	strh	r3, [r7, #10]
 8003e02:	460b      	mov	r3, r1
 8003e04:	813b      	strh	r3, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <I2C_RequestMemoryRead+0xa4>)
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2300      	movs	r3, #0
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fa26 	bl	8004268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f8b6 	bl	8003f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e02c      	b.n	8003e8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e36:	893b      	ldrh	r3, [r7, #8]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e40:	e015      	b.n	8003e6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e42:	893b      	ldrh	r3, [r7, #8]
 8003e44:	0a1b      	lsrs	r3, r3, #8
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	69b9      	ldr	r1, [r7, #24]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f89c 	bl	8003f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e012      	b.n	8003e8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e64:	893b      	ldrh	r3, [r7, #8]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2140      	movs	r1, #64	@ 0x40
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f831 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	80002000 	.word	0x80002000

08003e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d103      	bne.n	8003eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d007      	beq.n	8003ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	619a      	str	r2, [r3, #24]
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef0:	e03b      	b.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f8d6 	bl	80040a8 <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e041      	b.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d02d      	beq.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fd feed 	bl	8001cec <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d122      	bne.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d113      	bne.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00f      	b.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d0b4      	beq.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f9e:	e033      	b.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f87f 	bl	80040a8 <I2C_IsErrorOccurred>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e031      	b.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d025      	beq.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbc:	f7fd fe96 	bl	8001cec <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11a      	bne.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d013      	beq.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d1c4      	bne.n	8003fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800402c:	e02f      	b.n	800408e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f838 	bl	80040a8 <I2C_IsErrorOccurred>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02d      	b.n	800409e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fd fe53 	bl	8001cec <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11a      	bne.n	800408e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b20      	cmp	r3, #32
 8004064:	d013      	beq.n	800408e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e007      	b.n	800409e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	d1c8      	bne.n	800402e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	@ 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d068      	beq.n	80041a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2210      	movs	r2, #16
 80040da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040dc:	e049      	b.n	8004172 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d045      	beq.n	8004172 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fd fe01 	bl	8001cec <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <I2C_IsErrorOccurred+0x54>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d13a      	bne.n	8004172 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004106:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800410e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411e:	d121      	bne.n	8004164 <I2C_IsErrorOccurred+0xbc>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004126:	d01d      	beq.n	8004164 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b20      	cmp	r3, #32
 800412c:	d01a      	beq.n	8004164 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800413c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800413e:	f7fd fdd5 	bl	8001cec <HAL_GetTick>
 8004142:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004144:	e00e      	b.n	8004164 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004146:	f7fd fdd1 	bl	8001cec <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b19      	cmp	r3, #25
 8004152:	d907      	bls.n	8004164 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	f043 0320 	orr.w	r3, r3, #32
 800415a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004162:	e006      	b.n	8004172 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b20      	cmp	r3, #32
 8004170:	d1e9      	bne.n	8004146 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b20      	cmp	r3, #32
 800417e:	d003      	beq.n	8004188 <I2C_IsErrorOccurred+0xe0>
 8004180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0aa      	beq.n	80040de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2220      	movs	r2, #32
 8004196:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01c      	beq.n	8004256 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fe3b 	bl	8003e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <I2C_IsErrorOccurred+0x1bc>)
 800422e:	400b      	ands	r3, r1
 8004230:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800425a:	4618      	mov	r0, r3
 800425c:	3728      	adds	r7, #40	@ 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	fe00e800 	.word	0xfe00e800

08004268 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	4613      	mov	r3, r2
 8004278:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004280:	7a7b      	ldrb	r3, [r7, #9]
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004288:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	4313      	orrs	r3, r2
 8004292:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004296:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	0d5b      	lsrs	r3, r3, #21
 80042a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80042a6:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <I2C_TransferConfig+0x60>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	43db      	mvns	r3, r3
 80042ac:	ea02 0103 	and.w	r1, r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	03ff63ff 	.word	0x03ff63ff

080042cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d138      	bne.n	8004354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e032      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800431e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b20      	cmp	r3, #32
 8004376:	d139      	bne.n	80043ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004382:	2302      	movs	r3, #2
 8004384:	e033      	b.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2224      	movs	r2, #36	@ 0x24
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e08f      	b.n	8004532 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b05      	cmp	r3, #5
 800441c:	d101      	bne.n	8004422 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e087      	b.n	8004532 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d101      	bne.n	8004432 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07f      	b.n	8004532 <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b80      	cmp	r3, #128	@ 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004438:	4b40      	ldr	r3, [pc, #256]	@ (800453c <HAL_OPAMP_Init+0x140>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	4a3f      	ldr	r2, [pc, #252]	@ (800453c <HAL_OPAMP_Init+0x140>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6193      	str	r3, [r2, #24]
 8004444:	4b3d      	ldr	r3, [pc, #244]	@ (800453c <HAL_OPAMP_Init+0x140>)
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fd f98d 	bl	8001784 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b40      	cmp	r3, #64	@ 0x40
 8004470:	d003      	beq.n	800447a <HAL_OPAMP_Init+0x7e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b60      	cmp	r3, #96	@ 0x60
 8004478:	d125      	bne.n	80044c6 <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b2f      	ldr	r3, [pc, #188]	@ (8004540 <HAL_OPAMP_Init+0x144>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6851      	ldr	r1, [r2, #4]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	4311      	orrs	r1, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6912      	ldr	r2, [r2, #16]
 8004492:	4311      	orrs	r1, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6992      	ldr	r2, [r2, #24]
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	69d2      	ldr	r2, [r2, #28]
 800449e:	4311      	orrs	r1, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6a12      	ldr	r2, [r2, #32]
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044aa:	4311      	orrs	r1, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044b0:	04d2      	lsls	r2, r2, #19
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044b8:	0612      	lsls	r2, r2, #24
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e02a      	b.n	800451c <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004540 <HAL_OPAMP_Init+0x144>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6851      	ldr	r1, [r2, #4]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6892      	ldr	r2, [r2, #8]
 80044d8:	4311      	orrs	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68d2      	ldr	r2, [r2, #12]
 80044de:	4311      	orrs	r1, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6912      	ldr	r2, [r2, #16]
 80044e4:	4311      	orrs	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6952      	ldr	r2, [r2, #20]
 80044ea:	4311      	orrs	r1, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6992      	ldr	r2, [r2, #24]
 80044f0:	4311      	orrs	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	69d2      	ldr	r2, [r2, #28]
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6a12      	ldr	r2, [r2, #32]
 80044fc:	4311      	orrs	r1, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004508:	04d2      	lsls	r2, r2, #19
 800450a:	4311      	orrs	r1, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004510:	0612      	lsls	r2, r2, #24
 8004512:	4311      	orrs	r1, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	430b      	orrs	r3, r1
 800451a:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	e0003811 	.word	0xe0003811

08004544 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0b9      	b.n	80046ca <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f007 fa14 	bl	800b998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2203      	movs	r2, #3
 8004574:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f003 f92b 	bl	80077d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
 8004586:	e03e      	b.n	8004606 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	440b      	add	r3, r1
 8004596:	3311      	adds	r3, #17
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	440b      	add	r3, r1
 80045aa:	3310      	adds	r3, #16
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	3313      	adds	r3, #19
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	440b      	add	r3, r1
 80045d2:	3320      	adds	r3, #32
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	440b      	add	r3, r1
 80045e6:	3324      	adds	r3, #36	@ 0x24
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	440b      	add	r3, r1
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	3301      	adds	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	791b      	ldrb	r3, [r3, #4]
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	429a      	cmp	r2, r3
 800460e:	d3bb      	bcc.n	8004588 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e044      	b.n	80046a0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004616:	7bfa      	ldrb	r2, [r7, #15]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	440b      	add	r3, r1
 8004624:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	440b      	add	r3, r1
 800463a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800463e:	7bfa      	ldrb	r2, [r7, #15]
 8004640:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004642:	7bfa      	ldrb	r2, [r7, #15]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	440b      	add	r3, r1
 8004650:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	440b      	add	r3, r1
 8004666:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	440b      	add	r3, r1
 800467c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	440b      	add	r3, r1
 8004692:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	3301      	adds	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	791b      	ldrb	r3, [r3, #4]
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d3b5      	bcc.n	8004616 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80046b6:	f003 f8aa 	bl	800780e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_PCD_Start+0x16>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e016      	b.n	8004716 <HAL_PCD_Start+0x44>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f003 f858 	bl	80077aa <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80046fa:	2101      	movs	r1, #1
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f007 fbe7 	bl	800bed0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f005 fb16 	bl	8009d38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f005 fb0f 	bl	8009d4e <USB_ReadInterrupts>
 8004730:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fab1 	bl	8004ca4 <PCD_EP_ISR_Handler>

    return;
 8004742:	e0bd      	b.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474a:	2b00      	cmp	r3, #0
 800474c:	d013      	beq.n	8004776 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004760:	b292      	uxth	r2, r2
 8004762:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f007 f9b7 	bl	800bada <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800476c:	2100      	movs	r1, #0
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f8a9 	bl	80048c6 <HAL_PCD_SetAddress>

    return;
 8004774:	e0a4      	b.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004788:	b29a      	uxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004792:	b292      	uxth	r2, r2
 8004794:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004798:	e092      	b.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047b6:	b292      	uxth	r2, r2
 80047b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80047bc:	e080      	b.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d027      	beq.n	8004818 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0204 	bic.w	r2, r2, #4
 80047da:	b292      	uxth	r2, r2
 80047dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0208 	bic.w	r2, r2, #8
 80047f2:	b292      	uxth	r2, r2
 80047f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f007 f9a7 	bl	800bb4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004810:	b292      	uxth	r2, r2
 8004812:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004816:	e053      	b.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800481e:	2b00      	cmp	r3, #0
 8004820:	d027      	beq.n	8004872 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0208 	orr.w	r2, r2, #8
 8004834:	b292      	uxth	r2, r2
 8004836:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0204 	orr.w	r2, r2, #4
 8004864:	b292      	uxth	r2, r2
 8004866:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f007 f954 	bl	800bb18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004870:	e026      	b.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00f      	beq.n	800489c <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800488e:	b292      	uxth	r2, r2
 8004890:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f007 f912 	bl	800babe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800489a:	e011      	b.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00c      	beq.n	80048c0 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048b8:	b292      	uxth	r2, r2
 80048ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048be:	bf00      	nop
  }
}
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_PCD_SetAddress+0x1a>
 80048dc:	2302      	movs	r3, #2
 80048de:	e012      	b.n	8004906 <HAL_PCD_SetAddress+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	78fa      	ldrb	r2, [r7, #3]
 80048ec:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f005 fa0a 	bl	8009d10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	461a      	mov	r2, r3
 800491c:	4603      	mov	r3, r0
 800491e:	70fb      	strb	r3, [r7, #3]
 8004920:	460b      	mov	r3, r1
 8004922:	803b      	strh	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800492c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da0e      	bge.n	8004952 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 0207 	and.w	r2, r3, #7
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	3310      	adds	r3, #16
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	4413      	add	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	705a      	strb	r2, [r3, #1]
 8004950:	e00e      	b.n	8004970 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	f003 0207 	and.w	r2, r3, #7
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4413      	add	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800497c:	883a      	ldrh	r2, [r7, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	78ba      	ldrb	r2, [r7, #2]
 8004986:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004988:	78bb      	ldrb	r3, [r7, #2]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d102      	bne.n	8004994 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_PCD_EP_Open+0x94>
 800499e:	2302      	movs	r3, #2
 80049a0:	e00e      	b.n	80049c0 <HAL_PCD_EP_Open+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 ff4b 	bl	800784c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80049be:	7afb      	ldrb	r3, [r7, #11]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da0e      	bge.n	80049fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 0207 	and.w	r2, r3, #7
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	3310      	adds	r3, #16
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	705a      	strb	r2, [r3, #1]
 80049f8:	e00e      	b.n	8004a18 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 0207 	and.w	r2, r3, #7
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_PCD_EP_Close+0x6a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e00e      	b.n	8004a50 <HAL_PCD_EP_Close+0x88>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f003 fac7 	bl	8007fd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	460b      	mov	r3, r1
 8004a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a68:	7afb      	ldrb	r3, [r7, #11]
 8004a6a:	f003 0207 	and.w	r2, r3, #7
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a98:	7afb      	ldrb	r3, [r7, #11]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f003 fc7f 	bl	80083ae <USB_EPStartXfer>

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f003 0207 	and.w	r2, r3, #7
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004adc:	681b      	ldr	r3, [r3, #0]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	460b      	mov	r3, r1
 8004af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	f003 0207 	and.w	r2, r3, #7
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	3310      	adds	r3, #16
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2201      	movs	r2, #1
 8004b34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6979      	ldr	r1, [r7, #20]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f003 fc30 	bl	80083ae <USB_EPStartXfer>

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	7912      	ldrb	r2, [r2, #4]
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e03e      	b.n	8004bf4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	da0e      	bge.n	8004b9c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	f003 0207 	and.w	r2, r3, #7
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	3310      	adds	r3, #16
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	705a      	strb	r2, [r3, #1]
 8004b9a:	e00c      	b.n	8004bb6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_PCD_EP_SetStall+0x7e>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e00e      	b.n	8004bf4 <HAL_PCD_EP_SetStall+0x9c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f004 ff94 	bl	8009b12 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	7912      	ldrb	r2, [r2, #4]
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e040      	b.n	8004c9c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	da0e      	bge.n	8004c40 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 0207 	and.w	r2, r3, #7
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	3310      	adds	r3, #16
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	705a      	strb	r2, [r3, #1]
 8004c3e:	e00e      	b.n	8004c5e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 0207 	and.w	r2, r3, #7
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_PCD_EP_ClrStall+0x82>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e00e      	b.n	8004c9c <HAL_PCD_EP_ClrStall+0xa0>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f004 ff91 	bl	8009bb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b096      	sub	sp, #88	@ 0x58
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cac:	e3bb      	b.n	8005426 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cb6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004cc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8175 	bne.w	8004fbc <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cd2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d14e      	bne.n	8004d7c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	81fb      	strh	r3, [r7, #14]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	89fb      	ldrh	r3, [r7, #14]
 8004cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3310      	adds	r3, #16
 8004d06:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d42:	2100      	movs	r1, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f006 fea0 	bl	800ba8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7b1b      	ldrb	r3, [r3, #12]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8368 	beq.w	8005426 <PCD_EP_ISR_Handler+0x782>
 8004d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 8363 	bne.w	8005426 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7b1b      	ldrb	r3, [r3, #12]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	731a      	strb	r2, [r3, #12]
 8004d7a:	e354      	b.n	8005426 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d82:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d034      	beq.n	8004e04 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	3306      	adds	r3, #6
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f005 f80e 	bl	8009dfa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004dea:	4013      	ands	r3, r2
 8004dec:	823b      	strh	r3, [r7, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	8a3a      	ldrh	r2, [r7, #16]
 8004df4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f006 fe17 	bl	800ba30 <HAL_PCD_SetupStageCallback>
 8004e02:	e310      	b.n	8005426 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e04:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f280 830c 	bge.w	8005426 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	83fb      	strh	r3, [r7, #30]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	8bfa      	ldrh	r2, [r7, #30]
 8004e24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	3306      	adds	r3, #6
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e56:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d019      	beq.n	8004e94 <PCD_EP_ISR_Handler+0x1f0>
 8004e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d015      	beq.n	8004e94 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6e:	6959      	ldr	r1, [r3, #20]
 8004e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e72:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e76:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f004 ffbe 	bl	8009dfa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	441a      	add	r2, r3
 8004e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f006 fde0 	bl	800ba54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004e9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 82bd 	bne.w	8005426 <PCD_EP_ISR_Handler+0x782>
 8004eac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004eb0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004eb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eb8:	f000 82b5 	beq.w	8005426 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <PCD_EP_ISR_Handler+0x266>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	e039      	b.n	8004f7e <PCD_EP_ISR_Handler+0x2da>
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f10:	d818      	bhi.n	8004f44 <PCD_EP_ISR_Handler+0x2a0>
 8004f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <PCD_EP_ISR_Handler+0x288>
 8004f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f28:	3301      	adds	r3, #1
 8004f2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	029b      	lsls	r3, r3, #10
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	e01c      	b.n	8004f7e <PCD_EP_ISR_Handler+0x2da>
 8004f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <PCD_EP_ISR_Handler+0x2ba>
 8004f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8e:	827b      	strh	r3, [r7, #18]
 8004f90:	8a7b      	ldrh	r3, [r7, #18]
 8004f92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f96:	827b      	strh	r3, [r7, #18]
 8004f98:	8a7b      	ldrh	r3, [r7, #18]
 8004f9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f9e:	827b      	strh	r3, [r7, #18]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	8a7b      	ldrh	r3, [r7, #18]
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]
 8004fba:	e234      	b.n	8005426 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fd0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f280 80fc 	bge.w	80051d2 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8005008:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800500c:	b292      	uxth	r2, r2
 800500e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005010:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	4413      	add	r3, r2
 8005024:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005028:	7b1b      	ldrb	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d125      	bne.n	800507a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	3306      	adds	r3, #6
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005056:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800505a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8092 	beq.w	8005188 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506a:	6959      	ldr	r1, [r3, #20]
 800506c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506e:	88da      	ldrh	r2, [r3, #6]
 8005070:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005074:	f004 fec1 	bl	8009dfa <USB_ReadPMA>
 8005078:	e086      	b.n	8005188 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800507a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507c:	78db      	ldrb	r3, [r3, #3]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d10a      	bne.n	8005098 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005082:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005086:	461a      	mov	r2, r3
 8005088:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f9d9 	bl	8005442 <HAL_PCD_EP_DB_Receive>
 8005090:	4603      	mov	r3, r0
 8005092:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005096:	e077      	b.n	8005188 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80050c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d024      	beq.n	8005140 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	3302      	adds	r3, #2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800511e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005122:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005126:	2b00      	cmp	r3, #0
 8005128:	d02e      	beq.n	8005188 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005130:	6959      	ldr	r1, [r3, #20]
 8005132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005134:	891a      	ldrh	r2, [r3, #8]
 8005136:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800513a:	f004 fe5e 	bl	8009dfa <USB_ReadPMA>
 800513e:	e023      	b.n	8005188 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005148:	b29b      	uxth	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	3306      	adds	r3, #6
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005168:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800516c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517a:	6959      	ldr	r1, [r3, #20]
 800517c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517e:	895a      	ldrh	r2, [r3, #10]
 8005180:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005184:	f004 fe39 	bl	8009dfa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005190:	441a      	add	r2, r3
 8005192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005194:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800519e:	441a      	add	r2, r3
 80051a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80051a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <PCD_EP_ISR_Handler+0x514>
 80051ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80051b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d206      	bcs.n	80051c6 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f006 fc48 	bl	800ba54 <HAL_PCD_DataOutStageCallback>
 80051c4:	e005      	b.n	80051d2 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051cc:	4618      	mov	r0, r3
 80051ce:	f003 f8ee 	bl	80083ae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80051d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8123 	beq.w	8005426 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80051e0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	3310      	adds	r3, #16
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005232:	78db      	ldrb	r3, [r3, #3]
 8005234:	2b01      	cmp	r3, #1
 8005236:	f040 80a2 	bne.w	800537e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800523a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800523c:	2200      	movs	r2, #0
 800523e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005242:	7b1b      	ldrb	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8093 	beq.w	8005370 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800524a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800524e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d046      	beq.n	80052e4 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d126      	bne.n	80052ac <PCD_EP_ISR_Handler+0x608>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800526c:	b29b      	uxth	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	4413      	add	r3, r2
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
 8005276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	011a      	lsls	r2, r3, #4
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	4413      	add	r3, r2
 8005280:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005290:	b29a      	uxth	r2, r3
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	801a      	strh	r2, [r3, #0]
 80052aa:	e061      	b.n	8005370 <PCD_EP_ISR_Handler+0x6cc>
 80052ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d15d      	bne.n	8005370 <PCD_EP_ISR_Handler+0x6cc>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c8:	4413      	add	r3, r2
 80052ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d4:	4413      	add	r3, r2
 80052d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	2200      	movs	r2, #0
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e045      	b.n	8005370 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d126      	bne.n	8005340 <PCD_EP_ISR_Handler+0x69c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	4413      	add	r3, r2
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
 800530a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	011a      	lsls	r2, r3, #4
 8005310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005312:	4413      	add	r3, r2
 8005314:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005318:	633b      	str	r3, [r7, #48]	@ 0x30
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005324:	b29a      	uxth	r2, r3
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005338:	b29a      	uxth	r2, r3
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e017      	b.n	8005370 <PCD_EP_ISR_Handler+0x6cc>
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d113      	bne.n	8005370 <PCD_EP_ISR_Handler+0x6cc>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005350:	b29b      	uxth	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005356:	4413      	add	r3, r2
 8005358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	011a      	lsls	r2, r3, #4
 8005360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005362:	4413      	add	r3, r2
 8005364:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005368:	63bb      	str	r3, [r7, #56]	@ 0x38
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	2200      	movs	r2, #0
 800536e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f006 fb87 	bl	800ba8a <HAL_PCD_DataInStageCallback>
 800537c:	e053      	b.n	8005426 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800537e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d146      	bne.n	8005418 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	3302      	adds	r3, #2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80053b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053be:	429a      	cmp	r2, r3
 80053c0:	d907      	bls.n	80053d2 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80053c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ce:	619a      	str	r2, [r3, #24]
 80053d0:	e002      	b.n	80053d8 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80053d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80053d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f006 fb4f 	bl	800ba8a <HAL_PCD_DataInStageCallback>
 80053ec:	e01b      	b.n	8005426 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053f6:	441a      	add	r2, r3
 80053f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80053fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005404:	441a      	add	r2, r3
 8005406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005408:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005410:	4618      	mov	r0, r3
 8005412:	f002 ffcc 	bl	80083ae <USB_EPStartXfer>
 8005416:	e006      	b.n	8005426 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005418:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800541c:	461a      	mov	r2, r3
 800541e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f91b 	bl	800565c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800542e:	b29b      	uxth	r3, r3
 8005430:	b21b      	sxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	f6ff ac3b 	blt.w	8004cae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3758      	adds	r7, #88	@ 0x58
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b088      	sub	sp, #32
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	4613      	mov	r3, r2
 800544e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d07e      	beq.n	8005558 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005462:	b29b      	uxth	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4413      	add	r3, r2
 800546e:	3302      	adds	r3, #2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005482:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	8b7b      	ldrh	r3, [r7, #26]
 800548a:	429a      	cmp	r2, r3
 800548c:	d306      	bcc.n	800549c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	8b7b      	ldrh	r3, [r7, #26]
 8005494:	1ad2      	subs	r2, r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	619a      	str	r2, [r3, #24]
 800549a:	e002      	b.n	80054a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d123      	bne.n	80054f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	833b      	strh	r3, [r7, #24]
 80054c6:	8b3b      	ldrh	r3, [r7, #24]
 80054c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054cc:	833b      	strh	r3, [r7, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	441a      	add	r2, r3
 80054dc:	8b3b      	ldrh	r3, [r7, #24]
 80054de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01f      	beq.n	800553c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005516:	82fb      	strh	r3, [r7, #22]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	8afb      	ldrh	r3, [r7, #22]
 8005528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800552c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005534:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005538:	b29b      	uxth	r3, r3
 800553a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800553c:	8b7b      	ldrh	r3, [r7, #26]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8087 	beq.w	8005652 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6959      	ldr	r1, [r3, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	891a      	ldrh	r2, [r3, #8]
 8005550:	8b7b      	ldrh	r3, [r7, #26]
 8005552:	f004 fc52 	bl	8009dfa <USB_ReadPMA>
 8005556:	e07c      	b.n	8005652 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005560:	b29b      	uxth	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	3306      	adds	r3, #6
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005580:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	8b7b      	ldrh	r3, [r7, #26]
 8005588:	429a      	cmp	r2, r3
 800558a:	d306      	bcc.n	800559a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	8b7b      	ldrh	r3, [r7, #26]
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	619a      	str	r2, [r3, #24]
 8005598:	e002      	b.n	80055a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d123      	bne.n	80055f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c2:	83fb      	strh	r3, [r7, #30]
 80055c4:	8bfb      	ldrh	r3, [r7, #30]
 80055c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80055ca:	83fb      	strh	r3, [r7, #30]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	8bfb      	ldrh	r3, [r7, #30]
 80055dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11f      	bne.n	800563a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005614:	83bb      	strh	r3, [r7, #28]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	8bbb      	ldrh	r3, [r7, #28]
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005632:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800563a:	8b7b      	ldrh	r3, [r7, #26]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6959      	ldr	r1, [r3, #20]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	895a      	ldrh	r2, [r3, #10]
 800564c:	8b7b      	ldrh	r3, [r7, #26]
 800564e:	f004 fbd4 	bl	8009dfa <USB_ReadPMA>
    }
  }

  return count;
 8005652:	8b7b      	ldrh	r3, [r7, #26]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b0a4      	sub	sp, #144	@ 0x90
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 81dd 	beq.w	8005a30 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4413      	add	r3, r2
 800568a:	3302      	adds	r3, #2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800569e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d907      	bls.n	80056be <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	619a      	str	r2, [r3, #24]
 80056bc:	e002      	b.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2200      	movs	r2, #0
 80056c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f040 80b9 	bne.w	8005840 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d126      	bne.n	8005724 <HAL_PCD_EP_DB_Transmit+0xc8>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	4413      	add	r3, r2
 80056ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	011a      	lsls	r2, r3, #4
 80056f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f6:	4413      	add	r3, r2
 80056f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005708:	b29a      	uxth	r2, r3
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571c:	b29a      	uxth	r2, r3
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	e01a      	b.n	800575a <HAL_PCD_EP_DB_Transmit+0xfe>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d116      	bne.n	800575a <HAL_PCD_EP_DB_Transmit+0xfe>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005740:	4413      	add	r3, r2
 8005742:	637b      	str	r3, [r7, #52]	@ 0x34
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574c:	4413      	add	r3, r2
 800574e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005752:	633b      	str	r3, [r7, #48]	@ 0x30
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	2200      	movs	r2, #0
 8005758:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d126      	bne.n	80057b6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005776:	b29b      	uxth	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	011a      	lsls	r2, r3, #4
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800579a:	b29a      	uxth	r2, r3
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e017      	b.n	80057e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d113      	bne.n	80057e6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	4413      	add	r3, r2
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	011a      	lsls	r2, r3, #4
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	4413      	add	r3, r2
 80057da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	2200      	movs	r2, #0
 80057e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f006 f94c 	bl	800ba8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057f2:	88fb      	ldrh	r3, [r7, #6]
 80057f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 82fc 	beq.w	8005df6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005818:	82fb      	strh	r3, [r7, #22]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	441a      	add	r2, r3
 8005828:	8afb      	ldrh	r3, [r7, #22]
 800582a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800582e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]
 800583e:	e2da      	b.n	8005df6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d021      	beq.n	800588e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005864:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	441a      	add	r2, r3
 8005876:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800587a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800587e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005882:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 82ae 	bne.w	8005df6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058a2:	441a      	add	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058b0:	441a      	add	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6a1a      	ldr	r2, [r3, #32]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d30b      	bcc.n	80058da <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	621a      	str	r2, [r3, #32]
 80058d8:	e017      	b.n	800590a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80058e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80058f2:	e00a      	b.n	800590a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2200      	movs	r2, #0
 8005908:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d165      	bne.n	80059de <HAL_PCD_EP_DB_Transmit+0x382>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005920:	b29b      	uxth	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005926:	4413      	add	r3, r2
 8005928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	011a      	lsls	r2, r3, #4
 8005930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005932:	4413      	add	r3, r2
 8005934:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005938:	63bb      	str	r3, [r7, #56]	@ 0x38
 800593a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005944:	b29a      	uxth	r2, r3
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005960:	b29a      	uxth	r2, r3
 8005962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e057      	b.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800596c:	2b3e      	cmp	r3, #62	@ 0x3e
 800596e:	d818      	bhi.n	80059a2 <HAL_PCD_EP_DB_Transmit+0x346>
 8005970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005978:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_PCD_EP_DB_Transmit+0x32e>
 8005984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005986:	3301      	adds	r3, #1
 8005988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29a      	uxth	r2, r3
 8005990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005992:	b29b      	uxth	r3, r3
 8005994:	029b      	lsls	r3, r3, #10
 8005996:	b29b      	uxth	r3, r3
 8005998:	4313      	orrs	r3, r2
 800599a:	b29a      	uxth	r2, r3
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	e03a      	b.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80059a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <HAL_PCD_EP_DB_Transmit+0x360>
 80059b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059b8:	3b01      	subs	r3, #1
 80059ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	029b      	lsls	r3, r3, #10
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e01c      	b.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d118      	bne.n	8005a18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059fa:	4413      	add	r3, r2
 80059fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	011a      	lsls	r2, r3, #4
 8005a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a16:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6959      	ldr	r1, [r3, #20]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	891a      	ldrh	r2, [r3, #8]
 8005a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f004 f9a0 	bl	8009d6e <USB_WritePMA>
 8005a2e:	e1e2      	b.n	8005df6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	3306      	adds	r3, #6
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a58:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d307      	bcc.n	8005a78 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	699a      	ldr	r2, [r3, #24]
 8005a6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a70:	1ad2      	subs	r2, r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	619a      	str	r2, [r3, #24]
 8005a76:	e002      	b.n	8005a7e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 80c0 	bne.w	8005c08 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d126      	bne.n	8005ade <HAL_PCD_EP_DB_Transmit+0x482>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aa4:	4413      	add	r3, r2
 8005aa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	011a      	lsls	r2, r3, #4
 8005aae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	e01a      	b.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d116      	bne.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005afa:	4413      	add	r3, r2
 8005afc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	011a      	lsls	r2, r3, #4
 8005b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b06:	4413      	add	r3, r2
 8005b08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b10:	2200      	movs	r2, #0
 8005b12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d12b      	bne.n	8005b7a <HAL_PCD_EP_DB_Transmit+0x51e>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b36:	4413      	add	r3, r2
 8005b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	011a      	lsls	r2, r3, #4
 8005b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b42:	4413      	add	r3, r2
 8005b44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e017      	b.n	8005baa <HAL_PCD_EP_DB_Transmit+0x54e>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d113      	bne.n	8005baa <HAL_PCD_EP_DB_Transmit+0x54e>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b90:	4413      	add	r3, r2
 8005b92:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	011a      	lsls	r2, r3, #4
 8005b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ba2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f005 ff6a 	bl	800ba8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 811a 	bne.w	8005df6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bdc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	441a      	add	r2, r3
 8005bee:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	8013      	strh	r3, [r2, #0]
 8005c06:	e0f6      	b.n	8005df6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c08:	88fb      	ldrh	r3, [r7, #6]
 8005c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d121      	bne.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	441a      	add	r2, r3
 8005c3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 80ca 	bne.w	8005df6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c78:	441a      	add	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d30b      	bcc.n	8005ca2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	621a      	str	r2, [r3, #32]
 8005ca0:	e017      	b.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005caa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005cba:	e00a      	b.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d165      	bne.n	8005dac <HAL_PCD_EP_DB_Transmit+0x750>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cf4:	4413      	add	r3, r2
 8005cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	011a      	lsls	r2, r3, #4
 8005cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d00:	4413      	add	r3, r2
 8005d02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <HAL_PCD_EP_DB_Transmit+0x6da>
 8005d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	e054      	b.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x784>
 8005d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d3c:	d818      	bhi.n	8005d70 <HAL_PCD_EP_DB_Transmit+0x714>
 8005d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005d52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d54:	3301      	adds	r3, #1
 8005d56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e037      	b.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x784>
 8005d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <HAL_PCD_EP_DB_Transmit+0x72e>
 8005d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d86:	3b01      	subs	r3, #1
 8005d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e019      	b.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x784>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d115      	bne.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x784>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc2:	4413      	add	r3, r2
 8005dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	011a      	lsls	r2, r3, #4
 8005dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dce:	4413      	add	r3, r2
 8005dd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dde:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6959      	ldr	r1, [r3, #20]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	895a      	ldrh	r2, [r3, #10]
 8005dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f003 ffbc 	bl	8009d6e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e10:	82bb      	strh	r3, [r7, #20]
 8005e12:	8abb      	ldrh	r3, [r7, #20]
 8005e14:	f083 0310 	eor.w	r3, r3, #16
 8005e18:	82bb      	strh	r3, [r7, #20]
 8005e1a:	8abb      	ldrh	r3, [r7, #20]
 8005e1c:	f083 0320 	eor.w	r3, r3, #32
 8005e20:	82bb      	strh	r3, [r7, #20]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	441a      	add	r2, r3
 8005e30:	8abb      	ldrh	r3, [r7, #20]
 8005e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3790      	adds	r7, #144	@ 0x90
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	817b      	strh	r3, [r7, #10]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e62:	897b      	ldrh	r3, [r7, #10]
 8005e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e6e:	897b      	ldrh	r3, [r7, #10]
 8005e70:	f003 0207 	and.w	r2, r3, #7
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e009      	b.n	8005e9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e86:	897a      	ldrh	r2, [r7, #10]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e9a:	893b      	ldrh	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	80da      	strh	r2, [r3, #6]
 8005eae:	e00b      	b.n	8005ec8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ee4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ee8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f001 b823 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 817d 	beq.w	800620e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f14:	4bbc      	ldr	r3, [pc, #752]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f003 030c 	and.w	r3, r3, #12
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d00c      	beq.n	8005f3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f20:	4bb9      	ldr	r3, [pc, #740]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d15c      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x10e>
 8005f2c:	4bb6      	ldr	r3, [pc, #728]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f38:	d155      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x10e>
 8005f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f3e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005f46:	fa93 f3a3 	rbit	r3, r3
 8005f4a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f52:	fab3 f383 	clz	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d102      	bne.n	8005f6c <HAL_RCC_OscConfig+0x94>
 8005f66:	4ba8      	ldr	r3, [pc, #672]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	e015      	b.n	8005f98 <HAL_RCC_OscConfig+0xc0>
 8005f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f70:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f74:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005f78:	fa93 f3a3 	rbit	r3, r3
 8005f7c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005f80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f84:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005f88:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005f8c:	fa93 f3a3 	rbit	r3, r3
 8005f90:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005f94:	4b9c      	ldr	r3, [pc, #624]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f9c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005fa0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005fa4:	fa92 f2a2 	rbit	r2, r2
 8005fa8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005fac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005fb0:	fab2 f282 	clz	r2, r2
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	f042 0220 	orr.w	r2, r2, #32
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	f002 021f 	and.w	r2, r2, #31
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 811f 	beq.w	800620c <HAL_RCC_OscConfig+0x334>
 8005fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 8116 	bne.w	800620c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f000 bfaf 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff6:	d106      	bne.n	8006006 <HAL_RCC_OscConfig+0x12e>
 8005ff8:	4b83      	ldr	r3, [pc, #524]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a82      	ldr	r2, [pc, #520]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8005ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	e036      	b.n	8006074 <HAL_RCC_OscConfig+0x19c>
 8006006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800600a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0x158>
 8006016:	4b7c      	ldr	r3, [pc, #496]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a7b      	ldr	r2, [pc, #492]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 800601c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b79      	ldr	r3, [pc, #484]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a78      	ldr	r2, [pc, #480]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e021      	b.n	8006074 <HAL_RCC_OscConfig+0x19c>
 8006030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006034:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006040:	d10c      	bne.n	800605c <HAL_RCC_OscConfig+0x184>
 8006042:	4b71      	ldr	r3, [pc, #452]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a70      	ldr	r2, [pc, #448]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	4b6e      	ldr	r3, [pc, #440]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6d      	ldr	r2, [pc, #436]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	e00b      	b.n	8006074 <HAL_RCC_OscConfig+0x19c>
 800605c:	4b6a      	ldr	r3, [pc, #424]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a69      	ldr	r2, [pc, #420]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	4b67      	ldr	r3, [pc, #412]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a66      	ldr	r2, [pc, #408]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 800606e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006072:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006074:	4b64      	ldr	r3, [pc, #400]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	f023 020f 	bic.w	r2, r3, #15
 800607c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006080:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	495f      	ldr	r1, [pc, #380]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 800608a:	4313      	orrs	r3, r2
 800608c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800608e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006092:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d059      	beq.n	8006152 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fb fe25 	bl	8001cec <HAL_GetTick>
 80060a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	e00a      	b.n	80060be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fb fe20 	bl	8001cec <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b64      	cmp	r3, #100	@ 0x64
 80060b6:	d902      	bls.n	80060be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	f000 bf43 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
 80060be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060c2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80060ca:	fa93 f3a3 	rbit	r3, r3
 80060ce:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80060d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d6:	fab3 f383 	clz	r3, r3
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <HAL_RCC_OscConfig+0x218>
 80060ea:	4b47      	ldr	r3, [pc, #284]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	e015      	b.n	800611c <HAL_RCC_OscConfig+0x244>
 80060f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80060f4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80060fc:	fa93 f3a3 	rbit	r3, r3
 8006100:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006108:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800610c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8006110:	fa93 f3a3 	rbit	r3, r3
 8006114:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8006118:	4b3b      	ldr	r3, [pc, #236]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006120:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8006124:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8006128:	fa92 f2a2 	rbit	r2, r2
 800612c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8006130:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8006134:	fab2 f282 	clz	r2, r2
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	f042 0220 	orr.w	r2, r2, #32
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	f002 021f 	and.w	r2, r2, #31
 8006144:	2101      	movs	r1, #1
 8006146:	fa01 f202 	lsl.w	r2, r1, r2
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ab      	beq.n	80060a8 <HAL_RCC_OscConfig+0x1d0>
 8006150:	e05d      	b.n	800620e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006152:	f7fb fdcb 	bl	8001cec <HAL_GetTick>
 8006156:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615a:	e00a      	b.n	8006172 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800615c:	f7fb fdc6 	bl	8001cec <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b64      	cmp	r3, #100	@ 0x64
 800616a:	d902      	bls.n	8006172 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	f000 bee9 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
 8006172:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006176:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800617e:	fa93 f3a3 	rbit	r3, r3
 8006182:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8006186:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800618a:	fab3 f383 	clz	r3, r3
 800618e:	b2db      	uxtb	r3, r3
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	b2db      	uxtb	r3, r3
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d102      	bne.n	80061a4 <HAL_RCC_OscConfig+0x2cc>
 800619e:	4b1a      	ldr	r3, [pc, #104]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	e015      	b.n	80061d0 <HAL_RCC_OscConfig+0x2f8>
 80061a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061a8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80061b0:	fa93 f3a3 	rbit	r3, r3
 80061b4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80061b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80061c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80061c4:	fa93 f3a3 	rbit	r3, r3
 80061c8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80061cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006208 <HAL_RCC_OscConfig+0x330>)
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80061d4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80061d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80061dc:	fa92 f2a2 	rbit	r2, r2
 80061e0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80061e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80061e8:	fab2 f282 	clz	r2, r2
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	f042 0220 	orr.w	r2, r2, #32
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	f002 021f 	and.w	r2, r2, #31
 80061f8:	2101      	movs	r1, #1
 80061fa:	fa01 f202 	lsl.w	r2, r1, r2
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1ab      	bne.n	800615c <HAL_RCC_OscConfig+0x284>
 8006204:	e003      	b.n	800620e <HAL_RCC_OscConfig+0x336>
 8006206:	bf00      	nop
 8006208:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800620e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 817d 	beq.w	800651e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006224:	4ba6      	ldr	r3, [pc, #664]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f003 030c 	and.w	r3, r3, #12
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006230:	4ba3      	ldr	r3, [pc, #652]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 030c 	and.w	r3, r3, #12
 8006238:	2b08      	cmp	r3, #8
 800623a:	d172      	bne.n	8006322 <HAL_RCC_OscConfig+0x44a>
 800623c:	4ba0      	ldr	r3, [pc, #640]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d16c      	bne.n	8006322 <HAL_RCC_OscConfig+0x44a>
 8006248:	2302      	movs	r3, #2
 800624a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8006252:	fa93 f3a3 	rbit	r3, r3
 8006256:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800625a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800625e:	fab3 f383 	clz	r3, r3
 8006262:	b2db      	uxtb	r3, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f043 0301 	orr.w	r3, r3, #1
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b01      	cmp	r3, #1
 8006270:	d102      	bne.n	8006278 <HAL_RCC_OscConfig+0x3a0>
 8006272:	4b93      	ldr	r3, [pc, #588]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	e013      	b.n	80062a0 <HAL_RCC_OscConfig+0x3c8>
 8006278:	2302      	movs	r3, #2
 800627a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8006282:	fa93 f3a3 	rbit	r3, r3
 8006286:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800628a:	2302      	movs	r3, #2
 800628c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006290:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800629c:	4b88      	ldr	r3, [pc, #544]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	2202      	movs	r2, #2
 80062a2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80062a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80062aa:	fa92 f2a2 	rbit	r2, r2
 80062ae:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80062b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80062b6:	fab2 f282 	clz	r2, r2
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	f042 0220 	orr.w	r2, r2, #32
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	f002 021f 	and.w	r2, r2, #31
 80062c6:	2101      	movs	r1, #1
 80062c8:	fa01 f202 	lsl.w	r2, r1, r2
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_RCC_OscConfig+0x410>
 80062d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d002      	beq.n	80062e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f000 be2e 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e8:	4b75      	ldr	r3, [pc, #468]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	21f8      	movs	r1, #248	@ 0xf8
 80062fe:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006302:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006306:	fa91 f1a1 	rbit	r1, r1
 800630a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800630e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8006312:	fab1 f181 	clz	r1, r1
 8006316:	b2c9      	uxtb	r1, r1
 8006318:	408b      	lsls	r3, r1
 800631a:	4969      	ldr	r1, [pc, #420]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 800631c:	4313      	orrs	r3, r2
 800631e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006320:	e0fd      	b.n	800651e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006326:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8088 	beq.w	8006444 <HAL_RCC_OscConfig+0x56c>
 8006334:	2301      	movs	r3, #1
 8006336:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800633e:	fa93 f3a3 	rbit	r3, r3
 8006342:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006346:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006354:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	461a      	mov	r2, r3
 800635c:	2301      	movs	r3, #1
 800635e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006360:	f7fb fcc4 	bl	8001cec <HAL_GetTick>
 8006364:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006368:	e00a      	b.n	8006380 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800636a:	f7fb fcbf 	bl	8001cec <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d902      	bls.n	8006380 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	f000 bde2 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
 8006380:	2302      	movs	r3, #2
 8006382:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006386:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800638a:	fa93 f3a3 	rbit	r3, r3
 800638e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8006392:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006396:	fab3 f383 	clz	r3, r3
 800639a:	b2db      	uxtb	r3, r3
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f043 0301 	orr.w	r3, r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d102      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4d8>
 80063aa:	4b45      	ldr	r3, [pc, #276]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	e013      	b.n	80063d8 <HAL_RCC_OscConfig+0x500>
 80063b0:	2302      	movs	r3, #2
 80063b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80063ba:	fa93 f3a3 	rbit	r3, r3
 80063be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80063c2:	2302      	movs	r3, #2
 80063c4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80063c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80063d4:	4b3a      	ldr	r3, [pc, #232]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 80063d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d8:	2202      	movs	r2, #2
 80063da:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80063de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80063e2:	fa92 f2a2 	rbit	r2, r2
 80063e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80063ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80063ee:	fab2 f282 	clz	r2, r2
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	f042 0220 	orr.w	r2, r2, #32
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	f002 021f 	and.w	r2, r2, #31
 80063fe:	2101      	movs	r1, #1
 8006400:	fa01 f202 	lsl.w	r2, r1, r2
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0af      	beq.n	800636a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b2d      	ldr	r3, [pc, #180]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006416:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	21f8      	movs	r1, #248	@ 0xf8
 8006420:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006424:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006428:	fa91 f1a1 	rbit	r1, r1
 800642c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006430:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006434:	fab1 f181 	clz	r1, r1
 8006438:	b2c9      	uxtb	r1, r1
 800643a:	408b      	lsls	r3, r1
 800643c:	4920      	ldr	r1, [pc, #128]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]
 8006442:	e06c      	b.n	800651e <HAL_RCC_OscConfig+0x646>
 8006444:	2301      	movs	r3, #1
 8006446:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800644e:	fa93 f3a3 	rbit	r3, r3
 8006452:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8006456:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006464:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	461a      	mov	r2, r3
 800646c:	2300      	movs	r3, #0
 800646e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fb fc3c 	bl	8001cec <HAL_GetTick>
 8006474:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006478:	e00a      	b.n	8006490 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800647a:	f7fb fc37 	bl	8001cec <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d902      	bls.n	8006490 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	f000 bd5a 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
 8006490:	2302      	movs	r3, #2
 8006492:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006496:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800649a:	fa93 f3a3 	rbit	r3, r3
 800649e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80064a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064a6:	fab3 f383 	clz	r3, r3
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d104      	bne.n	80064c4 <HAL_RCC_OscConfig+0x5ec>
 80064ba:	4b01      	ldr	r3, [pc, #4]	@ (80064c0 <HAL_RCC_OscConfig+0x5e8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	e015      	b.n	80064ec <HAL_RCC_OscConfig+0x614>
 80064c0:	40021000 	.word	0x40021000
 80064c4:	2302      	movs	r3, #2
 80064c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064ce:	fa93 f3a3 	rbit	r3, r3
 80064d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80064d6:	2302      	movs	r3, #2
 80064d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80064dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064e0:	fa93 f3a3 	rbit	r3, r3
 80064e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80064e8:	4bc8      	ldr	r3, [pc, #800]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	2202      	movs	r2, #2
 80064ee:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80064f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80064f6:	fa92 f2a2 	rbit	r2, r2
 80064fa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80064fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006502:	fab2 f282 	clz	r2, r2
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	f042 0220 	orr.w	r2, r2, #32
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	f002 021f 	and.w	r2, r2, #31
 8006512:	2101      	movs	r1, #1
 8006514:	fa01 f202 	lsl.w	r2, r1, r2
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1ad      	bne.n	800647a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8110 	beq.w	8006754 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006538:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d079      	beq.n	8006638 <HAL_RCC_OscConfig+0x760>
 8006544:	2301      	movs	r3, #1
 8006546:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800654e:	fa93 f3a3 	rbit	r3, r3
 8006552:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8006556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800655a:	fab3 f383 	clz	r3, r3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	4bab      	ldr	r3, [pc, #684]	@ (8006810 <HAL_RCC_OscConfig+0x938>)
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	461a      	mov	r2, r3
 800656a:	2301      	movs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656e:	f7fb fbbd 	bl	8001cec <HAL_GetTick>
 8006572:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006576:	e00a      	b.n	800658e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006578:	f7fb fbb8 	bl	8001cec <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d902      	bls.n	800658e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	f000 bcdb 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
 800658e:	2302      	movs	r3, #2
 8006590:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006594:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006598:	fa93 f3a3 	rbit	r3, r3
 800659c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80065a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80065a8:	2202      	movs	r2, #2
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	fa93 f2a3 	rbit	r2, r3
 80065ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065cc:	2202      	movs	r2, #2
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	fa93 f2a3 	rbit	r2, r3
 80065de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80065e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065e8:	4b88      	ldr	r3, [pc, #544]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 80065ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80065f4:	2102      	movs	r1, #2
 80065f6:	6019      	str	r1, [r3, #0]
 80065f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	fa93 f1a3 	rbit	r1, r3
 8006606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800660a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800660e:	6019      	str	r1, [r3, #0]
  return result;
 8006610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006614:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	fab3 f383 	clz	r3, r3
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	2101      	movs	r1, #1
 800662c:	fa01 f303 	lsl.w	r3, r1, r3
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0a0      	beq.n	8006578 <HAL_RCC_OscConfig+0x6a0>
 8006636:	e08d      	b.n	8006754 <HAL_RCC_OscConfig+0x87c>
 8006638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800663c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006648:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	fa93 f2a3 	rbit	r2, r3
 8006652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006656:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800665a:	601a      	str	r2, [r3, #0]
  return result;
 800665c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006660:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006664:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006666:	fab3 f383 	clz	r3, r3
 800666a:	b2db      	uxtb	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	4b68      	ldr	r3, [pc, #416]	@ (8006810 <HAL_RCC_OscConfig+0x938>)
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	461a      	mov	r2, r3
 8006676:	2300      	movs	r3, #0
 8006678:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800667a:	f7fb fb37 	bl	8001cec <HAL_GetTick>
 800667e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006682:	e00a      	b.n	800669a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006684:	f7fb fb32 	bl	8001cec <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d902      	bls.n	800669a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	f000 bc55 	b.w	8006f44 <HAL_RCC_OscConfig+0x106c>
 800669a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800669e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80066a2:	2202      	movs	r2, #2
 80066a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	fa93 f2a3 	rbit	r2, r3
 80066b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80066c6:	2202      	movs	r2, #2
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	fa93 f2a3 	rbit	r2, r3
 80066d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066ea:	2202      	movs	r2, #2
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	fa93 f2a3 	rbit	r2, r3
 80066fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006700:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006704:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006706:	4b41      	ldr	r3, [pc, #260]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 8006708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800670a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800670e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006712:	2102      	movs	r1, #2
 8006714:	6019      	str	r1, [r3, #0]
 8006716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800671a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	fa93 f1a3 	rbit	r1, r3
 8006724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006728:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800672c:	6019      	str	r1, [r3, #0]
  return result;
 800672e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006732:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	fab3 f383 	clz	r3, r3
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2101      	movs	r1, #1
 800674a:	fa01 f303 	lsl.w	r3, r1, r3
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d197      	bne.n	8006684 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006758:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 81a1 	beq.w	8006aac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800676a:	2300      	movs	r3, #0
 800676c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006770:	4b26      	ldr	r3, [pc, #152]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d116      	bne.n	80067aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677c:	4b23      	ldr	r3, [pc, #140]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	4a22      	ldr	r2, [pc, #136]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 8006782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006786:	61d3      	str	r3, [r2, #28]
 8006788:	4b20      	ldr	r3, [pc, #128]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006794:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800679e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80067a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006814 <HAL_RCC_OscConfig+0x93c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d11a      	bne.n	80067ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067b6:	4b17      	ldr	r3, [pc, #92]	@ (8006814 <HAL_RCC_OscConfig+0x93c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a16      	ldr	r2, [pc, #88]	@ (8006814 <HAL_RCC_OscConfig+0x93c>)
 80067bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067c2:	f7fb fa93 	bl	8001cec <HAL_GetTick>
 80067c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ca:	e009      	b.n	80067e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067cc:	f7fb fa8e 	bl	8001cec <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b64      	cmp	r3, #100	@ 0x64
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e3b1      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <HAL_RCC_OscConfig+0x93c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ef      	beq.n	80067cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10d      	bne.n	8006818 <HAL_RCC_OscConfig+0x940>
 80067fc:	4b03      	ldr	r3, [pc, #12]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	4a02      	ldr	r2, [pc, #8]	@ (800680c <HAL_RCC_OscConfig+0x934>)
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	6213      	str	r3, [r2, #32]
 8006808:	e03c      	b.n	8006884 <HAL_RCC_OscConfig+0x9ac>
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	10908120 	.word	0x10908120
 8006814:	40007000 	.word	0x40007000
 8006818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800681c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10c      	bne.n	8006842 <HAL_RCC_OscConfig+0x96a>
 8006828:	4bc1      	ldr	r3, [pc, #772]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	4ac0      	ldr	r2, [pc, #768]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	6213      	str	r3, [r2, #32]
 8006834:	4bbe      	ldr	r3, [pc, #760]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	4abd      	ldr	r2, [pc, #756]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 800683a:	f023 0304 	bic.w	r3, r3, #4
 800683e:	6213      	str	r3, [r2, #32]
 8006840:	e020      	b.n	8006884 <HAL_RCC_OscConfig+0x9ac>
 8006842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x994>
 8006852:	4bb7      	ldr	r3, [pc, #732]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	4ab6      	ldr	r2, [pc, #728]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006858:	f043 0304 	orr.w	r3, r3, #4
 800685c:	6213      	str	r3, [r2, #32]
 800685e:	4bb4      	ldr	r3, [pc, #720]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	4ab3      	ldr	r2, [pc, #716]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6213      	str	r3, [r2, #32]
 800686a:	e00b      	b.n	8006884 <HAL_RCC_OscConfig+0x9ac>
 800686c:	4bb0      	ldr	r3, [pc, #704]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	4aaf      	ldr	r2, [pc, #700]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	6213      	str	r3, [r2, #32]
 8006878:	4bad      	ldr	r3, [pc, #692]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	4aac      	ldr	r2, [pc, #688]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 800687e:	f023 0304 	bic.w	r3, r3, #4
 8006882:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006888:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8081 	beq.w	8006998 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006896:	f7fb fa29 	bl	8001cec <HAL_GetTick>
 800689a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689e:	e00b      	b.n	80068b8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fb fa24 	bl	8001cec <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e345      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
 80068b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80068c0:	2202      	movs	r2, #2
 80068c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	fa93 f2a3 	rbit	r2, r3
 80068d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80068e4:	2202      	movs	r2, #2
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	fa93 f2a3 	rbit	r2, r3
 80068f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80068fe:	601a      	str	r2, [r3, #0]
  return result;
 8006900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006904:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006908:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690a:	fab3 f383 	clz	r3, r3
 800690e:	b2db      	uxtb	r3, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f043 0302 	orr.w	r3, r3, #2
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d102      	bne.n	8006924 <HAL_RCC_OscConfig+0xa4c>
 800691e:	4b84      	ldr	r3, [pc, #528]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	e013      	b.n	800694c <HAL_RCC_OscConfig+0xa74>
 8006924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006928:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800692c:	2202      	movs	r2, #2
 800692e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006934:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	fa93 f2a3 	rbit	r2, r3
 800693e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006942:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	4b79      	ldr	r3, [pc, #484]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006950:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006954:	2102      	movs	r1, #2
 8006956:	6011      	str	r1, [r2, #0]
 8006958:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800695c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	fa92 f1a2 	rbit	r1, r2
 8006966:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800696a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800696e:	6011      	str	r1, [r2, #0]
  return result;
 8006970:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006974:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	fab2 f282 	clz	r2, r2
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	f002 021f 	and.w	r2, r2, #31
 800698a:	2101      	movs	r1, #1
 800698c:	fa01 f202 	lsl.w	r2, r1, r2
 8006990:	4013      	ands	r3, r2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d084      	beq.n	80068a0 <HAL_RCC_OscConfig+0x9c8>
 8006996:	e07f      	b.n	8006a98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006998:	f7fb f9a8 	bl	8001cec <HAL_GetTick>
 800699c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a0:	e00b      	b.n	80069ba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a2:	f7fb f9a3 	bl	8001cec <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e2c4      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
 80069ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069be:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80069c2:	2202      	movs	r2, #2
 80069c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	fa93 f2a3 	rbit	r2, r3
 80069d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069d8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069e2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80069e6:	2202      	movs	r2, #2
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	fa93 f2a3 	rbit	r2, r3
 80069f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069fc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006a00:	601a      	str	r2, [r3, #0]
  return result;
 8006a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a06:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006a0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a0c:	fab3 f383 	clz	r3, r3
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d102      	bne.n	8006a26 <HAL_RCC_OscConfig+0xb4e>
 8006a20:	4b43      	ldr	r3, [pc, #268]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	e013      	b.n	8006a4e <HAL_RCC_OscConfig+0xb76>
 8006a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a2a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006a2e:	2202      	movs	r2, #2
 8006a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a36:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	fa93 f2a3 	rbit	r2, r3
 8006a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a44:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	4b39      	ldr	r3, [pc, #228]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a52:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006a56:	2102      	movs	r1, #2
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a5e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	fa92 f1a2 	rbit	r1, r2
 8006a68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a6c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006a70:	6011      	str	r1, [r2, #0]
  return result;
 8006a72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a76:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	fab2 f282 	clz	r2, r2
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	f002 021f 	and.w	r2, r2, #31
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d184      	bne.n	80069a2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a98:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d105      	bne.n	8006aac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aa0:	4b23      	ldr	r3, [pc, #140]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	4a22      	ldr	r2, [pc, #136]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aaa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ab0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8242 	beq.w	8006f42 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006abe:	4b1c      	ldr	r3, [pc, #112]	@ (8006b30 <HAL_RCC_OscConfig+0xc58>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	f000 8213 	beq.w	8006ef2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	f040 8162 	bne.w	8006da2 <HAL_RCC_OscConfig+0xeca>
 8006ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ae2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006ae6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006af0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	fa93 f2a3 	rbit	r2, r3
 8006afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006afe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006b02:	601a      	str	r2, [r3, #0]
  return result;
 8006b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b08:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006b0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b0e:	fab3 f383 	clz	r3, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006b18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	2300      	movs	r3, #0
 8006b22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b24:	f7fb f8e2 	bl	8001cec <HAL_GetTick>
 8006b28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b2c:	e00c      	b.n	8006b48 <HAL_RCC_OscConfig+0xc70>
 8006b2e:	bf00      	nop
 8006b30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b34:	f7fb f8da 	bl	8001cec <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e1fd      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
 8006b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b4c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b5a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	fa93 f2a3 	rbit	r2, r3
 8006b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b68:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006b6c:	601a      	str	r2, [r3, #0]
  return result;
 8006b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b72:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006b76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b78:	fab3 f383 	clz	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f043 0301 	orr.w	r3, r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d102      	bne.n	8006b92 <HAL_RCC_OscConfig+0xcba>
 8006b8c:	4bb0      	ldr	r3, [pc, #704]	@ (8006e50 <HAL_RCC_OscConfig+0xf78>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	e027      	b.n	8006be2 <HAL_RCC_OscConfig+0xd0a>
 8006b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b96:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006b9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ba4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	fa93 f2a3 	rbit	r2, r3
 8006bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bb2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bbc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006bc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	fa93 f2a3 	rbit	r2, r3
 8006bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bd8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	4b9c      	ldr	r3, [pc, #624]	@ (8006e50 <HAL_RCC_OscConfig+0xf78>)
 8006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006be6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006bea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006bee:	6011      	str	r1, [r2, #0]
 8006bf0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bf4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	fa92 f1a2 	rbit	r1, r2
 8006bfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c02:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006c06:	6011      	str	r1, [r2, #0]
  return result;
 8006c08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c0c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	fab2 f282 	clz	r2, r2
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	f042 0220 	orr.w	r2, r2, #32
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	f002 021f 	and.w	r2, r2, #31
 8006c22:	2101      	movs	r1, #1
 8006c24:	fa01 f202 	lsl.w	r2, r1, r2
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d182      	bne.n	8006b34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c2e:	4b88      	ldr	r3, [pc, #544]	@ (8006e50 <HAL_RCC_OscConfig+0xf78>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	497f      	ldr	r1, [pc, #508]	@ (8006e50 <HAL_RCC_OscConfig+0xf78>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	604b      	str	r3, [r1, #4]
 8006c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c5a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006c5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c68:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	fa93 f2a3 	rbit	r2, r3
 8006c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c76:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006c7a:	601a      	str	r2, [r3, #0]
  return result;
 8006c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c80:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006c84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c86:	fab3 f383 	clz	r3, r3
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006c90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	461a      	mov	r2, r3
 8006c98:	2301      	movs	r3, #1
 8006c9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9c:	f7fb f826 	bl	8001cec <HAL_GetTick>
 8006ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ca4:	e009      	b.n	8006cba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ca6:	f7fb f821 	bl	8001cec <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e144      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
 8006cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cbe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006cc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ccc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	fa93 f2a3 	rbit	r2, r3
 8006cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006cda:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006cde:	601a      	str	r2, [r3, #0]
  return result;
 8006ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ce4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006ce8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cea:	fab3 f383 	clz	r3, r3
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCC_OscConfig+0xe2c>
 8006cfe:	4b54      	ldr	r3, [pc, #336]	@ (8006e50 <HAL_RCC_OscConfig+0xf78>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	e027      	b.n	8006d54 <HAL_RCC_OscConfig+0xe7c>
 8006d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d08:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006d0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d16:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	fa93 f2a3 	rbit	r2, r3
 8006d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d24:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d2e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d3c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	fa93 f2a3 	rbit	r2, r3
 8006d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006d4a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	4b3f      	ldr	r3, [pc, #252]	@ (8006e50 <HAL_RCC_OscConfig+0xf78>)
 8006d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d58:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006d5c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006d60:	6011      	str	r1, [r2, #0]
 8006d62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d66:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	fa92 f1a2 	rbit	r1, r2
 8006d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d74:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006d78:	6011      	str	r1, [r2, #0]
  return result;
 8006d7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006d7e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006d82:	6812      	ldr	r2, [r2, #0]
 8006d84:	fab2 f282 	clz	r2, r2
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	f042 0220 	orr.w	r2, r2, #32
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	f002 021f 	and.w	r2, r2, #31
 8006d94:	2101      	movs	r1, #1
 8006d96:	fa01 f202 	lsl.w	r2, r1, r2
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d082      	beq.n	8006ca6 <HAL_RCC_OscConfig+0xdce>
 8006da0:	e0cf      	b.n	8006f42 <HAL_RCC_OscConfig+0x106a>
 8006da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006da6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006daa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006db4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	fa93 f2a3 	rbit	r2, r3
 8006dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dc2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006dc6:	601a      	str	r2, [r3, #0]
  return result;
 8006dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006dcc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006dd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd2:	fab3 f383 	clz	r3, r3
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006ddc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	461a      	mov	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fa ff80 	bl	8001cec <HAL_GetTick>
 8006dec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006df0:	e009      	b.n	8006e06 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df2:	f7fa ff7b 	bl	8001cec <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e09e      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
 8006e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e0a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006e0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e18:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	fa93 f2a3 	rbit	r2, r3
 8006e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e26:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006e2a:	601a      	str	r2, [r3, #0]
  return result;
 8006e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e30:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006e34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e36:	fab3 f383 	clz	r3, r3
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d104      	bne.n	8006e54 <HAL_RCC_OscConfig+0xf7c>
 8006e4a:	4b01      	ldr	r3, [pc, #4]	@ (8006e50 <HAL_RCC_OscConfig+0xf78>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	e029      	b.n	8006ea4 <HAL_RCC_OscConfig+0xfcc>
 8006e50:	40021000 	.word	0x40021000
 8006e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e58:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006e5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e66:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	fa93 f2a3 	rbit	r2, r3
 8006e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e74:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e7e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006e82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e8c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	fa93 f2a3 	rbit	r2, r3
 8006e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006e9a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f50 <HAL_RCC_OscConfig+0x1078>)
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ea8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006eac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006eb6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	fa92 f1a2 	rbit	r1, r2
 8006ec0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ec4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006ec8:	6011      	str	r1, [r2, #0]
  return result;
 8006eca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ece:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	fab2 f282 	clz	r2, r2
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	f042 0220 	orr.w	r2, r2, #32
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	f002 021f 	and.w	r2, r2, #31
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d180      	bne.n	8006df2 <HAL_RCC_OscConfig+0xf1a>
 8006ef0:	e027      	b.n	8006f42 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e01e      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f06:	4b12      	ldr	r3, [pc, #72]	@ (8006f50 <HAL_RCC_OscConfig+0x1078>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006f12:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d10b      	bne.n	8006f3e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006f26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006f2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d001      	beq.n	8006f42 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000

08006f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b09e      	sub	sp, #120	@ 0x78
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e162      	b.n	8007232 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f6c:	4b90      	ldr	r3, [pc, #576]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d910      	bls.n	8006f9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f023 0207 	bic.w	r2, r3, #7
 8006f82:	498b      	ldr	r1, [pc, #556]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8a:	4b89      	ldr	r3, [pc, #548]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e14a      	b.n	8007232 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fa8:	4b82      	ldr	r3, [pc, #520]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	497f      	ldr	r1, [pc, #508]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80dc 	beq.w	8007180 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d13c      	bne.n	800704a <HAL_RCC_ClockConfig+0xf6>
 8006fd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006fd4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fd8:	fa93 f3a3 	rbit	r3, r3
 8006fdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f043 0301 	orr.w	r3, r3, #1
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xa6>
 8006ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	e00f      	b.n	800701a <HAL_RCC_ClockConfig+0xc6>
 8006ffa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007002:	fa93 f3a3 	rbit	r3, r3
 8007006:	667b      	str	r3, [r7, #100]	@ 0x64
 8007008:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800700c:	663b      	str	r3, [r7, #96]	@ 0x60
 800700e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007010:	fa93 f3a3 	rbit	r3, r3
 8007014:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007016:	4b67      	ldr	r3, [pc, #412]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 8007018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800701e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007020:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007022:	fa92 f2a2 	rbit	r2, r2
 8007026:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8007028:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800702a:	fab2 f282 	clz	r2, r2
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	f042 0220 	orr.w	r2, r2, #32
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	f002 021f 	and.w	r2, r2, #31
 800703a:	2101      	movs	r1, #1
 800703c:	fa01 f202 	lsl.w	r2, r1, r2
 8007040:	4013      	ands	r3, r2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d17b      	bne.n	800713e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e0f3      	b.n	8007232 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d13c      	bne.n	80070cc <HAL_RCC_ClockConfig+0x178>
 8007052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007056:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800705a:	fa93 f3a3 	rbit	r3, r3
 800705e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007062:	fab3 f383 	clz	r3, r3
 8007066:	b2db      	uxtb	r3, r3
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b01      	cmp	r3, #1
 8007074:	d102      	bne.n	800707c <HAL_RCC_ClockConfig+0x128>
 8007076:	4b4f      	ldr	r3, [pc, #316]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	e00f      	b.n	800709c <HAL_RCC_ClockConfig+0x148>
 800707c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007080:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007084:	fa93 f3a3 	rbit	r3, r3
 8007088:	647b      	str	r3, [r7, #68]	@ 0x44
 800708a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800708e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007092:	fa93 f3a3 	rbit	r3, r3
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007098:	4b46      	ldr	r3, [pc, #280]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80070a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80070a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070a4:	fa92 f2a2 	rbit	r2, r2
 80070a8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80070aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ac:	fab2 f282 	clz	r2, r2
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	f042 0220 	orr.w	r2, r2, #32
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	f002 021f 	and.w	r2, r2, #31
 80070bc:	2101      	movs	r1, #1
 80070be:	fa01 f202 	lsl.w	r2, r1, r2
 80070c2:	4013      	ands	r3, r2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d13a      	bne.n	800713e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0b2      	b.n	8007232 <HAL_RCC_ClockConfig+0x2de>
 80070cc:	2302      	movs	r3, #2
 80070ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	fa93 f3a3 	rbit	r3, r3
 80070d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070da:	fab3 f383 	clz	r3, r3
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d102      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x1a0>
 80070ee:	4b31      	ldr	r3, [pc, #196]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	e00d      	b.n	8007110 <HAL_RCC_ClockConfig+0x1bc>
 80070f4:	2302      	movs	r3, #2
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	fa93 f3a3 	rbit	r3, r3
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007100:	2302      	movs	r3, #2
 8007102:	623b      	str	r3, [r7, #32]
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	fa93 f3a3 	rbit	r3, r3
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	4b29      	ldr	r3, [pc, #164]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 800710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007110:	2202      	movs	r2, #2
 8007112:	61ba      	str	r2, [r7, #24]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	fa92 f2a2 	rbit	r2, r2
 800711a:	617a      	str	r2, [r7, #20]
  return result;
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	fab2 f282 	clz	r2, r2
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	f042 0220 	orr.w	r2, r2, #32
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	f002 021f 	and.w	r2, r2, #31
 800712e:	2101      	movs	r1, #1
 8007130:	fa01 f202 	lsl.w	r2, r1, r2
 8007134:	4013      	ands	r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e079      	b.n	8007232 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800713e:	4b1d      	ldr	r3, [pc, #116]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f023 0203 	bic.w	r2, r3, #3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	491a      	ldr	r1, [pc, #104]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 800714c:	4313      	orrs	r3, r2
 800714e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007150:	f7fa fdcc 	bl	8001cec <HAL_GetTick>
 8007154:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007156:	e00a      	b.n	800716e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007158:	f7fa fdc8 	bl	8001cec <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e061      	b.n	8007232 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716e:	4b11      	ldr	r3, [pc, #68]	@ (80071b4 <HAL_RCC_ClockConfig+0x260>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f003 020c 	and.w	r2, r3, #12
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	429a      	cmp	r2, r3
 800717e:	d1eb      	bne.n	8007158 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007180:	4b0b      	ldr	r3, [pc, #44]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d214      	bcs.n	80071b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b08      	ldr	r3, [pc, #32]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f023 0207 	bic.w	r2, r3, #7
 8007196:	4906      	ldr	r1, [pc, #24]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	4313      	orrs	r3, r2
 800719c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800719e:	4b04      	ldr	r3, [pc, #16]	@ (80071b0 <HAL_RCC_ClockConfig+0x25c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d005      	beq.n	80071b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e040      	b.n	8007232 <HAL_RCC_ClockConfig+0x2de>
 80071b0:	40022000 	.word	0x40022000
 80071b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d008      	beq.n	80071d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c4:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <HAL_RCC_ClockConfig+0x2e8>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	491a      	ldr	r1, [pc, #104]	@ (800723c <HAL_RCC_ClockConfig+0x2e8>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071e2:	4b16      	ldr	r3, [pc, #88]	@ (800723c <HAL_RCC_ClockConfig+0x2e8>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	4912      	ldr	r1, [pc, #72]	@ (800723c <HAL_RCC_ClockConfig+0x2e8>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80071f6:	f000 f829 	bl	800724c <HAL_RCC_GetSysClockFreq>
 80071fa:	4601      	mov	r1, r0
 80071fc:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <HAL_RCC_ClockConfig+0x2e8>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007204:	22f0      	movs	r2, #240	@ 0xf0
 8007206:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	fa92 f2a2 	rbit	r2, r2
 800720e:	60fa      	str	r2, [r7, #12]
  return result;
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	fab2 f282 	clz	r2, r2
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	40d3      	lsrs	r3, r2
 800721a:	4a09      	ldr	r2, [pc, #36]	@ (8007240 <HAL_RCC_ClockConfig+0x2ec>)
 800721c:	5cd3      	ldrb	r3, [r2, r3]
 800721e:	fa21 f303 	lsr.w	r3, r1, r3
 8007222:	4a08      	ldr	r2, [pc, #32]	@ (8007244 <HAL_RCC_ClockConfig+0x2f0>)
 8007224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007226:	4b08      	ldr	r3, [pc, #32]	@ (8007248 <HAL_RCC_ClockConfig+0x2f4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f7fa fd1a 	bl	8001c64 <HAL_InitTick>
  
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3778      	adds	r7, #120	@ 0x78
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	40021000 	.word	0x40021000
 8007240:	0801073c 	.word	0x0801073c
 8007244:	20000008 	.word	0x20000008
 8007248:	2000000c 	.word	0x2000000c

0800724c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	2300      	movs	r3, #0
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	2300      	movs	r3, #0
 8007260:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007266:	4b1e      	ldr	r3, [pc, #120]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f003 030c 	and.w	r3, r3, #12
 8007272:	2b04      	cmp	r3, #4
 8007274:	d002      	beq.n	800727c <HAL_RCC_GetSysClockFreq+0x30>
 8007276:	2b08      	cmp	r3, #8
 8007278:	d003      	beq.n	8007282 <HAL_RCC_GetSysClockFreq+0x36>
 800727a:	e026      	b.n	80072ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800727c:	4b19      	ldr	r3, [pc, #100]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800727e:	613b      	str	r3, [r7, #16]
      break;
 8007280:	e026      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	0c9b      	lsrs	r3, r3, #18
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	4a17      	ldr	r2, [pc, #92]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800728c:	5cd3      	ldrb	r3, [r2, r3]
 800728e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8007290:	4b13      	ldr	r3, [pc, #76]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	4a14      	ldr	r2, [pc, #80]	@ (80072ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800729a:	5cd3      	ldrb	r3, [r2, r3]
 800729c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80072a8:	4a0e      	ldr	r2, [pc, #56]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	fb02 f303 	mul.w	r3, r2, r3
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e004      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a0c      	ldr	r2, [pc, #48]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80072be:	fb02 f303 	mul.w	r3, r2, r3
 80072c2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	613b      	str	r3, [r7, #16]
      break;
 80072c8:	e002      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072ca:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80072cc:	613b      	str	r3, [r7, #16]
      break;
 80072ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072d0:	693b      	ldr	r3, [r7, #16]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40021000 	.word	0x40021000
 80072e4:	007a1200 	.word	0x007a1200
 80072e8:	0801074c 	.word	0x0801074c
 80072ec:	0801075c 	.word	0x0801075c
 80072f0:	003d0900 	.word	0x003d0900

080072f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b092      	sub	sp, #72	@ 0x48
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007304:	2300      	movs	r3, #0
 8007306:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80d4 	beq.w	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007318:	4b4e      	ldr	r3, [pc, #312]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10e      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007324:	4b4b      	ldr	r3, [pc, #300]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	4a4a      	ldr	r2, [pc, #296]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800732e:	61d3      	str	r3, [r2, #28]
 8007330:	4b48      	ldr	r3, [pc, #288]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007338:	60bb      	str	r3, [r7, #8]
 800733a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800733c:	2301      	movs	r3, #1
 800733e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007342:	4b45      	ldr	r3, [pc, #276]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734a:	2b00      	cmp	r3, #0
 800734c:	d118      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800734e:	4b42      	ldr	r3, [pc, #264]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a41      	ldr	r2, [pc, #260]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007358:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800735a:	f7fa fcc7 	bl	8001cec <HAL_GetTick>
 800735e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007360:	e008      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007362:	f7fa fcc3 	bl	8001cec <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b64      	cmp	r3, #100	@ 0x64
 800736e:	d901      	bls.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e169      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007374:	4b38      	ldr	r3, [pc, #224]	@ (8007458 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0f0      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007380:	4b34      	ldr	r3, [pc, #208]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007388:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800738a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8084 	beq.w	800749a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800739a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800739c:	429a      	cmp	r2, r3
 800739e:	d07c      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073a0:	4b2c      	ldr	r3, [pc, #176]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80073ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	fa93 f3a3 	rbit	r3, r3
 80073b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80073b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073ba:	fab3 f383 	clz	r3, r3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	4b26      	ldr	r3, [pc, #152]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	461a      	mov	r2, r3
 80073ca:	2301      	movs	r3, #1
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80073d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d6:	fa93 f3a3 	rbit	r3, r3
 80073da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80073dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073de:	fab3 f383 	clz	r3, r3
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	4b1d      	ldr	r3, [pc, #116]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	461a      	mov	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80073f2:	4a18      	ldr	r2, [pc, #96]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80073f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d04b      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007402:	f7fa fc73 	bl	8001cec <HAL_GetTick>
 8007406:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007408:	e00a      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fa fc6f 	bl	8001cec <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e113      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007420:	2302      	movs	r3, #2
 8007422:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	fa93 f3a3 	rbit	r3, r3
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24
 800742c:	2302      	movs	r3, #2
 800742e:	623b      	str	r3, [r7, #32]
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	fa93 f3a3 	rbit	r3, r3
 8007436:	61fb      	str	r3, [r7, #28]
  return result;
 8007438:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743a:	fab3 f383 	clz	r3, r3
 800743e:	b2db      	uxtb	r3, r3
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f043 0302 	orr.w	r3, r3, #2
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d108      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800744e:	4b01      	ldr	r3, [pc, #4]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	e00d      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007454:	40021000 	.word	0x40021000
 8007458:	40007000 	.word	0x40007000
 800745c:	10908100 	.word	0x10908100
 8007460:	2302      	movs	r3, #2
 8007462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	fa93 f3a3 	rbit	r3, r3
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	4b78      	ldr	r3, [pc, #480]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800746e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007470:	2202      	movs	r2, #2
 8007472:	613a      	str	r2, [r7, #16]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	fa92 f2a2 	rbit	r2, r2
 800747a:	60fa      	str	r2, [r7, #12]
  return result;
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	fab2 f282 	clz	r2, r2
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	f002 021f 	and.w	r2, r2, #31
 800748e:	2101      	movs	r1, #1
 8007490:	fa01 f202 	lsl.w	r2, r1, r2
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0b7      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800749a:	4b6d      	ldr	r3, [pc, #436]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	496a      	ldr	r1, [pc, #424]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80074ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d105      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b4:	4b66      	ldr	r3, [pc, #408]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	4a65      	ldr	r2, [pc, #404]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d008      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074cc:	4b60      	ldr	r3, [pc, #384]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d0:	f023 0203 	bic.w	r2, r3, #3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	495d      	ldr	r1, [pc, #372]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074ea:	4b59      	ldr	r3, [pc, #356]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	4956      	ldr	r1, [pc, #344]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007508:	4b51      	ldr	r3, [pc, #324]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800750a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	494e      	ldr	r1, [pc, #312]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007516:	4313      	orrs	r3, r2
 8007518:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007526:	4b4a      	ldr	r3, [pc, #296]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752a:	f023 0210 	bic.w	r2, r3, #16
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	4947      	ldr	r1, [pc, #284]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007534:	4313      	orrs	r3, r2
 8007536:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007544:	4b42      	ldr	r3, [pc, #264]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007550:	493f      	ldr	r1, [pc, #252]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d008      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007562:	4b3b      	ldr	r3, [pc, #236]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	f023 0220 	bic.w	r2, r3, #32
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	4938      	ldr	r1, [pc, #224]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007570:	4313      	orrs	r3, r2
 8007572:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007580:	4b33      	ldr	r3, [pc, #204]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007584:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	4930      	ldr	r1, [pc, #192]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800758e:	4313      	orrs	r3, r2
 8007590:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800759e:	4b2c      	ldr	r3, [pc, #176]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	4929      	ldr	r1, [pc, #164]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075bc:	4b24      	ldr	r3, [pc, #144]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	4921      	ldr	r1, [pc, #132]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d008      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075da:	4b1d      	ldr	r3, [pc, #116]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	491a      	ldr	r1, [pc, #104]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80075f8:	4b15      	ldr	r3, [pc, #84]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	4912      	ldr	r1, [pc, #72]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007606:	4313      	orrs	r3, r2
 8007608:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007616:	4b0e      	ldr	r3, [pc, #56]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007622:	490b      	ldr	r1, [pc, #44]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007624:	4313      	orrs	r3, r2
 8007626:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007634:	4b06      	ldr	r3, [pc, #24]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007638:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007640:	4903      	ldr	r1, [pc, #12]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3748      	adds	r7, #72	@ 0x48
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40021000 	.word	0x40021000

08007654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e09d      	b.n	80077a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d108      	bne.n	8007680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007676:	d009      	beq.n	800768c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	61da      	str	r2, [r3, #28]
 800767e:	e005      	b.n	800768c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fa f89e 	bl	80017e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076cc:	d902      	bls.n	80076d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	e002      	b.n	80076da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80076d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80076e2:	d007      	beq.n	80076f4 <HAL_SPI_Init+0xa0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076ec:	d002      	beq.n	80076f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800772c:	431a      	orrs	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007736:	ea42 0103 	orr.w	r1, r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	f003 0204 	and.w	r2, r3, #4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	f003 0310 	and.w	r3, r3, #16
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007770:	ea42 0103 	orr.w	r1, r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80077be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077e0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80077e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	43db      	mvns	r3, r3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4013      	ands	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	1d3b      	adds	r3, r7, #4
 8007818:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800784c:	b480      	push	{r7}
 800784e:	b09d      	sub	sp, #116	@ 0x74
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800786e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007872:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	78db      	ldrb	r3, [r3, #3]
 800787a:	2b03      	cmp	r3, #3
 800787c:	d81f      	bhi.n	80078be <USB_ActivateEndpoint+0x72>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <USB_ActivateEndpoint+0x38>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	08007895 	.word	0x08007895
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078c7 	.word	0x080078c7
 8007890:	080078a3 	.word	0x080078a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007894:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007898:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800789c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80078a0:	e012      	b.n	80078c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80078a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078a6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80078aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80078ae:	e00b      	b.n	80078c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80078b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80078bc:	e004      	b.n	80078c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80078c4:	e000      	b.n	80078c8 <USB_ActivateEndpoint+0x7c>
      break;
 80078c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	441a      	add	r2, r3
 80078d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007902:	b21a      	sxth	r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	b21b      	sxth	r3, r3
 800790a:	4313      	orrs	r3, r2
 800790c:	b21b      	sxth	r3, r3
 800790e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	441a      	add	r2, r3
 800791c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800792c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007930:	b29b      	uxth	r3, r3
 8007932:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	7b1b      	ldrb	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 8178 	bne.w	8007c2e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8084 	beq.w	8007a50 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	4413      	add	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	011a      	lsls	r2, r3, #4
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	827b      	strh	r3, [r7, #18]
 800798a:	8a7b      	ldrh	r3, [r7, #18]
 800798c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01b      	beq.n	80079cc <USB_ActivateEndpoint+0x180>
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079aa:	823b      	strh	r3, [r7, #16]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	441a      	add	r2, r3
 80079b6:	8a3b      	ldrh	r3, [r7, #16]
 80079b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	78db      	ldrb	r3, [r3, #3]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d020      	beq.n	8007a16 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ea:	81bb      	strh	r3, [r7, #12]
 80079ec:	89bb      	ldrh	r3, [r7, #12]
 80079ee:	f083 0320 	eor.w	r3, r3, #32
 80079f2:	81bb      	strh	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	441a      	add	r2, r3
 80079fe:	89bb      	ldrh	r3, [r7, #12]
 8007a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	8013      	strh	r3, [r2, #0]
 8007a14:	e2d5      	b.n	8007fc2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a2c:	81fb      	strh	r3, [r7, #14]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	89fb      	ldrh	r3, [r7, #14]
 8007a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	8013      	strh	r3, [r2, #0]
 8007a4e:	e2b8      	b.n	8007fc2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	4413      	add	r3, r2
 8007a62:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	011a      	lsls	r2, r3, #4
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	88db      	ldrh	r3, [r3, #6]
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a82:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	4413      	add	r3, r2
 8007a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	011a      	lsls	r2, r3, #4
 8007a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <USB_ActivateEndpoint+0x28a>
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	e039      	b.n	8007b4a <USB_ActivateEndpoint+0x2fe>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b3e      	cmp	r3, #62	@ 0x3e
 8007adc:	d818      	bhi.n	8007b10 <USB_ActivateEndpoint+0x2c4>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <USB_ActivateEndpoint+0x2ac>
 8007af2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007af4:	3301      	adds	r3, #1
 8007af6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	029b      	lsls	r3, r3, #10
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	801a      	strh	r2, [r3, #0]
 8007b0e:	e01c      	b.n	8007b4a <USB_ActivateEndpoint+0x2fe>
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <USB_ActivateEndpoint+0x2de>
 8007b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b26:	3b01      	subs	r3, #1
 8007b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	029b      	lsls	r3, r3, #10
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007b58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01b      	beq.n	8007b9a <USB_ActivateEndpoint+0x34e>
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b78:	843b      	strh	r3, [r7, #32]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	8c3b      	ldrh	r3, [r7, #32]
 8007b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d124      	bne.n	8007bec <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb8:	83bb      	strh	r3, [r7, #28]
 8007bba:	8bbb      	ldrh	r3, [r7, #28]
 8007bbc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bc0:	83bb      	strh	r3, [r7, #28]
 8007bc2:	8bbb      	ldrh	r3, [r7, #28]
 8007bc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bc8:	83bb      	strh	r3, [r7, #28]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	8bbb      	ldrh	r3, [r7, #28]
 8007bd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	8013      	strh	r3, [r2, #0]
 8007bea:	e1ea      	b.n	8007fc2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c02:	83fb      	strh	r3, [r7, #30]
 8007c04:	8bfb      	ldrh	r3, [r7, #30]
 8007c06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c0a:	83fb      	strh	r3, [r7, #30]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	441a      	add	r2, r3
 8007c16:	8bfb      	ldrh	r3, [r7, #30]
 8007c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	8013      	strh	r3, [r2, #0]
 8007c2c:	e1c9      	b.n	8007fc2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	78db      	ldrb	r3, [r3, #3]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d11e      	bne.n	8007c74 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	441a      	add	r2, r3
 8007c5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c66:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
 8007c72:	e01d      	b.n	8007cb0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c8a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	441a      	add	r2, r3
 8007c98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cc0:	4413      	add	r3, r2
 8007cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	011a      	lsls	r2, r3, #4
 8007cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	891b      	ldrh	r3, [r3, #8]
 8007cd8:	085b      	lsrs	r3, r3, #1
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf4:	4413      	add	r3, r2
 8007cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	011a      	lsls	r2, r3, #4
 8007cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	895b      	ldrh	r3, [r3, #10]
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 8093 	bne.w	8007e48 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007d32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d01b      	beq.n	8007d76 <USB_ActivateEndpoint+0x52a>
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	441a      	add	r2, r3
 8007d60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007d84:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01b      	beq.n	8007dc6 <USB_ActivateEndpoint+0x57a>
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ddc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007dde:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007de0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007de4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007de6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007de8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007dec:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e24:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	441a      	add	r2, r3
 8007e30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	8013      	strh	r3, [r2, #0]
 8007e46:	e0bc      	b.n	8007fc2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007e58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01d      	beq.n	8007ea0 <USB_ActivateEndpoint+0x654>
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	441a      	add	r2, r3
 8007e88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007eb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01d      	beq.n	8007ef8 <USB_ActivateEndpoint+0x6ac>
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	441a      	add	r2, r3
 8007ee0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007ee4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ee8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	78db      	ldrb	r3, [r3, #3]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d024      	beq.n	8007f4a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f16:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f1e:	f083 0320 	eor.w	r3, r3, #32
 8007f22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]
 8007f48:	e01d      	b.n	8007f86 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f60:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	441a      	add	r2, r3
 8007f6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	441a      	add	r2, r3
 8007faa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007fc2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3774      	adds	r7, #116	@ 0x74
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop

08007fd4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b08d      	sub	sp, #52	@ 0x34
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	7b1b      	ldrb	r3, [r3, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f040 808e 	bne.w	8008104 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d044      	beq.n	800807a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	81bb      	strh	r3, [r7, #12]
 8007ffe:	89bb      	ldrh	r3, [r7, #12]
 8008000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01b      	beq.n	8008040 <USB_DeactivateEndpoint+0x6c>
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800801a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800801e:	817b      	strh	r3, [r7, #10]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	441a      	add	r2, r3
 800802a:	897b      	ldrh	r3, [r7, #10]
 800802c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008038:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800803c:	b29b      	uxth	r3, r3
 800803e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008056:	813b      	strh	r3, [r7, #8]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	441a      	add	r2, r3
 8008062:	893b      	ldrh	r3, [r7, #8]
 8008064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800806c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008074:	b29b      	uxth	r3, r3
 8008076:	8013      	strh	r3, [r2, #0]
 8008078:	e192      	b.n	80083a0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	827b      	strh	r3, [r7, #18]
 8008088:	8a7b      	ldrh	r3, [r7, #18]
 800808a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01b      	beq.n	80080ca <USB_DeactivateEndpoint+0xf6>
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a8:	823b      	strh	r3, [r7, #16]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	441a      	add	r2, r3
 80080b4:	8a3b      	ldrh	r3, [r7, #16]
 80080b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e0:	81fb      	strh	r3, [r7, #14]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	441a      	add	r2, r3
 80080ec:	89fb      	ldrh	r3, [r7, #14]
 80080ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080fe:	b29b      	uxth	r3, r3
 8008100:	8013      	strh	r3, [r2, #0]
 8008102:	e14d      	b.n	80083a0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 80a5 	bne.w	8008258 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	843b      	strh	r3, [r7, #32]
 800811c:	8c3b      	ldrh	r3, [r7, #32]
 800811e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01b      	beq.n	800815e <USB_DeactivateEndpoint+0x18a>
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800813c:	83fb      	strh	r3, [r7, #30]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	441a      	add	r2, r3
 8008148:	8bfb      	ldrh	r3, [r7, #30]
 800814a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800814e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008152:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815a:	b29b      	uxth	r3, r3
 800815c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	83bb      	strh	r3, [r7, #28]
 800816c:	8bbb      	ldrh	r3, [r7, #28]
 800816e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01b      	beq.n	80081ae <USB_DeactivateEndpoint+0x1da>
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818c:	837b      	strh	r3, [r7, #26]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	441a      	add	r2, r3
 8008198:	8b7b      	ldrh	r3, [r7, #26]
 800819a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800819e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c4:	833b      	strh	r3, [r7, #24]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	441a      	add	r2, r3
 80081d0:	8b3b      	ldrh	r3, [r7, #24]
 80081d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fc:	82fb      	strh	r3, [r7, #22]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	441a      	add	r2, r3
 8008208:	8afb      	ldrh	r3, [r7, #22]
 800820a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800820e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800821a:	b29b      	uxth	r3, r3
 800821c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008234:	82bb      	strh	r3, [r7, #20]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	441a      	add	r2, r3
 8008240:	8abb      	ldrh	r3, [r7, #20]
 8008242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800824a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800824e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008252:	b29b      	uxth	r3, r3
 8008254:	8013      	strh	r3, [r2, #0]
 8008256:	e0a3      	b.n	80083a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008266:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <USB_DeactivateEndpoint+0x2d4>
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008286:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	441a      	add	r2, r3
 8008292:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800829c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80082b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80082b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01b      	beq.n	80082f8 <USB_DeactivateEndpoint+0x324>
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80082e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800830a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800831c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008324:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832c:	b29b      	uxth	r3, r3
 800832e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008346:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	441a      	add	r2, r3
 8008352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800835c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008364:	b29b      	uxth	r3, r3
 8008366:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800837a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	441a      	add	r2, r3
 800838a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800838c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800839c:	b29b      	uxth	r3, r3
 800839e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3734      	adds	r7, #52	@ 0x34
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b0c2      	sub	sp, #264	@ 0x108
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083bc:	6018      	str	r0, [r3, #0]
 80083be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	f040 86b7 	bne.w	8009148 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80083da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d908      	bls.n	8008408 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80083f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008406:	e007      	b.n	8008418 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	7b1b      	ldrb	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d13a      	bne.n	800849e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6959      	ldr	r1, [r3, #20]
 8008434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	88da      	ldrh	r2, [r3, #6]
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008444:	b29b      	uxth	r3, r3
 8008446:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800844a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800844e:	6800      	ldr	r0, [r0, #0]
 8008450:	f001 fc8d 	bl	8009d6e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800846e:	b29b      	uxth	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	4413      	add	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	011a      	lsls	r2, r3, #4
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	4413      	add	r3, r2
 800848a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	801a      	strh	r2, [r3, #0]
 800849a:	f000 be1f 	b.w	80090dc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800849e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	78db      	ldrb	r3, [r3, #3]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	f040 8462 	bne.w	8008d74 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80084b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6a1a      	ldr	r2, [r3, #32]
 80084bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	f240 83df 	bls.w	8008c8c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80084ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80084f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	441a      	add	r2, r3
 8008512:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800851e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6a1a      	ldr	r2, [r3, #32]
 8008536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 81c7 	beq.w	80088fe <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	633b      	str	r3, [r7, #48]	@ 0x30
 800857c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d177      	bne.n	800867c <USB_EPStartXfer+0x2ce>
 800858c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ac:	4413      	add	r3, r2
 80085ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	011a      	lsls	r2, r3, #4
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	4413      	add	r3, r2
 80085c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80085c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <USB_EPStartXfer+0x248>
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	e067      	b.n	80086c6 <USB_EPStartXfer+0x318>
 80085f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80085fc:	d81c      	bhi.n	8008638 <USB_EPStartXfer+0x28a>
 80085fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <USB_EPStartXfer+0x270>
 8008614:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008618:	3301      	adds	r3, #1
 800861a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29a      	uxth	r2, r3
 8008624:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008628:	b29b      	uxth	r3, r3
 800862a:	029b      	lsls	r3, r3, #10
 800862c:	b29b      	uxth	r3, r3
 800862e:	4313      	orrs	r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	e046      	b.n	80086c6 <USB_EPStartXfer+0x318>
 8008638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008646:	f003 031f 	and.w	r3, r3, #31
 800864a:	2b00      	cmp	r3, #0
 800864c:	d104      	bne.n	8008658 <USB_EPStartXfer+0x2aa>
 800864e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008652:	3b01      	subs	r3, #1
 8008654:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29a      	uxth	r2, r3
 800865e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008662:	b29b      	uxth	r3, r3
 8008664:	029b      	lsls	r3, r3, #10
 8008666:	b29b      	uxth	r3, r3
 8008668:	4313      	orrs	r3, r2
 800866a:	b29b      	uxth	r3, r3
 800866c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008674:	b29a      	uxth	r2, r3
 8008676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008678:	801a      	strh	r2, [r3, #0]
 800867a:	e024      	b.n	80086c6 <USB_EPStartXfer+0x318>
 800867c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d11c      	bne.n	80086c6 <USB_EPStartXfer+0x318>
 800868c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800869a:	b29b      	uxth	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	4413      	add	r3, r2
 80086a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80086a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	011a      	lsls	r2, r3, #4
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	4413      	add	r3, r2
 80086b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80086ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	895b      	ldrh	r3, [r3, #10]
 80086d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6959      	ldr	r1, [r3, #20]
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80086ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80086f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80086f4:	6800      	ldr	r0, [r0, #0]
 80086f6:	f001 fb3a 	bl	8009d6e <USB_WritePMA>
            ep->xfer_buff += len;
 80086fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695a      	ldr	r2, [r3, #20]
 8008706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800870a:	441a      	add	r2, r3
 800870c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6a1a      	ldr	r2, [r3, #32]
 8008724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	429a      	cmp	r2, r3
 8008732:	d90f      	bls.n	8008754 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6a1a      	ldr	r2, [r3, #32]
 8008740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008744:	1ad2      	subs	r2, r2, r3
 8008746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	621a      	str	r2, [r3, #32]
 8008752:	e00e      	b.n	8008772 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2200      	movs	r2, #0
 8008770:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d177      	bne.n	8008872 <USB_EPStartXfer+0x4c4>
 8008782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	61bb      	str	r3, [r7, #24]
 800878e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800879c:	b29b      	uxth	r3, r3
 800879e:	461a      	mov	r2, r3
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	4413      	add	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	011a      	lsls	r2, r3, #4
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	4413      	add	r3, r2
 80087b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	801a      	strh	r2, [r3, #0]
 80087ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10a      	bne.n	80087ec <USB_EPStartXfer+0x43e>
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	801a      	strh	r2, [r3, #0]
 80087ea:	e06d      	b.n	80088c8 <USB_EPStartXfer+0x51a>
 80087ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f2:	d81c      	bhi.n	800882e <USB_EPStartXfer+0x480>
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f8:	085b      	lsrs	r3, r3, #1
 80087fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80087fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <USB_EPStartXfer+0x466>
 800880a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800880e:	3301      	adds	r3, #1
 8008810:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	b29a      	uxth	r2, r3
 800881a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800881e:	b29b      	uxth	r3, r3
 8008820:	029b      	lsls	r3, r3, #10
 8008822:	b29b      	uxth	r3, r3
 8008824:	4313      	orrs	r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	801a      	strh	r2, [r3, #0]
 800882c:	e04c      	b.n	80088c8 <USB_EPStartXfer+0x51a>
 800882e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <USB_EPStartXfer+0x4a0>
 8008844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008848:	3b01      	subs	r3, #1
 800884a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	b29a      	uxth	r2, r3
 8008854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008858:	b29b      	uxth	r3, r3
 800885a:	029b      	lsls	r3, r3, #10
 800885c:	b29b      	uxth	r3, r3
 800885e:	4313      	orrs	r3, r2
 8008860:	b29b      	uxth	r3, r3
 8008862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800886a:	b29a      	uxth	r2, r3
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	e02a      	b.n	80088c8 <USB_EPStartXfer+0x51a>
 8008872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d122      	bne.n	80088c8 <USB_EPStartXfer+0x51a>
 8008882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	623b      	str	r3, [r7, #32]
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800889c:	b29b      	uxth	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	4413      	add	r3, r2
 80088a4:	623b      	str	r3, [r7, #32]
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	011a      	lsls	r2, r3, #4
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	4413      	add	r3, r2
 80088b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088bc:	61fb      	str	r3, [r7, #28]
 80088be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	891b      	ldrh	r3, [r3, #8]
 80088d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6959      	ldr	r1, [r3, #20]
 80088e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80088ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80088f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80088f6:	6800      	ldr	r0, [r0, #0]
 80088f8:	f001 fa39 	bl	8009d6e <USB_WritePMA>
 80088fc:	e3ee      	b.n	80090dc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d177      	bne.n	80089fe <USB_EPStartXfer+0x650>
 800890e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	64bb      	str	r3, [r7, #72]	@ 0x48
 800891a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800891e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008928:	b29b      	uxth	r3, r3
 800892a:	461a      	mov	r2, r3
 800892c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800892e:	4413      	add	r3, r2
 8008930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	011a      	lsls	r2, r3, #4
 8008940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008942:	4413      	add	r3, r2
 8008944:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008948:	647b      	str	r3, [r7, #68]	@ 0x44
 800894a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008954:	b29a      	uxth	r2, r3
 8008956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008958:	801a      	strh	r2, [r3, #0]
 800895a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <USB_EPStartXfer+0x5ca>
 8008962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008970:	b29a      	uxth	r2, r3
 8008972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	e06d      	b.n	8008a54 <USB_EPStartXfer+0x6a6>
 8008978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897c:	2b3e      	cmp	r3, #62	@ 0x3e
 800897e:	d81c      	bhi.n	80089ba <USB_EPStartXfer+0x60c>
 8008980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008984:	085b      	lsrs	r3, r3, #1
 8008986:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800898a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <USB_EPStartXfer+0x5f2>
 8008996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800899a:	3301      	adds	r3, #1
 800899c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	029b      	lsls	r3, r3, #10
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	e04c      	b.n	8008a54 <USB_EPStartXfer+0x6a6>
 80089ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c8:	f003 031f 	and.w	r3, r3, #31
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <USB_EPStartXfer+0x62c>
 80089d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089d4:	3b01      	subs	r3, #1
 80089d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b29a      	uxth	r2, r3
 80089e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	029b      	lsls	r3, r3, #10
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	4313      	orrs	r3, r2
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	e02a      	b.n	8008a54 <USB_EPStartXfer+0x6a6>
 80089fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d122      	bne.n	8008a54 <USB_EPStartXfer+0x6a6>
 8008a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a2e:	4413      	add	r3, r2
 8008a30:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	011a      	lsls	r2, r3, #4
 8008a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a42:	4413      	add	r3, r2
 8008a44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	891b      	ldrh	r3, [r3, #8]
 8008a60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6959      	ldr	r1, [r3, #20]
 8008a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a82:	6800      	ldr	r0, [r0, #0]
 8008a84:	f001 f973 	bl	8009d6e <USB_WritePMA>
            ep->xfer_buff += len;
 8008a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	695a      	ldr	r2, [r3, #20]
 8008a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a98:	441a      	add	r2, r3
 8008a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a1a      	ldr	r2, [r3, #32]
 8008ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d90f      	bls.n	8008ae2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6a1a      	ldr	r2, [r3, #32]
 8008ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	621a      	str	r2, [r3, #32]
 8008ae0:	e00e      	b.n	8008b00 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2200      	movs	r2, #0
 8008afe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d177      	bne.n	8008c0c <USB_EPStartXfer+0x85e>
 8008b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	4413      	add	r3, r2
 8008b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	011a      	lsls	r2, r3, #4
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	4413      	add	r3, r2
 8008b52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b66:	801a      	strh	r2, [r3, #0]
 8008b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <USB_EPStartXfer+0x7d8>
 8008b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b82:	801a      	strh	r2, [r3, #0]
 8008b84:	e067      	b.n	8008c56 <USB_EPStartXfer+0x8a8>
 8008b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b8c:	d81c      	bhi.n	8008bc8 <USB_EPStartXfer+0x81a>
 8008b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b92:	085b      	lsrs	r3, r3, #1
 8008b94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <USB_EPStartXfer+0x800>
 8008ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba8:	3301      	adds	r3, #1
 8008baa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	029b      	lsls	r3, r3, #10
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	801a      	strh	r2, [r3, #0]
 8008bc6:	e046      	b.n	8008c56 <USB_EPStartXfer+0x8a8>
 8008bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd6:	f003 031f 	and.w	r3, r3, #31
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <USB_EPStartXfer+0x83a>
 8008bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be2:	3b01      	subs	r3, #1
 8008be4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	029b      	lsls	r3, r3, #10
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c08:	801a      	strh	r2, [r3, #0]
 8008c0a:	e024      	b.n	8008c56 <USB_EPStartXfer+0x8a8>
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d11c      	bne.n	8008c56 <USB_EPStartXfer+0x8a8>
 8008c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c30:	4413      	add	r3, r2
 8008c32:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	011a      	lsls	r2, r3, #4
 8008c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c44:	4413      	add	r3, r2
 8008c46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	895b      	ldrh	r3, [r3, #10]
 8008c62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6959      	ldr	r1, [r3, #20]
 8008c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c84:	6800      	ldr	r0, [r0, #0]
 8008c86:	f001 f872 	bl	8009d6e <USB_WritePMA>
 8008c8a:	e227      	b.n	80090dc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	441a      	add	r2, r3
 8008ce0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d18:	4413      	add	r3, r2
 8008d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	011a      	lsls	r2, r3, #4
 8008d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	891b      	ldrh	r3, [r3, #8]
 8008d4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6959      	ldr	r1, [r3, #20]
 8008d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d6c:	6800      	ldr	r0, [r0, #0]
 8008d6e:	f000 fffe 	bl	8009d6e <USB_WritePMA>
 8008d72:	e1b3      	b.n	80090dc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6a1a      	ldr	r2, [r3, #32]
 8008d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80c6 	beq.w	8008f46 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d177      	bne.n	8008ec6 <USB_EPStartXfer+0xb18>
 8008dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008df6:	4413      	add	r3, r2
 8008df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	011a      	lsls	r2, r3, #4
 8008e08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e20:	801a      	strh	r2, [r3, #0]
 8008e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10a      	bne.n	8008e40 <USB_EPStartXfer+0xa92>
 8008e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	e067      	b.n	8008f10 <USB_EPStartXfer+0xb62>
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e44:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e46:	d81c      	bhi.n	8008e82 <USB_EPStartXfer+0xad4>
 8008e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4c:	085b      	lsrs	r3, r3, #1
 8008e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <USB_EPStartXfer+0xaba>
 8008e5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e62:	3301      	adds	r3, #1
 8008e64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	029b      	lsls	r3, r3, #10
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	e046      	b.n	8008f10 <USB_EPStartXfer+0xb62>
 8008e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e86:	095b      	lsrs	r3, r3, #5
 8008e88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e90:	f003 031f 	and.w	r3, r3, #31
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d104      	bne.n	8008ea2 <USB_EPStartXfer+0xaf4>
 8008e98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	029b      	lsls	r3, r3, #10
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ec2:	801a      	strh	r2, [r3, #0]
 8008ec4:	e024      	b.n	8008f10 <USB_EPStartXfer+0xb62>
 8008ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d11c      	bne.n	8008f10 <USB_EPStartXfer+0xb62>
 8008ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008eea:	4413      	add	r3, r2
 8008eec:	673b      	str	r3, [r7, #112]	@ 0x70
 8008eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	011a      	lsls	r2, r3, #4
 8008efc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008efe:	4413      	add	r3, r2
 8008f00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	895b      	ldrh	r3, [r3, #10]
 8008f1c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6959      	ldr	r1, [r3, #20]
 8008f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f36:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f3a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f3e:	6800      	ldr	r0, [r0, #0]
 8008f40:	f000 ff15 	bl	8009d6e <USB_WritePMA>
 8008f44:	e0ca      	b.n	80090dc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	785b      	ldrb	r3, [r3, #1]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d177      	bne.n	8009046 <USB_EPStartXfer+0xc98>
 8008f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	461a      	mov	r2, r3
 8008f74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f76:	4413      	add	r3, r2
 8008f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	011a      	lsls	r2, r3, #4
 8008f88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fa0:	801a      	strh	r2, [r3, #0]
 8008fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10a      	bne.n	8008fc0 <USB_EPStartXfer+0xc12>
 8008faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e073      	b.n	80090a8 <USB_EPStartXfer+0xcfa>
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fc6:	d81c      	bhi.n	8009002 <USB_EPStartXfer+0xc54>
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fcc:	085b      	lsrs	r3, r3, #1
 8008fce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <USB_EPStartXfer+0xc3a>
 8008fde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ffe:	801a      	strh	r2, [r3, #0]
 8009000:	e052      	b.n	80090a8 <USB_EPStartXfer+0xcfa>
 8009002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800900c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	2b00      	cmp	r3, #0
 8009016:	d104      	bne.n	8009022 <USB_EPStartXfer+0xc74>
 8009018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800901c:	3b01      	subs	r3, #1
 800901e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	b29a      	uxth	r2, r3
 8009028:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800902c:	b29b      	uxth	r3, r3
 800902e:	029b      	lsls	r3, r3, #10
 8009030:	b29b      	uxth	r3, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	b29b      	uxth	r3, r3
 8009036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800903a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903e:	b29a      	uxth	r2, r3
 8009040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	e030      	b.n	80090a8 <USB_EPStartXfer+0xcfa>
 8009046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800904a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d128      	bne.n	80090a8 <USB_EPStartXfer+0xcfa>
 8009056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009072:	b29b      	uxth	r3, r3
 8009074:	461a      	mov	r2, r3
 8009076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800907a:	4413      	add	r3, r2
 800907c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	011a      	lsls	r2, r3, #4
 800908e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009092:	4413      	add	r3, r2
 8009094:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800909c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80090a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	891b      	ldrh	r3, [r3, #8]
 80090b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6959      	ldr	r1, [r3, #20]
 80090c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80090ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80090d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80090d6:	6800      	ldr	r0, [r0, #0]
 80090d8:	f000 fe49 	bl	8009d6e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80090dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009102:	817b      	strh	r3, [r7, #10]
 8009104:	897b      	ldrh	r3, [r7, #10]
 8009106:	f083 0310 	eor.w	r3, r3, #16
 800910a:	817b      	strh	r3, [r7, #10]
 800910c:	897b      	ldrh	r3, [r7, #10]
 800910e:	f083 0320 	eor.w	r3, r3, #32
 8009112:	817b      	strh	r3, [r7, #10]
 8009114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	897b      	ldrh	r3, [r7, #10]
 8009130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800913c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009140:	b29b      	uxth	r3, r3
 8009142:	8013      	strh	r3, [r2, #0]
 8009144:	f000 bcdf 	b.w	8009b06 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	7b1b      	ldrb	r3, [r3, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 80bc 	bne.w	80092d2 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800915a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800915e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800916a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	429a      	cmp	r2, r3
 8009174:	d917      	bls.n	80091a6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	619a      	str	r2, [r3, #24]
 80091a4:	e00e      	b.n	80091c4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80091a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80091b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2200      	movs	r2, #0
 80091c2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80091c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091e8:	4413      	add	r3, r2
 80091ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	011a      	lsls	r2, r3, #4
 80091fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009200:	4413      	add	r3, r2
 8009202:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009206:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800920a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009216:	b29a      	uxth	r2, r3
 8009218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800921c:	801a      	strh	r2, [r3, #0]
 800921e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10d      	bne.n	8009242 <USB_EPStartXfer+0xe94>
 8009226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009236:	b29a      	uxth	r2, r3
 8009238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800923c:	801a      	strh	r2, [r3, #0]
 800923e:	f000 bc28 	b.w	8009a92 <USB_EPStartXfer+0x16e4>
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009246:	2b3e      	cmp	r3, #62	@ 0x3e
 8009248:	d81f      	bhi.n	800928a <USB_EPStartXfer+0xedc>
 800924a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924e:	085b      	lsrs	r3, r3, #1
 8009250:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <USB_EPStartXfer+0xebc>
 8009260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009264:	3301      	adds	r3, #1
 8009266:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800926a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29a      	uxth	r2, r3
 8009272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009276:	b29b      	uxth	r3, r3
 8009278:	029b      	lsls	r3, r3, #10
 800927a:	b29b      	uxth	r3, r3
 800927c:	4313      	orrs	r3, r2
 800927e:	b29a      	uxth	r2, r3
 8009280:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009284:	801a      	strh	r2, [r3, #0]
 8009286:	f000 bc04 	b.w	8009a92 <USB_EPStartXfer+0x16e4>
 800928a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928e:	095b      	lsrs	r3, r3, #5
 8009290:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	2b00      	cmp	r3, #0
 800929e:	d104      	bne.n	80092aa <USB_EPStartXfer+0xefc>
 80092a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80092a4:	3b01      	subs	r3, #1
 80092a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	029b      	lsls	r3, r3, #10
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	4313      	orrs	r3, r2
 80092be:	b29b      	uxth	r3, r3
 80092c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ce:	801a      	strh	r2, [r3, #0]
 80092d0:	e3df      	b.n	8009a92 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80092d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	f040 8218 	bne.w	8009714 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80092e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f040 809d 	bne.w	8009430 <USB_EPStartXfer+0x1082>
 80092f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009308:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009312:	b29b      	uxth	r3, r3
 8009314:	461a      	mov	r2, r3
 8009316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800931a:	4413      	add	r3, r2
 800931c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	011a      	lsls	r2, r3, #4
 800932e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009332:	4413      	add	r3, r2
 8009334:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800933c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009348:	b29a      	uxth	r2, r3
 800934a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800934e:	801a      	strh	r2, [r3, #0]
 8009350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10c      	bne.n	800937a <USB_EPStartXfer+0xfcc>
 8009360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800936c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009370:	b29a      	uxth	r2, r3
 8009372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009376:	801a      	strh	r2, [r3, #0]
 8009378:	e08f      	b.n	800949a <USB_EPStartXfer+0x10ec>
 800937a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800937e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b3e      	cmp	r3, #62	@ 0x3e
 8009388:	d826      	bhi.n	80093d8 <USB_EPStartXfer+0x102a>
 800938a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800938e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	085b      	lsrs	r3, r3, #1
 8009398:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800939c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <USB_EPStartXfer+0x100c>
 80093b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b4:	3301      	adds	r3, #1
 80093b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	029b      	lsls	r3, r3, #10
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	4313      	orrs	r3, r2
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093d4:	801a      	strh	r2, [r3, #0]
 80093d6:	e060      	b.n	800949a <USB_EPStartXfer+0x10ec>
 80093d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	095b      	lsrs	r3, r3, #5
 80093e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	f003 031f 	and.w	r3, r3, #31
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d104      	bne.n	8009408 <USB_EPStartXfer+0x105a>
 80093fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009402:	3b01      	subs	r3, #1
 8009404:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29a      	uxth	r2, r3
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009414:	b29b      	uxth	r3, r3
 8009416:	029b      	lsls	r3, r3, #10
 8009418:	b29b      	uxth	r3, r3
 800941a:	4313      	orrs	r3, r2
 800941c:	b29b      	uxth	r3, r3
 800941e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009426:	b29a      	uxth	r2, r3
 8009428:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800942c:	801a      	strh	r2, [r3, #0]
 800942e:	e034      	b.n	800949a <USB_EPStartXfer+0x10ec>
 8009430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d12c      	bne.n	800949a <USB_EPStartXfer+0x10ec>
 8009440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800944e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800945c:	b29b      	uxth	r3, r3
 800945e:	461a      	mov	r2, r3
 8009460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009464:	4413      	add	r3, r2
 8009466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800946a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	011a      	lsls	r2, r3, #4
 8009478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800947c:	4413      	add	r3, r2
 800947e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009482:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	b29a      	uxth	r2, r3
 8009494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	785b      	ldrb	r3, [r3, #1]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f040 809d 	bne.w	80095f4 <USB_EPStartXfer+0x1246>
 80094ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	461a      	mov	r2, r3
 80094da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094de:	4413      	add	r3, r2
 80094e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	011a      	lsls	r2, r3, #4
 80094f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094f6:	4413      	add	r3, r2
 80094f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80094fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800950c:	b29a      	uxth	r2, r3
 800950e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009512:	801a      	strh	r2, [r3, #0]
 8009514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10c      	bne.n	800953e <USB_EPStartXfer+0x1190>
 8009524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009534:	b29a      	uxth	r2, r3
 8009536:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800953a:	801a      	strh	r2, [r3, #0]
 800953c:	e088      	b.n	8009650 <USB_EPStartXfer+0x12a2>
 800953e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b3e      	cmp	r3, #62	@ 0x3e
 800954c:	d826      	bhi.n	800959c <USB_EPStartXfer+0x11ee>
 800954e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d004      	beq.n	800957e <USB_EPStartXfer+0x11d0>
 8009574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009578:	3301      	adds	r3, #1
 800957a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800957e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b29a      	uxth	r2, r3
 8009586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958a:	b29b      	uxth	r3, r3
 800958c:	029b      	lsls	r3, r3, #10
 800958e:	b29b      	uxth	r3, r3
 8009590:	4313      	orrs	r3, r2
 8009592:	b29a      	uxth	r2, r3
 8009594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009598:	801a      	strh	r2, [r3, #0]
 800959a:	e059      	b.n	8009650 <USB_EPStartXfer+0x12a2>
 800959c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	095b      	lsrs	r3, r3, #5
 80095aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 031f 	and.w	r3, r3, #31
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d104      	bne.n	80095cc <USB_EPStartXfer+0x121e>
 80095c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c6:	3b01      	subs	r3, #1
 80095c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d8:	b29b      	uxth	r3, r3
 80095da:	029b      	lsls	r3, r3, #10
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4313      	orrs	r3, r2
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e02d      	b.n	8009650 <USB_EPStartXfer+0x12a2>
 80095f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d125      	bne.n	8009650 <USB_EPStartXfer+0x12a2>
 8009604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009612:	b29b      	uxth	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800961a:	4413      	add	r3, r2
 800961c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	011a      	lsls	r2, r3, #4
 800962e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009632:	4413      	add	r3, r2
 8009634:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009638:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800963c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	b29a      	uxth	r2, r3
 800964a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800964e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 8218 	beq.w	8009a92 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009682:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <USB_EPStartXfer+0x12ec>
 800968e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10d      	bne.n	80096b6 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800969a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800969e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 81f5 	bne.w	8009a92 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80096a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f040 81ee 	bne.w	8009a92 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80096b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096dc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80096e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	441a      	add	r2, r3
 80096fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80096fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800970a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800970e:	b29b      	uxth	r3, r3
 8009710:	8013      	strh	r3, [r2, #0]
 8009712:	e1be      	b.n	8009a92 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	78db      	ldrb	r3, [r3, #3]
 8009720:	2b01      	cmp	r3, #1
 8009722:	f040 81b4 	bne.w	8009a8e <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	429a      	cmp	r2, r3
 8009740:	d917      	bls.n	8009772 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8009742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	619a      	str	r2, [r3, #24]
 8009770:	e00e      	b.n	8009790 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8009772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2200      	movs	r2, #0
 800978e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	785b      	ldrb	r3, [r3, #1]
 800979c:	2b00      	cmp	r3, #0
 800979e:	f040 8085 	bne.w	80098ac <USB_EPStartXfer+0x14fe>
 80097a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097be:	b29b      	uxth	r3, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097c6:	4413      	add	r3, r2
 80097c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	011a      	lsls	r2, r3, #4
 80097da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097de:	4413      	add	r3, r2
 80097e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80097e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097fa:	801a      	strh	r2, [r3, #0]
 80097fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10c      	bne.n	800981e <USB_EPStartXfer+0x1470>
 8009804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009814:	b29a      	uxth	r2, r3
 8009816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800981a:	801a      	strh	r2, [r3, #0]
 800981c:	e077      	b.n	800990e <USB_EPStartXfer+0x1560>
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009822:	2b3e      	cmp	r3, #62	@ 0x3e
 8009824:	d81e      	bhi.n	8009864 <USB_EPStartXfer+0x14b6>
 8009826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <USB_EPStartXfer+0x1498>
 800983c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009840:	3301      	adds	r3, #1
 8009842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	b29a      	uxth	r2, r3
 800984e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009852:	b29b      	uxth	r3, r3
 8009854:	029b      	lsls	r3, r3, #10
 8009856:	b29b      	uxth	r3, r3
 8009858:	4313      	orrs	r3, r2
 800985a:	b29a      	uxth	r2, r3
 800985c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	e054      	b.n	800990e <USB_EPStartXfer+0x1560>
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800986e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009872:	f003 031f 	and.w	r3, r3, #31
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <USB_EPStartXfer+0x14d6>
 800987a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800987e:	3b01      	subs	r3, #1
 8009880:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	b29a      	uxth	r2, r3
 800988c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009890:	b29b      	uxth	r3, r3
 8009892:	029b      	lsls	r3, r3, #10
 8009894:	b29b      	uxth	r3, r3
 8009896:	4313      	orrs	r3, r2
 8009898:	b29b      	uxth	r3, r3
 800989a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800989e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098a8:	801a      	strh	r2, [r3, #0]
 80098aa:	e030      	b.n	800990e <USB_EPStartXfer+0x1560>
 80098ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d128      	bne.n	800990e <USB_EPStartXfer+0x1560>
 80098bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80098ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098d8:	b29b      	uxth	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098e0:	4413      	add	r3, r2
 80098e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80098e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	011a      	lsls	r2, r3, #4
 80098f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098f8:	4413      	add	r3, r2
 80098fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80098fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009906:	b29a      	uxth	r2, r3
 8009908:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 8085 	bne.w	8009a38 <USB_EPStartXfer+0x168a>
 800992e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800993c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800994a:	b29b      	uxth	r3, r3
 800994c:	461a      	mov	r2, r3
 800994e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009952:	4413      	add	r3, r2
 8009954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	011a      	lsls	r2, r3, #4
 8009966:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800996a:	4413      	add	r3, r2
 800996c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009980:	b29a      	uxth	r2, r3
 8009982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009986:	801a      	strh	r2, [r3, #0]
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10c      	bne.n	80099aa <USB_EPStartXfer+0x15fc>
 8009990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29b      	uxth	r3, r3
 8009998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800999c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099a6:	801a      	strh	r2, [r3, #0]
 80099a8:	e073      	b.n	8009a92 <USB_EPStartXfer+0x16e4>
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80099b0:	d81e      	bhi.n	80099f0 <USB_EPStartXfer+0x1642>
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c0:	f003 0301 	and.w	r3, r3, #1
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <USB_EPStartXfer+0x1624>
 80099c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099cc:	3301      	adds	r3, #1
 80099ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099de:	b29b      	uxth	r3, r3
 80099e0:	029b      	lsls	r3, r3, #10
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	4313      	orrs	r3, r2
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	e050      	b.n	8009a92 <USB_EPStartXfer+0x16e4>
 80099f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f4:	095b      	lsrs	r3, r3, #5
 80099f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fe:	f003 031f 	and.w	r3, r3, #31
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <USB_EPStartXfer+0x1662>
 8009a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	029b      	lsls	r3, r3, #10
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	4313      	orrs	r3, r2
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a34:	801a      	strh	r2, [r3, #0]
 8009a36:	e02c      	b.n	8009a92 <USB_EPStartXfer+0x16e4>
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	785b      	ldrb	r3, [r3, #1]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d124      	bne.n	8009a92 <USB_EPStartXfer+0x16e4>
 8009a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	461a      	mov	r2, r3
 8009a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a5e:	4413      	add	r3, r2
 8009a60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	011a      	lsls	r2, r3, #4
 8009a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009a76:	4413      	add	r3, r2
 8009a78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	e001      	b.n	8009a92 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e03a      	b.n	8009b08 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ab8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009abc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ac0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ac4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009ac8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009acc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ad0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	441a      	add	r2, r3
 8009aee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009af6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009afa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b085      	sub	sp, #20
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d020      	beq.n	8009b66 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b3a:	81bb      	strh	r3, [r7, #12]
 8009b3c:	89bb      	ldrh	r3, [r7, #12]
 8009b3e:	f083 0310 	eor.w	r3, r3, #16
 8009b42:	81bb      	strh	r3, [r7, #12]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	441a      	add	r2, r3
 8009b4e:	89bb      	ldrh	r3, [r7, #12]
 8009b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	8013      	strh	r3, [r2, #0]
 8009b64:	e01f      	b.n	8009ba6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b7c:	81fb      	strh	r3, [r7, #14]
 8009b7e:	89fb      	ldrh	r3, [r7, #14]
 8009b80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b84:	81fb      	strh	r3, [r7, #14]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	441a      	add	r2, r3
 8009b90:	89fb      	ldrh	r3, [r7, #14]
 8009b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	7b1b      	ldrb	r3, [r3, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f040 809d 	bne.w	8009d02 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	785b      	ldrb	r3, [r3, #1]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d04c      	beq.n	8009c6a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	823b      	strh	r3, [r7, #16]
 8009bde:	8a3b      	ldrh	r3, [r7, #16]
 8009be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d01b      	beq.n	8009c20 <USB_EPClearStall+0x6c>
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bfe:	81fb      	strh	r3, [r7, #14]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	441a      	add	r2, r3
 8009c0a:	89fb      	ldrh	r3, [r7, #14]
 8009c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	78db      	ldrb	r3, [r3, #3]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d06c      	beq.n	8009d02 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c3e:	81bb      	strh	r3, [r7, #12]
 8009c40:	89bb      	ldrh	r3, [r7, #12]
 8009c42:	f083 0320 	eor.w	r3, r3, #32
 8009c46:	81bb      	strh	r3, [r7, #12]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	441a      	add	r2, r3
 8009c52:	89bb      	ldrh	r3, [r7, #12]
 8009c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	8013      	strh	r3, [r2, #0]
 8009c68:	e04b      	b.n	8009d02 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	82fb      	strh	r3, [r7, #22]
 8009c78:	8afb      	ldrh	r3, [r7, #22]
 8009c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d01b      	beq.n	8009cba <USB_EPClearStall+0x106>
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c98:	82bb      	strh	r3, [r7, #20]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	441a      	add	r2, r3
 8009ca4:	8abb      	ldrh	r3, [r7, #20]
 8009ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd0:	827b      	strh	r3, [r7, #18]
 8009cd2:	8a7b      	ldrh	r3, [r7, #18]
 8009cd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009cd8:	827b      	strh	r3, [r7, #18]
 8009cda:	8a7b      	ldrh	r3, [r7, #18]
 8009cdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ce0:	827b      	strh	r3, [r7, #18]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	441a      	add	r2, r3
 8009cec:	8a7b      	ldrh	r3, [r7, #18]
 8009cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	371c      	adds	r7, #28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d1c:	78fb      	ldrb	r3, [r7, #3]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d103      	bne.n	8009d2a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2280      	movs	r2, #128	@ 0x80
 8009d26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d60:	68fb      	ldr	r3, [r7, #12]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b08b      	sub	sp, #44	@ 0x2c
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	4611      	mov	r1, r2
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	80fb      	strh	r3, [r7, #6]
 8009d80:	4613      	mov	r3, r2
 8009d82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009d84:	88bb      	ldrh	r3, [r7, #4]
 8009d86:	3301      	adds	r3, #1
 8009d88:	085b      	lsrs	r3, r3, #1
 8009d8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	005a      	lsls	r2, r3, #1
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009da0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009da6:	e01e      	b.n	8009de6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	3301      	adds	r3, #1
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	b21a      	sxth	r2, r3
 8009db8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	b21b      	sxth	r3, r3
 8009dc0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	8a7a      	ldrh	r2, [r7, #18]
 8009dc6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	3302      	adds	r3, #2
 8009dcc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	3302      	adds	r3, #2
 8009dd2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	3b01      	subs	r3, #1
 8009de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1dd      	bne.n	8009da8 <USB_WritePMA+0x3a>
  }
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	372c      	adds	r7, #44	@ 0x2c
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b08b      	sub	sp, #44	@ 0x2c
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	60f8      	str	r0, [r7, #12]
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	4611      	mov	r1, r2
 8009e06:	461a      	mov	r2, r3
 8009e08:	460b      	mov	r3, r1
 8009e0a:	80fb      	strh	r3, [r7, #6]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e10:	88bb      	ldrh	r3, [r7, #4]
 8009e12:	085b      	lsrs	r3, r3, #1
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e20:	88fb      	ldrh	r3, [r7, #6]
 8009e22:	005a      	lsls	r2, r3, #1
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e2c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e32:	e01b      	b.n	8009e6c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	3302      	adds	r3, #2
 8009e40:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	0a1b      	lsrs	r3, r3, #8
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	3302      	adds	r3, #2
 8009e64:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e0      	bne.n	8009e34 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009e72:	88bb      	ldrh	r3, [r7, #4]
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d007      	beq.n	8009e8e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	701a      	strb	r2, [r3, #0]
  }
}
 8009e8e:	bf00      	nop
 8009e90:	372c      	adds	r7, #44	@ 0x2c
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7c1b      	ldrb	r3, [r3, #16]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d115      	bne.n	8009ede <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	2181      	movs	r1, #129	@ 0x81
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 fec9 	bl	800bc52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ec6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009eca:	2202      	movs	r2, #2
 8009ecc:	2101      	movs	r1, #1
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 febf 	bl	800bc52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009edc:	e012      	b.n	8009f04 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ede:	2340      	movs	r3, #64	@ 0x40
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	2181      	movs	r1, #129	@ 0x81
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 feb4 	bl	800bc52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ef0:	2340      	movs	r3, #64	@ 0x40
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f001 feab 	bl	800bc52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f04:	2308      	movs	r3, #8
 8009f06:	2203      	movs	r2, #3
 8009f08:	2182      	movs	r1, #130	@ 0x82
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 fea1 	bl	800bc52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f16:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009f1a:	f001 ffc1 	bl	800bea0 <USBD_static_malloc>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d102      	bne.n	8009f36 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009f30:	2301      	movs	r3, #1
 8009f32:	73fb      	strb	r3, [r7, #15]
 8009f34:	e026      	b.n	8009f84 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f3c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7c1b      	ldrb	r3, [r3, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d109      	bne.n	8009f74 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 ff61 	bl	800be34 <USBD_LL_PrepareReceive>
 8009f72:	e007      	b.n	8009f84 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f7a:	2340      	movs	r3, #64	@ 0x40
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 ff58 	bl	800be34 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b084      	sub	sp, #16
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009f9e:	2181      	movs	r1, #129	@ 0x81
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f001 fe7c 	bl	800bc9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009fac:	2101      	movs	r1, #1
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fe75 	bl	800bc9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009fbc:	2182      	movs	r1, #130	@ 0x82
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 fe6d 	bl	800bc9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00e      	beq.n	8009ff2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 ff69 	bl	800bebc <USBD_static_free>
    pdev->pClassData = NULL;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a00c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a022:	2b00      	cmp	r3, #0
 800a024:	d039      	beq.n	800a09a <USBD_CDC_Setup+0x9e>
 800a026:	2b20      	cmp	r3, #32
 800a028:	d17f      	bne.n	800a12a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	88db      	ldrh	r3, [r3, #6]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d029      	beq.n	800a086 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	b25b      	sxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da11      	bge.n	800a060 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a048:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	88d2      	ldrh	r2, [r2, #6]
 800a04e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a050:	6939      	ldr	r1, [r7, #16]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	88db      	ldrh	r3, [r3, #6]
 800a056:	461a      	mov	r2, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 fa0f 	bl	800b47c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a05e:	e06b      	b.n	800a138 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	785a      	ldrb	r2, [r3, #1]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	88db      	ldrh	r3, [r3, #6]
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a076:	6939      	ldr	r1, [r7, #16]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	88db      	ldrh	r3, [r3, #6]
 800a07c:	461a      	mov	r2, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fa2a 	bl	800b4d8 <USBD_CtlPrepareRx>
      break;
 800a084:	e058      	b.n	800a138 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	7850      	ldrb	r0, [r2, #1]
 800a092:	2200      	movs	r2, #0
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	4798      	blx	r3
      break;
 800a098:	e04e      	b.n	800a138 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	2b0b      	cmp	r3, #11
 800a0a0:	d02e      	beq.n	800a100 <USBD_CDC_Setup+0x104>
 800a0a2:	2b0b      	cmp	r3, #11
 800a0a4:	dc38      	bgt.n	800a118 <USBD_CDC_Setup+0x11c>
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <USBD_CDC_Setup+0xb4>
 800a0aa:	2b0a      	cmp	r3, #10
 800a0ac:	d014      	beq.n	800a0d8 <USBD_CDC_Setup+0xdc>
 800a0ae:	e033      	b.n	800a118 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d107      	bne.n	800a0ca <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a0ba:	f107 030c 	add.w	r3, r7, #12
 800a0be:	2202      	movs	r2, #2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 f9da 	bl	800b47c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0c8:	e02e      	b.n	800a128 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 f96a 	bl	800b3a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a0d6:	e027      	b.n	800a128 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d107      	bne.n	800a0f2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0e2:	f107 030f 	add.w	r3, r7, #15
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 f9c6 	bl	800b47c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0f0:	e01a      	b.n	800a128 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f956 	bl	800b3a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fe:	e013      	b.n	800a128 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a106:	2b03      	cmp	r3, #3
 800a108:	d00d      	beq.n	800a126 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 f94a 	bl	800b3a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a112:	2302      	movs	r3, #2
 800a114:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a116:	e006      	b.n	800a126 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 f943 	bl	800b3a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a120:	2302      	movs	r3, #2
 800a122:	75fb      	strb	r3, [r7, #23]
          break;
 800a124:	e000      	b.n	800a128 <USBD_CDC_Setup+0x12c>
          break;
 800a126:	bf00      	nop
      }
      break;
 800a128:	e006      	b.n	800a138 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 f93a 	bl	800b3a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a132:	2302      	movs	r3, #2
 800a134:	75fb      	strb	r3, [r7, #23]
      break;
 800a136:	bf00      	nop
  }

  return ret;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	460b      	mov	r3, r1
 800a14c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a154:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a15c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a164:	2b00      	cmp	r3, #0
 800a166:	d03a      	beq.n	800a1de <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a168:	78fa      	ldrb	r2, [r7, #3]
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	4613      	mov	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	440b      	add	r3, r1
 800a176:	331c      	adds	r3, #28
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d029      	beq.n	800a1d2 <USBD_CDC_DataIn+0x90>
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	331c      	adds	r3, #28
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	78f9      	ldrb	r1, [r7, #3]
 800a192:	68b8      	ldr	r0, [r7, #8]
 800a194:	460b      	mov	r3, r1
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	440b      	add	r3, r1
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	4403      	add	r3, r0
 800a19e:	3320      	adds	r3, #32
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1a6:	fb01 f303 	mul.w	r3, r1, r3
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d110      	bne.n	800a1d2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a1b0:	78fa      	ldrb	r2, [r7, #3]
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	440b      	add	r3, r1
 800a1be:	331c      	adds	r3, #28
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a1c4:	78f9      	ldrb	r1, [r7, #3]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 fe0f 	bl	800bdee <USBD_LL_Transmit>
 800a1d0:	e003      	b.n	800a1da <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e000      	b.n	800a1e0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a1de:	2302      	movs	r3, #2
  }
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1fc:	78fb      	ldrb	r3, [r7, #3]
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f001 fe3a 	bl	800be7a <USBD_LL_GetRxDataSize>
 800a206:	4602      	mov	r2, r0
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00d      	beq.n	800a234 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a22c:	4611      	mov	r1, r2
 800a22e:	4798      	blx	r3

    return USBD_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	e000      	b.n	800a236 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a234:	2302      	movs	r3, #2
  }
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a24c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a254:	2b00      	cmp	r3, #0
 800a256:	d014      	beq.n	800a282 <USBD_CDC_EP0_RxReady+0x44>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a25e:	2bff      	cmp	r3, #255	@ 0xff
 800a260:	d00f      	beq.n	800a282 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a270:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a278:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	22ff      	movs	r2, #255	@ 0xff
 800a27e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2243      	movs	r2, #67	@ 0x43
 800a298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a29a:	4b03      	ldr	r3, [pc, #12]	@ (800a2a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	2000009c 	.word	0x2000009c

0800a2ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2243      	movs	r2, #67	@ 0x43
 800a2b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a2ba:	4b03      	ldr	r3, [pc, #12]	@ (800a2c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	20000058 	.word	0x20000058

0800a2cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2243      	movs	r2, #67	@ 0x43
 800a2d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a2da:	4b03      	ldr	r3, [pc, #12]	@ (800a2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	200000e0 	.word	0x200000e0

0800a2ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	220a      	movs	r2, #10
 800a2f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a2fa:	4b03      	ldr	r3, [pc, #12]	@ (800a308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	20000014 	.word	0x20000014

0800a30c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a316:	2302      	movs	r3, #2
 800a318:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d005      	beq.n	800a32c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3714      	adds	r7, #20
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b087      	sub	sp, #28
 800a33e:	af00      	add	r7, sp, #0
 800a340:	60f8      	str	r0, [r7, #12]
 800a342:	60b9      	str	r1, [r7, #8]
 800a344:	4613      	mov	r3, r2
 800a346:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a34e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a358:	88fa      	ldrh	r2, [r7, #6]
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a37e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01c      	beq.n	800a3ea <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d115      	bne.n	800a3e6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	2181      	movs	r1, #129	@ 0x81
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 fd06 	bl	800bdee <USBD_LL_Transmit>

      return USBD_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	e002      	b.n	800a3ec <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e000      	b.n	800a3ec <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a3ea:	2302      	movs	r3, #2
  }
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a402:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d017      	beq.n	800a43e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7c1b      	ldrb	r3, [r3, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d109      	bne.n	800a42a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a41c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a420:	2101      	movs	r1, #1
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 fd06 	bl	800be34 <USBD_LL_PrepareReceive>
 800a428:	e007      	b.n	800a43a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a430:	2340      	movs	r3, #64	@ 0x40
 800a432:	2101      	movs	r1, #1
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 fcfd 	bl	800be34 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	e000      	b.n	800a440 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a43e:	2302      	movs	r3, #2
  }
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a45c:	2302      	movs	r3, #2
 800a45e:	e01a      	b.n	800a496 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d003      	beq.n	800a480 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	79fa      	ldrb	r2, [r7, #7]
 800a48c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f001 fb6a 	bl	800bb68 <USBD_LL_Init>

  return USBD_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d006      	beq.n	800a4c0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]
 800a4be:	e001      	b.n	800a4c4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 fb9e 	bl	800bc1c <USBD_LL_Start>

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a50c:	2302      	movs	r3, #2
 800a50e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00c      	beq.n	800a534 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	4611      	mov	r1, r2
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	4611      	mov	r1, r2
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	4798      	blx	r3

  return USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fedb 	bl	800b332 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a58a:	461a      	mov	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a598:	f003 031f 	and.w	r3, r3, #31
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d016      	beq.n	800a5ce <USBD_LL_SetupStage+0x6a>
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d81c      	bhi.n	800a5de <USBD_LL_SetupStage+0x7a>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <USBD_LL_SetupStage+0x4a>
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d008      	beq.n	800a5be <USBD_LL_SetupStage+0x5a>
 800a5ac:	e017      	b.n	800a5de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f9ce 	bl	800a958 <USBD_StdDevReq>
      break;
 800a5bc:	e01a      	b.n	800a5f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fa30 	bl	800aa2c <USBD_StdItfReq>
      break;
 800a5cc:	e012      	b.n	800a5f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa70 	bl	800aabc <USBD_StdEPReq>
      break;
 800a5dc:	e00a      	b.n	800a5f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a5e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f001 fb75 	bl	800bcdc <USBD_LL_StallEP>
      break;
 800a5f2:	bf00      	nop
  }

  return USBD_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	460b      	mov	r3, r1
 800a608:	607a      	str	r2, [r7, #4]
 800a60a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d14b      	bne.n	800a6aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a618:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a620:	2b03      	cmp	r3, #3
 800a622:	d134      	bne.n	800a68e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d919      	bls.n	800a664 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	1ad2      	subs	r2, r2, r3
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a646:	429a      	cmp	r2, r3
 800a648:	d203      	bcs.n	800a652 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a64e:	b29b      	uxth	r3, r3
 800a650:	e002      	b.n	800a658 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a656:	b29b      	uxth	r3, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 ff59 	bl	800b514 <USBD_CtlContinueRx>
 800a662:	e038      	b.n	800a6d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00a      	beq.n	800a686 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a676:	2b03      	cmp	r3, #3
 800a678:	d105      	bne.n	800a686 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f000 ff56 	bl	800b538 <USBD_CtlSendStatus>
 800a68c:	e023      	b.n	800a6d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a694:	2b05      	cmp	r3, #5
 800a696:	d11e      	bne.n	800a6d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f001 fb1a 	bl	800bcdc <USBD_LL_StallEP>
 800a6a8:	e015      	b.n	800a6d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00d      	beq.n	800a6d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d108      	bne.n	800a6d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	7afa      	ldrb	r2, [r7, #11]
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	4798      	blx	r3
 800a6d0:	e001      	b.n	800a6d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e000      	b.n	800a6d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a6ee:	7afb      	ldrb	r3, [r7, #11]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d17f      	bne.n	800a7f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	3314      	adds	r3, #20
 800a6f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a700:	2b02      	cmp	r3, #2
 800a702:	d15c      	bne.n	800a7be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	68da      	ldr	r2, [r3, #12]
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d915      	bls.n	800a73c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	1ad2      	subs	r2, r2, r3
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	b29b      	uxth	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 fec3 	bl	800b4b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a72e:	2300      	movs	r3, #0
 800a730:	2200      	movs	r2, #0
 800a732:	2100      	movs	r1, #0
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f001 fb7d 	bl	800be34 <USBD_LL_PrepareReceive>
 800a73a:	e04e      	b.n	800a7da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	6912      	ldr	r2, [r2, #16]
 800a744:	fbb3 f1f2 	udiv	r1, r3, r2
 800a748:	fb01 f202 	mul.w	r2, r1, r2
 800a74c:	1a9b      	subs	r3, r3, r2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d11c      	bne.n	800a78c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	689a      	ldr	r2, [r3, #8]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d316      	bcc.n	800a78c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	689a      	ldr	r2, [r3, #8]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a768:	429a      	cmp	r2, r3
 800a76a:	d20f      	bcs.n	800a78c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a76c:	2200      	movs	r2, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fe9f 	bl	800b4b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a77e:	2300      	movs	r3, #0
 800a780:	2200      	movs	r2, #0
 800a782:	2100      	movs	r1, #0
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f001 fb55 	bl	800be34 <USBD_LL_PrepareReceive>
 800a78a:	e026      	b.n	800a7da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00a      	beq.n	800a7ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d105      	bne.n	800a7ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a7ae:	2180      	movs	r1, #128	@ 0x80
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f001 fa93 	bl	800bcdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 fed1 	bl	800b55e <USBD_CtlReceiveStatus>
 800a7bc:	e00d      	b.n	800a7da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d004      	beq.n	800a7d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d103      	bne.n	800a7da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a7d2:	2180      	movs	r1, #128	@ 0x80
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f001 fa81 	bl	800bcdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d11d      	bne.n	800a820 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7ff fe80 	bl	800a4ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a7f2:	e015      	b.n	800a820 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00d      	beq.n	800a81c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a806:	2b03      	cmp	r3, #3
 800a808:	d108      	bne.n	800a81c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	7afa      	ldrb	r2, [r7, #11]
 800a814:	4611      	mov	r1, r2
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	4798      	blx	r3
 800a81a:	e001      	b.n	800a820 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a81c:	2302      	movs	r3, #2
 800a81e:	e000      	b.n	800a822 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a832:	2340      	movs	r3, #64	@ 0x40
 800a834:	2200      	movs	r2, #0
 800a836:	2100      	movs	r1, #0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f001 fa0a 	bl	800bc52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2240      	movs	r2, #64	@ 0x40
 800a84a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a84e:	2340      	movs	r3, #64	@ 0x40
 800a850:	2200      	movs	r2, #0
 800a852:	2180      	movs	r1, #128	@ 0x80
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 f9fc 	bl	800bc52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2240      	movs	r2, #64	@ 0x40
 800a864:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d009      	beq.n	800a8a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6852      	ldr	r2, [r2, #4]
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	4611      	mov	r1, r2
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	4798      	blx	r3
  }

  return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	78fa      	ldrb	r2, [r7, #3]
 800a8bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a904:	2b04      	cmp	r3, #4
 800a906:	d105      	bne.n	800a914 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b082      	sub	sp, #8
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a930:	2b03      	cmp	r3, #3
 800a932:	d10b      	bne.n	800a94c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
	...

0800a958 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a96e:	2b40      	cmp	r3, #64	@ 0x40
 800a970:	d005      	beq.n	800a97e <USBD_StdDevReq+0x26>
 800a972:	2b40      	cmp	r3, #64	@ 0x40
 800a974:	d84f      	bhi.n	800aa16 <USBD_StdDevReq+0xbe>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d009      	beq.n	800a98e <USBD_StdDevReq+0x36>
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d14b      	bne.n	800aa16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	4798      	blx	r3
      break;
 800a98c:	e048      	b.n	800aa20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b09      	cmp	r3, #9
 800a994:	d839      	bhi.n	800aa0a <USBD_StdDevReq+0xb2>
 800a996:	a201      	add	r2, pc, #4	@ (adr r2, 800a99c <USBD_StdDevReq+0x44>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9ed 	.word	0x0800a9ed
 800a9a0:	0800aa01 	.word	0x0800aa01
 800a9a4:	0800aa0b 	.word	0x0800aa0b
 800a9a8:	0800a9f7 	.word	0x0800a9f7
 800a9ac:	0800aa0b 	.word	0x0800aa0b
 800a9b0:	0800a9cf 	.word	0x0800a9cf
 800a9b4:	0800a9c5 	.word	0x0800a9c5
 800a9b8:	0800aa0b 	.word	0x0800aa0b
 800a9bc:	0800a9e3 	.word	0x0800a9e3
 800a9c0:	0800a9d9 	.word	0x0800a9d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f9dc 	bl	800ad84 <USBD_GetDescriptor>
          break;
 800a9cc:	e022      	b.n	800aa14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fb3f 	bl	800b054 <USBD_SetAddress>
          break;
 800a9d6:	e01d      	b.n	800aa14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fb7e 	bl	800b0dc <USBD_SetConfig>
          break;
 800a9e0:	e018      	b.n	800aa14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fc07 	bl	800b1f8 <USBD_GetConfig>
          break;
 800a9ea:	e013      	b.n	800aa14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fc37 	bl	800b262 <USBD_GetStatus>
          break;
 800a9f4:	e00e      	b.n	800aa14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fc65 	bl	800b2c8 <USBD_SetFeature>
          break;
 800a9fe:	e009      	b.n	800aa14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fc74 	bl	800b2f0 <USBD_ClrFeature>
          break;
 800aa08:	e004      	b.n	800aa14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fcca 	bl	800b3a6 <USBD_CtlError>
          break;
 800aa12:	bf00      	nop
      }
      break;
 800aa14:	e004      	b.n	800aa20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fcc4 	bl	800b3a6 <USBD_CtlError>
      break;
 800aa1e:	bf00      	nop
  }

  return ret;
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop

0800aa2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa42:	2b40      	cmp	r3, #64	@ 0x40
 800aa44:	d005      	beq.n	800aa52 <USBD_StdItfReq+0x26>
 800aa46:	2b40      	cmp	r3, #64	@ 0x40
 800aa48:	d82e      	bhi.n	800aaa8 <USBD_StdItfReq+0x7c>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <USBD_StdItfReq+0x26>
 800aa4e:	2b20      	cmp	r3, #32
 800aa50:	d12a      	bne.n	800aaa8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d81d      	bhi.n	800aa9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	889b      	ldrh	r3, [r3, #4]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d813      	bhi.n	800aa90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	88db      	ldrh	r3, [r3, #6]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d110      	bne.n	800aaa4 <USBD_StdItfReq+0x78>
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fd55 	bl	800b538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa8e:	e009      	b.n	800aaa4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fc87 	bl	800b3a6 <USBD_CtlError>
          break;
 800aa98:	e004      	b.n	800aaa4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fc82 	bl	800b3a6 <USBD_CtlError>
          break;
 800aaa2:	e000      	b.n	800aaa6 <USBD_StdItfReq+0x7a>
          break;
 800aaa4:	bf00      	nop
      }
      break;
 800aaa6:	e004      	b.n	800aab2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fc7b 	bl	800b3a6 <USBD_CtlError>
      break;
 800aab0:	bf00      	nop
  }

  return USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	889b      	ldrh	r3, [r3, #4]
 800aace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aad8:	2b40      	cmp	r3, #64	@ 0x40
 800aada:	d007      	beq.n	800aaec <USBD_StdEPReq+0x30>
 800aadc:	2b40      	cmp	r3, #64	@ 0x40
 800aade:	f200 8146 	bhi.w	800ad6e <USBD_StdEPReq+0x2b2>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <USBD_StdEPReq+0x40>
 800aae6:	2b20      	cmp	r3, #32
 800aae8:	f040 8141 	bne.w	800ad6e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	4798      	blx	r3
      break;
 800aafa:	e13d      	b.n	800ad78 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d10a      	bne.n	800ab1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	4798      	blx	r3
 800ab16:	4603      	mov	r3, r0
 800ab18:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
 800ab1c:	e12d      	b.n	800ad7a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	785b      	ldrb	r3, [r3, #1]
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d007      	beq.n	800ab36 <USBD_StdEPReq+0x7a>
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	f300 811b 	bgt.w	800ad62 <USBD_StdEPReq+0x2a6>
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d072      	beq.n	800ac16 <USBD_StdEPReq+0x15a>
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d03a      	beq.n	800abaa <USBD_StdEPReq+0xee>
 800ab34:	e115      	b.n	800ad62 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d002      	beq.n	800ab46 <USBD_StdEPReq+0x8a>
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d015      	beq.n	800ab70 <USBD_StdEPReq+0xb4>
 800ab44:	e02b      	b.n	800ab9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00c      	beq.n	800ab66 <USBD_StdEPReq+0xaa>
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	2b80      	cmp	r3, #128	@ 0x80
 800ab50:	d009      	beq.n	800ab66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 f8c0 	bl	800bcdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab5c:	2180      	movs	r1, #128	@ 0x80
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 f8bc 	bl	800bcdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab64:	e020      	b.n	800aba8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fc1c 	bl	800b3a6 <USBD_CtlError>
              break;
 800ab6e:	e01b      	b.n	800aba8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	885b      	ldrh	r3, [r3, #2]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10e      	bne.n	800ab96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00b      	beq.n	800ab96 <USBD_StdEPReq+0xda>
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	2b80      	cmp	r3, #128	@ 0x80
 800ab82:	d008      	beq.n	800ab96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	88db      	ldrh	r3, [r3, #6]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d104      	bne.n	800ab96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 f8a3 	bl	800bcdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fcce 	bl	800b538 <USBD_CtlSendStatus>

              break;
 800ab9c:	e004      	b.n	800aba8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fc00 	bl	800b3a6 <USBD_CtlError>
              break;
 800aba6:	bf00      	nop
          }
          break;
 800aba8:	e0e0      	b.n	800ad6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d002      	beq.n	800abba <USBD_StdEPReq+0xfe>
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d015      	beq.n	800abe4 <USBD_StdEPReq+0x128>
 800abb8:	e026      	b.n	800ac08 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abba:	7bbb      	ldrb	r3, [r7, #14]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00c      	beq.n	800abda <USBD_StdEPReq+0x11e>
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	2b80      	cmp	r3, #128	@ 0x80
 800abc4:	d009      	beq.n	800abda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f001 f886 	bl	800bcdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800abd0:	2180      	movs	r1, #128	@ 0x80
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f001 f882 	bl	800bcdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abd8:	e01c      	b.n	800ac14 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fbe2 	bl	800b3a6 <USBD_CtlError>
              break;
 800abe2:	e017      	b.n	800ac14 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	885b      	ldrh	r3, [r3, #2]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d112      	bne.n	800ac12 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f001 f88d 	bl	800bd1a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fc99 	bl	800b538 <USBD_CtlSendStatus>
              }
              break;
 800ac06:	e004      	b.n	800ac12 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fbcb 	bl	800b3a6 <USBD_CtlError>
              break;
 800ac10:	e000      	b.n	800ac14 <USBD_StdEPReq+0x158>
              break;
 800ac12:	bf00      	nop
          }
          break;
 800ac14:	e0aa      	b.n	800ad6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d002      	beq.n	800ac26 <USBD_StdEPReq+0x16a>
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d032      	beq.n	800ac8a <USBD_StdEPReq+0x1ce>
 800ac24:	e097      	b.n	800ad56 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d007      	beq.n	800ac3c <USBD_StdEPReq+0x180>
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	2b80      	cmp	r3, #128	@ 0x80
 800ac30:	d004      	beq.n	800ac3c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fbb6 	bl	800b3a6 <USBD_CtlError>
                break;
 800ac3a:	e091      	b.n	800ad60 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	da0b      	bge.n	800ac5c <USBD_StdEPReq+0x1a0>
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
 800ac46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	3310      	adds	r3, #16
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	4413      	add	r3, r2
 800ac58:	3304      	adds	r3, #4
 800ac5a:	e00b      	b.n	800ac74 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
 800ac5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac62:	4613      	mov	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4413      	add	r3, r2
 800ac72:	3304      	adds	r3, #4
 800ac74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fbfa 	bl	800b47c <USBD_CtlSendData>
              break;
 800ac88:	e06a      	b.n	800ad60 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da11      	bge.n	800acb6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	f003 020f 	and.w	r2, r3, #15
 800ac98:	6879      	ldr	r1, [r7, #4]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	440b      	add	r3, r1
 800aca4:	3318      	adds	r3, #24
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d117      	bne.n	800acdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fb79 	bl	800b3a6 <USBD_CtlError>
                  break;
 800acb4:	e054      	b.n	800ad60 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	f003 020f 	and.w	r2, r3, #15
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	4613      	mov	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	440b      	add	r3, r1
 800acc8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d104      	bne.n	800acdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fb66 	bl	800b3a6 <USBD_CtlError>
                  break;
 800acda:	e041      	b.n	800ad60 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da0b      	bge.n	800acfc <USBD_StdEPReq+0x240>
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	3310      	adds	r3, #16
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4413      	add	r3, r2
 800acf8:	3304      	adds	r3, #4
 800acfa:	e00b      	b.n	800ad14 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	4413      	add	r3, r2
 800ad12:	3304      	adds	r3, #4
 800ad14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <USBD_StdEPReq+0x266>
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
 800ad1e:	2b80      	cmp	r3, #128	@ 0x80
 800ad20:	d103      	bne.n	800ad2a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	e00e      	b.n	800ad48 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f001 f812 	bl	800bd58 <USBD_LL_IsStallEP>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	e002      	b.n	800ad48 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fb94 	bl	800b47c <USBD_CtlSendData>
              break;
 800ad54:	e004      	b.n	800ad60 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fb24 	bl	800b3a6 <USBD_CtlError>
              break;
 800ad5e:	bf00      	nop
          }
          break;
 800ad60:	e004      	b.n	800ad6c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fb1e 	bl	800b3a6 <USBD_CtlError>
          break;
 800ad6a:	bf00      	nop
      }
      break;
 800ad6c:	e004      	b.n	800ad78 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fb18 	bl	800b3a6 <USBD_CtlError>
      break;
 800ad76:	bf00      	nop
  }

  return ret;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	885b      	ldrh	r3, [r3, #2]
 800ad9e:	0a1b      	lsrs	r3, r3, #8
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	3b01      	subs	r3, #1
 800ada4:	2b06      	cmp	r3, #6
 800ada6:	f200 8128 	bhi.w	800affa <USBD_GetDescriptor+0x276>
 800adaa:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <USBD_GetDescriptor+0x2c>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800adcd 	.word	0x0800adcd
 800adb4:	0800ade5 	.word	0x0800ade5
 800adb8:	0800ae25 	.word	0x0800ae25
 800adbc:	0800affb 	.word	0x0800affb
 800adc0:	0800affb 	.word	0x0800affb
 800adc4:	0800af9b 	.word	0x0800af9b
 800adc8:	0800afc7 	.word	0x0800afc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7c12      	ldrb	r2, [r2, #16]
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	4610      	mov	r0, r2
 800adde:	4798      	blx	r3
 800ade0:	60f8      	str	r0, [r7, #12]
      break;
 800ade2:	e112      	b.n	800b00a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7c1b      	ldrb	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10d      	bne.n	800ae08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf4:	f107 0208 	add.w	r2, r7, #8
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
 800adfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3301      	adds	r3, #1
 800ae02:	2202      	movs	r2, #2
 800ae04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae06:	e100      	b.n	800b00a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae10:	f107 0208 	add.w	r2, r7, #8
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
 800ae18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	2202      	movs	r2, #2
 800ae20:	701a      	strb	r2, [r3, #0]
      break;
 800ae22:	e0f2      	b.n	800b00a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	885b      	ldrh	r3, [r3, #2]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b05      	cmp	r3, #5
 800ae2c:	f200 80ac 	bhi.w	800af88 <USBD_GetDescriptor+0x204>
 800ae30:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <USBD_GetDescriptor+0xb4>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800ae51 	.word	0x0800ae51
 800ae3c:	0800ae85 	.word	0x0800ae85
 800ae40:	0800aeb9 	.word	0x0800aeb9
 800ae44:	0800aeed 	.word	0x0800aeed
 800ae48:	0800af21 	.word	0x0800af21
 800ae4c:	0800af55 	.word	0x0800af55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00b      	beq.n	800ae74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	7c12      	ldrb	r2, [r2, #16]
 800ae68:	f107 0108 	add.w	r1, r7, #8
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	4798      	blx	r3
 800ae70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae72:	e091      	b.n	800af98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fa95 	bl	800b3a6 <USBD_CtlError>
            err++;
 800ae7c:	7afb      	ldrb	r3, [r7, #11]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	72fb      	strb	r3, [r7, #11]
          break;
 800ae82:	e089      	b.n	800af98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ae96:	689b      	ldr	r3, [r3, #8]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	7c12      	ldrb	r2, [r2, #16]
 800ae9c:	f107 0108 	add.w	r1, r7, #8
 800aea0:	4610      	mov	r0, r2
 800aea2:	4798      	blx	r3
 800aea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aea6:	e077      	b.n	800af98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fa7b 	bl	800b3a6 <USBD_CtlError>
            err++;
 800aeb0:	7afb      	ldrb	r3, [r7, #11]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	72fb      	strb	r3, [r7, #11]
          break;
 800aeb6:	e06f      	b.n	800af98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00b      	beq.n	800aedc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	7c12      	ldrb	r2, [r2, #16]
 800aed0:	f107 0108 	add.w	r1, r7, #8
 800aed4:	4610      	mov	r0, r2
 800aed6:	4798      	blx	r3
 800aed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeda:	e05d      	b.n	800af98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fa61 	bl	800b3a6 <USBD_CtlError>
            err++;
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	3301      	adds	r3, #1
 800aee8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeea:	e055      	b.n	800af98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	7c12      	ldrb	r2, [r2, #16]
 800af04:	f107 0108 	add.w	r1, r7, #8
 800af08:	4610      	mov	r0, r2
 800af0a:	4798      	blx	r3
 800af0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af0e:	e043      	b.n	800af98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fa47 	bl	800b3a6 <USBD_CtlError>
            err++;
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	3301      	adds	r3, #1
 800af1c:	72fb      	strb	r3, [r7, #11]
          break;
 800af1e:	e03b      	b.n	800af98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	7c12      	ldrb	r2, [r2, #16]
 800af38:	f107 0108 	add.w	r1, r7, #8
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
 800af40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af42:	e029      	b.n	800af98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa2d 	bl	800b3a6 <USBD_CtlError>
            err++;
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	3301      	adds	r3, #1
 800af50:	72fb      	strb	r3, [r7, #11]
          break;
 800af52:	e021      	b.n	800af98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	7c12      	ldrb	r2, [r2, #16]
 800af6c:	f107 0108 	add.w	r1, r7, #8
 800af70:	4610      	mov	r0, r2
 800af72:	4798      	blx	r3
 800af74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af76:	e00f      	b.n	800af98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa13 	bl	800b3a6 <USBD_CtlError>
            err++;
 800af80:	7afb      	ldrb	r3, [r7, #11]
 800af82:	3301      	adds	r3, #1
 800af84:	72fb      	strb	r3, [r7, #11]
          break;
 800af86:	e007      	b.n	800af98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa0b 	bl	800b3a6 <USBD_CtlError>
          err++;
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	3301      	adds	r3, #1
 800af94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800af96:	e038      	b.n	800b00a <USBD_GetDescriptor+0x286>
 800af98:	e037      	b.n	800b00a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	7c1b      	ldrb	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d109      	bne.n	800afb6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afaa:	f107 0208 	add.w	r2, r7, #8
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
 800afb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afb4:	e029      	b.n	800b00a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f9f4 	bl	800b3a6 <USBD_CtlError>
        err++;
 800afbe:	7afb      	ldrb	r3, [r7, #11]
 800afc0:	3301      	adds	r3, #1
 800afc2:	72fb      	strb	r3, [r7, #11]
      break;
 800afc4:	e021      	b.n	800b00a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7c1b      	ldrb	r3, [r3, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10d      	bne.n	800afea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd6:	f107 0208 	add.w	r2, r7, #8
 800afda:	4610      	mov	r0, r2
 800afdc:	4798      	blx	r3
 800afde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	2207      	movs	r2, #7
 800afe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afe8:	e00f      	b.n	800b00a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f9da 	bl	800b3a6 <USBD_CtlError>
        err++;
 800aff2:	7afb      	ldrb	r3, [r7, #11]
 800aff4:	3301      	adds	r3, #1
 800aff6:	72fb      	strb	r3, [r7, #11]
      break;
 800aff8:	e007      	b.n	800b00a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f9d2 	bl	800b3a6 <USBD_CtlError>
      err++;
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	3301      	adds	r3, #1
 800b006:	72fb      	strb	r3, [r7, #11]
      break;
 800b008:	bf00      	nop
  }

  if (err != 0U)
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d11c      	bne.n	800b04a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b010:	893b      	ldrh	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d011      	beq.n	800b03a <USBD_GetDescriptor+0x2b6>
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	88db      	ldrh	r3, [r3, #6]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00d      	beq.n	800b03a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	88da      	ldrh	r2, [r3, #6]
 800b022:	893b      	ldrh	r3, [r7, #8]
 800b024:	4293      	cmp	r3, r2
 800b026:	bf28      	it	cs
 800b028:	4613      	movcs	r3, r2
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b02e:	893b      	ldrh	r3, [r7, #8]
 800b030:	461a      	mov	r2, r3
 800b032:	68f9      	ldr	r1, [r7, #12]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fa21 	bl	800b47c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	88db      	ldrh	r3, [r3, #6]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d104      	bne.n	800b04c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fa78 	bl	800b538 <USBD_CtlSendStatus>
 800b048:	e000      	b.n	800b04c <USBD_GetDescriptor+0x2c8>
    return;
 800b04a:	bf00      	nop
    }
  }
}
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop

0800b054 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	889b      	ldrh	r3, [r3, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d130      	bne.n	800b0c8 <USBD_SetAddress+0x74>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	88db      	ldrh	r3, [r3, #6]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d12c      	bne.n	800b0c8 <USBD_SetAddress+0x74>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	885b      	ldrh	r3, [r3, #2]
 800b072:	2b7f      	cmp	r3, #127	@ 0x7f
 800b074:	d828      	bhi.n	800b0c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	885b      	ldrh	r3, [r3, #2]
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d104      	bne.n	800b096 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f989 	bl	800b3a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b094:	e01d      	b.n	800b0d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	7bfa      	ldrb	r2, [r7, #15]
 800b09a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fe84 	bl	800bdb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fa45 	bl	800b538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d004      	beq.n	800b0be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0bc:	e009      	b.n	800b0d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c6:	e004      	b.n	800b0d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f96b 	bl	800b3a6 <USBD_CtlError>
  }
}
 800b0d0:	bf00      	nop
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	885b      	ldrh	r3, [r3, #2]
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	4b41      	ldr	r3, [pc, #260]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b0ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0f0:	4b40      	ldr	r3, [pc, #256]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d904      	bls.n	800b102 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f953 	bl	800b3a6 <USBD_CtlError>
 800b100:	e075      	b.n	800b1ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d002      	beq.n	800b112 <USBD_SetConfig+0x36>
 800b10c:	2b03      	cmp	r3, #3
 800b10e:	d023      	beq.n	800b158 <USBD_SetConfig+0x7c>
 800b110:	e062      	b.n	800b1d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b112:	4b38      	ldr	r3, [pc, #224]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d01a      	beq.n	800b150 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b11a:	4b36      	ldr	r3, [pc, #216]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2203      	movs	r2, #3
 800b128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b12c:	4b31      	ldr	r3, [pc, #196]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff f9e4 	bl	800a500 <USBD_SetClassConfig>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d104      	bne.n	800b148 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f930 	bl	800b3a6 <USBD_CtlError>
            return;
 800b146:	e052      	b.n	800b1ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f9f5 	bl	800b538 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b14e:	e04e      	b.n	800b1ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f9f1 	bl	800b538 <USBD_CtlSendStatus>
        break;
 800b156:	e04a      	b.n	800b1ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b158:	4b26      	ldr	r3, [pc, #152]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d112      	bne.n	800b186 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2202      	movs	r2, #2
 800b164:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b168:	4b22      	ldr	r3, [pc, #136]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	461a      	mov	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b172:	4b20      	ldr	r3, [pc, #128]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7ff f9e0 	bl	800a53e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f9da 	bl	800b538 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b184:	e033      	b.n	800b1ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b186:	4b1b      	ldr	r3, [pc, #108]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	429a      	cmp	r2, r3
 800b192:	d01d      	beq.n	800b1d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff f9ce 	bl	800a53e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b1a2:	4b14      	ldr	r3, [pc, #80]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1ac:	4b11      	ldr	r3, [pc, #68]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff f9a4 	bl	800a500 <USBD_SetClassConfig>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d104      	bne.n	800b1c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f8f0 	bl	800b3a6 <USBD_CtlError>
            return;
 800b1c6:	e012      	b.n	800b1ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9b5 	bl	800b538 <USBD_CtlSendStatus>
        break;
 800b1ce:	e00e      	b.n	800b1ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f9b1 	bl	800b538 <USBD_CtlSendStatus>
        break;
 800b1d6:	e00a      	b.n	800b1ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f8e3 	bl	800b3a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b1e0:	4b04      	ldr	r3, [pc, #16]	@ (800b1f4 <USBD_SetConfig+0x118>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff f9a9 	bl	800a53e <USBD_ClrClassConfig>
        break;
 800b1ec:	bf00      	nop
    }
  }
}
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20000958 	.word	0x20000958

0800b1f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	88db      	ldrh	r3, [r3, #6]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d004      	beq.n	800b214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f8ca 	bl	800b3a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b212:	e022      	b.n	800b25a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	dc02      	bgt.n	800b224 <USBD_GetConfig+0x2c>
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dc03      	bgt.n	800b22a <USBD_GetConfig+0x32>
 800b222:	e015      	b.n	800b250 <USBD_GetConfig+0x58>
 800b224:	2b03      	cmp	r3, #3
 800b226:	d00b      	beq.n	800b240 <USBD_GetConfig+0x48>
 800b228:	e012      	b.n	800b250 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3308      	adds	r3, #8
 800b234:	2201      	movs	r2, #1
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f91f 	bl	800b47c <USBD_CtlSendData>
        break;
 800b23e:	e00c      	b.n	800b25a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3304      	adds	r3, #4
 800b244:	2201      	movs	r2, #1
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f917 	bl	800b47c <USBD_CtlSendData>
        break;
 800b24e:	e004      	b.n	800b25a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f8a7 	bl	800b3a6 <USBD_CtlError>
        break;
 800b258:	bf00      	nop
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b272:	3b01      	subs	r3, #1
 800b274:	2b02      	cmp	r3, #2
 800b276:	d81e      	bhi.n	800b2b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	88db      	ldrh	r3, [r3, #6]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d004      	beq.n	800b28a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f88f 	bl	800b3a6 <USBD_CtlError>
        break;
 800b288:	e01a      	b.n	800b2c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	f043 0202 	orr.w	r2, r3, #2
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	330c      	adds	r3, #12
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f8e4 	bl	800b47c <USBD_CtlSendData>
      break;
 800b2b4:	e004      	b.n	800b2c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f874 	bl	800b3a6 <USBD_CtlError>
      break;
 800b2be:	bf00      	nop
  }
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	885b      	ldrh	r3, [r3, #2]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d106      	bne.n	800b2e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f928 	bl	800b538 <USBD_CtlSendStatus>
  }
}
 800b2e8:	bf00      	nop
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b300:	3b01      	subs	r3, #1
 800b302:	2b02      	cmp	r3, #2
 800b304:	d80b      	bhi.n	800b31e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	885b      	ldrh	r3, [r3, #2]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d10c      	bne.n	800b328 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f90e 	bl	800b538 <USBD_CtlSendStatus>
      }
      break;
 800b31c:	e004      	b.n	800b328 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f840 	bl	800b3a6 <USBD_CtlError>
      break;
 800b326:	e000      	b.n	800b32a <USBD_ClrFeature+0x3a>
      break;
 800b328:	bf00      	nop
  }
}
 800b32a:	bf00      	nop
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	781a      	ldrb	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	785a      	ldrb	r2, [r3, #1]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	3302      	adds	r3, #2
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	461a      	mov	r2, r3
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	3303      	adds	r3, #3
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	021b      	lsls	r3, r3, #8
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	4413      	add	r3, r2
 800b360:	b29a      	uxth	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	3304      	adds	r3, #4
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	461a      	mov	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	3305      	adds	r3, #5
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	021b      	lsls	r3, r3, #8
 800b376:	b29b      	uxth	r3, r3
 800b378:	4413      	add	r3, r2
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	3306      	adds	r3, #6
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	3307      	adds	r3, #7
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	021b      	lsls	r3, r3, #8
 800b390:	b29b      	uxth	r3, r3
 800b392:	4413      	add	r3, r2
 800b394:	b29a      	uxth	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	80da      	strh	r2, [r3, #6]

}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b082      	sub	sp, #8
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b3b0:	2180      	movs	r1, #128	@ 0x80
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fc92 	bl	800bcdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fc8e 	bl	800bcdc <USBD_LL_StallEP>
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d032      	beq.n	800b444 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 f834 	bl	800b44c <USBD_GetLen>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	75fa      	strb	r2, [r7, #23]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	7812      	ldrb	r2, [r2, #0]
 800b402:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	75fa      	strb	r2, [r7, #23]
 800b40a:	461a      	mov	r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4413      	add	r3, r2
 800b410:	2203      	movs	r2, #3
 800b412:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b414:	e012      	b.n	800b43c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	60fa      	str	r2, [r7, #12]
 800b41c:	7dfa      	ldrb	r2, [r7, #23]
 800b41e:	1c51      	adds	r1, r2, #1
 800b420:	75f9      	strb	r1, [r7, #23]
 800b422:	4611      	mov	r1, r2
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	440a      	add	r2, r1
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	75fa      	strb	r2, [r7, #23]
 800b432:	461a      	mov	r2, r3
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	4413      	add	r3, r2
 800b438:	2200      	movs	r2, #0
 800b43a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e8      	bne.n	800b416 <USBD_GetString+0x4e>
    }
  }
}
 800b444:	bf00      	nop
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b454:	2300      	movs	r3, #0
 800b456:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b458:	e005      	b.n	800b466 <USBD_GetLen+0x1a>
  {
    len++;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	3301      	adds	r3, #1
 800b45e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3301      	adds	r3, #1
 800b464:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1f5      	bne.n	800b45a <USBD_GetLen+0xe>
  }

  return len;
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	4613      	mov	r3, r2
 800b488:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2202      	movs	r2, #2
 800b48e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b492:	88fa      	ldrh	r2, [r7, #6]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b498:	88fa      	ldrh	r2, [r7, #6]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b49e:	88fb      	ldrh	r3, [r7, #6]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fca2 	bl	800bdee <USBD_LL_Transmit>

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4c2:	88fb      	ldrh	r3, [r7, #6]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 fc90 	bl	800bdee <USBD_LL_Transmit>

  return USBD_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b4f6:	88fa      	ldrh	r2, [r7, #6]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4fe:	88fb      	ldrh	r3, [r7, #6]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	2100      	movs	r1, #0
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 fc95 	bl	800be34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b522:	88fb      	ldrh	r3, [r7, #6]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	2100      	movs	r1, #0
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 fc83 	bl	800be34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2204      	movs	r2, #4
 800b544:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b548:	2300      	movs	r3, #0
 800b54a:	2200      	movs	r2, #0
 800b54c:	2100      	movs	r1, #0
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fc4d 	bl	800bdee <USBD_LL_Transmit>

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2205      	movs	r2, #5
 800b56a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b56e:	2300      	movs	r3, #0
 800b570:	2200      	movs	r2, #0
 800b572:	2100      	movs	r1, #0
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fc5d 	bl	800be34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b588:	2200      	movs	r2, #0
 800b58a:	4912      	ldr	r1, [pc, #72]	@ (800b5d4 <MX_USB_DEVICE_Init+0x50>)
 800b58c:	4812      	ldr	r0, [pc, #72]	@ (800b5d8 <MX_USB_DEVICE_Init+0x54>)
 800b58e:	f7fe ff5b 	bl	800a448 <USBD_Init>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b598:	f7f5 ffda 	bl	8001550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b59c:	490f      	ldr	r1, [pc, #60]	@ (800b5dc <MX_USB_DEVICE_Init+0x58>)
 800b59e:	480e      	ldr	r0, [pc, #56]	@ (800b5d8 <MX_USB_DEVICE_Init+0x54>)
 800b5a0:	f7fe ff7d 	bl	800a49e <USBD_RegisterClass>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5aa:	f7f5 ffd1 	bl	8001550 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5ae:	490c      	ldr	r1, [pc, #48]	@ (800b5e0 <MX_USB_DEVICE_Init+0x5c>)
 800b5b0:	4809      	ldr	r0, [pc, #36]	@ (800b5d8 <MX_USB_DEVICE_Init+0x54>)
 800b5b2:	f7fe feab 	bl	800a30c <USBD_CDC_RegisterInterface>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5bc:	f7f5 ffc8 	bl	8001550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5c0:	4805      	ldr	r0, [pc, #20]	@ (800b5d8 <MX_USB_DEVICE_Init+0x54>)
 800b5c2:	f7fe ff86 	bl	800a4d2 <USBD_Start>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5cc:	f7f5 ffc0 	bl	8001550 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5d0:	bf00      	nop
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	20000134 	.word	0x20000134
 800b5d8:	2000095c 	.word	0x2000095c
 800b5dc:	20000020 	.word	0x20000020
 800b5e0:	20000124 	.word	0x20000124

0800b5e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4905      	ldr	r1, [pc, #20]	@ (800b600 <CDC_Init_FS+0x1c>)
 800b5ec:	4805      	ldr	r0, [pc, #20]	@ (800b604 <CDC_Init_FS+0x20>)
 800b5ee:	f7fe fea4 	bl	800a33a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5f2:	4905      	ldr	r1, [pc, #20]	@ (800b608 <CDC_Init_FS+0x24>)
 800b5f4:	4803      	ldr	r0, [pc, #12]	@ (800b604 <CDC_Init_FS+0x20>)
 800b5f6:	f7fe feba 	bl	800a36e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	20001020 	.word	0x20001020
 800b604:	2000095c 	.word	0x2000095c
 800b608:	20000c20 	.word	0x20000c20

0800b60c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b612:	4618      	mov	r0, r3
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	6039      	str	r1, [r7, #0]
 800b626:	71fb      	strb	r3, [r7, #7]
 800b628:	4613      	mov	r3, r2
 800b62a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b62c:	79fb      	ldrb	r3, [r7, #7]
 800b62e:	2b23      	cmp	r3, #35	@ 0x23
 800b630:	d84a      	bhi.n	800b6c8 <CDC_Control_FS+0xac>
 800b632:	a201      	add	r2, pc, #4	@ (adr r2, 800b638 <CDC_Control_FS+0x1c>)
 800b634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b638:	0800b6c9 	.word	0x0800b6c9
 800b63c:	0800b6c9 	.word	0x0800b6c9
 800b640:	0800b6c9 	.word	0x0800b6c9
 800b644:	0800b6c9 	.word	0x0800b6c9
 800b648:	0800b6c9 	.word	0x0800b6c9
 800b64c:	0800b6c9 	.word	0x0800b6c9
 800b650:	0800b6c9 	.word	0x0800b6c9
 800b654:	0800b6c9 	.word	0x0800b6c9
 800b658:	0800b6c9 	.word	0x0800b6c9
 800b65c:	0800b6c9 	.word	0x0800b6c9
 800b660:	0800b6c9 	.word	0x0800b6c9
 800b664:	0800b6c9 	.word	0x0800b6c9
 800b668:	0800b6c9 	.word	0x0800b6c9
 800b66c:	0800b6c9 	.word	0x0800b6c9
 800b670:	0800b6c9 	.word	0x0800b6c9
 800b674:	0800b6c9 	.word	0x0800b6c9
 800b678:	0800b6c9 	.word	0x0800b6c9
 800b67c:	0800b6c9 	.word	0x0800b6c9
 800b680:	0800b6c9 	.word	0x0800b6c9
 800b684:	0800b6c9 	.word	0x0800b6c9
 800b688:	0800b6c9 	.word	0x0800b6c9
 800b68c:	0800b6c9 	.word	0x0800b6c9
 800b690:	0800b6c9 	.word	0x0800b6c9
 800b694:	0800b6c9 	.word	0x0800b6c9
 800b698:	0800b6c9 	.word	0x0800b6c9
 800b69c:	0800b6c9 	.word	0x0800b6c9
 800b6a0:	0800b6c9 	.word	0x0800b6c9
 800b6a4:	0800b6c9 	.word	0x0800b6c9
 800b6a8:	0800b6c9 	.word	0x0800b6c9
 800b6ac:	0800b6c9 	.word	0x0800b6c9
 800b6b0:	0800b6c9 	.word	0x0800b6c9
 800b6b4:	0800b6c9 	.word	0x0800b6c9
 800b6b8:	0800b6c9 	.word	0x0800b6c9
 800b6bc:	0800b6c9 	.word	0x0800b6c9
 800b6c0:	0800b6c9 	.word	0x0800b6c9
 800b6c4:	0800b6c9 	.word	0x0800b6c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6c8:	bf00      	nop
  }

  return (USBD_OK);
 800b6ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	480f      	ldr	r0, [pc, #60]	@ (800b724 <CDC_Receive_FS+0x4c>)
 800b6e6:	f7fe fe42 	bl	800a36e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6ea:	480e      	ldr	r0, [pc, #56]	@ (800b724 <CDC_Receive_FS+0x4c>)
 800b6ec:	f7fe fe82 	bl	800a3f4 <USBD_CDC_ReceivePacket>

  memset (rxBuf, '\0', 64);  // clear the buffer
 800b6f0:	2240      	movs	r2, #64	@ 0x40
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	480c      	ldr	r0, [pc, #48]	@ (800b728 <CDC_Receive_FS+0x50>)
 800b6f6:	f001 fbe8 	bl	800ceca <memset>
  uint8_t len = (uint8_t)*Len;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	73fb      	strb	r3, [r7, #15]
  memcpy(rxBuf, Buf, len);  // copy the data to the buffer
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	461a      	mov	r2, r3
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	4808      	ldr	r0, [pc, #32]	@ (800b728 <CDC_Receive_FS+0x50>)
 800b708:	f001 fc5f 	bl	800cfca <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	461a      	mov	r2, r3
 800b710:	2100      	movs	r1, #0
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 fbd9 	bl	800ceca <memset>

  return (USBD_OK);
 800b718:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	2000095c 	.word	0x2000095c
 800b728:	2000050c 	.word	0x2000050c

0800b72c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	460b      	mov	r3, r1
 800b736:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b73c:	4b0d      	ldr	r3, [pc, #52]	@ (800b774 <CDC_Transmit_FS+0x48>)
 800b73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b742:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b74e:	2301      	movs	r3, #1
 800b750:	e00b      	b.n	800b76a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b752:	887b      	ldrh	r3, [r7, #2]
 800b754:	461a      	mov	r2, r3
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	4806      	ldr	r0, [pc, #24]	@ (800b774 <CDC_Transmit_FS+0x48>)
 800b75a:	f7fe fdee 	bl	800a33a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b75e:	4805      	ldr	r0, [pc, #20]	@ (800b774 <CDC_Transmit_FS+0x48>)
 800b760:	f7fe fe19 	bl	800a396 <USBD_CDC_TransmitPacket>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b768:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	2000095c 	.word	0x2000095c

0800b778 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	6039      	str	r1, [r7, #0]
 800b782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	2212      	movs	r2, #18
 800b788:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b78a:	4b03      	ldr	r3, [pc, #12]	@ (800b798 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	20000150 	.word	0x20000150

0800b79c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	6039      	str	r1, [r7, #0]
 800b7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2204      	movs	r2, #4
 800b7ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7ae:	4b03      	ldr	r3, [pc, #12]	@ (800b7bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	20000164 	.word	0x20000164

0800b7c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d105      	bne.n	800b7de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	4907      	ldr	r1, [pc, #28]	@ (800b7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7d6:	4808      	ldr	r0, [pc, #32]	@ (800b7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7d8:	f7ff fdf6 	bl	800b3c8 <USBD_GetString>
 800b7dc:	e004      	b.n	800b7e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	4904      	ldr	r1, [pc, #16]	@ (800b7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7e2:	4805      	ldr	r0, [pc, #20]	@ (800b7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7e4:	f7ff fdf0 	bl	800b3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7e8:	4b02      	ldr	r3, [pc, #8]	@ (800b7f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20001420 	.word	0x20001420
 800b7f8:	080106f4 	.word	0x080106f4

0800b7fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	4603      	mov	r3, r0
 800b804:	6039      	str	r1, [r7, #0]
 800b806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	4904      	ldr	r1, [pc, #16]	@ (800b81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b80c:	4804      	ldr	r0, [pc, #16]	@ (800b820 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b80e:	f7ff fddb 	bl	800b3c8 <USBD_GetString>
  return USBD_StrDesc;
 800b812:	4b02      	ldr	r3, [pc, #8]	@ (800b81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	20001420 	.word	0x20001420
 800b820:	0801070c 	.word	0x0801070c

0800b824 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	6039      	str	r1, [r7, #0]
 800b82e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	221a      	movs	r2, #26
 800b834:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b836:	f000 f843 	bl	800b8c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b83a:	4b02      	ldr	r3, [pc, #8]	@ (800b844 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20000168 	.word	0x20000168

0800b848 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	6039      	str	r1, [r7, #0]
 800b852:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d105      	bne.n	800b866 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	4907      	ldr	r1, [pc, #28]	@ (800b87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b85e:	4808      	ldr	r0, [pc, #32]	@ (800b880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b860:	f7ff fdb2 	bl	800b3c8 <USBD_GetString>
 800b864:	e004      	b.n	800b870 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	4904      	ldr	r1, [pc, #16]	@ (800b87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b86a:	4805      	ldr	r0, [pc, #20]	@ (800b880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b86c:	f7ff fdac 	bl	800b3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b870:	4b02      	ldr	r3, [pc, #8]	@ (800b87c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	20001420 	.word	0x20001420
 800b880:	08010720 	.word	0x08010720

0800b884 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b890:	79fb      	ldrb	r3, [r7, #7]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	4907      	ldr	r1, [pc, #28]	@ (800b8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b89a:	4808      	ldr	r0, [pc, #32]	@ (800b8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b89c:	f7ff fd94 	bl	800b3c8 <USBD_GetString>
 800b8a0:	e004      	b.n	800b8ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	4904      	ldr	r1, [pc, #16]	@ (800b8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8a6:	4805      	ldr	r0, [pc, #20]	@ (800b8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8a8:	f7ff fd8e 	bl	800b3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8ac:	4b02      	ldr	r3, [pc, #8]	@ (800b8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20001420 	.word	0x20001420
 800b8bc:	0801072c 	.word	0x0801072c

0800b8c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b904 <Get_SerialNum+0x44>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b908 <Get_SerialNum+0x48>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b8d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b90c <Get_SerialNum+0x4c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4413      	add	r3, r2
 800b8de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d009      	beq.n	800b8fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b8e6:	2208      	movs	r2, #8
 800b8e8:	4909      	ldr	r1, [pc, #36]	@ (800b910 <Get_SerialNum+0x50>)
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f000 f814 	bl	800b918 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b8f0:	2204      	movs	r2, #4
 800b8f2:	4908      	ldr	r1, [pc, #32]	@ (800b914 <Get_SerialNum+0x54>)
 800b8f4:	68b8      	ldr	r0, [r7, #8]
 800b8f6:	f000 f80f 	bl	800b918 <IntToUnicode>
  }
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	1ffff7ac 	.word	0x1ffff7ac
 800b908:	1ffff7b0 	.word	0x1ffff7b0
 800b90c:	1ffff7b4 	.word	0x1ffff7b4
 800b910:	2000016a 	.word	0x2000016a
 800b914:	2000017a 	.word	0x2000017a

0800b918 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	4613      	mov	r3, r2
 800b924:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b92a:	2300      	movs	r3, #0
 800b92c:	75fb      	strb	r3, [r7, #23]
 800b92e:	e027      	b.n	800b980 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	0f1b      	lsrs	r3, r3, #28
 800b934:	2b09      	cmp	r3, #9
 800b936:	d80b      	bhi.n	800b950 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	0f1b      	lsrs	r3, r3, #28
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	4619      	mov	r1, r3
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	440b      	add	r3, r1
 800b948:	3230      	adds	r2, #48	@ 0x30
 800b94a:	b2d2      	uxtb	r2, r2
 800b94c:	701a      	strb	r2, [r3, #0]
 800b94e:	e00a      	b.n	800b966 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	0f1b      	lsrs	r3, r3, #28
 800b954:	b2da      	uxtb	r2, r3
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	4619      	mov	r1, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	440b      	add	r3, r1
 800b960:	3237      	adds	r2, #55	@ 0x37
 800b962:	b2d2      	uxtb	r2, r2
 800b964:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	3301      	adds	r3, #1
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	4413      	add	r3, r2
 800b976:	2200      	movs	r2, #0
 800b978:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	3301      	adds	r3, #1
 800b97e:	75fb      	strb	r3, [r7, #23]
 800b980:	7dfa      	ldrb	r2, [r7, #23]
 800b982:	79fb      	ldrb	r3, [r7, #7]
 800b984:	429a      	cmp	r2, r3
 800b986:	d3d3      	bcc.n	800b930 <IntToUnicode+0x18>
  }
}
 800b988:	bf00      	nop
 800b98a:	bf00      	nop
 800b98c:	371c      	adds	r7, #28
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
	...

0800b998 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08a      	sub	sp, #40	@ 0x28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9a0:	f107 0314 	add.w	r3, r7, #20
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	605a      	str	r2, [r3, #4]
 800b9aa:	609a      	str	r2, [r3, #8]
 800b9ac:	60da      	str	r2, [r3, #12]
 800b9ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a1c      	ldr	r2, [pc, #112]	@ (800ba28 <HAL_PCD_MspInit+0x90>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d131      	bne.n	800ba1e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9ba:	4b1c      	ldr	r3, [pc, #112]	@ (800ba2c <HAL_PCD_MspInit+0x94>)
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	4a1b      	ldr	r2, [pc, #108]	@ (800ba2c <HAL_PCD_MspInit+0x94>)
 800b9c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9c4:	6153      	str	r3, [r2, #20]
 800b9c6:	4b19      	ldr	r3, [pc, #100]	@ (800ba2c <HAL_PCD_MspInit+0x94>)
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9ce:	613b      	str	r3, [r7, #16]
 800b9d0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800b9d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b9d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9d8:	2302      	movs	r3, #2
 800b9da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800b9e4:	230e      	movs	r3, #14
 800b9e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9e8:	f107 0314 	add.w	r3, r7, #20
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b9f2:	f7f7 fd33 	bl	800345c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba2c <HAL_PCD_MspInit+0x94>)
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	4a0c      	ldr	r2, [pc, #48]	@ (800ba2c <HAL_PCD_MspInit+0x94>)
 800b9fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba00:	61d3      	str	r3, [r2, #28]
 800ba02:	4b0a      	ldr	r3, [pc, #40]	@ (800ba2c <HAL_PCD_MspInit+0x94>)
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2100      	movs	r1, #0
 800ba12:	2014      	movs	r0, #20
 800ba14:	f7f7 fc0d 	bl	8003232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800ba18:	2014      	movs	r0, #20
 800ba1a:	f7f7 fc26 	bl	800326a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ba1e:	bf00      	nop
 800ba20:	3728      	adds	r7, #40	@ 0x28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	40005c00 	.word	0x40005c00
 800ba2c:	40021000 	.word	0x40021000

0800ba30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ba44:	4619      	mov	r1, r3
 800ba46:	4610      	mov	r0, r2
 800ba48:	f7fe fd8c 	bl	800a564 <USBD_LL_SetupStage>
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800ba66:	78fa      	ldrb	r2, [r7, #3]
 800ba68:	6879      	ldr	r1, [r7, #4]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4413      	add	r3, r2
 800ba70:	00db      	lsls	r3, r3, #3
 800ba72:	440b      	add	r3, r1
 800ba74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	f7fe fdbe 	bl	800a5fe <USBD_LL_DataOutStage>
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800ba9c:	78fa      	ldrb	r2, [r7, #3]
 800ba9e:	6879      	ldr	r1, [r7, #4]
 800baa0:	4613      	mov	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	440b      	add	r3, r1
 800baaa:	3324      	adds	r3, #36	@ 0x24
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	4619      	mov	r1, r3
 800bab2:	f7fe fe15 	bl	800a6e0 <USBD_LL_DataInStage>
}
 800bab6:	bf00      	nop
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe ff28 	bl	800a922 <USBD_LL_SOF>
}
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bae2:	2301      	movs	r3, #1
 800bae4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	795b      	ldrb	r3, [r3, #5]
 800baea:	2b02      	cmp	r3, #2
 800baec:	d001      	beq.n	800baf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800baee:	f7f5 fd2f 	bl	8001550 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800baf8:	7bfa      	ldrb	r2, [r7, #15]
 800bafa:	4611      	mov	r1, r2
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fe fed5 	bl	800a8ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fe fe8e 	bl	800a82a <USBD_LL_Reset>
}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fed0 	bl	800a8cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	7a5b      	ldrb	r3, [r3, #9]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb34:	4b04      	ldr	r3, [pc, #16]	@ (800bb48 <HAL_PCD_SuspendCallback+0x30>)
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	4a03      	ldr	r2, [pc, #12]	@ (800bb48 <HAL_PCD_SuspendCallback+0x30>)
 800bb3a:	f043 0306 	orr.w	r3, r3, #6
 800bb3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb40:	bf00      	nop
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	e000ed00 	.word	0xe000ed00

0800bb4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fe fecb 	bl	800a8f6 <USBD_LL_Resume>
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bb70:	4a28      	ldr	r2, [pc, #160]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a26      	ldr	r2, [pc, #152]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bb7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bb80:	4b24      	ldr	r3, [pc, #144]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bb82:	4a25      	ldr	r2, [pc, #148]	@ (800bc18 <USBD_LL_Init+0xb0>)
 800bb84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bb86:	4b23      	ldr	r3, [pc, #140]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bb88:	2208      	movs	r2, #8
 800bb8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bb8c:	4b21      	ldr	r3, [pc, #132]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bb8e:	2202      	movs	r2, #2
 800bb90:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb92:	4b20      	ldr	r3, [pc, #128]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bb94:	2202      	movs	r2, #2
 800bb96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb98:	4b1e      	ldr	r3, [pc, #120]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bba0:	2200      	movs	r2, #0
 800bba2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bba4:	481b      	ldr	r0, [pc, #108]	@ (800bc14 <USBD_LL_Init+0xac>)
 800bba6:	f7f8 fccd 	bl	8004544 <HAL_PCD_Init>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bbb0:	f7f5 fcce 	bl	8001550 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bbba:	2318      	movs	r3, #24
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	f7fa f946 	bl	8005e50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bbca:	2358      	movs	r3, #88	@ 0x58
 800bbcc:	2200      	movs	r2, #0
 800bbce:	2180      	movs	r1, #128	@ 0x80
 800bbd0:	f7fa f93e 	bl	8005e50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bbda:	23c0      	movs	r3, #192	@ 0xc0
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2181      	movs	r1, #129	@ 0x81
 800bbe0:	f7fa f936 	bl	8005e50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bbea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bbee:	2200      	movs	r2, #0
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	f7fa f92d 	bl	8005e50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bbfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc00:	2200      	movs	r2, #0
 800bc02:	2182      	movs	r1, #130	@ 0x82
 800bc04:	f7fa f924 	bl	8005e50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20001620 	.word	0x20001620
 800bc18:	40005c00 	.word	0x40005c00

0800bc1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f8 fd4d 	bl	80046d2 <HAL_PCD_Start>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 f952 	bl	800bee8 <USBD_Get_USB_Status>
 800bc44:	4603      	mov	r3, r0
 800bc46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	4608      	mov	r0, r1
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	461a      	mov	r2, r3
 800bc60:	4603      	mov	r3, r0
 800bc62:	70fb      	strb	r3, [r7, #3]
 800bc64:	460b      	mov	r3, r1
 800bc66:	70bb      	strb	r3, [r7, #2]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800bc7a:	78bb      	ldrb	r3, [r7, #2]
 800bc7c:	883a      	ldrh	r2, [r7, #0]
 800bc7e:	78f9      	ldrb	r1, [r7, #3]
 800bc80:	f7f8 fe45 	bl	800490e <HAL_PCD_EP_Open>
 800bc84:	4603      	mov	r3, r0
 800bc86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f92c 	bl	800bee8 <USBD_Get_USB_Status>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bcb8:	78fa      	ldrb	r2, [r7, #3]
 800bcba:	4611      	mov	r1, r2
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7f8 fe83 	bl	80049c8 <HAL_PCD_EP_Close>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f000 f90d 	bl	800bee8 <USBD_Get_USB_Status>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bcf6:	78fa      	ldrb	r2, [r7, #3]
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7f8 ff2c 	bl	8004b58 <HAL_PCD_EP_SetStall>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 f8ee 	bl	800bee8 <USBD_Get_USB_Status>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	460b      	mov	r3, r1
 800bd24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bd34:	78fa      	ldrb	r2, [r7, #3]
 800bd36:	4611      	mov	r1, r2
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7f8 ff5f 	bl	8004bfc <HAL_PCD_EP_ClrStall>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 f8cf 	bl	800bee8 <USBD_Get_USB_Status>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bd6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	da0b      	bge.n	800bd8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd7a:	68f9      	ldr	r1, [r7, #12]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	440b      	add	r3, r1
 800bd86:	3312      	adds	r3, #18
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	e00b      	b.n	800bda4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd8c:	78fb      	ldrb	r3, [r7, #3]
 800bd8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd92:	68f9      	ldr	r1, [r7, #12]
 800bd94:	4613      	mov	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	4413      	add	r3, r2
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	440b      	add	r3, r1
 800bd9e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800bda2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bdca:	78fa      	ldrb	r2, [r7, #3]
 800bdcc:	4611      	mov	r1, r2
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f8 fd79 	bl	80048c6 <HAL_PCD_SetAddress>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd8:	7bfb      	ldrb	r3, [r7, #15]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f000 f884 	bl	800bee8 <USBD_Get_USB_Status>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b086      	sub	sp, #24
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	72fb      	strb	r3, [r7, #11]
 800bdfe:	4613      	mov	r3, r2
 800be00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800be10:	893b      	ldrh	r3, [r7, #8]
 800be12:	7af9      	ldrb	r1, [r7, #11]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	f7f8 fe68 	bl	8004aea <HAL_PCD_EP_Transmit>
 800be1a:	4603      	mov	r3, r0
 800be1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
 800be20:	4618      	mov	r0, r3
 800be22:	f000 f861 	bl	800bee8 <USBD_Get_USB_Status>
 800be26:	4603      	mov	r3, r0
 800be28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3718      	adds	r7, #24
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	607a      	str	r2, [r7, #4]
 800be3e:	461a      	mov	r2, r3
 800be40:	460b      	mov	r3, r1
 800be42:	72fb      	strb	r3, [r7, #11]
 800be44:	4613      	mov	r3, r2
 800be46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be48:	2300      	movs	r3, #0
 800be4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800be56:	893b      	ldrh	r3, [r7, #8]
 800be58:	7af9      	ldrb	r1, [r7, #11]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	f7f8 fdfc 	bl	8004a58 <HAL_PCD_EP_Receive>
 800be60:	4603      	mov	r3, r0
 800be62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	4618      	mov	r0, r3
 800be68:	f000 f83e 	bl	800bee8 <USBD_Get_USB_Status>
 800be6c:	4603      	mov	r3, r0
 800be6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be70:	7dbb      	ldrb	r3, [r7, #22]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3718      	adds	r7, #24
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b082      	sub	sp, #8
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	460b      	mov	r3, r1
 800be84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800be8c:	78fa      	ldrb	r2, [r7, #3]
 800be8e:	4611      	mov	r1, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f7f8 fe12 	bl	8004aba <HAL_PCD_EP_GetRxCount>
 800be96:	4603      	mov	r3, r0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bea8:	4b03      	ldr	r3, [pc, #12]	@ (800beb8 <USBD_static_malloc+0x18>)
}
 800beaa:	4618      	mov	r0, r3
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	200018f4 	.word	0x200018f4

0800bebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]

}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d817      	bhi.n	800bf2c <USBD_Get_USB_Status+0x44>
 800befc:	a201      	add	r2, pc, #4	@ (adr r2, 800bf04 <USBD_Get_USB_Status+0x1c>)
 800befe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf02:	bf00      	nop
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf1b 	.word	0x0800bf1b
 800bf0c:	0800bf21 	.word	0x0800bf21
 800bf10:	0800bf27 	.word	0x0800bf27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	73fb      	strb	r3, [r7, #15]
    break;
 800bf18:	e00b      	b.n	800bf32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf1e:	e008      	b.n	800bf32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf20:	2301      	movs	r3, #1
 800bf22:	73fb      	strb	r3, [r7, #15]
    break;
 800bf24:	e005      	b.n	800bf32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf26:	2302      	movs	r3, #2
 800bf28:	73fb      	strb	r3, [r7, #15]
    break;
 800bf2a:	e002      	b.n	800bf32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf30:	bf00      	nop
  }
  return usb_status;
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <__cvt>:
 800bf40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf44:	ec57 6b10 	vmov	r6, r7, d0
 800bf48:	2f00      	cmp	r7, #0
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	463b      	mov	r3, r7
 800bf50:	bfbb      	ittet	lt
 800bf52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bf56:	461f      	movlt	r7, r3
 800bf58:	2300      	movge	r3, #0
 800bf5a:	232d      	movlt	r3, #45	@ 0x2d
 800bf5c:	700b      	strb	r3, [r1, #0]
 800bf5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bf64:	4691      	mov	r9, r2
 800bf66:	f023 0820 	bic.w	r8, r3, #32
 800bf6a:	bfbc      	itt	lt
 800bf6c:	4632      	movlt	r2, r6
 800bf6e:	4616      	movlt	r6, r2
 800bf70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bf74:	d005      	beq.n	800bf82 <__cvt+0x42>
 800bf76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bf7a:	d100      	bne.n	800bf7e <__cvt+0x3e>
 800bf7c:	3401      	adds	r4, #1
 800bf7e:	2102      	movs	r1, #2
 800bf80:	e000      	b.n	800bf84 <__cvt+0x44>
 800bf82:	2103      	movs	r1, #3
 800bf84:	ab03      	add	r3, sp, #12
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	ab02      	add	r3, sp, #8
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	ec47 6b10 	vmov	d0, r6, r7
 800bf90:	4653      	mov	r3, sl
 800bf92:	4622      	mov	r2, r4
 800bf94:	f001 f8b8 	bl	800d108 <_dtoa_r>
 800bf98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	d119      	bne.n	800bfd4 <__cvt+0x94>
 800bfa0:	f019 0f01 	tst.w	r9, #1
 800bfa4:	d00e      	beq.n	800bfc4 <__cvt+0x84>
 800bfa6:	eb00 0904 	add.w	r9, r0, r4
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2300      	movs	r3, #0
 800bfae:	4630      	mov	r0, r6
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	f7f4 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb6:	b108      	cbz	r0, 800bfbc <__cvt+0x7c>
 800bfb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfbc:	2230      	movs	r2, #48	@ 0x30
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	454b      	cmp	r3, r9
 800bfc2:	d31e      	bcc.n	800c002 <__cvt+0xc2>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfc8:	1b5b      	subs	r3, r3, r5
 800bfca:	4628      	mov	r0, r5
 800bfcc:	6013      	str	r3, [r2, #0]
 800bfce:	b004      	add	sp, #16
 800bfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bfd8:	eb00 0904 	add.w	r9, r0, r4
 800bfdc:	d1e5      	bne.n	800bfaa <__cvt+0x6a>
 800bfde:	7803      	ldrb	r3, [r0, #0]
 800bfe0:	2b30      	cmp	r3, #48	@ 0x30
 800bfe2:	d10a      	bne.n	800bffa <__cvt+0xba>
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	4630      	mov	r0, r6
 800bfea:	4639      	mov	r1, r7
 800bfec:	f7f4 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bff0:	b918      	cbnz	r0, 800bffa <__cvt+0xba>
 800bff2:	f1c4 0401 	rsb	r4, r4, #1
 800bff6:	f8ca 4000 	str.w	r4, [sl]
 800bffa:	f8da 3000 	ldr.w	r3, [sl]
 800bffe:	4499      	add	r9, r3
 800c000:	e7d3      	b.n	800bfaa <__cvt+0x6a>
 800c002:	1c59      	adds	r1, r3, #1
 800c004:	9103      	str	r1, [sp, #12]
 800c006:	701a      	strb	r2, [r3, #0]
 800c008:	e7d9      	b.n	800bfbe <__cvt+0x7e>

0800c00a <__exponent>:
 800c00a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c00c:	2900      	cmp	r1, #0
 800c00e:	bfba      	itte	lt
 800c010:	4249      	neglt	r1, r1
 800c012:	232d      	movlt	r3, #45	@ 0x2d
 800c014:	232b      	movge	r3, #43	@ 0x2b
 800c016:	2909      	cmp	r1, #9
 800c018:	7002      	strb	r2, [r0, #0]
 800c01a:	7043      	strb	r3, [r0, #1]
 800c01c:	dd29      	ble.n	800c072 <__exponent+0x68>
 800c01e:	f10d 0307 	add.w	r3, sp, #7
 800c022:	461d      	mov	r5, r3
 800c024:	270a      	movs	r7, #10
 800c026:	461a      	mov	r2, r3
 800c028:	fbb1 f6f7 	udiv	r6, r1, r7
 800c02c:	fb07 1416 	mls	r4, r7, r6, r1
 800c030:	3430      	adds	r4, #48	@ 0x30
 800c032:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c036:	460c      	mov	r4, r1
 800c038:	2c63      	cmp	r4, #99	@ 0x63
 800c03a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c03e:	4631      	mov	r1, r6
 800c040:	dcf1      	bgt.n	800c026 <__exponent+0x1c>
 800c042:	3130      	adds	r1, #48	@ 0x30
 800c044:	1e94      	subs	r4, r2, #2
 800c046:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c04a:	1c41      	adds	r1, r0, #1
 800c04c:	4623      	mov	r3, r4
 800c04e:	42ab      	cmp	r3, r5
 800c050:	d30a      	bcc.n	800c068 <__exponent+0x5e>
 800c052:	f10d 0309 	add.w	r3, sp, #9
 800c056:	1a9b      	subs	r3, r3, r2
 800c058:	42ac      	cmp	r4, r5
 800c05a:	bf88      	it	hi
 800c05c:	2300      	movhi	r3, #0
 800c05e:	3302      	adds	r3, #2
 800c060:	4403      	add	r3, r0
 800c062:	1a18      	subs	r0, r3, r0
 800c064:	b003      	add	sp, #12
 800c066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c068:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c06c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c070:	e7ed      	b.n	800c04e <__exponent+0x44>
 800c072:	2330      	movs	r3, #48	@ 0x30
 800c074:	3130      	adds	r1, #48	@ 0x30
 800c076:	7083      	strb	r3, [r0, #2]
 800c078:	70c1      	strb	r1, [r0, #3]
 800c07a:	1d03      	adds	r3, r0, #4
 800c07c:	e7f1      	b.n	800c062 <__exponent+0x58>
	...

0800c080 <_printf_float>:
 800c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c084:	b08d      	sub	sp, #52	@ 0x34
 800c086:	460c      	mov	r4, r1
 800c088:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c08c:	4616      	mov	r6, r2
 800c08e:	461f      	mov	r7, r3
 800c090:	4605      	mov	r5, r0
 800c092:	f000 ff23 	bl	800cedc <_localeconv_r>
 800c096:	6803      	ldr	r3, [r0, #0]
 800c098:	9304      	str	r3, [sp, #16]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7f4 f8e8 	bl	8000270 <strlen>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a8:	9005      	str	r0, [sp, #20]
 800c0aa:	3307      	adds	r3, #7
 800c0ac:	f023 0307 	bic.w	r3, r3, #7
 800c0b0:	f103 0208 	add.w	r2, r3, #8
 800c0b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c0b8:	f8d4 b000 	ldr.w	fp, [r4]
 800c0bc:	f8c8 2000 	str.w	r2, [r8]
 800c0c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c0c8:	9307      	str	r3, [sp, #28]
 800c0ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c0d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0d6:	4b9c      	ldr	r3, [pc, #624]	@ (800c348 <_printf_float+0x2c8>)
 800c0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0dc:	f7f4 fd26 	bl	8000b2c <__aeabi_dcmpun>
 800c0e0:	bb70      	cbnz	r0, 800c140 <_printf_float+0xc0>
 800c0e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0e6:	4b98      	ldr	r3, [pc, #608]	@ (800c348 <_printf_float+0x2c8>)
 800c0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ec:	f7f4 fd00 	bl	8000af0 <__aeabi_dcmple>
 800c0f0:	bb30      	cbnz	r0, 800c140 <_printf_float+0xc0>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 fcef 	bl	8000adc <__aeabi_dcmplt>
 800c0fe:	b110      	cbz	r0, 800c106 <_printf_float+0x86>
 800c100:	232d      	movs	r3, #45	@ 0x2d
 800c102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c106:	4a91      	ldr	r2, [pc, #580]	@ (800c34c <_printf_float+0x2cc>)
 800c108:	4b91      	ldr	r3, [pc, #580]	@ (800c350 <_printf_float+0x2d0>)
 800c10a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c10e:	bf94      	ite	ls
 800c110:	4690      	movls	r8, r2
 800c112:	4698      	movhi	r8, r3
 800c114:	2303      	movs	r3, #3
 800c116:	6123      	str	r3, [r4, #16]
 800c118:	f02b 0304 	bic.w	r3, fp, #4
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	f04f 0900 	mov.w	r9, #0
 800c122:	9700      	str	r7, [sp, #0]
 800c124:	4633      	mov	r3, r6
 800c126:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c128:	4621      	mov	r1, r4
 800c12a:	4628      	mov	r0, r5
 800c12c:	f000 f9d2 	bl	800c4d4 <_printf_common>
 800c130:	3001      	adds	r0, #1
 800c132:	f040 808d 	bne.w	800c250 <_printf_float+0x1d0>
 800c136:	f04f 30ff 	mov.w	r0, #4294967295
 800c13a:	b00d      	add	sp, #52	@ 0x34
 800c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c140:	4642      	mov	r2, r8
 800c142:	464b      	mov	r3, r9
 800c144:	4640      	mov	r0, r8
 800c146:	4649      	mov	r1, r9
 800c148:	f7f4 fcf0 	bl	8000b2c <__aeabi_dcmpun>
 800c14c:	b140      	cbz	r0, 800c160 <_printf_float+0xe0>
 800c14e:	464b      	mov	r3, r9
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfbc      	itt	lt
 800c154:	232d      	movlt	r3, #45	@ 0x2d
 800c156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c15a:	4a7e      	ldr	r2, [pc, #504]	@ (800c354 <_printf_float+0x2d4>)
 800c15c:	4b7e      	ldr	r3, [pc, #504]	@ (800c358 <_printf_float+0x2d8>)
 800c15e:	e7d4      	b.n	800c10a <_printf_float+0x8a>
 800c160:	6863      	ldr	r3, [r4, #4]
 800c162:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c166:	9206      	str	r2, [sp, #24]
 800c168:	1c5a      	adds	r2, r3, #1
 800c16a:	d13b      	bne.n	800c1e4 <_printf_float+0x164>
 800c16c:	2306      	movs	r3, #6
 800c16e:	6063      	str	r3, [r4, #4]
 800c170:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c174:	2300      	movs	r3, #0
 800c176:	6022      	str	r2, [r4, #0]
 800c178:	9303      	str	r3, [sp, #12]
 800c17a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c17c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c180:	ab09      	add	r3, sp, #36	@ 0x24
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	6861      	ldr	r1, [r4, #4]
 800c186:	ec49 8b10 	vmov	d0, r8, r9
 800c18a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c18e:	4628      	mov	r0, r5
 800c190:	f7ff fed6 	bl	800bf40 <__cvt>
 800c194:	9b06      	ldr	r3, [sp, #24]
 800c196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c198:	2b47      	cmp	r3, #71	@ 0x47
 800c19a:	4680      	mov	r8, r0
 800c19c:	d129      	bne.n	800c1f2 <_printf_float+0x172>
 800c19e:	1cc8      	adds	r0, r1, #3
 800c1a0:	db02      	blt.n	800c1a8 <_printf_float+0x128>
 800c1a2:	6863      	ldr	r3, [r4, #4]
 800c1a4:	4299      	cmp	r1, r3
 800c1a6:	dd41      	ble.n	800c22c <_printf_float+0x1ac>
 800c1a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c1ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c1b0:	3901      	subs	r1, #1
 800c1b2:	4652      	mov	r2, sl
 800c1b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c1b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1ba:	f7ff ff26 	bl	800c00a <__exponent>
 800c1be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1c0:	1813      	adds	r3, r2, r0
 800c1c2:	2a01      	cmp	r2, #1
 800c1c4:	4681      	mov	r9, r0
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	dc02      	bgt.n	800c1d0 <_printf_float+0x150>
 800c1ca:	6822      	ldr	r2, [r4, #0]
 800c1cc:	07d2      	lsls	r2, r2, #31
 800c1ce:	d501      	bpl.n	800c1d4 <_printf_float+0x154>
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	6123      	str	r3, [r4, #16]
 800c1d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0a2      	beq.n	800c122 <_printf_float+0xa2>
 800c1dc:	232d      	movs	r3, #45	@ 0x2d
 800c1de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1e2:	e79e      	b.n	800c122 <_printf_float+0xa2>
 800c1e4:	9a06      	ldr	r2, [sp, #24]
 800c1e6:	2a47      	cmp	r2, #71	@ 0x47
 800c1e8:	d1c2      	bne.n	800c170 <_printf_float+0xf0>
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1c0      	bne.n	800c170 <_printf_float+0xf0>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e7bd      	b.n	800c16e <_printf_float+0xee>
 800c1f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c1f6:	d9db      	bls.n	800c1b0 <_printf_float+0x130>
 800c1f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c1fc:	d118      	bne.n	800c230 <_printf_float+0x1b0>
 800c1fe:	2900      	cmp	r1, #0
 800c200:	6863      	ldr	r3, [r4, #4]
 800c202:	dd0b      	ble.n	800c21c <_printf_float+0x19c>
 800c204:	6121      	str	r1, [r4, #16]
 800c206:	b913      	cbnz	r3, 800c20e <_printf_float+0x18e>
 800c208:	6822      	ldr	r2, [r4, #0]
 800c20a:	07d0      	lsls	r0, r2, #31
 800c20c:	d502      	bpl.n	800c214 <_printf_float+0x194>
 800c20e:	3301      	adds	r3, #1
 800c210:	440b      	add	r3, r1
 800c212:	6123      	str	r3, [r4, #16]
 800c214:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c216:	f04f 0900 	mov.w	r9, #0
 800c21a:	e7db      	b.n	800c1d4 <_printf_float+0x154>
 800c21c:	b913      	cbnz	r3, 800c224 <_printf_float+0x1a4>
 800c21e:	6822      	ldr	r2, [r4, #0]
 800c220:	07d2      	lsls	r2, r2, #31
 800c222:	d501      	bpl.n	800c228 <_printf_float+0x1a8>
 800c224:	3302      	adds	r3, #2
 800c226:	e7f4      	b.n	800c212 <_printf_float+0x192>
 800c228:	2301      	movs	r3, #1
 800c22a:	e7f2      	b.n	800c212 <_printf_float+0x192>
 800c22c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c232:	4299      	cmp	r1, r3
 800c234:	db05      	blt.n	800c242 <_printf_float+0x1c2>
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	6121      	str	r1, [r4, #16]
 800c23a:	07d8      	lsls	r0, r3, #31
 800c23c:	d5ea      	bpl.n	800c214 <_printf_float+0x194>
 800c23e:	1c4b      	adds	r3, r1, #1
 800c240:	e7e7      	b.n	800c212 <_printf_float+0x192>
 800c242:	2900      	cmp	r1, #0
 800c244:	bfd4      	ite	le
 800c246:	f1c1 0202 	rsble	r2, r1, #2
 800c24a:	2201      	movgt	r2, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	e7e0      	b.n	800c212 <_printf_float+0x192>
 800c250:	6823      	ldr	r3, [r4, #0]
 800c252:	055a      	lsls	r2, r3, #21
 800c254:	d407      	bmi.n	800c266 <_printf_float+0x1e6>
 800c256:	6923      	ldr	r3, [r4, #16]
 800c258:	4642      	mov	r2, r8
 800c25a:	4631      	mov	r1, r6
 800c25c:	4628      	mov	r0, r5
 800c25e:	47b8      	blx	r7
 800c260:	3001      	adds	r0, #1
 800c262:	d12b      	bne.n	800c2bc <_printf_float+0x23c>
 800c264:	e767      	b.n	800c136 <_printf_float+0xb6>
 800c266:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c26a:	f240 80dd 	bls.w	800c428 <_printf_float+0x3a8>
 800c26e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c272:	2200      	movs	r2, #0
 800c274:	2300      	movs	r3, #0
 800c276:	f7f4 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d033      	beq.n	800c2e6 <_printf_float+0x266>
 800c27e:	4a37      	ldr	r2, [pc, #220]	@ (800c35c <_printf_float+0x2dc>)
 800c280:	2301      	movs	r3, #1
 800c282:	4631      	mov	r1, r6
 800c284:	4628      	mov	r0, r5
 800c286:	47b8      	blx	r7
 800c288:	3001      	adds	r0, #1
 800c28a:	f43f af54 	beq.w	800c136 <_printf_float+0xb6>
 800c28e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c292:	4543      	cmp	r3, r8
 800c294:	db02      	blt.n	800c29c <_printf_float+0x21c>
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	07d8      	lsls	r0, r3, #31
 800c29a:	d50f      	bpl.n	800c2bc <_printf_float+0x23c>
 800c29c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f af45 	beq.w	800c136 <_printf_float+0xb6>
 800c2ac:	f04f 0900 	mov.w	r9, #0
 800c2b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2b4:	f104 0a1a 	add.w	sl, r4, #26
 800c2b8:	45c8      	cmp	r8, r9
 800c2ba:	dc09      	bgt.n	800c2d0 <_printf_float+0x250>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	079b      	lsls	r3, r3, #30
 800c2c0:	f100 8103 	bmi.w	800c4ca <_printf_float+0x44a>
 800c2c4:	68e0      	ldr	r0, [r4, #12]
 800c2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c8:	4298      	cmp	r0, r3
 800c2ca:	bfb8      	it	lt
 800c2cc:	4618      	movlt	r0, r3
 800c2ce:	e734      	b.n	800c13a <_printf_float+0xba>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	4652      	mov	r2, sl
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b8      	blx	r7
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f43f af2b 	beq.w	800c136 <_printf_float+0xb6>
 800c2e0:	f109 0901 	add.w	r9, r9, #1
 800c2e4:	e7e8      	b.n	800c2b8 <_printf_float+0x238>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dc39      	bgt.n	800c360 <_printf_float+0x2e0>
 800c2ec:	4a1b      	ldr	r2, [pc, #108]	@ (800c35c <_printf_float+0x2dc>)
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	47b8      	blx	r7
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	f43f af1d 	beq.w	800c136 <_printf_float+0xb6>
 800c2fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c300:	ea59 0303 	orrs.w	r3, r9, r3
 800c304:	d102      	bne.n	800c30c <_printf_float+0x28c>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	07d9      	lsls	r1, r3, #31
 800c30a:	d5d7      	bpl.n	800c2bc <_printf_float+0x23c>
 800c30c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c310:	4631      	mov	r1, r6
 800c312:	4628      	mov	r0, r5
 800c314:	47b8      	blx	r7
 800c316:	3001      	adds	r0, #1
 800c318:	f43f af0d 	beq.w	800c136 <_printf_float+0xb6>
 800c31c:	f04f 0a00 	mov.w	sl, #0
 800c320:	f104 0b1a 	add.w	fp, r4, #26
 800c324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c326:	425b      	negs	r3, r3
 800c328:	4553      	cmp	r3, sl
 800c32a:	dc01      	bgt.n	800c330 <_printf_float+0x2b0>
 800c32c:	464b      	mov	r3, r9
 800c32e:	e793      	b.n	800c258 <_printf_float+0x1d8>
 800c330:	2301      	movs	r3, #1
 800c332:	465a      	mov	r2, fp
 800c334:	4631      	mov	r1, r6
 800c336:	4628      	mov	r0, r5
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	f43f aefb 	beq.w	800c136 <_printf_float+0xb6>
 800c340:	f10a 0a01 	add.w	sl, sl, #1
 800c344:	e7ee      	b.n	800c324 <_printf_float+0x2a4>
 800c346:	bf00      	nop
 800c348:	7fefffff 	.word	0x7fefffff
 800c34c:	0801076c 	.word	0x0801076c
 800c350:	08010770 	.word	0x08010770
 800c354:	08010774 	.word	0x08010774
 800c358:	08010778 	.word	0x08010778
 800c35c:	0801077c 	.word	0x0801077c
 800c360:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c362:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c366:	4553      	cmp	r3, sl
 800c368:	bfa8      	it	ge
 800c36a:	4653      	movge	r3, sl
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	4699      	mov	r9, r3
 800c370:	dc36      	bgt.n	800c3e0 <_printf_float+0x360>
 800c372:	f04f 0b00 	mov.w	fp, #0
 800c376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c37a:	f104 021a 	add.w	r2, r4, #26
 800c37e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c380:	9306      	str	r3, [sp, #24]
 800c382:	eba3 0309 	sub.w	r3, r3, r9
 800c386:	455b      	cmp	r3, fp
 800c388:	dc31      	bgt.n	800c3ee <_printf_float+0x36e>
 800c38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38c:	459a      	cmp	sl, r3
 800c38e:	dc3a      	bgt.n	800c406 <_printf_float+0x386>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	07da      	lsls	r2, r3, #31
 800c394:	d437      	bmi.n	800c406 <_printf_float+0x386>
 800c396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c398:	ebaa 0903 	sub.w	r9, sl, r3
 800c39c:	9b06      	ldr	r3, [sp, #24]
 800c39e:	ebaa 0303 	sub.w	r3, sl, r3
 800c3a2:	4599      	cmp	r9, r3
 800c3a4:	bfa8      	it	ge
 800c3a6:	4699      	movge	r9, r3
 800c3a8:	f1b9 0f00 	cmp.w	r9, #0
 800c3ac:	dc33      	bgt.n	800c416 <_printf_float+0x396>
 800c3ae:	f04f 0800 	mov.w	r8, #0
 800c3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3b6:	f104 0b1a 	add.w	fp, r4, #26
 800c3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c3c0:	eba3 0309 	sub.w	r3, r3, r9
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	f77f af79 	ble.w	800c2bc <_printf_float+0x23c>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	465a      	mov	r2, fp
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b8      	blx	r7
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	f43f aeae 	beq.w	800c136 <_printf_float+0xb6>
 800c3da:	f108 0801 	add.w	r8, r8, #1
 800c3de:	e7ec      	b.n	800c3ba <_printf_float+0x33a>
 800c3e0:	4642      	mov	r2, r8
 800c3e2:	4631      	mov	r1, r6
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	47b8      	blx	r7
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d1c2      	bne.n	800c372 <_printf_float+0x2f2>
 800c3ec:	e6a3      	b.n	800c136 <_printf_float+0xb6>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	9206      	str	r2, [sp, #24]
 800c3f6:	47b8      	blx	r7
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	f43f ae9c 	beq.w	800c136 <_printf_float+0xb6>
 800c3fe:	9a06      	ldr	r2, [sp, #24]
 800c400:	f10b 0b01 	add.w	fp, fp, #1
 800c404:	e7bb      	b.n	800c37e <_printf_float+0x2fe>
 800c406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c40a:	4631      	mov	r1, r6
 800c40c:	4628      	mov	r0, r5
 800c40e:	47b8      	blx	r7
 800c410:	3001      	adds	r0, #1
 800c412:	d1c0      	bne.n	800c396 <_printf_float+0x316>
 800c414:	e68f      	b.n	800c136 <_printf_float+0xb6>
 800c416:	9a06      	ldr	r2, [sp, #24]
 800c418:	464b      	mov	r3, r9
 800c41a:	4442      	add	r2, r8
 800c41c:	4631      	mov	r1, r6
 800c41e:	4628      	mov	r0, r5
 800c420:	47b8      	blx	r7
 800c422:	3001      	adds	r0, #1
 800c424:	d1c3      	bne.n	800c3ae <_printf_float+0x32e>
 800c426:	e686      	b.n	800c136 <_printf_float+0xb6>
 800c428:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c42c:	f1ba 0f01 	cmp.w	sl, #1
 800c430:	dc01      	bgt.n	800c436 <_printf_float+0x3b6>
 800c432:	07db      	lsls	r3, r3, #31
 800c434:	d536      	bpl.n	800c4a4 <_printf_float+0x424>
 800c436:	2301      	movs	r3, #1
 800c438:	4642      	mov	r2, r8
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b8      	blx	r7
 800c440:	3001      	adds	r0, #1
 800c442:	f43f ae78 	beq.w	800c136 <_printf_float+0xb6>
 800c446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c44a:	4631      	mov	r1, r6
 800c44c:	4628      	mov	r0, r5
 800c44e:	47b8      	blx	r7
 800c450:	3001      	adds	r0, #1
 800c452:	f43f ae70 	beq.w	800c136 <_printf_float+0xb6>
 800c456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c45a:	2200      	movs	r2, #0
 800c45c:	2300      	movs	r3, #0
 800c45e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c462:	f7f4 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 800c466:	b9c0      	cbnz	r0, 800c49a <_printf_float+0x41a>
 800c468:	4653      	mov	r3, sl
 800c46a:	f108 0201 	add.w	r2, r8, #1
 800c46e:	4631      	mov	r1, r6
 800c470:	4628      	mov	r0, r5
 800c472:	47b8      	blx	r7
 800c474:	3001      	adds	r0, #1
 800c476:	d10c      	bne.n	800c492 <_printf_float+0x412>
 800c478:	e65d      	b.n	800c136 <_printf_float+0xb6>
 800c47a:	2301      	movs	r3, #1
 800c47c:	465a      	mov	r2, fp
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	f43f ae56 	beq.w	800c136 <_printf_float+0xb6>
 800c48a:	f108 0801 	add.w	r8, r8, #1
 800c48e:	45d0      	cmp	r8, sl
 800c490:	dbf3      	blt.n	800c47a <_printf_float+0x3fa>
 800c492:	464b      	mov	r3, r9
 800c494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c498:	e6df      	b.n	800c25a <_printf_float+0x1da>
 800c49a:	f04f 0800 	mov.w	r8, #0
 800c49e:	f104 0b1a 	add.w	fp, r4, #26
 800c4a2:	e7f4      	b.n	800c48e <_printf_float+0x40e>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4642      	mov	r2, r8
 800c4a8:	e7e1      	b.n	800c46e <_printf_float+0x3ee>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	464a      	mov	r2, r9
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	47b8      	blx	r7
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	f43f ae3e 	beq.w	800c136 <_printf_float+0xb6>
 800c4ba:	f108 0801 	add.w	r8, r8, #1
 800c4be:	68e3      	ldr	r3, [r4, #12]
 800c4c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4c2:	1a5b      	subs	r3, r3, r1
 800c4c4:	4543      	cmp	r3, r8
 800c4c6:	dcf0      	bgt.n	800c4aa <_printf_float+0x42a>
 800c4c8:	e6fc      	b.n	800c2c4 <_printf_float+0x244>
 800c4ca:	f04f 0800 	mov.w	r8, #0
 800c4ce:	f104 0919 	add.w	r9, r4, #25
 800c4d2:	e7f4      	b.n	800c4be <_printf_float+0x43e>

0800c4d4 <_printf_common>:
 800c4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d8:	4616      	mov	r6, r2
 800c4da:	4698      	mov	r8, r3
 800c4dc:	688a      	ldr	r2, [r1, #8]
 800c4de:	690b      	ldr	r3, [r1, #16]
 800c4e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	bfb8      	it	lt
 800c4e8:	4613      	movlt	r3, r2
 800c4ea:	6033      	str	r3, [r6, #0]
 800c4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	b10a      	cbz	r2, 800c4fa <_printf_common+0x26>
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	6033      	str	r3, [r6, #0]
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	0699      	lsls	r1, r3, #26
 800c4fe:	bf42      	ittt	mi
 800c500:	6833      	ldrmi	r3, [r6, #0]
 800c502:	3302      	addmi	r3, #2
 800c504:	6033      	strmi	r3, [r6, #0]
 800c506:	6825      	ldr	r5, [r4, #0]
 800c508:	f015 0506 	ands.w	r5, r5, #6
 800c50c:	d106      	bne.n	800c51c <_printf_common+0x48>
 800c50e:	f104 0a19 	add.w	sl, r4, #25
 800c512:	68e3      	ldr	r3, [r4, #12]
 800c514:	6832      	ldr	r2, [r6, #0]
 800c516:	1a9b      	subs	r3, r3, r2
 800c518:	42ab      	cmp	r3, r5
 800c51a:	dc26      	bgt.n	800c56a <_printf_common+0x96>
 800c51c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c520:	6822      	ldr	r2, [r4, #0]
 800c522:	3b00      	subs	r3, #0
 800c524:	bf18      	it	ne
 800c526:	2301      	movne	r3, #1
 800c528:	0692      	lsls	r2, r2, #26
 800c52a:	d42b      	bmi.n	800c584 <_printf_common+0xb0>
 800c52c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c530:	4641      	mov	r1, r8
 800c532:	4638      	mov	r0, r7
 800c534:	47c8      	blx	r9
 800c536:	3001      	adds	r0, #1
 800c538:	d01e      	beq.n	800c578 <_printf_common+0xa4>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	6922      	ldr	r2, [r4, #16]
 800c53e:	f003 0306 	and.w	r3, r3, #6
 800c542:	2b04      	cmp	r3, #4
 800c544:	bf02      	ittt	eq
 800c546:	68e5      	ldreq	r5, [r4, #12]
 800c548:	6833      	ldreq	r3, [r6, #0]
 800c54a:	1aed      	subeq	r5, r5, r3
 800c54c:	68a3      	ldr	r3, [r4, #8]
 800c54e:	bf0c      	ite	eq
 800c550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c554:	2500      	movne	r5, #0
 800c556:	4293      	cmp	r3, r2
 800c558:	bfc4      	itt	gt
 800c55a:	1a9b      	subgt	r3, r3, r2
 800c55c:	18ed      	addgt	r5, r5, r3
 800c55e:	2600      	movs	r6, #0
 800c560:	341a      	adds	r4, #26
 800c562:	42b5      	cmp	r5, r6
 800c564:	d11a      	bne.n	800c59c <_printf_common+0xc8>
 800c566:	2000      	movs	r0, #0
 800c568:	e008      	b.n	800c57c <_printf_common+0xa8>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4652      	mov	r2, sl
 800c56e:	4641      	mov	r1, r8
 800c570:	4638      	mov	r0, r7
 800c572:	47c8      	blx	r9
 800c574:	3001      	adds	r0, #1
 800c576:	d103      	bne.n	800c580 <_printf_common+0xac>
 800c578:	f04f 30ff 	mov.w	r0, #4294967295
 800c57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c580:	3501      	adds	r5, #1
 800c582:	e7c6      	b.n	800c512 <_printf_common+0x3e>
 800c584:	18e1      	adds	r1, r4, r3
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	2030      	movs	r0, #48	@ 0x30
 800c58a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c58e:	4422      	add	r2, r4
 800c590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c598:	3302      	adds	r3, #2
 800c59a:	e7c7      	b.n	800c52c <_printf_common+0x58>
 800c59c:	2301      	movs	r3, #1
 800c59e:	4622      	mov	r2, r4
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	47c8      	blx	r9
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d0e6      	beq.n	800c578 <_printf_common+0xa4>
 800c5aa:	3601      	adds	r6, #1
 800c5ac:	e7d9      	b.n	800c562 <_printf_common+0x8e>
	...

0800c5b0 <_printf_i>:
 800c5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	7e0f      	ldrb	r7, [r1, #24]
 800c5b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5b8:	2f78      	cmp	r7, #120	@ 0x78
 800c5ba:	4691      	mov	r9, r2
 800c5bc:	4680      	mov	r8, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	469a      	mov	sl, r3
 800c5c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5c6:	d807      	bhi.n	800c5d8 <_printf_i+0x28>
 800c5c8:	2f62      	cmp	r7, #98	@ 0x62
 800c5ca:	d80a      	bhi.n	800c5e2 <_printf_i+0x32>
 800c5cc:	2f00      	cmp	r7, #0
 800c5ce:	f000 80d2 	beq.w	800c776 <_printf_i+0x1c6>
 800c5d2:	2f58      	cmp	r7, #88	@ 0x58
 800c5d4:	f000 80b9 	beq.w	800c74a <_printf_i+0x19a>
 800c5d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5e0:	e03a      	b.n	800c658 <_printf_i+0xa8>
 800c5e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5e6:	2b15      	cmp	r3, #21
 800c5e8:	d8f6      	bhi.n	800c5d8 <_printf_i+0x28>
 800c5ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c5f0 <_printf_i+0x40>)
 800c5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5f0:	0800c649 	.word	0x0800c649
 800c5f4:	0800c65d 	.word	0x0800c65d
 800c5f8:	0800c5d9 	.word	0x0800c5d9
 800c5fc:	0800c5d9 	.word	0x0800c5d9
 800c600:	0800c5d9 	.word	0x0800c5d9
 800c604:	0800c5d9 	.word	0x0800c5d9
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c5d9 	.word	0x0800c5d9
 800c610:	0800c5d9 	.word	0x0800c5d9
 800c614:	0800c5d9 	.word	0x0800c5d9
 800c618:	0800c5d9 	.word	0x0800c5d9
 800c61c:	0800c75d 	.word	0x0800c75d
 800c620:	0800c687 	.word	0x0800c687
 800c624:	0800c717 	.word	0x0800c717
 800c628:	0800c5d9 	.word	0x0800c5d9
 800c62c:	0800c5d9 	.word	0x0800c5d9
 800c630:	0800c77f 	.word	0x0800c77f
 800c634:	0800c5d9 	.word	0x0800c5d9
 800c638:	0800c687 	.word	0x0800c687
 800c63c:	0800c5d9 	.word	0x0800c5d9
 800c640:	0800c5d9 	.word	0x0800c5d9
 800c644:	0800c71f 	.word	0x0800c71f
 800c648:	6833      	ldr	r3, [r6, #0]
 800c64a:	1d1a      	adds	r2, r3, #4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6032      	str	r2, [r6, #0]
 800c650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c658:	2301      	movs	r3, #1
 800c65a:	e09d      	b.n	800c798 <_printf_i+0x1e8>
 800c65c:	6833      	ldr	r3, [r6, #0]
 800c65e:	6820      	ldr	r0, [r4, #0]
 800c660:	1d19      	adds	r1, r3, #4
 800c662:	6031      	str	r1, [r6, #0]
 800c664:	0606      	lsls	r6, r0, #24
 800c666:	d501      	bpl.n	800c66c <_printf_i+0xbc>
 800c668:	681d      	ldr	r5, [r3, #0]
 800c66a:	e003      	b.n	800c674 <_printf_i+0xc4>
 800c66c:	0645      	lsls	r5, r0, #25
 800c66e:	d5fb      	bpl.n	800c668 <_printf_i+0xb8>
 800c670:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c674:	2d00      	cmp	r5, #0
 800c676:	da03      	bge.n	800c680 <_printf_i+0xd0>
 800c678:	232d      	movs	r3, #45	@ 0x2d
 800c67a:	426d      	negs	r5, r5
 800c67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c680:	4859      	ldr	r0, [pc, #356]	@ (800c7e8 <_printf_i+0x238>)
 800c682:	230a      	movs	r3, #10
 800c684:	e011      	b.n	800c6aa <_printf_i+0xfa>
 800c686:	6821      	ldr	r1, [r4, #0]
 800c688:	6833      	ldr	r3, [r6, #0]
 800c68a:	0608      	lsls	r0, r1, #24
 800c68c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c690:	d402      	bmi.n	800c698 <_printf_i+0xe8>
 800c692:	0649      	lsls	r1, r1, #25
 800c694:	bf48      	it	mi
 800c696:	b2ad      	uxthmi	r5, r5
 800c698:	2f6f      	cmp	r7, #111	@ 0x6f
 800c69a:	4853      	ldr	r0, [pc, #332]	@ (800c7e8 <_printf_i+0x238>)
 800c69c:	6033      	str	r3, [r6, #0]
 800c69e:	bf14      	ite	ne
 800c6a0:	230a      	movne	r3, #10
 800c6a2:	2308      	moveq	r3, #8
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6aa:	6866      	ldr	r6, [r4, #4]
 800c6ac:	60a6      	str	r6, [r4, #8]
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	bfa2      	ittt	ge
 800c6b2:	6821      	ldrge	r1, [r4, #0]
 800c6b4:	f021 0104 	bicge.w	r1, r1, #4
 800c6b8:	6021      	strge	r1, [r4, #0]
 800c6ba:	b90d      	cbnz	r5, 800c6c0 <_printf_i+0x110>
 800c6bc:	2e00      	cmp	r6, #0
 800c6be:	d04b      	beq.n	800c758 <_printf_i+0x1a8>
 800c6c0:	4616      	mov	r6, r2
 800c6c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c6ca:	5dc7      	ldrb	r7, [r0, r7]
 800c6cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6d0:	462f      	mov	r7, r5
 800c6d2:	42bb      	cmp	r3, r7
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	d9f4      	bls.n	800c6c2 <_printf_i+0x112>
 800c6d8:	2b08      	cmp	r3, #8
 800c6da:	d10b      	bne.n	800c6f4 <_printf_i+0x144>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	07df      	lsls	r7, r3, #31
 800c6e0:	d508      	bpl.n	800c6f4 <_printf_i+0x144>
 800c6e2:	6923      	ldr	r3, [r4, #16]
 800c6e4:	6861      	ldr	r1, [r4, #4]
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	bfde      	ittt	le
 800c6ea:	2330      	movle	r3, #48	@ 0x30
 800c6ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6f4:	1b92      	subs	r2, r2, r6
 800c6f6:	6122      	str	r2, [r4, #16]
 800c6f8:	f8cd a000 	str.w	sl, [sp]
 800c6fc:	464b      	mov	r3, r9
 800c6fe:	aa03      	add	r2, sp, #12
 800c700:	4621      	mov	r1, r4
 800c702:	4640      	mov	r0, r8
 800c704:	f7ff fee6 	bl	800c4d4 <_printf_common>
 800c708:	3001      	adds	r0, #1
 800c70a:	d14a      	bne.n	800c7a2 <_printf_i+0x1f2>
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	b004      	add	sp, #16
 800c712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	f043 0320 	orr.w	r3, r3, #32
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	4833      	ldr	r0, [pc, #204]	@ (800c7ec <_printf_i+0x23c>)
 800c720:	2778      	movs	r7, #120	@ 0x78
 800c722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	6831      	ldr	r1, [r6, #0]
 800c72a:	061f      	lsls	r7, r3, #24
 800c72c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c730:	d402      	bmi.n	800c738 <_printf_i+0x188>
 800c732:	065f      	lsls	r7, r3, #25
 800c734:	bf48      	it	mi
 800c736:	b2ad      	uxthmi	r5, r5
 800c738:	6031      	str	r1, [r6, #0]
 800c73a:	07d9      	lsls	r1, r3, #31
 800c73c:	bf44      	itt	mi
 800c73e:	f043 0320 	orrmi.w	r3, r3, #32
 800c742:	6023      	strmi	r3, [r4, #0]
 800c744:	b11d      	cbz	r5, 800c74e <_printf_i+0x19e>
 800c746:	2310      	movs	r3, #16
 800c748:	e7ac      	b.n	800c6a4 <_printf_i+0xf4>
 800c74a:	4827      	ldr	r0, [pc, #156]	@ (800c7e8 <_printf_i+0x238>)
 800c74c:	e7e9      	b.n	800c722 <_printf_i+0x172>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	f023 0320 	bic.w	r3, r3, #32
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	e7f6      	b.n	800c746 <_printf_i+0x196>
 800c758:	4616      	mov	r6, r2
 800c75a:	e7bd      	b.n	800c6d8 <_printf_i+0x128>
 800c75c:	6833      	ldr	r3, [r6, #0]
 800c75e:	6825      	ldr	r5, [r4, #0]
 800c760:	6961      	ldr	r1, [r4, #20]
 800c762:	1d18      	adds	r0, r3, #4
 800c764:	6030      	str	r0, [r6, #0]
 800c766:	062e      	lsls	r6, r5, #24
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	d501      	bpl.n	800c770 <_printf_i+0x1c0>
 800c76c:	6019      	str	r1, [r3, #0]
 800c76e:	e002      	b.n	800c776 <_printf_i+0x1c6>
 800c770:	0668      	lsls	r0, r5, #25
 800c772:	d5fb      	bpl.n	800c76c <_printf_i+0x1bc>
 800c774:	8019      	strh	r1, [r3, #0]
 800c776:	2300      	movs	r3, #0
 800c778:	6123      	str	r3, [r4, #16]
 800c77a:	4616      	mov	r6, r2
 800c77c:	e7bc      	b.n	800c6f8 <_printf_i+0x148>
 800c77e:	6833      	ldr	r3, [r6, #0]
 800c780:	1d1a      	adds	r2, r3, #4
 800c782:	6032      	str	r2, [r6, #0]
 800c784:	681e      	ldr	r6, [r3, #0]
 800c786:	6862      	ldr	r2, [r4, #4]
 800c788:	2100      	movs	r1, #0
 800c78a:	4630      	mov	r0, r6
 800c78c:	f7f3 fd20 	bl	80001d0 <memchr>
 800c790:	b108      	cbz	r0, 800c796 <_printf_i+0x1e6>
 800c792:	1b80      	subs	r0, r0, r6
 800c794:	6060      	str	r0, [r4, #4]
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	6123      	str	r3, [r4, #16]
 800c79a:	2300      	movs	r3, #0
 800c79c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7a0:	e7aa      	b.n	800c6f8 <_printf_i+0x148>
 800c7a2:	6923      	ldr	r3, [r4, #16]
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	47d0      	blx	sl
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d0ad      	beq.n	800c70c <_printf_i+0x15c>
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	079b      	lsls	r3, r3, #30
 800c7b4:	d413      	bmi.n	800c7de <_printf_i+0x22e>
 800c7b6:	68e0      	ldr	r0, [r4, #12]
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	4298      	cmp	r0, r3
 800c7bc:	bfb8      	it	lt
 800c7be:	4618      	movlt	r0, r3
 800c7c0:	e7a6      	b.n	800c710 <_printf_i+0x160>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	4649      	mov	r1, r9
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	47d0      	blx	sl
 800c7cc:	3001      	adds	r0, #1
 800c7ce:	d09d      	beq.n	800c70c <_printf_i+0x15c>
 800c7d0:	3501      	adds	r5, #1
 800c7d2:	68e3      	ldr	r3, [r4, #12]
 800c7d4:	9903      	ldr	r1, [sp, #12]
 800c7d6:	1a5b      	subs	r3, r3, r1
 800c7d8:	42ab      	cmp	r3, r5
 800c7da:	dcf2      	bgt.n	800c7c2 <_printf_i+0x212>
 800c7dc:	e7eb      	b.n	800c7b6 <_printf_i+0x206>
 800c7de:	2500      	movs	r5, #0
 800c7e0:	f104 0619 	add.w	r6, r4, #25
 800c7e4:	e7f5      	b.n	800c7d2 <_printf_i+0x222>
 800c7e6:	bf00      	nop
 800c7e8:	0801077e 	.word	0x0801077e
 800c7ec:	0801078f 	.word	0x0801078f

0800c7f0 <_scanf_float>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	b087      	sub	sp, #28
 800c7f6:	4617      	mov	r7, r2
 800c7f8:	9303      	str	r3, [sp, #12]
 800c7fa:	688b      	ldr	r3, [r1, #8]
 800c7fc:	1e5a      	subs	r2, r3, #1
 800c7fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c802:	bf81      	itttt	hi
 800c804:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c808:	eb03 0b05 	addhi.w	fp, r3, r5
 800c80c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c810:	608b      	strhi	r3, [r1, #8]
 800c812:	680b      	ldr	r3, [r1, #0]
 800c814:	460a      	mov	r2, r1
 800c816:	f04f 0500 	mov.w	r5, #0
 800c81a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c81e:	f842 3b1c 	str.w	r3, [r2], #28
 800c822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c826:	4680      	mov	r8, r0
 800c828:	460c      	mov	r4, r1
 800c82a:	bf98      	it	ls
 800c82c:	f04f 0b00 	movls.w	fp, #0
 800c830:	9201      	str	r2, [sp, #4]
 800c832:	4616      	mov	r6, r2
 800c834:	46aa      	mov	sl, r5
 800c836:	46a9      	mov	r9, r5
 800c838:	9502      	str	r5, [sp, #8]
 800c83a:	68a2      	ldr	r2, [r4, #8]
 800c83c:	b152      	cbz	r2, 800c854 <_scanf_float+0x64>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b4e      	cmp	r3, #78	@ 0x4e
 800c844:	d864      	bhi.n	800c910 <_scanf_float+0x120>
 800c846:	2b40      	cmp	r3, #64	@ 0x40
 800c848:	d83c      	bhi.n	800c8c4 <_scanf_float+0xd4>
 800c84a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c84e:	b2c8      	uxtb	r0, r1
 800c850:	280e      	cmp	r0, #14
 800c852:	d93a      	bls.n	800c8ca <_scanf_float+0xda>
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	d003      	beq.n	800c862 <_scanf_float+0x72>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c866:	f1ba 0f01 	cmp.w	sl, #1
 800c86a:	f200 8117 	bhi.w	800ca9c <_scanf_float+0x2ac>
 800c86e:	9b01      	ldr	r3, [sp, #4]
 800c870:	429e      	cmp	r6, r3
 800c872:	f200 8108 	bhi.w	800ca86 <_scanf_float+0x296>
 800c876:	2001      	movs	r0, #1
 800c878:	b007      	add	sp, #28
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c882:	2a0d      	cmp	r2, #13
 800c884:	d8e6      	bhi.n	800c854 <_scanf_float+0x64>
 800c886:	a101      	add	r1, pc, #4	@ (adr r1, 800c88c <_scanf_float+0x9c>)
 800c888:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c88c:	0800c9d3 	.word	0x0800c9d3
 800c890:	0800c855 	.word	0x0800c855
 800c894:	0800c855 	.word	0x0800c855
 800c898:	0800c855 	.word	0x0800c855
 800c89c:	0800ca33 	.word	0x0800ca33
 800c8a0:	0800ca0b 	.word	0x0800ca0b
 800c8a4:	0800c855 	.word	0x0800c855
 800c8a8:	0800c855 	.word	0x0800c855
 800c8ac:	0800c9e1 	.word	0x0800c9e1
 800c8b0:	0800c855 	.word	0x0800c855
 800c8b4:	0800c855 	.word	0x0800c855
 800c8b8:	0800c855 	.word	0x0800c855
 800c8bc:	0800c855 	.word	0x0800c855
 800c8c0:	0800c999 	.word	0x0800c999
 800c8c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c8c8:	e7db      	b.n	800c882 <_scanf_float+0x92>
 800c8ca:	290e      	cmp	r1, #14
 800c8cc:	d8c2      	bhi.n	800c854 <_scanf_float+0x64>
 800c8ce:	a001      	add	r0, pc, #4	@ (adr r0, 800c8d4 <_scanf_float+0xe4>)
 800c8d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c8d4:	0800c989 	.word	0x0800c989
 800c8d8:	0800c855 	.word	0x0800c855
 800c8dc:	0800c989 	.word	0x0800c989
 800c8e0:	0800ca1f 	.word	0x0800ca1f
 800c8e4:	0800c855 	.word	0x0800c855
 800c8e8:	0800c931 	.word	0x0800c931
 800c8ec:	0800c96f 	.word	0x0800c96f
 800c8f0:	0800c96f 	.word	0x0800c96f
 800c8f4:	0800c96f 	.word	0x0800c96f
 800c8f8:	0800c96f 	.word	0x0800c96f
 800c8fc:	0800c96f 	.word	0x0800c96f
 800c900:	0800c96f 	.word	0x0800c96f
 800c904:	0800c96f 	.word	0x0800c96f
 800c908:	0800c96f 	.word	0x0800c96f
 800c90c:	0800c96f 	.word	0x0800c96f
 800c910:	2b6e      	cmp	r3, #110	@ 0x6e
 800c912:	d809      	bhi.n	800c928 <_scanf_float+0x138>
 800c914:	2b60      	cmp	r3, #96	@ 0x60
 800c916:	d8b2      	bhi.n	800c87e <_scanf_float+0x8e>
 800c918:	2b54      	cmp	r3, #84	@ 0x54
 800c91a:	d07b      	beq.n	800ca14 <_scanf_float+0x224>
 800c91c:	2b59      	cmp	r3, #89	@ 0x59
 800c91e:	d199      	bne.n	800c854 <_scanf_float+0x64>
 800c920:	2d07      	cmp	r5, #7
 800c922:	d197      	bne.n	800c854 <_scanf_float+0x64>
 800c924:	2508      	movs	r5, #8
 800c926:	e02c      	b.n	800c982 <_scanf_float+0x192>
 800c928:	2b74      	cmp	r3, #116	@ 0x74
 800c92a:	d073      	beq.n	800ca14 <_scanf_float+0x224>
 800c92c:	2b79      	cmp	r3, #121	@ 0x79
 800c92e:	e7f6      	b.n	800c91e <_scanf_float+0x12e>
 800c930:	6821      	ldr	r1, [r4, #0]
 800c932:	05c8      	lsls	r0, r1, #23
 800c934:	d51b      	bpl.n	800c96e <_scanf_float+0x17e>
 800c936:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c93a:	6021      	str	r1, [r4, #0]
 800c93c:	f109 0901 	add.w	r9, r9, #1
 800c940:	f1bb 0f00 	cmp.w	fp, #0
 800c944:	d003      	beq.n	800c94e <_scanf_float+0x15e>
 800c946:	3201      	adds	r2, #1
 800c948:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c94c:	60a2      	str	r2, [r4, #8]
 800c94e:	68a3      	ldr	r3, [r4, #8]
 800c950:	3b01      	subs	r3, #1
 800c952:	60a3      	str	r3, [r4, #8]
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	3301      	adds	r3, #1
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	2b00      	cmp	r3, #0
 800c960:	607b      	str	r3, [r7, #4]
 800c962:	f340 8087 	ble.w	800ca74 <_scanf_float+0x284>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	3301      	adds	r3, #1
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	e765      	b.n	800c83a <_scanf_float+0x4a>
 800c96e:	eb1a 0105 	adds.w	r1, sl, r5
 800c972:	f47f af6f 	bne.w	800c854 <_scanf_float+0x64>
 800c976:	6822      	ldr	r2, [r4, #0]
 800c978:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c97c:	6022      	str	r2, [r4, #0]
 800c97e:	460d      	mov	r5, r1
 800c980:	468a      	mov	sl, r1
 800c982:	f806 3b01 	strb.w	r3, [r6], #1
 800c986:	e7e2      	b.n	800c94e <_scanf_float+0x15e>
 800c988:	6822      	ldr	r2, [r4, #0]
 800c98a:	0610      	lsls	r0, r2, #24
 800c98c:	f57f af62 	bpl.w	800c854 <_scanf_float+0x64>
 800c990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c994:	6022      	str	r2, [r4, #0]
 800c996:	e7f4      	b.n	800c982 <_scanf_float+0x192>
 800c998:	f1ba 0f00 	cmp.w	sl, #0
 800c99c:	d10e      	bne.n	800c9bc <_scanf_float+0x1cc>
 800c99e:	f1b9 0f00 	cmp.w	r9, #0
 800c9a2:	d10e      	bne.n	800c9c2 <_scanf_float+0x1d2>
 800c9a4:	6822      	ldr	r2, [r4, #0]
 800c9a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9ae:	d108      	bne.n	800c9c2 <_scanf_float+0x1d2>
 800c9b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9b4:	6022      	str	r2, [r4, #0]
 800c9b6:	f04f 0a01 	mov.w	sl, #1
 800c9ba:	e7e2      	b.n	800c982 <_scanf_float+0x192>
 800c9bc:	f1ba 0f02 	cmp.w	sl, #2
 800c9c0:	d055      	beq.n	800ca6e <_scanf_float+0x27e>
 800c9c2:	2d01      	cmp	r5, #1
 800c9c4:	d002      	beq.n	800c9cc <_scanf_float+0x1dc>
 800c9c6:	2d04      	cmp	r5, #4
 800c9c8:	f47f af44 	bne.w	800c854 <_scanf_float+0x64>
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	b2ed      	uxtb	r5, r5
 800c9d0:	e7d7      	b.n	800c982 <_scanf_float+0x192>
 800c9d2:	f1ba 0f01 	cmp.w	sl, #1
 800c9d6:	f47f af3d 	bne.w	800c854 <_scanf_float+0x64>
 800c9da:	f04f 0a02 	mov.w	sl, #2
 800c9de:	e7d0      	b.n	800c982 <_scanf_float+0x192>
 800c9e0:	b97d      	cbnz	r5, 800ca02 <_scanf_float+0x212>
 800c9e2:	f1b9 0f00 	cmp.w	r9, #0
 800c9e6:	f47f af38 	bne.w	800c85a <_scanf_float+0x6a>
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c9f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c9f4:	f040 8108 	bne.w	800cc08 <_scanf_float+0x418>
 800c9f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c9fc:	6022      	str	r2, [r4, #0]
 800c9fe:	2501      	movs	r5, #1
 800ca00:	e7bf      	b.n	800c982 <_scanf_float+0x192>
 800ca02:	2d03      	cmp	r5, #3
 800ca04:	d0e2      	beq.n	800c9cc <_scanf_float+0x1dc>
 800ca06:	2d05      	cmp	r5, #5
 800ca08:	e7de      	b.n	800c9c8 <_scanf_float+0x1d8>
 800ca0a:	2d02      	cmp	r5, #2
 800ca0c:	f47f af22 	bne.w	800c854 <_scanf_float+0x64>
 800ca10:	2503      	movs	r5, #3
 800ca12:	e7b6      	b.n	800c982 <_scanf_float+0x192>
 800ca14:	2d06      	cmp	r5, #6
 800ca16:	f47f af1d 	bne.w	800c854 <_scanf_float+0x64>
 800ca1a:	2507      	movs	r5, #7
 800ca1c:	e7b1      	b.n	800c982 <_scanf_float+0x192>
 800ca1e:	6822      	ldr	r2, [r4, #0]
 800ca20:	0591      	lsls	r1, r2, #22
 800ca22:	f57f af17 	bpl.w	800c854 <_scanf_float+0x64>
 800ca26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ca2a:	6022      	str	r2, [r4, #0]
 800ca2c:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca30:	e7a7      	b.n	800c982 <_scanf_float+0x192>
 800ca32:	6822      	ldr	r2, [r4, #0]
 800ca34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ca38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ca3c:	d006      	beq.n	800ca4c <_scanf_float+0x25c>
 800ca3e:	0550      	lsls	r0, r2, #21
 800ca40:	f57f af08 	bpl.w	800c854 <_scanf_float+0x64>
 800ca44:	f1b9 0f00 	cmp.w	r9, #0
 800ca48:	f000 80de 	beq.w	800cc08 <_scanf_float+0x418>
 800ca4c:	0591      	lsls	r1, r2, #22
 800ca4e:	bf58      	it	pl
 800ca50:	9902      	ldrpl	r1, [sp, #8]
 800ca52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca56:	bf58      	it	pl
 800ca58:	eba9 0101 	subpl.w	r1, r9, r1
 800ca5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ca60:	bf58      	it	pl
 800ca62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca66:	6022      	str	r2, [r4, #0]
 800ca68:	f04f 0900 	mov.w	r9, #0
 800ca6c:	e789      	b.n	800c982 <_scanf_float+0x192>
 800ca6e:	f04f 0a03 	mov.w	sl, #3
 800ca72:	e786      	b.n	800c982 <_scanf_float+0x192>
 800ca74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4798      	blx	r3
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f43f aedb 	beq.w	800c83a <_scanf_float+0x4a>
 800ca84:	e6e6      	b.n	800c854 <_scanf_float+0x64>
 800ca86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca8e:	463a      	mov	r2, r7
 800ca90:	4640      	mov	r0, r8
 800ca92:	4798      	blx	r3
 800ca94:	6923      	ldr	r3, [r4, #16]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	6123      	str	r3, [r4, #16]
 800ca9a:	e6e8      	b.n	800c86e <_scanf_float+0x7e>
 800ca9c:	1e6b      	subs	r3, r5, #1
 800ca9e:	2b06      	cmp	r3, #6
 800caa0:	d824      	bhi.n	800caec <_scanf_float+0x2fc>
 800caa2:	2d02      	cmp	r5, #2
 800caa4:	d836      	bhi.n	800cb14 <_scanf_float+0x324>
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	429e      	cmp	r6, r3
 800caaa:	f67f aee4 	bls.w	800c876 <_scanf_float+0x86>
 800caae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cab6:	463a      	mov	r2, r7
 800cab8:	4640      	mov	r0, r8
 800caba:	4798      	blx	r3
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	e7f0      	b.n	800caa6 <_scanf_float+0x2b6>
 800cac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cac8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cacc:	463a      	mov	r2, r7
 800cace:	4640      	mov	r0, r8
 800cad0:	4798      	blx	r3
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	6123      	str	r3, [r4, #16]
 800cad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cadc:	fa5f fa8a 	uxtb.w	sl, sl
 800cae0:	f1ba 0f02 	cmp.w	sl, #2
 800cae4:	d1ee      	bne.n	800cac4 <_scanf_float+0x2d4>
 800cae6:	3d03      	subs	r5, #3
 800cae8:	b2ed      	uxtb	r5, r5
 800caea:	1b76      	subs	r6, r6, r5
 800caec:	6823      	ldr	r3, [r4, #0]
 800caee:	05da      	lsls	r2, r3, #23
 800caf0:	d530      	bpl.n	800cb54 <_scanf_float+0x364>
 800caf2:	055b      	lsls	r3, r3, #21
 800caf4:	d511      	bpl.n	800cb1a <_scanf_float+0x32a>
 800caf6:	9b01      	ldr	r3, [sp, #4]
 800caf8:	429e      	cmp	r6, r3
 800cafa:	f67f aebc 	bls.w	800c876 <_scanf_float+0x86>
 800cafe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb06:	463a      	mov	r2, r7
 800cb08:	4640      	mov	r0, r8
 800cb0a:	4798      	blx	r3
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	e7f0      	b.n	800caf6 <_scanf_float+0x306>
 800cb14:	46aa      	mov	sl, r5
 800cb16:	46b3      	mov	fp, r6
 800cb18:	e7de      	b.n	800cad8 <_scanf_float+0x2e8>
 800cb1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	2965      	cmp	r1, #101	@ 0x65
 800cb22:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb26:	f106 35ff 	add.w	r5, r6, #4294967295
 800cb2a:	6123      	str	r3, [r4, #16]
 800cb2c:	d00c      	beq.n	800cb48 <_scanf_float+0x358>
 800cb2e:	2945      	cmp	r1, #69	@ 0x45
 800cb30:	d00a      	beq.n	800cb48 <_scanf_float+0x358>
 800cb32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb36:	463a      	mov	r2, r7
 800cb38:	4640      	mov	r0, r8
 800cb3a:	4798      	blx	r3
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb42:	3b01      	subs	r3, #1
 800cb44:	1eb5      	subs	r5, r6, #2
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb4c:	463a      	mov	r2, r7
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4798      	blx	r3
 800cb52:	462e      	mov	r6, r5
 800cb54:	6822      	ldr	r2, [r4, #0]
 800cb56:	f012 0210 	ands.w	r2, r2, #16
 800cb5a:	d001      	beq.n	800cb60 <_scanf_float+0x370>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	e68b      	b.n	800c878 <_scanf_float+0x88>
 800cb60:	7032      	strb	r2, [r6, #0]
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cb68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb6c:	d11c      	bne.n	800cba8 <_scanf_float+0x3b8>
 800cb6e:	9b02      	ldr	r3, [sp, #8]
 800cb70:	454b      	cmp	r3, r9
 800cb72:	eba3 0209 	sub.w	r2, r3, r9
 800cb76:	d123      	bne.n	800cbc0 <_scanf_float+0x3d0>
 800cb78:	9901      	ldr	r1, [sp, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	f002 fc3b 	bl	800f3f8 <_strtod_r>
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	6821      	ldr	r1, [r4, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f011 0f02 	tst.w	r1, #2
 800cb8c:	ec57 6b10 	vmov	r6, r7, d0
 800cb90:	f103 0204 	add.w	r2, r3, #4
 800cb94:	d01f      	beq.n	800cbd6 <_scanf_float+0x3e6>
 800cb96:	9903      	ldr	r1, [sp, #12]
 800cb98:	600a      	str	r2, [r1, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	e9c3 6700 	strd	r6, r7, [r3]
 800cba0:	68e3      	ldr	r3, [r4, #12]
 800cba2:	3301      	adds	r3, #1
 800cba4:	60e3      	str	r3, [r4, #12]
 800cba6:	e7d9      	b.n	800cb5c <_scanf_float+0x36c>
 800cba8:	9b04      	ldr	r3, [sp, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0e4      	beq.n	800cb78 <_scanf_float+0x388>
 800cbae:	9905      	ldr	r1, [sp, #20]
 800cbb0:	230a      	movs	r3, #10
 800cbb2:	3101      	adds	r1, #1
 800cbb4:	4640      	mov	r0, r8
 800cbb6:	f002 fc9f 	bl	800f4f8 <_strtol_r>
 800cbba:	9b04      	ldr	r3, [sp, #16]
 800cbbc:	9e05      	ldr	r6, [sp, #20]
 800cbbe:	1ac2      	subs	r2, r0, r3
 800cbc0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cbc4:	429e      	cmp	r6, r3
 800cbc6:	bf28      	it	cs
 800cbc8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cbcc:	4910      	ldr	r1, [pc, #64]	@ (800cc10 <_scanf_float+0x420>)
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f000 f918 	bl	800ce04 <siprintf>
 800cbd4:	e7d0      	b.n	800cb78 <_scanf_float+0x388>
 800cbd6:	f011 0f04 	tst.w	r1, #4
 800cbda:	9903      	ldr	r1, [sp, #12]
 800cbdc:	600a      	str	r2, [r1, #0]
 800cbde:	d1dc      	bne.n	800cb9a <_scanf_float+0x3aa>
 800cbe0:	681d      	ldr	r5, [r3, #0]
 800cbe2:	4632      	mov	r2, r6
 800cbe4:	463b      	mov	r3, r7
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	4639      	mov	r1, r7
 800cbea:	f7f3 ff9f 	bl	8000b2c <__aeabi_dcmpun>
 800cbee:	b128      	cbz	r0, 800cbfc <_scanf_float+0x40c>
 800cbf0:	4808      	ldr	r0, [pc, #32]	@ (800cc14 <_scanf_float+0x424>)
 800cbf2:	f000 f9f9 	bl	800cfe8 <nanf>
 800cbf6:	ed85 0a00 	vstr	s0, [r5]
 800cbfa:	e7d1      	b.n	800cba0 <_scanf_float+0x3b0>
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	4639      	mov	r1, r7
 800cc00:	f7f3 fff2 	bl	8000be8 <__aeabi_d2f>
 800cc04:	6028      	str	r0, [r5, #0]
 800cc06:	e7cb      	b.n	800cba0 <_scanf_float+0x3b0>
 800cc08:	f04f 0900 	mov.w	r9, #0
 800cc0c:	e629      	b.n	800c862 <_scanf_float+0x72>
 800cc0e:	bf00      	nop
 800cc10:	080107a0 	.word	0x080107a0
 800cc14:	08010b35 	.word	0x08010b35

0800cc18 <std>:
 800cc18:	2300      	movs	r3, #0
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc26:	6083      	str	r3, [r0, #8]
 800cc28:	8181      	strh	r1, [r0, #12]
 800cc2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc2c:	81c2      	strh	r2, [r0, #14]
 800cc2e:	6183      	str	r3, [r0, #24]
 800cc30:	4619      	mov	r1, r3
 800cc32:	2208      	movs	r2, #8
 800cc34:	305c      	adds	r0, #92	@ 0x5c
 800cc36:	f000 f948 	bl	800ceca <memset>
 800cc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc70 <std+0x58>)
 800cc3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <std+0x5c>)
 800cc40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc42:	4b0d      	ldr	r3, [pc, #52]	@ (800cc78 <std+0x60>)
 800cc44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc46:	4b0d      	ldr	r3, [pc, #52]	@ (800cc7c <std+0x64>)
 800cc48:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc80 <std+0x68>)
 800cc4c:	6224      	str	r4, [r4, #32]
 800cc4e:	429c      	cmp	r4, r3
 800cc50:	d006      	beq.n	800cc60 <std+0x48>
 800cc52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc56:	4294      	cmp	r4, r2
 800cc58:	d002      	beq.n	800cc60 <std+0x48>
 800cc5a:	33d0      	adds	r3, #208	@ 0xd0
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	d105      	bne.n	800cc6c <std+0x54>
 800cc60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc68:	f000 b9ac 	b.w	800cfc4 <__retarget_lock_init_recursive>
 800cc6c:	bd10      	pop	{r4, pc}
 800cc6e:	bf00      	nop
 800cc70:	0800ce45 	.word	0x0800ce45
 800cc74:	0800ce67 	.word	0x0800ce67
 800cc78:	0800ce9f 	.word	0x0800ce9f
 800cc7c:	0800cec3 	.word	0x0800cec3
 800cc80:	20001b14 	.word	0x20001b14

0800cc84 <stdio_exit_handler>:
 800cc84:	4a02      	ldr	r2, [pc, #8]	@ (800cc90 <stdio_exit_handler+0xc>)
 800cc86:	4903      	ldr	r1, [pc, #12]	@ (800cc94 <stdio_exit_handler+0x10>)
 800cc88:	4803      	ldr	r0, [pc, #12]	@ (800cc98 <stdio_exit_handler+0x14>)
 800cc8a:	f000 b869 	b.w	800cd60 <_fwalk_sglue>
 800cc8e:	bf00      	nop
 800cc90:	20000184 	.word	0x20000184
 800cc94:	0800f8b5 	.word	0x0800f8b5
 800cc98:	20000194 	.word	0x20000194

0800cc9c <cleanup_stdio>:
 800cc9c:	6841      	ldr	r1, [r0, #4]
 800cc9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ccd0 <cleanup_stdio+0x34>)
 800cca0:	4299      	cmp	r1, r3
 800cca2:	b510      	push	{r4, lr}
 800cca4:	4604      	mov	r4, r0
 800cca6:	d001      	beq.n	800ccac <cleanup_stdio+0x10>
 800cca8:	f002 fe04 	bl	800f8b4 <_fflush_r>
 800ccac:	68a1      	ldr	r1, [r4, #8]
 800ccae:	4b09      	ldr	r3, [pc, #36]	@ (800ccd4 <cleanup_stdio+0x38>)
 800ccb0:	4299      	cmp	r1, r3
 800ccb2:	d002      	beq.n	800ccba <cleanup_stdio+0x1e>
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f002 fdfd 	bl	800f8b4 <_fflush_r>
 800ccba:	68e1      	ldr	r1, [r4, #12]
 800ccbc:	4b06      	ldr	r3, [pc, #24]	@ (800ccd8 <cleanup_stdio+0x3c>)
 800ccbe:	4299      	cmp	r1, r3
 800ccc0:	d004      	beq.n	800cccc <cleanup_stdio+0x30>
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc8:	f002 bdf4 	b.w	800f8b4 <_fflush_r>
 800cccc:	bd10      	pop	{r4, pc}
 800ccce:	bf00      	nop
 800ccd0:	20001b14 	.word	0x20001b14
 800ccd4:	20001b7c 	.word	0x20001b7c
 800ccd8:	20001be4 	.word	0x20001be4

0800ccdc <global_stdio_init.part.0>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	4b0b      	ldr	r3, [pc, #44]	@ (800cd0c <global_stdio_init.part.0+0x30>)
 800cce0:	4c0b      	ldr	r4, [pc, #44]	@ (800cd10 <global_stdio_init.part.0+0x34>)
 800cce2:	4a0c      	ldr	r2, [pc, #48]	@ (800cd14 <global_stdio_init.part.0+0x38>)
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	4620      	mov	r0, r4
 800cce8:	2200      	movs	r2, #0
 800ccea:	2104      	movs	r1, #4
 800ccec:	f7ff ff94 	bl	800cc18 <std>
 800ccf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	2109      	movs	r1, #9
 800ccf8:	f7ff ff8e 	bl	800cc18 <std>
 800ccfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd00:	2202      	movs	r2, #2
 800cd02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd06:	2112      	movs	r1, #18
 800cd08:	f7ff bf86 	b.w	800cc18 <std>
 800cd0c:	20001c4c 	.word	0x20001c4c
 800cd10:	20001b14 	.word	0x20001b14
 800cd14:	0800cc85 	.word	0x0800cc85

0800cd18 <__sfp_lock_acquire>:
 800cd18:	4801      	ldr	r0, [pc, #4]	@ (800cd20 <__sfp_lock_acquire+0x8>)
 800cd1a:	f000 b954 	b.w	800cfc6 <__retarget_lock_acquire_recursive>
 800cd1e:	bf00      	nop
 800cd20:	20001c55 	.word	0x20001c55

0800cd24 <__sfp_lock_release>:
 800cd24:	4801      	ldr	r0, [pc, #4]	@ (800cd2c <__sfp_lock_release+0x8>)
 800cd26:	f000 b94f 	b.w	800cfc8 <__retarget_lock_release_recursive>
 800cd2a:	bf00      	nop
 800cd2c:	20001c55 	.word	0x20001c55

0800cd30 <__sinit>:
 800cd30:	b510      	push	{r4, lr}
 800cd32:	4604      	mov	r4, r0
 800cd34:	f7ff fff0 	bl	800cd18 <__sfp_lock_acquire>
 800cd38:	6a23      	ldr	r3, [r4, #32]
 800cd3a:	b11b      	cbz	r3, 800cd44 <__sinit+0x14>
 800cd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd40:	f7ff bff0 	b.w	800cd24 <__sfp_lock_release>
 800cd44:	4b04      	ldr	r3, [pc, #16]	@ (800cd58 <__sinit+0x28>)
 800cd46:	6223      	str	r3, [r4, #32]
 800cd48:	4b04      	ldr	r3, [pc, #16]	@ (800cd5c <__sinit+0x2c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1f5      	bne.n	800cd3c <__sinit+0xc>
 800cd50:	f7ff ffc4 	bl	800ccdc <global_stdio_init.part.0>
 800cd54:	e7f2      	b.n	800cd3c <__sinit+0xc>
 800cd56:	bf00      	nop
 800cd58:	0800cc9d 	.word	0x0800cc9d
 800cd5c:	20001c4c 	.word	0x20001c4c

0800cd60 <_fwalk_sglue>:
 800cd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd64:	4607      	mov	r7, r0
 800cd66:	4688      	mov	r8, r1
 800cd68:	4614      	mov	r4, r2
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd70:	f1b9 0901 	subs.w	r9, r9, #1
 800cd74:	d505      	bpl.n	800cd82 <_fwalk_sglue+0x22>
 800cd76:	6824      	ldr	r4, [r4, #0]
 800cd78:	2c00      	cmp	r4, #0
 800cd7a:	d1f7      	bne.n	800cd6c <_fwalk_sglue+0xc>
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd82:	89ab      	ldrh	r3, [r5, #12]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d907      	bls.n	800cd98 <_fwalk_sglue+0x38>
 800cd88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	d003      	beq.n	800cd98 <_fwalk_sglue+0x38>
 800cd90:	4629      	mov	r1, r5
 800cd92:	4638      	mov	r0, r7
 800cd94:	47c0      	blx	r8
 800cd96:	4306      	orrs	r6, r0
 800cd98:	3568      	adds	r5, #104	@ 0x68
 800cd9a:	e7e9      	b.n	800cd70 <_fwalk_sglue+0x10>

0800cd9c <sniprintf>:
 800cd9c:	b40c      	push	{r2, r3}
 800cd9e:	b530      	push	{r4, r5, lr}
 800cda0:	4b17      	ldr	r3, [pc, #92]	@ (800ce00 <sniprintf+0x64>)
 800cda2:	1e0c      	subs	r4, r1, #0
 800cda4:	681d      	ldr	r5, [r3, #0]
 800cda6:	b09d      	sub	sp, #116	@ 0x74
 800cda8:	da08      	bge.n	800cdbc <sniprintf+0x20>
 800cdaa:	238b      	movs	r3, #139	@ 0x8b
 800cdac:	602b      	str	r3, [r5, #0]
 800cdae:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb2:	b01d      	add	sp, #116	@ 0x74
 800cdb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdb8:	b002      	add	sp, #8
 800cdba:	4770      	bx	lr
 800cdbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cdc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdc4:	bf14      	ite	ne
 800cdc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cdca:	4623      	moveq	r3, r4
 800cdcc:	9304      	str	r3, [sp, #16]
 800cdce:	9307      	str	r3, [sp, #28]
 800cdd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdd4:	9002      	str	r0, [sp, #8]
 800cdd6:	9006      	str	r0, [sp, #24]
 800cdd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cddc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdde:	ab21      	add	r3, sp, #132	@ 0x84
 800cde0:	a902      	add	r1, sp, #8
 800cde2:	4628      	mov	r0, r5
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	f002 fbe5 	bl	800f5b4 <_svfiprintf_r>
 800cdea:	1c43      	adds	r3, r0, #1
 800cdec:	bfbc      	itt	lt
 800cdee:	238b      	movlt	r3, #139	@ 0x8b
 800cdf0:	602b      	strlt	r3, [r5, #0]
 800cdf2:	2c00      	cmp	r4, #0
 800cdf4:	d0dd      	beq.n	800cdb2 <sniprintf+0x16>
 800cdf6:	9b02      	ldr	r3, [sp, #8]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]
 800cdfc:	e7d9      	b.n	800cdb2 <sniprintf+0x16>
 800cdfe:	bf00      	nop
 800ce00:	20000190 	.word	0x20000190

0800ce04 <siprintf>:
 800ce04:	b40e      	push	{r1, r2, r3}
 800ce06:	b500      	push	{lr}
 800ce08:	b09c      	sub	sp, #112	@ 0x70
 800ce0a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ce0c:	9002      	str	r0, [sp, #8]
 800ce0e:	9006      	str	r0, [sp, #24]
 800ce10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce14:	4809      	ldr	r0, [pc, #36]	@ (800ce3c <siprintf+0x38>)
 800ce16:	9107      	str	r1, [sp, #28]
 800ce18:	9104      	str	r1, [sp, #16]
 800ce1a:	4909      	ldr	r1, [pc, #36]	@ (800ce40 <siprintf+0x3c>)
 800ce1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce20:	9105      	str	r1, [sp, #20]
 800ce22:	6800      	ldr	r0, [r0, #0]
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	a902      	add	r1, sp, #8
 800ce28:	f002 fbc4 	bl	800f5b4 <_svfiprintf_r>
 800ce2c:	9b02      	ldr	r3, [sp, #8]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	b01c      	add	sp, #112	@ 0x70
 800ce34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce38:	b003      	add	sp, #12
 800ce3a:	4770      	bx	lr
 800ce3c:	20000190 	.word	0x20000190
 800ce40:	ffff0208 	.word	0xffff0208

0800ce44 <__sread>:
 800ce44:	b510      	push	{r4, lr}
 800ce46:	460c      	mov	r4, r1
 800ce48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4c:	f000 f86c 	bl	800cf28 <_read_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	bfab      	itete	ge
 800ce54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce56:	89a3      	ldrhlt	r3, [r4, #12]
 800ce58:	181b      	addge	r3, r3, r0
 800ce5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce5e:	bfac      	ite	ge
 800ce60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce62:	81a3      	strhlt	r3, [r4, #12]
 800ce64:	bd10      	pop	{r4, pc}

0800ce66 <__swrite>:
 800ce66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6a:	461f      	mov	r7, r3
 800ce6c:	898b      	ldrh	r3, [r1, #12]
 800ce6e:	05db      	lsls	r3, r3, #23
 800ce70:	4605      	mov	r5, r0
 800ce72:	460c      	mov	r4, r1
 800ce74:	4616      	mov	r6, r2
 800ce76:	d505      	bpl.n	800ce84 <__swrite+0x1e>
 800ce78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f000 f840 	bl	800cf04 <_lseek_r>
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	4632      	mov	r2, r6
 800ce92:	463b      	mov	r3, r7
 800ce94:	4628      	mov	r0, r5
 800ce96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9a:	f000 b857 	b.w	800cf4c <_write_r>

0800ce9e <__sseek>:
 800ce9e:	b510      	push	{r4, lr}
 800cea0:	460c      	mov	r4, r1
 800cea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea6:	f000 f82d 	bl	800cf04 <_lseek_r>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	bf15      	itete	ne
 800ceb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ceb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ceb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ceba:	81a3      	strheq	r3, [r4, #12]
 800cebc:	bf18      	it	ne
 800cebe:	81a3      	strhne	r3, [r4, #12]
 800cec0:	bd10      	pop	{r4, pc}

0800cec2 <__sclose>:
 800cec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec6:	f000 b80d 	b.w	800cee4 <_close_r>

0800ceca <memset>:
 800ceca:	4402      	add	r2, r0
 800cecc:	4603      	mov	r3, r0
 800cece:	4293      	cmp	r3, r2
 800ced0:	d100      	bne.n	800ced4 <memset+0xa>
 800ced2:	4770      	bx	lr
 800ced4:	f803 1b01 	strb.w	r1, [r3], #1
 800ced8:	e7f9      	b.n	800cece <memset+0x4>
	...

0800cedc <_localeconv_r>:
 800cedc:	4800      	ldr	r0, [pc, #0]	@ (800cee0 <_localeconv_r+0x4>)
 800cede:	4770      	bx	lr
 800cee0:	200002d0 	.word	0x200002d0

0800cee4 <_close_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d06      	ldr	r5, [pc, #24]	@ (800cf00 <_close_r+0x1c>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	f7f4 fdfc 	bl	8001aec <_close>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_close_r+0x1a>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_close_r+0x1a>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	20001c50 	.word	0x20001c50

0800cf04 <_lseek_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4d07      	ldr	r5, [pc, #28]	@ (800cf24 <_lseek_r+0x20>)
 800cf08:	4604      	mov	r4, r0
 800cf0a:	4608      	mov	r0, r1
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	2200      	movs	r2, #0
 800cf10:	602a      	str	r2, [r5, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	f7f4 fe11 	bl	8001b3a <_lseek>
 800cf18:	1c43      	adds	r3, r0, #1
 800cf1a:	d102      	bne.n	800cf22 <_lseek_r+0x1e>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	b103      	cbz	r3, 800cf22 <_lseek_r+0x1e>
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
 800cf24:	20001c50 	.word	0x20001c50

0800cf28 <_read_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4d07      	ldr	r5, [pc, #28]	@ (800cf48 <_read_r+0x20>)
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	4608      	mov	r0, r1
 800cf30:	4611      	mov	r1, r2
 800cf32:	2200      	movs	r2, #0
 800cf34:	602a      	str	r2, [r5, #0]
 800cf36:	461a      	mov	r2, r3
 800cf38:	f7f4 fd9f 	bl	8001a7a <_read>
 800cf3c:	1c43      	adds	r3, r0, #1
 800cf3e:	d102      	bne.n	800cf46 <_read_r+0x1e>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	b103      	cbz	r3, 800cf46 <_read_r+0x1e>
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	bd38      	pop	{r3, r4, r5, pc}
 800cf48:	20001c50 	.word	0x20001c50

0800cf4c <_write_r>:
 800cf4c:	b538      	push	{r3, r4, r5, lr}
 800cf4e:	4d07      	ldr	r5, [pc, #28]	@ (800cf6c <_write_r+0x20>)
 800cf50:	4604      	mov	r4, r0
 800cf52:	4608      	mov	r0, r1
 800cf54:	4611      	mov	r1, r2
 800cf56:	2200      	movs	r2, #0
 800cf58:	602a      	str	r2, [r5, #0]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	f7f4 fdaa 	bl	8001ab4 <_write>
 800cf60:	1c43      	adds	r3, r0, #1
 800cf62:	d102      	bne.n	800cf6a <_write_r+0x1e>
 800cf64:	682b      	ldr	r3, [r5, #0]
 800cf66:	b103      	cbz	r3, 800cf6a <_write_r+0x1e>
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	bd38      	pop	{r3, r4, r5, pc}
 800cf6c:	20001c50 	.word	0x20001c50

0800cf70 <__errno>:
 800cf70:	4b01      	ldr	r3, [pc, #4]	@ (800cf78 <__errno+0x8>)
 800cf72:	6818      	ldr	r0, [r3, #0]
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	20000190 	.word	0x20000190

0800cf7c <__libc_init_array>:
 800cf7c:	b570      	push	{r4, r5, r6, lr}
 800cf7e:	4d0d      	ldr	r5, [pc, #52]	@ (800cfb4 <__libc_init_array+0x38>)
 800cf80:	4c0d      	ldr	r4, [pc, #52]	@ (800cfb8 <__libc_init_array+0x3c>)
 800cf82:	1b64      	subs	r4, r4, r5
 800cf84:	10a4      	asrs	r4, r4, #2
 800cf86:	2600      	movs	r6, #0
 800cf88:	42a6      	cmp	r6, r4
 800cf8a:	d109      	bne.n	800cfa0 <__libc_init_array+0x24>
 800cf8c:	4d0b      	ldr	r5, [pc, #44]	@ (800cfbc <__libc_init_array+0x40>)
 800cf8e:	4c0c      	ldr	r4, [pc, #48]	@ (800cfc0 <__libc_init_array+0x44>)
 800cf90:	f003 fb74 	bl	801067c <_init>
 800cf94:	1b64      	subs	r4, r4, r5
 800cf96:	10a4      	asrs	r4, r4, #2
 800cf98:	2600      	movs	r6, #0
 800cf9a:	42a6      	cmp	r6, r4
 800cf9c:	d105      	bne.n	800cfaa <__libc_init_array+0x2e>
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}
 800cfa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfa4:	4798      	blx	r3
 800cfa6:	3601      	adds	r6, #1
 800cfa8:	e7ee      	b.n	800cf88 <__libc_init_array+0xc>
 800cfaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfae:	4798      	blx	r3
 800cfb0:	3601      	adds	r6, #1
 800cfb2:	e7f2      	b.n	800cf9a <__libc_init_array+0x1e>
 800cfb4:	08010ba0 	.word	0x08010ba0
 800cfb8:	08010ba0 	.word	0x08010ba0
 800cfbc:	08010ba0 	.word	0x08010ba0
 800cfc0:	08010ba4 	.word	0x08010ba4

0800cfc4 <__retarget_lock_init_recursive>:
 800cfc4:	4770      	bx	lr

0800cfc6 <__retarget_lock_acquire_recursive>:
 800cfc6:	4770      	bx	lr

0800cfc8 <__retarget_lock_release_recursive>:
 800cfc8:	4770      	bx	lr

0800cfca <memcpy>:
 800cfca:	440a      	add	r2, r1
 800cfcc:	4291      	cmp	r1, r2
 800cfce:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfd2:	d100      	bne.n	800cfd6 <memcpy+0xc>
 800cfd4:	4770      	bx	lr
 800cfd6:	b510      	push	{r4, lr}
 800cfd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfe0:	4291      	cmp	r1, r2
 800cfe2:	d1f9      	bne.n	800cfd8 <memcpy+0xe>
 800cfe4:	bd10      	pop	{r4, pc}
	...

0800cfe8 <nanf>:
 800cfe8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cff0 <nanf+0x8>
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	7fc00000 	.word	0x7fc00000

0800cff4 <quorem>:
 800cff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff8:	6903      	ldr	r3, [r0, #16]
 800cffa:	690c      	ldr	r4, [r1, #16]
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	4607      	mov	r7, r0
 800d000:	db7e      	blt.n	800d100 <quorem+0x10c>
 800d002:	3c01      	subs	r4, #1
 800d004:	f101 0814 	add.w	r8, r1, #20
 800d008:	00a3      	lsls	r3, r4, #2
 800d00a:	f100 0514 	add.w	r5, r0, #20
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d01a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d01e:	3301      	adds	r3, #1
 800d020:	429a      	cmp	r2, r3
 800d022:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d026:	fbb2 f6f3 	udiv	r6, r2, r3
 800d02a:	d32e      	bcc.n	800d08a <quorem+0x96>
 800d02c:	f04f 0a00 	mov.w	sl, #0
 800d030:	46c4      	mov	ip, r8
 800d032:	46ae      	mov	lr, r5
 800d034:	46d3      	mov	fp, sl
 800d036:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d03a:	b298      	uxth	r0, r3
 800d03c:	fb06 a000 	mla	r0, r6, r0, sl
 800d040:	0c02      	lsrs	r2, r0, #16
 800d042:	0c1b      	lsrs	r3, r3, #16
 800d044:	fb06 2303 	mla	r3, r6, r3, r2
 800d048:	f8de 2000 	ldr.w	r2, [lr]
 800d04c:	b280      	uxth	r0, r0
 800d04e:	b292      	uxth	r2, r2
 800d050:	1a12      	subs	r2, r2, r0
 800d052:	445a      	add	r2, fp
 800d054:	f8de 0000 	ldr.w	r0, [lr]
 800d058:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d062:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d066:	b292      	uxth	r2, r2
 800d068:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d06c:	45e1      	cmp	r9, ip
 800d06e:	f84e 2b04 	str.w	r2, [lr], #4
 800d072:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d076:	d2de      	bcs.n	800d036 <quorem+0x42>
 800d078:	9b00      	ldr	r3, [sp, #0]
 800d07a:	58eb      	ldr	r3, [r5, r3]
 800d07c:	b92b      	cbnz	r3, 800d08a <quorem+0x96>
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	3b04      	subs	r3, #4
 800d082:	429d      	cmp	r5, r3
 800d084:	461a      	mov	r2, r3
 800d086:	d32f      	bcc.n	800d0e8 <quorem+0xf4>
 800d088:	613c      	str	r4, [r7, #16]
 800d08a:	4638      	mov	r0, r7
 800d08c:	f001 f9c4 	bl	800e418 <__mcmp>
 800d090:	2800      	cmp	r0, #0
 800d092:	db25      	blt.n	800d0e0 <quorem+0xec>
 800d094:	4629      	mov	r1, r5
 800d096:	2000      	movs	r0, #0
 800d098:	f858 2b04 	ldr.w	r2, [r8], #4
 800d09c:	f8d1 c000 	ldr.w	ip, [r1]
 800d0a0:	fa1f fe82 	uxth.w	lr, r2
 800d0a4:	fa1f f38c 	uxth.w	r3, ip
 800d0a8:	eba3 030e 	sub.w	r3, r3, lr
 800d0ac:	4403      	add	r3, r0
 800d0ae:	0c12      	lsrs	r2, r2, #16
 800d0b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0be:	45c1      	cmp	r9, r8
 800d0c0:	f841 3b04 	str.w	r3, [r1], #4
 800d0c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0c8:	d2e6      	bcs.n	800d098 <quorem+0xa4>
 800d0ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0d2:	b922      	cbnz	r2, 800d0de <quorem+0xea>
 800d0d4:	3b04      	subs	r3, #4
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	461a      	mov	r2, r3
 800d0da:	d30b      	bcc.n	800d0f4 <quorem+0x100>
 800d0dc:	613c      	str	r4, [r7, #16]
 800d0de:	3601      	adds	r6, #1
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	b003      	add	sp, #12
 800d0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e8:	6812      	ldr	r2, [r2, #0]
 800d0ea:	3b04      	subs	r3, #4
 800d0ec:	2a00      	cmp	r2, #0
 800d0ee:	d1cb      	bne.n	800d088 <quorem+0x94>
 800d0f0:	3c01      	subs	r4, #1
 800d0f2:	e7c6      	b.n	800d082 <quorem+0x8e>
 800d0f4:	6812      	ldr	r2, [r2, #0]
 800d0f6:	3b04      	subs	r3, #4
 800d0f8:	2a00      	cmp	r2, #0
 800d0fa:	d1ef      	bne.n	800d0dc <quorem+0xe8>
 800d0fc:	3c01      	subs	r4, #1
 800d0fe:	e7ea      	b.n	800d0d6 <quorem+0xe2>
 800d100:	2000      	movs	r0, #0
 800d102:	e7ee      	b.n	800d0e2 <quorem+0xee>
 800d104:	0000      	movs	r0, r0
	...

0800d108 <_dtoa_r>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	69c7      	ldr	r7, [r0, #28]
 800d10e:	b099      	sub	sp, #100	@ 0x64
 800d110:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d114:	ec55 4b10 	vmov	r4, r5, d0
 800d118:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d11a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d11c:	4683      	mov	fp, r0
 800d11e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d120:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d122:	b97f      	cbnz	r7, 800d144 <_dtoa_r+0x3c>
 800d124:	2010      	movs	r0, #16
 800d126:	f000 fdfd 	bl	800dd24 <malloc>
 800d12a:	4602      	mov	r2, r0
 800d12c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d130:	b920      	cbnz	r0, 800d13c <_dtoa_r+0x34>
 800d132:	4ba7      	ldr	r3, [pc, #668]	@ (800d3d0 <_dtoa_r+0x2c8>)
 800d134:	21ef      	movs	r1, #239	@ 0xef
 800d136:	48a7      	ldr	r0, [pc, #668]	@ (800d3d4 <_dtoa_r+0x2cc>)
 800d138:	f002 fc2a 	bl	800f990 <__assert_func>
 800d13c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d140:	6007      	str	r7, [r0, #0]
 800d142:	60c7      	str	r7, [r0, #12]
 800d144:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d148:	6819      	ldr	r1, [r3, #0]
 800d14a:	b159      	cbz	r1, 800d164 <_dtoa_r+0x5c>
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	604a      	str	r2, [r1, #4]
 800d150:	2301      	movs	r3, #1
 800d152:	4093      	lsls	r3, r2
 800d154:	608b      	str	r3, [r1, #8]
 800d156:	4658      	mov	r0, fp
 800d158:	f000 feda 	bl	800df10 <_Bfree>
 800d15c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	1e2b      	subs	r3, r5, #0
 800d166:	bfb9      	ittee	lt
 800d168:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d16c:	9303      	strlt	r3, [sp, #12]
 800d16e:	2300      	movge	r3, #0
 800d170:	6033      	strge	r3, [r6, #0]
 800d172:	9f03      	ldr	r7, [sp, #12]
 800d174:	4b98      	ldr	r3, [pc, #608]	@ (800d3d8 <_dtoa_r+0x2d0>)
 800d176:	bfbc      	itt	lt
 800d178:	2201      	movlt	r2, #1
 800d17a:	6032      	strlt	r2, [r6, #0]
 800d17c:	43bb      	bics	r3, r7
 800d17e:	d112      	bne.n	800d1a6 <_dtoa_r+0x9e>
 800d180:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d182:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d18c:	4323      	orrs	r3, r4
 800d18e:	f000 854d 	beq.w	800dc2c <_dtoa_r+0xb24>
 800d192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d194:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d3ec <_dtoa_r+0x2e4>
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f000 854f 	beq.w	800dc3c <_dtoa_r+0xb34>
 800d19e:	f10a 0303 	add.w	r3, sl, #3
 800d1a2:	f000 bd49 	b.w	800dc38 <_dtoa_r+0xb30>
 800d1a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	ec51 0b17 	vmov	r0, r1, d7
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d1b6:	f7f3 fc87 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	b158      	cbz	r0, 800d1d6 <_dtoa_r+0xce>
 800d1be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1c6:	b113      	cbz	r3, 800d1ce <_dtoa_r+0xc6>
 800d1c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d1ca:	4b84      	ldr	r3, [pc, #528]	@ (800d3dc <_dtoa_r+0x2d4>)
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d3f0 <_dtoa_r+0x2e8>
 800d1d2:	f000 bd33 	b.w	800dc3c <_dtoa_r+0xb34>
 800d1d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d1da:	aa16      	add	r2, sp, #88	@ 0x58
 800d1dc:	a917      	add	r1, sp, #92	@ 0x5c
 800d1de:	4658      	mov	r0, fp
 800d1e0:	f001 fa3a 	bl	800e658 <__d2b>
 800d1e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d1e8:	4681      	mov	r9, r0
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	d077      	beq.n	800d2de <_dtoa_r+0x1d6>
 800d1ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d1f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d200:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d204:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d208:	4619      	mov	r1, r3
 800d20a:	2200      	movs	r2, #0
 800d20c:	4b74      	ldr	r3, [pc, #464]	@ (800d3e0 <_dtoa_r+0x2d8>)
 800d20e:	f7f3 f83b 	bl	8000288 <__aeabi_dsub>
 800d212:	a369      	add	r3, pc, #420	@ (adr r3, 800d3b8 <_dtoa_r+0x2b0>)
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	f7f3 f9ee 	bl	80005f8 <__aeabi_dmul>
 800d21c:	a368      	add	r3, pc, #416	@ (adr r3, 800d3c0 <_dtoa_r+0x2b8>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	f7f3 f833 	bl	800028c <__adddf3>
 800d226:	4604      	mov	r4, r0
 800d228:	4630      	mov	r0, r6
 800d22a:	460d      	mov	r5, r1
 800d22c:	f7f3 f97a 	bl	8000524 <__aeabi_i2d>
 800d230:	a365      	add	r3, pc, #404	@ (adr r3, 800d3c8 <_dtoa_r+0x2c0>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	f7f3 f9df 	bl	80005f8 <__aeabi_dmul>
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4620      	mov	r0, r4
 800d240:	4629      	mov	r1, r5
 800d242:	f7f3 f823 	bl	800028c <__adddf3>
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	f7f3 fc85 	bl	8000b58 <__aeabi_d2iz>
 800d24e:	2200      	movs	r2, #0
 800d250:	4607      	mov	r7, r0
 800d252:	2300      	movs	r3, #0
 800d254:	4620      	mov	r0, r4
 800d256:	4629      	mov	r1, r5
 800d258:	f7f3 fc40 	bl	8000adc <__aeabi_dcmplt>
 800d25c:	b140      	cbz	r0, 800d270 <_dtoa_r+0x168>
 800d25e:	4638      	mov	r0, r7
 800d260:	f7f3 f960 	bl	8000524 <__aeabi_i2d>
 800d264:	4622      	mov	r2, r4
 800d266:	462b      	mov	r3, r5
 800d268:	f7f3 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d26c:	b900      	cbnz	r0, 800d270 <_dtoa_r+0x168>
 800d26e:	3f01      	subs	r7, #1
 800d270:	2f16      	cmp	r7, #22
 800d272:	d851      	bhi.n	800d318 <_dtoa_r+0x210>
 800d274:	4b5b      	ldr	r3, [pc, #364]	@ (800d3e4 <_dtoa_r+0x2dc>)
 800d276:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d282:	f7f3 fc2b 	bl	8000adc <__aeabi_dcmplt>
 800d286:	2800      	cmp	r0, #0
 800d288:	d048      	beq.n	800d31c <_dtoa_r+0x214>
 800d28a:	3f01      	subs	r7, #1
 800d28c:	2300      	movs	r3, #0
 800d28e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d290:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d292:	1b9b      	subs	r3, r3, r6
 800d294:	1e5a      	subs	r2, r3, #1
 800d296:	bf44      	itt	mi
 800d298:	f1c3 0801 	rsbmi	r8, r3, #1
 800d29c:	2300      	movmi	r3, #0
 800d29e:	9208      	str	r2, [sp, #32]
 800d2a0:	bf54      	ite	pl
 800d2a2:	f04f 0800 	movpl.w	r8, #0
 800d2a6:	9308      	strmi	r3, [sp, #32]
 800d2a8:	2f00      	cmp	r7, #0
 800d2aa:	db39      	blt.n	800d320 <_dtoa_r+0x218>
 800d2ac:	9b08      	ldr	r3, [sp, #32]
 800d2ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d2b0:	443b      	add	r3, r7
 800d2b2:	9308      	str	r3, [sp, #32]
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ba:	2b09      	cmp	r3, #9
 800d2bc:	d864      	bhi.n	800d388 <_dtoa_r+0x280>
 800d2be:	2b05      	cmp	r3, #5
 800d2c0:	bfc4      	itt	gt
 800d2c2:	3b04      	subgt	r3, #4
 800d2c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2c8:	f1a3 0302 	sub.w	r3, r3, #2
 800d2cc:	bfcc      	ite	gt
 800d2ce:	2400      	movgt	r4, #0
 800d2d0:	2401      	movle	r4, #1
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d863      	bhi.n	800d39e <_dtoa_r+0x296>
 800d2d6:	e8df f003 	tbb	[pc, r3]
 800d2da:	372a      	.short	0x372a
 800d2dc:	5535      	.short	0x5535
 800d2de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d2e2:	441e      	add	r6, r3
 800d2e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d2e8:	2b20      	cmp	r3, #32
 800d2ea:	bfc1      	itttt	gt
 800d2ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d2f0:	409f      	lslgt	r7, r3
 800d2f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d2f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d2fa:	bfd6      	itet	le
 800d2fc:	f1c3 0320 	rsble	r3, r3, #32
 800d300:	ea47 0003 	orrgt.w	r0, r7, r3
 800d304:	fa04 f003 	lslle.w	r0, r4, r3
 800d308:	f7f3 f8fc 	bl	8000504 <__aeabi_ui2d>
 800d30c:	2201      	movs	r2, #1
 800d30e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d312:	3e01      	subs	r6, #1
 800d314:	9214      	str	r2, [sp, #80]	@ 0x50
 800d316:	e777      	b.n	800d208 <_dtoa_r+0x100>
 800d318:	2301      	movs	r3, #1
 800d31a:	e7b8      	b.n	800d28e <_dtoa_r+0x186>
 800d31c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d31e:	e7b7      	b.n	800d290 <_dtoa_r+0x188>
 800d320:	427b      	negs	r3, r7
 800d322:	930a      	str	r3, [sp, #40]	@ 0x28
 800d324:	2300      	movs	r3, #0
 800d326:	eba8 0807 	sub.w	r8, r8, r7
 800d32a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d32c:	e7c4      	b.n	800d2b8 <_dtoa_r+0x1b0>
 800d32e:	2300      	movs	r3, #0
 800d330:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d334:	2b00      	cmp	r3, #0
 800d336:	dc35      	bgt.n	800d3a4 <_dtoa_r+0x29c>
 800d338:	2301      	movs	r3, #1
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	9307      	str	r3, [sp, #28]
 800d33e:	461a      	mov	r2, r3
 800d340:	920e      	str	r2, [sp, #56]	@ 0x38
 800d342:	e00b      	b.n	800d35c <_dtoa_r+0x254>
 800d344:	2301      	movs	r3, #1
 800d346:	e7f3      	b.n	800d330 <_dtoa_r+0x228>
 800d348:	2300      	movs	r3, #0
 800d34a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d34c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d34e:	18fb      	adds	r3, r7, r3
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	3301      	adds	r3, #1
 800d354:	2b01      	cmp	r3, #1
 800d356:	9307      	str	r3, [sp, #28]
 800d358:	bfb8      	it	lt
 800d35a:	2301      	movlt	r3, #1
 800d35c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d360:	2100      	movs	r1, #0
 800d362:	2204      	movs	r2, #4
 800d364:	f102 0514 	add.w	r5, r2, #20
 800d368:	429d      	cmp	r5, r3
 800d36a:	d91f      	bls.n	800d3ac <_dtoa_r+0x2a4>
 800d36c:	6041      	str	r1, [r0, #4]
 800d36e:	4658      	mov	r0, fp
 800d370:	f000 fd8e 	bl	800de90 <_Balloc>
 800d374:	4682      	mov	sl, r0
 800d376:	2800      	cmp	r0, #0
 800d378:	d13c      	bne.n	800d3f4 <_dtoa_r+0x2ec>
 800d37a:	4b1b      	ldr	r3, [pc, #108]	@ (800d3e8 <_dtoa_r+0x2e0>)
 800d37c:	4602      	mov	r2, r0
 800d37e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d382:	e6d8      	b.n	800d136 <_dtoa_r+0x2e>
 800d384:	2301      	movs	r3, #1
 800d386:	e7e0      	b.n	800d34a <_dtoa_r+0x242>
 800d388:	2401      	movs	r4, #1
 800d38a:	2300      	movs	r3, #0
 800d38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d38e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d390:	f04f 33ff 	mov.w	r3, #4294967295
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	9307      	str	r3, [sp, #28]
 800d398:	2200      	movs	r2, #0
 800d39a:	2312      	movs	r3, #18
 800d39c:	e7d0      	b.n	800d340 <_dtoa_r+0x238>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3a2:	e7f5      	b.n	800d390 <_dtoa_r+0x288>
 800d3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	9307      	str	r3, [sp, #28]
 800d3aa:	e7d7      	b.n	800d35c <_dtoa_r+0x254>
 800d3ac:	3101      	adds	r1, #1
 800d3ae:	0052      	lsls	r2, r2, #1
 800d3b0:	e7d8      	b.n	800d364 <_dtoa_r+0x25c>
 800d3b2:	bf00      	nop
 800d3b4:	f3af 8000 	nop.w
 800d3b8:	636f4361 	.word	0x636f4361
 800d3bc:	3fd287a7 	.word	0x3fd287a7
 800d3c0:	8b60c8b3 	.word	0x8b60c8b3
 800d3c4:	3fc68a28 	.word	0x3fc68a28
 800d3c8:	509f79fb 	.word	0x509f79fb
 800d3cc:	3fd34413 	.word	0x3fd34413
 800d3d0:	080107b2 	.word	0x080107b2
 800d3d4:	080107c9 	.word	0x080107c9
 800d3d8:	7ff00000 	.word	0x7ff00000
 800d3dc:	0801077d 	.word	0x0801077d
 800d3e0:	3ff80000 	.word	0x3ff80000
 800d3e4:	080108c0 	.word	0x080108c0
 800d3e8:	08010821 	.word	0x08010821
 800d3ec:	080107ae 	.word	0x080107ae
 800d3f0:	0801077c 	.word	0x0801077c
 800d3f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3f8:	6018      	str	r0, [r3, #0]
 800d3fa:	9b07      	ldr	r3, [sp, #28]
 800d3fc:	2b0e      	cmp	r3, #14
 800d3fe:	f200 80a4 	bhi.w	800d54a <_dtoa_r+0x442>
 800d402:	2c00      	cmp	r4, #0
 800d404:	f000 80a1 	beq.w	800d54a <_dtoa_r+0x442>
 800d408:	2f00      	cmp	r7, #0
 800d40a:	dd33      	ble.n	800d474 <_dtoa_r+0x36c>
 800d40c:	4bad      	ldr	r3, [pc, #692]	@ (800d6c4 <_dtoa_r+0x5bc>)
 800d40e:	f007 020f 	and.w	r2, r7, #15
 800d412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d416:	ed93 7b00 	vldr	d7, [r3]
 800d41a:	05f8      	lsls	r0, r7, #23
 800d41c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d420:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d424:	d516      	bpl.n	800d454 <_dtoa_r+0x34c>
 800d426:	4ba8      	ldr	r3, [pc, #672]	@ (800d6c8 <_dtoa_r+0x5c0>)
 800d428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d42c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d430:	f7f3 fa0c 	bl	800084c <__aeabi_ddiv>
 800d434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d438:	f004 040f 	and.w	r4, r4, #15
 800d43c:	2603      	movs	r6, #3
 800d43e:	4da2      	ldr	r5, [pc, #648]	@ (800d6c8 <_dtoa_r+0x5c0>)
 800d440:	b954      	cbnz	r4, 800d458 <_dtoa_r+0x350>
 800d442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d44a:	f7f3 f9ff 	bl	800084c <__aeabi_ddiv>
 800d44e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d452:	e028      	b.n	800d4a6 <_dtoa_r+0x39e>
 800d454:	2602      	movs	r6, #2
 800d456:	e7f2      	b.n	800d43e <_dtoa_r+0x336>
 800d458:	07e1      	lsls	r1, r4, #31
 800d45a:	d508      	bpl.n	800d46e <_dtoa_r+0x366>
 800d45c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d460:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d464:	f7f3 f8c8 	bl	80005f8 <__aeabi_dmul>
 800d468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d46c:	3601      	adds	r6, #1
 800d46e:	1064      	asrs	r4, r4, #1
 800d470:	3508      	adds	r5, #8
 800d472:	e7e5      	b.n	800d440 <_dtoa_r+0x338>
 800d474:	f000 80d2 	beq.w	800d61c <_dtoa_r+0x514>
 800d478:	427c      	negs	r4, r7
 800d47a:	4b92      	ldr	r3, [pc, #584]	@ (800d6c4 <_dtoa_r+0x5bc>)
 800d47c:	4d92      	ldr	r5, [pc, #584]	@ (800d6c8 <_dtoa_r+0x5c0>)
 800d47e:	f004 020f 	and.w	r2, r4, #15
 800d482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d48e:	f7f3 f8b3 	bl	80005f8 <__aeabi_dmul>
 800d492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d496:	1124      	asrs	r4, r4, #4
 800d498:	2300      	movs	r3, #0
 800d49a:	2602      	movs	r6, #2
 800d49c:	2c00      	cmp	r4, #0
 800d49e:	f040 80b2 	bne.w	800d606 <_dtoa_r+0x4fe>
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1d3      	bne.n	800d44e <_dtoa_r+0x346>
 800d4a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 80b7 	beq.w	800d620 <_dtoa_r+0x518>
 800d4b2:	4b86      	ldr	r3, [pc, #536]	@ (800d6cc <_dtoa_r+0x5c4>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	f7f3 fb0f 	bl	8000adc <__aeabi_dcmplt>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	f000 80ae 	beq.w	800d620 <_dtoa_r+0x518>
 800d4c4:	9b07      	ldr	r3, [sp, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f000 80aa 	beq.w	800d620 <_dtoa_r+0x518>
 800d4cc:	9b00      	ldr	r3, [sp, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	dd37      	ble.n	800d542 <_dtoa_r+0x43a>
 800d4d2:	1e7b      	subs	r3, r7, #1
 800d4d4:	9304      	str	r3, [sp, #16]
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	4b7d      	ldr	r3, [pc, #500]	@ (800d6d0 <_dtoa_r+0x5c8>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4e6:	9c00      	ldr	r4, [sp, #0]
 800d4e8:	3601      	adds	r6, #1
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	f7f3 f81a 	bl	8000524 <__aeabi_i2d>
 800d4f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4f4:	f7f3 f880 	bl	80005f8 <__aeabi_dmul>
 800d4f8:	4b76      	ldr	r3, [pc, #472]	@ (800d6d4 <_dtoa_r+0x5cc>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f7f2 fec6 	bl	800028c <__adddf3>
 800d500:	4605      	mov	r5, r0
 800d502:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d506:	2c00      	cmp	r4, #0
 800d508:	f040 808d 	bne.w	800d626 <_dtoa_r+0x51e>
 800d50c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d510:	4b71      	ldr	r3, [pc, #452]	@ (800d6d8 <_dtoa_r+0x5d0>)
 800d512:	2200      	movs	r2, #0
 800d514:	f7f2 feb8 	bl	8000288 <__aeabi_dsub>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d520:	462a      	mov	r2, r5
 800d522:	4633      	mov	r3, r6
 800d524:	f7f3 faf8 	bl	8000b18 <__aeabi_dcmpgt>
 800d528:	2800      	cmp	r0, #0
 800d52a:	f040 828b 	bne.w	800da44 <_dtoa_r+0x93c>
 800d52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d532:	462a      	mov	r2, r5
 800d534:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d538:	f7f3 fad0 	bl	8000adc <__aeabi_dcmplt>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	f040 8128 	bne.w	800d792 <_dtoa_r+0x68a>
 800d542:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d546:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d54a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f2c0 815a 	blt.w	800d806 <_dtoa_r+0x6fe>
 800d552:	2f0e      	cmp	r7, #14
 800d554:	f300 8157 	bgt.w	800d806 <_dtoa_r+0x6fe>
 800d558:	4b5a      	ldr	r3, [pc, #360]	@ (800d6c4 <_dtoa_r+0x5bc>)
 800d55a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d55e:	ed93 7b00 	vldr	d7, [r3]
 800d562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d564:	2b00      	cmp	r3, #0
 800d566:	ed8d 7b00 	vstr	d7, [sp]
 800d56a:	da03      	bge.n	800d574 <_dtoa_r+0x46c>
 800d56c:	9b07      	ldr	r3, [sp, #28]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f340 8101 	ble.w	800d776 <_dtoa_r+0x66e>
 800d574:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d578:	4656      	mov	r6, sl
 800d57a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d57e:	4620      	mov	r0, r4
 800d580:	4629      	mov	r1, r5
 800d582:	f7f3 f963 	bl	800084c <__aeabi_ddiv>
 800d586:	f7f3 fae7 	bl	8000b58 <__aeabi_d2iz>
 800d58a:	4680      	mov	r8, r0
 800d58c:	f7f2 ffca 	bl	8000524 <__aeabi_i2d>
 800d590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d594:	f7f3 f830 	bl	80005f8 <__aeabi_dmul>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	4620      	mov	r0, r4
 800d59e:	4629      	mov	r1, r5
 800d5a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5a4:	f7f2 fe70 	bl	8000288 <__aeabi_dsub>
 800d5a8:	f806 4b01 	strb.w	r4, [r6], #1
 800d5ac:	9d07      	ldr	r5, [sp, #28]
 800d5ae:	eba6 040a 	sub.w	r4, r6, sl
 800d5b2:	42a5      	cmp	r5, r4
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	f040 8117 	bne.w	800d7ea <_dtoa_r+0x6e2>
 800d5bc:	f7f2 fe66 	bl	800028c <__adddf3>
 800d5c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	f7f3 faa6 	bl	8000b18 <__aeabi_dcmpgt>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	f040 80f9 	bne.w	800d7c4 <_dtoa_r+0x6bc>
 800d5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	4629      	mov	r1, r5
 800d5da:	f7f3 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5de:	b118      	cbz	r0, 800d5e8 <_dtoa_r+0x4e0>
 800d5e0:	f018 0f01 	tst.w	r8, #1
 800d5e4:	f040 80ee 	bne.w	800d7c4 <_dtoa_r+0x6bc>
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	4658      	mov	r0, fp
 800d5ec:	f000 fc90 	bl	800df10 <_Bfree>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	7033      	strb	r3, [r6, #0]
 800d5f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d5f6:	3701      	adds	r7, #1
 800d5f8:	601f      	str	r7, [r3, #0]
 800d5fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 831d 	beq.w	800dc3c <_dtoa_r+0xb34>
 800d602:	601e      	str	r6, [r3, #0]
 800d604:	e31a      	b.n	800dc3c <_dtoa_r+0xb34>
 800d606:	07e2      	lsls	r2, r4, #31
 800d608:	d505      	bpl.n	800d616 <_dtoa_r+0x50e>
 800d60a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d60e:	f7f2 fff3 	bl	80005f8 <__aeabi_dmul>
 800d612:	3601      	adds	r6, #1
 800d614:	2301      	movs	r3, #1
 800d616:	1064      	asrs	r4, r4, #1
 800d618:	3508      	adds	r5, #8
 800d61a:	e73f      	b.n	800d49c <_dtoa_r+0x394>
 800d61c:	2602      	movs	r6, #2
 800d61e:	e742      	b.n	800d4a6 <_dtoa_r+0x39e>
 800d620:	9c07      	ldr	r4, [sp, #28]
 800d622:	9704      	str	r7, [sp, #16]
 800d624:	e761      	b.n	800d4ea <_dtoa_r+0x3e2>
 800d626:	4b27      	ldr	r3, [pc, #156]	@ (800d6c4 <_dtoa_r+0x5bc>)
 800d628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d62a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d62e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d632:	4454      	add	r4, sl
 800d634:	2900      	cmp	r1, #0
 800d636:	d053      	beq.n	800d6e0 <_dtoa_r+0x5d8>
 800d638:	4928      	ldr	r1, [pc, #160]	@ (800d6dc <_dtoa_r+0x5d4>)
 800d63a:	2000      	movs	r0, #0
 800d63c:	f7f3 f906 	bl	800084c <__aeabi_ddiv>
 800d640:	4633      	mov	r3, r6
 800d642:	462a      	mov	r2, r5
 800d644:	f7f2 fe20 	bl	8000288 <__aeabi_dsub>
 800d648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d64c:	4656      	mov	r6, sl
 800d64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d652:	f7f3 fa81 	bl	8000b58 <__aeabi_d2iz>
 800d656:	4605      	mov	r5, r0
 800d658:	f7f2 ff64 	bl	8000524 <__aeabi_i2d>
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
 800d660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d664:	f7f2 fe10 	bl	8000288 <__aeabi_dsub>
 800d668:	3530      	adds	r5, #48	@ 0x30
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d672:	f806 5b01 	strb.w	r5, [r6], #1
 800d676:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d67a:	f7f3 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d171      	bne.n	800d766 <_dtoa_r+0x65e>
 800d682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d686:	4911      	ldr	r1, [pc, #68]	@ (800d6cc <_dtoa_r+0x5c4>)
 800d688:	2000      	movs	r0, #0
 800d68a:	f7f2 fdfd 	bl	8000288 <__aeabi_dsub>
 800d68e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d692:	f7f3 fa23 	bl	8000adc <__aeabi_dcmplt>
 800d696:	2800      	cmp	r0, #0
 800d698:	f040 8095 	bne.w	800d7c6 <_dtoa_r+0x6be>
 800d69c:	42a6      	cmp	r6, r4
 800d69e:	f43f af50 	beq.w	800d542 <_dtoa_r+0x43a>
 800d6a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d0 <_dtoa_r+0x5c8>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f7f2 ffa5 	bl	80005f8 <__aeabi_dmul>
 800d6ae:	4b08      	ldr	r3, [pc, #32]	@ (800d6d0 <_dtoa_r+0x5c8>)
 800d6b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ba:	f7f2 ff9d 	bl	80005f8 <__aeabi_dmul>
 800d6be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6c2:	e7c4      	b.n	800d64e <_dtoa_r+0x546>
 800d6c4:	080108c0 	.word	0x080108c0
 800d6c8:	08010898 	.word	0x08010898
 800d6cc:	3ff00000 	.word	0x3ff00000
 800d6d0:	40240000 	.word	0x40240000
 800d6d4:	401c0000 	.word	0x401c0000
 800d6d8:	40140000 	.word	0x40140000
 800d6dc:	3fe00000 	.word	0x3fe00000
 800d6e0:	4631      	mov	r1, r6
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f7f2 ff88 	bl	80005f8 <__aeabi_dmul>
 800d6e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800d6ee:	4656      	mov	r6, sl
 800d6f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6f4:	f7f3 fa30 	bl	8000b58 <__aeabi_d2iz>
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	f7f2 ff13 	bl	8000524 <__aeabi_i2d>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d706:	f7f2 fdbf 	bl	8000288 <__aeabi_dsub>
 800d70a:	3530      	adds	r5, #48	@ 0x30
 800d70c:	f806 5b01 	strb.w	r5, [r6], #1
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	42a6      	cmp	r6, r4
 800d716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d71a:	f04f 0200 	mov.w	r2, #0
 800d71e:	d124      	bne.n	800d76a <_dtoa_r+0x662>
 800d720:	4bac      	ldr	r3, [pc, #688]	@ (800d9d4 <_dtoa_r+0x8cc>)
 800d722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d726:	f7f2 fdb1 	bl	800028c <__adddf3>
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d732:	f7f3 f9f1 	bl	8000b18 <__aeabi_dcmpgt>
 800d736:	2800      	cmp	r0, #0
 800d738:	d145      	bne.n	800d7c6 <_dtoa_r+0x6be>
 800d73a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d73e:	49a5      	ldr	r1, [pc, #660]	@ (800d9d4 <_dtoa_r+0x8cc>)
 800d740:	2000      	movs	r0, #0
 800d742:	f7f2 fda1 	bl	8000288 <__aeabi_dsub>
 800d746:	4602      	mov	r2, r0
 800d748:	460b      	mov	r3, r1
 800d74a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d74e:	f7f3 f9c5 	bl	8000adc <__aeabi_dcmplt>
 800d752:	2800      	cmp	r0, #0
 800d754:	f43f aef5 	beq.w	800d542 <_dtoa_r+0x43a>
 800d758:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d75a:	1e73      	subs	r3, r6, #1
 800d75c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d75e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d762:	2b30      	cmp	r3, #48	@ 0x30
 800d764:	d0f8      	beq.n	800d758 <_dtoa_r+0x650>
 800d766:	9f04      	ldr	r7, [sp, #16]
 800d768:	e73e      	b.n	800d5e8 <_dtoa_r+0x4e0>
 800d76a:	4b9b      	ldr	r3, [pc, #620]	@ (800d9d8 <_dtoa_r+0x8d0>)
 800d76c:	f7f2 ff44 	bl	80005f8 <__aeabi_dmul>
 800d770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d774:	e7bc      	b.n	800d6f0 <_dtoa_r+0x5e8>
 800d776:	d10c      	bne.n	800d792 <_dtoa_r+0x68a>
 800d778:	4b98      	ldr	r3, [pc, #608]	@ (800d9dc <_dtoa_r+0x8d4>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d780:	f7f2 ff3a 	bl	80005f8 <__aeabi_dmul>
 800d784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d788:	f7f3 f9bc 	bl	8000b04 <__aeabi_dcmpge>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	f000 8157 	beq.w	800da40 <_dtoa_r+0x938>
 800d792:	2400      	movs	r4, #0
 800d794:	4625      	mov	r5, r4
 800d796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d798:	43db      	mvns	r3, r3
 800d79a:	9304      	str	r3, [sp, #16]
 800d79c:	4656      	mov	r6, sl
 800d79e:	2700      	movs	r7, #0
 800d7a0:	4621      	mov	r1, r4
 800d7a2:	4658      	mov	r0, fp
 800d7a4:	f000 fbb4 	bl	800df10 <_Bfree>
 800d7a8:	2d00      	cmp	r5, #0
 800d7aa:	d0dc      	beq.n	800d766 <_dtoa_r+0x65e>
 800d7ac:	b12f      	cbz	r7, 800d7ba <_dtoa_r+0x6b2>
 800d7ae:	42af      	cmp	r7, r5
 800d7b0:	d003      	beq.n	800d7ba <_dtoa_r+0x6b2>
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	4658      	mov	r0, fp
 800d7b6:	f000 fbab 	bl	800df10 <_Bfree>
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	4658      	mov	r0, fp
 800d7be:	f000 fba7 	bl	800df10 <_Bfree>
 800d7c2:	e7d0      	b.n	800d766 <_dtoa_r+0x65e>
 800d7c4:	9704      	str	r7, [sp, #16]
 800d7c6:	4633      	mov	r3, r6
 800d7c8:	461e      	mov	r6, r3
 800d7ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7ce:	2a39      	cmp	r2, #57	@ 0x39
 800d7d0:	d107      	bne.n	800d7e2 <_dtoa_r+0x6da>
 800d7d2:	459a      	cmp	sl, r3
 800d7d4:	d1f8      	bne.n	800d7c8 <_dtoa_r+0x6c0>
 800d7d6:	9a04      	ldr	r2, [sp, #16]
 800d7d8:	3201      	adds	r2, #1
 800d7da:	9204      	str	r2, [sp, #16]
 800d7dc:	2230      	movs	r2, #48	@ 0x30
 800d7de:	f88a 2000 	strb.w	r2, [sl]
 800d7e2:	781a      	ldrb	r2, [r3, #0]
 800d7e4:	3201      	adds	r2, #1
 800d7e6:	701a      	strb	r2, [r3, #0]
 800d7e8:	e7bd      	b.n	800d766 <_dtoa_r+0x65e>
 800d7ea:	4b7b      	ldr	r3, [pc, #492]	@ (800d9d8 <_dtoa_r+0x8d0>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f7f2 ff03 	bl	80005f8 <__aeabi_dmul>
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	f7f3 f965 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f43f aebb 	beq.w	800d57a <_dtoa_r+0x472>
 800d804:	e6f0      	b.n	800d5e8 <_dtoa_r+0x4e0>
 800d806:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d808:	2a00      	cmp	r2, #0
 800d80a:	f000 80db 	beq.w	800d9c4 <_dtoa_r+0x8bc>
 800d80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d810:	2a01      	cmp	r2, #1
 800d812:	f300 80bf 	bgt.w	800d994 <_dtoa_r+0x88c>
 800d816:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d818:	2a00      	cmp	r2, #0
 800d81a:	f000 80b7 	beq.w	800d98c <_dtoa_r+0x884>
 800d81e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d822:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d824:	4646      	mov	r6, r8
 800d826:	9a08      	ldr	r2, [sp, #32]
 800d828:	2101      	movs	r1, #1
 800d82a:	441a      	add	r2, r3
 800d82c:	4658      	mov	r0, fp
 800d82e:	4498      	add	r8, r3
 800d830:	9208      	str	r2, [sp, #32]
 800d832:	f000 fc6b 	bl	800e10c <__i2b>
 800d836:	4605      	mov	r5, r0
 800d838:	b15e      	cbz	r6, 800d852 <_dtoa_r+0x74a>
 800d83a:	9b08      	ldr	r3, [sp, #32]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	dd08      	ble.n	800d852 <_dtoa_r+0x74a>
 800d840:	42b3      	cmp	r3, r6
 800d842:	9a08      	ldr	r2, [sp, #32]
 800d844:	bfa8      	it	ge
 800d846:	4633      	movge	r3, r6
 800d848:	eba8 0803 	sub.w	r8, r8, r3
 800d84c:	1af6      	subs	r6, r6, r3
 800d84e:	1ad3      	subs	r3, r2, r3
 800d850:	9308      	str	r3, [sp, #32]
 800d852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d854:	b1f3      	cbz	r3, 800d894 <_dtoa_r+0x78c>
 800d856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f000 80b7 	beq.w	800d9cc <_dtoa_r+0x8c4>
 800d85e:	b18c      	cbz	r4, 800d884 <_dtoa_r+0x77c>
 800d860:	4629      	mov	r1, r5
 800d862:	4622      	mov	r2, r4
 800d864:	4658      	mov	r0, fp
 800d866:	f000 fd11 	bl	800e28c <__pow5mult>
 800d86a:	464a      	mov	r2, r9
 800d86c:	4601      	mov	r1, r0
 800d86e:	4605      	mov	r5, r0
 800d870:	4658      	mov	r0, fp
 800d872:	f000 fc61 	bl	800e138 <__multiply>
 800d876:	4649      	mov	r1, r9
 800d878:	9004      	str	r0, [sp, #16]
 800d87a:	4658      	mov	r0, fp
 800d87c:	f000 fb48 	bl	800df10 <_Bfree>
 800d880:	9b04      	ldr	r3, [sp, #16]
 800d882:	4699      	mov	r9, r3
 800d884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d886:	1b1a      	subs	r2, r3, r4
 800d888:	d004      	beq.n	800d894 <_dtoa_r+0x78c>
 800d88a:	4649      	mov	r1, r9
 800d88c:	4658      	mov	r0, fp
 800d88e:	f000 fcfd 	bl	800e28c <__pow5mult>
 800d892:	4681      	mov	r9, r0
 800d894:	2101      	movs	r1, #1
 800d896:	4658      	mov	r0, fp
 800d898:	f000 fc38 	bl	800e10c <__i2b>
 800d89c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d89e:	4604      	mov	r4, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 81cf 	beq.w	800dc44 <_dtoa_r+0xb3c>
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	4658      	mov	r0, fp
 800d8ac:	f000 fcee 	bl	800e28c <__pow5mult>
 800d8b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	f300 8095 	bgt.w	800d9e4 <_dtoa_r+0x8dc>
 800d8ba:	9b02      	ldr	r3, [sp, #8]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f040 8087 	bne.w	800d9d0 <_dtoa_r+0x8c8>
 800d8c2:	9b03      	ldr	r3, [sp, #12]
 800d8c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	f040 8089 	bne.w	800d9e0 <_dtoa_r+0x8d8>
 800d8ce:	9b03      	ldr	r3, [sp, #12]
 800d8d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8d4:	0d1b      	lsrs	r3, r3, #20
 800d8d6:	051b      	lsls	r3, r3, #20
 800d8d8:	b12b      	cbz	r3, 800d8e6 <_dtoa_r+0x7de>
 800d8da:	9b08      	ldr	r3, [sp, #32]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	9308      	str	r3, [sp, #32]
 800d8e0:	f108 0801 	add.w	r8, r8, #1
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 81b0 	beq.w	800dc50 <_dtoa_r+0xb48>
 800d8f0:	6923      	ldr	r3, [r4, #16]
 800d8f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d8f6:	6918      	ldr	r0, [r3, #16]
 800d8f8:	f000 fbbc 	bl	800e074 <__hi0bits>
 800d8fc:	f1c0 0020 	rsb	r0, r0, #32
 800d900:	9b08      	ldr	r3, [sp, #32]
 800d902:	4418      	add	r0, r3
 800d904:	f010 001f 	ands.w	r0, r0, #31
 800d908:	d077      	beq.n	800d9fa <_dtoa_r+0x8f2>
 800d90a:	f1c0 0320 	rsb	r3, r0, #32
 800d90e:	2b04      	cmp	r3, #4
 800d910:	dd6b      	ble.n	800d9ea <_dtoa_r+0x8e2>
 800d912:	9b08      	ldr	r3, [sp, #32]
 800d914:	f1c0 001c 	rsb	r0, r0, #28
 800d918:	4403      	add	r3, r0
 800d91a:	4480      	add	r8, r0
 800d91c:	4406      	add	r6, r0
 800d91e:	9308      	str	r3, [sp, #32]
 800d920:	f1b8 0f00 	cmp.w	r8, #0
 800d924:	dd05      	ble.n	800d932 <_dtoa_r+0x82a>
 800d926:	4649      	mov	r1, r9
 800d928:	4642      	mov	r2, r8
 800d92a:	4658      	mov	r0, fp
 800d92c:	f000 fd08 	bl	800e340 <__lshift>
 800d930:	4681      	mov	r9, r0
 800d932:	9b08      	ldr	r3, [sp, #32]
 800d934:	2b00      	cmp	r3, #0
 800d936:	dd05      	ble.n	800d944 <_dtoa_r+0x83c>
 800d938:	4621      	mov	r1, r4
 800d93a:	461a      	mov	r2, r3
 800d93c:	4658      	mov	r0, fp
 800d93e:	f000 fcff 	bl	800e340 <__lshift>
 800d942:	4604      	mov	r4, r0
 800d944:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d946:	2b00      	cmp	r3, #0
 800d948:	d059      	beq.n	800d9fe <_dtoa_r+0x8f6>
 800d94a:	4621      	mov	r1, r4
 800d94c:	4648      	mov	r0, r9
 800d94e:	f000 fd63 	bl	800e418 <__mcmp>
 800d952:	2800      	cmp	r0, #0
 800d954:	da53      	bge.n	800d9fe <_dtoa_r+0x8f6>
 800d956:	1e7b      	subs	r3, r7, #1
 800d958:	9304      	str	r3, [sp, #16]
 800d95a:	4649      	mov	r1, r9
 800d95c:	2300      	movs	r3, #0
 800d95e:	220a      	movs	r2, #10
 800d960:	4658      	mov	r0, fp
 800d962:	f000 faf7 	bl	800df54 <__multadd>
 800d966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d968:	4681      	mov	r9, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f000 8172 	beq.w	800dc54 <_dtoa_r+0xb4c>
 800d970:	2300      	movs	r3, #0
 800d972:	4629      	mov	r1, r5
 800d974:	220a      	movs	r2, #10
 800d976:	4658      	mov	r0, fp
 800d978:	f000 faec 	bl	800df54 <__multadd>
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	4605      	mov	r5, r0
 800d982:	dc67      	bgt.n	800da54 <_dtoa_r+0x94c>
 800d984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d986:	2b02      	cmp	r3, #2
 800d988:	dc41      	bgt.n	800da0e <_dtoa_r+0x906>
 800d98a:	e063      	b.n	800da54 <_dtoa_r+0x94c>
 800d98c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d98e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d992:	e746      	b.n	800d822 <_dtoa_r+0x71a>
 800d994:	9b07      	ldr	r3, [sp, #28]
 800d996:	1e5c      	subs	r4, r3, #1
 800d998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d99a:	42a3      	cmp	r3, r4
 800d99c:	bfbf      	itttt	lt
 800d99e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d9a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d9a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d9a4:	1ae3      	sublt	r3, r4, r3
 800d9a6:	bfb4      	ite	lt
 800d9a8:	18d2      	addlt	r2, r2, r3
 800d9aa:	1b1c      	subge	r4, r3, r4
 800d9ac:	9b07      	ldr	r3, [sp, #28]
 800d9ae:	bfbc      	itt	lt
 800d9b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d9b2:	2400      	movlt	r4, #0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	bfb5      	itete	lt
 800d9b8:	eba8 0603 	sublt.w	r6, r8, r3
 800d9bc:	9b07      	ldrge	r3, [sp, #28]
 800d9be:	2300      	movlt	r3, #0
 800d9c0:	4646      	movge	r6, r8
 800d9c2:	e730      	b.n	800d826 <_dtoa_r+0x71e>
 800d9c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d9c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d9c8:	4646      	mov	r6, r8
 800d9ca:	e735      	b.n	800d838 <_dtoa_r+0x730>
 800d9cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9ce:	e75c      	b.n	800d88a <_dtoa_r+0x782>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e788      	b.n	800d8e6 <_dtoa_r+0x7de>
 800d9d4:	3fe00000 	.word	0x3fe00000
 800d9d8:	40240000 	.word	0x40240000
 800d9dc:	40140000 	.word	0x40140000
 800d9e0:	9b02      	ldr	r3, [sp, #8]
 800d9e2:	e780      	b.n	800d8e6 <_dtoa_r+0x7de>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9e8:	e782      	b.n	800d8f0 <_dtoa_r+0x7e8>
 800d9ea:	d099      	beq.n	800d920 <_dtoa_r+0x818>
 800d9ec:	9a08      	ldr	r2, [sp, #32]
 800d9ee:	331c      	adds	r3, #28
 800d9f0:	441a      	add	r2, r3
 800d9f2:	4498      	add	r8, r3
 800d9f4:	441e      	add	r6, r3
 800d9f6:	9208      	str	r2, [sp, #32]
 800d9f8:	e792      	b.n	800d920 <_dtoa_r+0x818>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	e7f6      	b.n	800d9ec <_dtoa_r+0x8e4>
 800d9fe:	9b07      	ldr	r3, [sp, #28]
 800da00:	9704      	str	r7, [sp, #16]
 800da02:	2b00      	cmp	r3, #0
 800da04:	dc20      	bgt.n	800da48 <_dtoa_r+0x940>
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	dd1e      	ble.n	800da4c <_dtoa_r+0x944>
 800da0e:	9b00      	ldr	r3, [sp, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	f47f aec0 	bne.w	800d796 <_dtoa_r+0x68e>
 800da16:	4621      	mov	r1, r4
 800da18:	2205      	movs	r2, #5
 800da1a:	4658      	mov	r0, fp
 800da1c:	f000 fa9a 	bl	800df54 <__multadd>
 800da20:	4601      	mov	r1, r0
 800da22:	4604      	mov	r4, r0
 800da24:	4648      	mov	r0, r9
 800da26:	f000 fcf7 	bl	800e418 <__mcmp>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	f77f aeb3 	ble.w	800d796 <_dtoa_r+0x68e>
 800da30:	4656      	mov	r6, sl
 800da32:	2331      	movs	r3, #49	@ 0x31
 800da34:	f806 3b01 	strb.w	r3, [r6], #1
 800da38:	9b04      	ldr	r3, [sp, #16]
 800da3a:	3301      	adds	r3, #1
 800da3c:	9304      	str	r3, [sp, #16]
 800da3e:	e6ae      	b.n	800d79e <_dtoa_r+0x696>
 800da40:	9c07      	ldr	r4, [sp, #28]
 800da42:	9704      	str	r7, [sp, #16]
 800da44:	4625      	mov	r5, r4
 800da46:	e7f3      	b.n	800da30 <_dtoa_r+0x928>
 800da48:	9b07      	ldr	r3, [sp, #28]
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f000 8104 	beq.w	800dc5c <_dtoa_r+0xb54>
 800da54:	2e00      	cmp	r6, #0
 800da56:	dd05      	ble.n	800da64 <_dtoa_r+0x95c>
 800da58:	4629      	mov	r1, r5
 800da5a:	4632      	mov	r2, r6
 800da5c:	4658      	mov	r0, fp
 800da5e:	f000 fc6f 	bl	800e340 <__lshift>
 800da62:	4605      	mov	r5, r0
 800da64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da66:	2b00      	cmp	r3, #0
 800da68:	d05a      	beq.n	800db20 <_dtoa_r+0xa18>
 800da6a:	6869      	ldr	r1, [r5, #4]
 800da6c:	4658      	mov	r0, fp
 800da6e:	f000 fa0f 	bl	800de90 <_Balloc>
 800da72:	4606      	mov	r6, r0
 800da74:	b928      	cbnz	r0, 800da82 <_dtoa_r+0x97a>
 800da76:	4b84      	ldr	r3, [pc, #528]	@ (800dc88 <_dtoa_r+0xb80>)
 800da78:	4602      	mov	r2, r0
 800da7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800da7e:	f7ff bb5a 	b.w	800d136 <_dtoa_r+0x2e>
 800da82:	692a      	ldr	r2, [r5, #16]
 800da84:	3202      	adds	r2, #2
 800da86:	0092      	lsls	r2, r2, #2
 800da88:	f105 010c 	add.w	r1, r5, #12
 800da8c:	300c      	adds	r0, #12
 800da8e:	f7ff fa9c 	bl	800cfca <memcpy>
 800da92:	2201      	movs	r2, #1
 800da94:	4631      	mov	r1, r6
 800da96:	4658      	mov	r0, fp
 800da98:	f000 fc52 	bl	800e340 <__lshift>
 800da9c:	f10a 0301 	add.w	r3, sl, #1
 800daa0:	9307      	str	r3, [sp, #28]
 800daa2:	9b00      	ldr	r3, [sp, #0]
 800daa4:	4453      	add	r3, sl
 800daa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800daa8:	9b02      	ldr	r3, [sp, #8]
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	462f      	mov	r7, r5
 800dab0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dab2:	4605      	mov	r5, r0
 800dab4:	9b07      	ldr	r3, [sp, #28]
 800dab6:	4621      	mov	r1, r4
 800dab8:	3b01      	subs	r3, #1
 800daba:	4648      	mov	r0, r9
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	f7ff fa99 	bl	800cff4 <quorem>
 800dac2:	4639      	mov	r1, r7
 800dac4:	9002      	str	r0, [sp, #8]
 800dac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800daca:	4648      	mov	r0, r9
 800dacc:	f000 fca4 	bl	800e418 <__mcmp>
 800dad0:	462a      	mov	r2, r5
 800dad2:	9008      	str	r0, [sp, #32]
 800dad4:	4621      	mov	r1, r4
 800dad6:	4658      	mov	r0, fp
 800dad8:	f000 fcba 	bl	800e450 <__mdiff>
 800dadc:	68c2      	ldr	r2, [r0, #12]
 800dade:	4606      	mov	r6, r0
 800dae0:	bb02      	cbnz	r2, 800db24 <_dtoa_r+0xa1c>
 800dae2:	4601      	mov	r1, r0
 800dae4:	4648      	mov	r0, r9
 800dae6:	f000 fc97 	bl	800e418 <__mcmp>
 800daea:	4602      	mov	r2, r0
 800daec:	4631      	mov	r1, r6
 800daee:	4658      	mov	r0, fp
 800daf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800daf2:	f000 fa0d 	bl	800df10 <_Bfree>
 800daf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dafa:	9e07      	ldr	r6, [sp, #28]
 800dafc:	ea43 0102 	orr.w	r1, r3, r2
 800db00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db02:	4319      	orrs	r1, r3
 800db04:	d110      	bne.n	800db28 <_dtoa_r+0xa20>
 800db06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db0a:	d029      	beq.n	800db60 <_dtoa_r+0xa58>
 800db0c:	9b08      	ldr	r3, [sp, #32]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	dd02      	ble.n	800db18 <_dtoa_r+0xa10>
 800db12:	9b02      	ldr	r3, [sp, #8]
 800db14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800db18:	9b00      	ldr	r3, [sp, #0]
 800db1a:	f883 8000 	strb.w	r8, [r3]
 800db1e:	e63f      	b.n	800d7a0 <_dtoa_r+0x698>
 800db20:	4628      	mov	r0, r5
 800db22:	e7bb      	b.n	800da9c <_dtoa_r+0x994>
 800db24:	2201      	movs	r2, #1
 800db26:	e7e1      	b.n	800daec <_dtoa_r+0x9e4>
 800db28:	9b08      	ldr	r3, [sp, #32]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	db04      	blt.n	800db38 <_dtoa_r+0xa30>
 800db2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db30:	430b      	orrs	r3, r1
 800db32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db34:	430b      	orrs	r3, r1
 800db36:	d120      	bne.n	800db7a <_dtoa_r+0xa72>
 800db38:	2a00      	cmp	r2, #0
 800db3a:	dded      	ble.n	800db18 <_dtoa_r+0xa10>
 800db3c:	4649      	mov	r1, r9
 800db3e:	2201      	movs	r2, #1
 800db40:	4658      	mov	r0, fp
 800db42:	f000 fbfd 	bl	800e340 <__lshift>
 800db46:	4621      	mov	r1, r4
 800db48:	4681      	mov	r9, r0
 800db4a:	f000 fc65 	bl	800e418 <__mcmp>
 800db4e:	2800      	cmp	r0, #0
 800db50:	dc03      	bgt.n	800db5a <_dtoa_r+0xa52>
 800db52:	d1e1      	bne.n	800db18 <_dtoa_r+0xa10>
 800db54:	f018 0f01 	tst.w	r8, #1
 800db58:	d0de      	beq.n	800db18 <_dtoa_r+0xa10>
 800db5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db5e:	d1d8      	bne.n	800db12 <_dtoa_r+0xa0a>
 800db60:	9a00      	ldr	r2, [sp, #0]
 800db62:	2339      	movs	r3, #57	@ 0x39
 800db64:	7013      	strb	r3, [r2, #0]
 800db66:	4633      	mov	r3, r6
 800db68:	461e      	mov	r6, r3
 800db6a:	3b01      	subs	r3, #1
 800db6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800db70:	2a39      	cmp	r2, #57	@ 0x39
 800db72:	d052      	beq.n	800dc1a <_dtoa_r+0xb12>
 800db74:	3201      	adds	r2, #1
 800db76:	701a      	strb	r2, [r3, #0]
 800db78:	e612      	b.n	800d7a0 <_dtoa_r+0x698>
 800db7a:	2a00      	cmp	r2, #0
 800db7c:	dd07      	ble.n	800db8e <_dtoa_r+0xa86>
 800db7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db82:	d0ed      	beq.n	800db60 <_dtoa_r+0xa58>
 800db84:	9a00      	ldr	r2, [sp, #0]
 800db86:	f108 0301 	add.w	r3, r8, #1
 800db8a:	7013      	strb	r3, [r2, #0]
 800db8c:	e608      	b.n	800d7a0 <_dtoa_r+0x698>
 800db8e:	9b07      	ldr	r3, [sp, #28]
 800db90:	9a07      	ldr	r2, [sp, #28]
 800db92:	f803 8c01 	strb.w	r8, [r3, #-1]
 800db96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db98:	4293      	cmp	r3, r2
 800db9a:	d028      	beq.n	800dbee <_dtoa_r+0xae6>
 800db9c:	4649      	mov	r1, r9
 800db9e:	2300      	movs	r3, #0
 800dba0:	220a      	movs	r2, #10
 800dba2:	4658      	mov	r0, fp
 800dba4:	f000 f9d6 	bl	800df54 <__multadd>
 800dba8:	42af      	cmp	r7, r5
 800dbaa:	4681      	mov	r9, r0
 800dbac:	f04f 0300 	mov.w	r3, #0
 800dbb0:	f04f 020a 	mov.w	r2, #10
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	4658      	mov	r0, fp
 800dbb8:	d107      	bne.n	800dbca <_dtoa_r+0xac2>
 800dbba:	f000 f9cb 	bl	800df54 <__multadd>
 800dbbe:	4607      	mov	r7, r0
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	9b07      	ldr	r3, [sp, #28]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	9307      	str	r3, [sp, #28]
 800dbc8:	e774      	b.n	800dab4 <_dtoa_r+0x9ac>
 800dbca:	f000 f9c3 	bl	800df54 <__multadd>
 800dbce:	4629      	mov	r1, r5
 800dbd0:	4607      	mov	r7, r0
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	220a      	movs	r2, #10
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	f000 f9bc 	bl	800df54 <__multadd>
 800dbdc:	4605      	mov	r5, r0
 800dbde:	e7f0      	b.n	800dbc2 <_dtoa_r+0xaba>
 800dbe0:	9b00      	ldr	r3, [sp, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	bfcc      	ite	gt
 800dbe6:	461e      	movgt	r6, r3
 800dbe8:	2601      	movle	r6, #1
 800dbea:	4456      	add	r6, sl
 800dbec:	2700      	movs	r7, #0
 800dbee:	4649      	mov	r1, r9
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	4658      	mov	r0, fp
 800dbf4:	f000 fba4 	bl	800e340 <__lshift>
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	4681      	mov	r9, r0
 800dbfc:	f000 fc0c 	bl	800e418 <__mcmp>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	dcb0      	bgt.n	800db66 <_dtoa_r+0xa5e>
 800dc04:	d102      	bne.n	800dc0c <_dtoa_r+0xb04>
 800dc06:	f018 0f01 	tst.w	r8, #1
 800dc0a:	d1ac      	bne.n	800db66 <_dtoa_r+0xa5e>
 800dc0c:	4633      	mov	r3, r6
 800dc0e:	461e      	mov	r6, r3
 800dc10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc14:	2a30      	cmp	r2, #48	@ 0x30
 800dc16:	d0fa      	beq.n	800dc0e <_dtoa_r+0xb06>
 800dc18:	e5c2      	b.n	800d7a0 <_dtoa_r+0x698>
 800dc1a:	459a      	cmp	sl, r3
 800dc1c:	d1a4      	bne.n	800db68 <_dtoa_r+0xa60>
 800dc1e:	9b04      	ldr	r3, [sp, #16]
 800dc20:	3301      	adds	r3, #1
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	2331      	movs	r3, #49	@ 0x31
 800dc26:	f88a 3000 	strb.w	r3, [sl]
 800dc2a:	e5b9      	b.n	800d7a0 <_dtoa_r+0x698>
 800dc2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dc8c <_dtoa_r+0xb84>
 800dc32:	b11b      	cbz	r3, 800dc3c <_dtoa_r+0xb34>
 800dc34:	f10a 0308 	add.w	r3, sl, #8
 800dc38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	b019      	add	sp, #100	@ 0x64
 800dc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	f77f ae37 	ble.w	800d8ba <_dtoa_r+0x7b2>
 800dc4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc50:	2001      	movs	r0, #1
 800dc52:	e655      	b.n	800d900 <_dtoa_r+0x7f8>
 800dc54:	9b00      	ldr	r3, [sp, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f77f aed6 	ble.w	800da08 <_dtoa_r+0x900>
 800dc5c:	4656      	mov	r6, sl
 800dc5e:	4621      	mov	r1, r4
 800dc60:	4648      	mov	r0, r9
 800dc62:	f7ff f9c7 	bl	800cff4 <quorem>
 800dc66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc6a:	f806 8b01 	strb.w	r8, [r6], #1
 800dc6e:	9b00      	ldr	r3, [sp, #0]
 800dc70:	eba6 020a 	sub.w	r2, r6, sl
 800dc74:	4293      	cmp	r3, r2
 800dc76:	ddb3      	ble.n	800dbe0 <_dtoa_r+0xad8>
 800dc78:	4649      	mov	r1, r9
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	220a      	movs	r2, #10
 800dc7e:	4658      	mov	r0, fp
 800dc80:	f000 f968 	bl	800df54 <__multadd>
 800dc84:	4681      	mov	r9, r0
 800dc86:	e7ea      	b.n	800dc5e <_dtoa_r+0xb56>
 800dc88:	08010821 	.word	0x08010821
 800dc8c:	080107a5 	.word	0x080107a5

0800dc90 <_free_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4605      	mov	r5, r0
 800dc94:	2900      	cmp	r1, #0
 800dc96:	d041      	beq.n	800dd1c <_free_r+0x8c>
 800dc98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc9c:	1f0c      	subs	r4, r1, #4
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	bfb8      	it	lt
 800dca2:	18e4      	addlt	r4, r4, r3
 800dca4:	f000 f8e8 	bl	800de78 <__malloc_lock>
 800dca8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd20 <_free_r+0x90>)
 800dcaa:	6813      	ldr	r3, [r2, #0]
 800dcac:	b933      	cbnz	r3, 800dcbc <_free_r+0x2c>
 800dcae:	6063      	str	r3, [r4, #4]
 800dcb0:	6014      	str	r4, [r2, #0]
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcb8:	f000 b8e4 	b.w	800de84 <__malloc_unlock>
 800dcbc:	42a3      	cmp	r3, r4
 800dcbe:	d908      	bls.n	800dcd2 <_free_r+0x42>
 800dcc0:	6820      	ldr	r0, [r4, #0]
 800dcc2:	1821      	adds	r1, r4, r0
 800dcc4:	428b      	cmp	r3, r1
 800dcc6:	bf01      	itttt	eq
 800dcc8:	6819      	ldreq	r1, [r3, #0]
 800dcca:	685b      	ldreq	r3, [r3, #4]
 800dccc:	1809      	addeq	r1, r1, r0
 800dcce:	6021      	streq	r1, [r4, #0]
 800dcd0:	e7ed      	b.n	800dcae <_free_r+0x1e>
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	b10b      	cbz	r3, 800dcdc <_free_r+0x4c>
 800dcd8:	42a3      	cmp	r3, r4
 800dcda:	d9fa      	bls.n	800dcd2 <_free_r+0x42>
 800dcdc:	6811      	ldr	r1, [r2, #0]
 800dcde:	1850      	adds	r0, r2, r1
 800dce0:	42a0      	cmp	r0, r4
 800dce2:	d10b      	bne.n	800dcfc <_free_r+0x6c>
 800dce4:	6820      	ldr	r0, [r4, #0]
 800dce6:	4401      	add	r1, r0
 800dce8:	1850      	adds	r0, r2, r1
 800dcea:	4283      	cmp	r3, r0
 800dcec:	6011      	str	r1, [r2, #0]
 800dcee:	d1e0      	bne.n	800dcb2 <_free_r+0x22>
 800dcf0:	6818      	ldr	r0, [r3, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	6053      	str	r3, [r2, #4]
 800dcf6:	4408      	add	r0, r1
 800dcf8:	6010      	str	r0, [r2, #0]
 800dcfa:	e7da      	b.n	800dcb2 <_free_r+0x22>
 800dcfc:	d902      	bls.n	800dd04 <_free_r+0x74>
 800dcfe:	230c      	movs	r3, #12
 800dd00:	602b      	str	r3, [r5, #0]
 800dd02:	e7d6      	b.n	800dcb2 <_free_r+0x22>
 800dd04:	6820      	ldr	r0, [r4, #0]
 800dd06:	1821      	adds	r1, r4, r0
 800dd08:	428b      	cmp	r3, r1
 800dd0a:	bf04      	itt	eq
 800dd0c:	6819      	ldreq	r1, [r3, #0]
 800dd0e:	685b      	ldreq	r3, [r3, #4]
 800dd10:	6063      	str	r3, [r4, #4]
 800dd12:	bf04      	itt	eq
 800dd14:	1809      	addeq	r1, r1, r0
 800dd16:	6021      	streq	r1, [r4, #0]
 800dd18:	6054      	str	r4, [r2, #4]
 800dd1a:	e7ca      	b.n	800dcb2 <_free_r+0x22>
 800dd1c:	bd38      	pop	{r3, r4, r5, pc}
 800dd1e:	bf00      	nop
 800dd20:	20001c5c 	.word	0x20001c5c

0800dd24 <malloc>:
 800dd24:	4b02      	ldr	r3, [pc, #8]	@ (800dd30 <malloc+0xc>)
 800dd26:	4601      	mov	r1, r0
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	f000 b825 	b.w	800dd78 <_malloc_r>
 800dd2e:	bf00      	nop
 800dd30:	20000190 	.word	0x20000190

0800dd34 <sbrk_aligned>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	4e0f      	ldr	r6, [pc, #60]	@ (800dd74 <sbrk_aligned+0x40>)
 800dd38:	460c      	mov	r4, r1
 800dd3a:	6831      	ldr	r1, [r6, #0]
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	b911      	cbnz	r1, 800dd46 <sbrk_aligned+0x12>
 800dd40:	f001 fe0c 	bl	800f95c <_sbrk_r>
 800dd44:	6030      	str	r0, [r6, #0]
 800dd46:	4621      	mov	r1, r4
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f001 fe07 	bl	800f95c <_sbrk_r>
 800dd4e:	1c43      	adds	r3, r0, #1
 800dd50:	d103      	bne.n	800dd5a <sbrk_aligned+0x26>
 800dd52:	f04f 34ff 	mov.w	r4, #4294967295
 800dd56:	4620      	mov	r0, r4
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	1cc4      	adds	r4, r0, #3
 800dd5c:	f024 0403 	bic.w	r4, r4, #3
 800dd60:	42a0      	cmp	r0, r4
 800dd62:	d0f8      	beq.n	800dd56 <sbrk_aligned+0x22>
 800dd64:	1a21      	subs	r1, r4, r0
 800dd66:	4628      	mov	r0, r5
 800dd68:	f001 fdf8 	bl	800f95c <_sbrk_r>
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	d1f2      	bne.n	800dd56 <sbrk_aligned+0x22>
 800dd70:	e7ef      	b.n	800dd52 <sbrk_aligned+0x1e>
 800dd72:	bf00      	nop
 800dd74:	20001c58 	.word	0x20001c58

0800dd78 <_malloc_r>:
 800dd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd7c:	1ccd      	adds	r5, r1, #3
 800dd7e:	f025 0503 	bic.w	r5, r5, #3
 800dd82:	3508      	adds	r5, #8
 800dd84:	2d0c      	cmp	r5, #12
 800dd86:	bf38      	it	cc
 800dd88:	250c      	movcc	r5, #12
 800dd8a:	2d00      	cmp	r5, #0
 800dd8c:	4606      	mov	r6, r0
 800dd8e:	db01      	blt.n	800dd94 <_malloc_r+0x1c>
 800dd90:	42a9      	cmp	r1, r5
 800dd92:	d904      	bls.n	800dd9e <_malloc_r+0x26>
 800dd94:	230c      	movs	r3, #12
 800dd96:	6033      	str	r3, [r6, #0]
 800dd98:	2000      	movs	r0, #0
 800dd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de74 <_malloc_r+0xfc>
 800dda2:	f000 f869 	bl	800de78 <__malloc_lock>
 800dda6:	f8d8 3000 	ldr.w	r3, [r8]
 800ddaa:	461c      	mov	r4, r3
 800ddac:	bb44      	cbnz	r4, 800de00 <_malloc_r+0x88>
 800ddae:	4629      	mov	r1, r5
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f7ff ffbf 	bl	800dd34 <sbrk_aligned>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	4604      	mov	r4, r0
 800ddba:	d158      	bne.n	800de6e <_malloc_r+0xf6>
 800ddbc:	f8d8 4000 	ldr.w	r4, [r8]
 800ddc0:	4627      	mov	r7, r4
 800ddc2:	2f00      	cmp	r7, #0
 800ddc4:	d143      	bne.n	800de4e <_malloc_r+0xd6>
 800ddc6:	2c00      	cmp	r4, #0
 800ddc8:	d04b      	beq.n	800de62 <_malloc_r+0xea>
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	4639      	mov	r1, r7
 800ddce:	4630      	mov	r0, r6
 800ddd0:	eb04 0903 	add.w	r9, r4, r3
 800ddd4:	f001 fdc2 	bl	800f95c <_sbrk_r>
 800ddd8:	4581      	cmp	r9, r0
 800ddda:	d142      	bne.n	800de62 <_malloc_r+0xea>
 800dddc:	6821      	ldr	r1, [r4, #0]
 800ddde:	1a6d      	subs	r5, r5, r1
 800dde0:	4629      	mov	r1, r5
 800dde2:	4630      	mov	r0, r6
 800dde4:	f7ff ffa6 	bl	800dd34 <sbrk_aligned>
 800dde8:	3001      	adds	r0, #1
 800ddea:	d03a      	beq.n	800de62 <_malloc_r+0xea>
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	442b      	add	r3, r5
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	f8d8 3000 	ldr.w	r3, [r8]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	bb62      	cbnz	r2, 800de54 <_malloc_r+0xdc>
 800ddfa:	f8c8 7000 	str.w	r7, [r8]
 800ddfe:	e00f      	b.n	800de20 <_malloc_r+0xa8>
 800de00:	6822      	ldr	r2, [r4, #0]
 800de02:	1b52      	subs	r2, r2, r5
 800de04:	d420      	bmi.n	800de48 <_malloc_r+0xd0>
 800de06:	2a0b      	cmp	r2, #11
 800de08:	d917      	bls.n	800de3a <_malloc_r+0xc2>
 800de0a:	1961      	adds	r1, r4, r5
 800de0c:	42a3      	cmp	r3, r4
 800de0e:	6025      	str	r5, [r4, #0]
 800de10:	bf18      	it	ne
 800de12:	6059      	strne	r1, [r3, #4]
 800de14:	6863      	ldr	r3, [r4, #4]
 800de16:	bf08      	it	eq
 800de18:	f8c8 1000 	streq.w	r1, [r8]
 800de1c:	5162      	str	r2, [r4, r5]
 800de1e:	604b      	str	r3, [r1, #4]
 800de20:	4630      	mov	r0, r6
 800de22:	f000 f82f 	bl	800de84 <__malloc_unlock>
 800de26:	f104 000b 	add.w	r0, r4, #11
 800de2a:	1d23      	adds	r3, r4, #4
 800de2c:	f020 0007 	bic.w	r0, r0, #7
 800de30:	1ac2      	subs	r2, r0, r3
 800de32:	bf1c      	itt	ne
 800de34:	1a1b      	subne	r3, r3, r0
 800de36:	50a3      	strne	r3, [r4, r2]
 800de38:	e7af      	b.n	800dd9a <_malloc_r+0x22>
 800de3a:	6862      	ldr	r2, [r4, #4]
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	bf0c      	ite	eq
 800de40:	f8c8 2000 	streq.w	r2, [r8]
 800de44:	605a      	strne	r2, [r3, #4]
 800de46:	e7eb      	b.n	800de20 <_malloc_r+0xa8>
 800de48:	4623      	mov	r3, r4
 800de4a:	6864      	ldr	r4, [r4, #4]
 800de4c:	e7ae      	b.n	800ddac <_malloc_r+0x34>
 800de4e:	463c      	mov	r4, r7
 800de50:	687f      	ldr	r7, [r7, #4]
 800de52:	e7b6      	b.n	800ddc2 <_malloc_r+0x4a>
 800de54:	461a      	mov	r2, r3
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	42a3      	cmp	r3, r4
 800de5a:	d1fb      	bne.n	800de54 <_malloc_r+0xdc>
 800de5c:	2300      	movs	r3, #0
 800de5e:	6053      	str	r3, [r2, #4]
 800de60:	e7de      	b.n	800de20 <_malloc_r+0xa8>
 800de62:	230c      	movs	r3, #12
 800de64:	6033      	str	r3, [r6, #0]
 800de66:	4630      	mov	r0, r6
 800de68:	f000 f80c 	bl	800de84 <__malloc_unlock>
 800de6c:	e794      	b.n	800dd98 <_malloc_r+0x20>
 800de6e:	6005      	str	r5, [r0, #0]
 800de70:	e7d6      	b.n	800de20 <_malloc_r+0xa8>
 800de72:	bf00      	nop
 800de74:	20001c5c 	.word	0x20001c5c

0800de78 <__malloc_lock>:
 800de78:	4801      	ldr	r0, [pc, #4]	@ (800de80 <__malloc_lock+0x8>)
 800de7a:	f7ff b8a4 	b.w	800cfc6 <__retarget_lock_acquire_recursive>
 800de7e:	bf00      	nop
 800de80:	20001c54 	.word	0x20001c54

0800de84 <__malloc_unlock>:
 800de84:	4801      	ldr	r0, [pc, #4]	@ (800de8c <__malloc_unlock+0x8>)
 800de86:	f7ff b89f 	b.w	800cfc8 <__retarget_lock_release_recursive>
 800de8a:	bf00      	nop
 800de8c:	20001c54 	.word	0x20001c54

0800de90 <_Balloc>:
 800de90:	b570      	push	{r4, r5, r6, lr}
 800de92:	69c6      	ldr	r6, [r0, #28]
 800de94:	4604      	mov	r4, r0
 800de96:	460d      	mov	r5, r1
 800de98:	b976      	cbnz	r6, 800deb8 <_Balloc+0x28>
 800de9a:	2010      	movs	r0, #16
 800de9c:	f7ff ff42 	bl	800dd24 <malloc>
 800dea0:	4602      	mov	r2, r0
 800dea2:	61e0      	str	r0, [r4, #28]
 800dea4:	b920      	cbnz	r0, 800deb0 <_Balloc+0x20>
 800dea6:	4b18      	ldr	r3, [pc, #96]	@ (800df08 <_Balloc+0x78>)
 800dea8:	4818      	ldr	r0, [pc, #96]	@ (800df0c <_Balloc+0x7c>)
 800deaa:	216b      	movs	r1, #107	@ 0x6b
 800deac:	f001 fd70 	bl	800f990 <__assert_func>
 800deb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800deb4:	6006      	str	r6, [r0, #0]
 800deb6:	60c6      	str	r6, [r0, #12]
 800deb8:	69e6      	ldr	r6, [r4, #28]
 800deba:	68f3      	ldr	r3, [r6, #12]
 800debc:	b183      	cbz	r3, 800dee0 <_Balloc+0x50>
 800debe:	69e3      	ldr	r3, [r4, #28]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dec6:	b9b8      	cbnz	r0, 800def8 <_Balloc+0x68>
 800dec8:	2101      	movs	r1, #1
 800deca:	fa01 f605 	lsl.w	r6, r1, r5
 800dece:	1d72      	adds	r2, r6, #5
 800ded0:	0092      	lsls	r2, r2, #2
 800ded2:	4620      	mov	r0, r4
 800ded4:	f001 fd7a 	bl	800f9cc <_calloc_r>
 800ded8:	b160      	cbz	r0, 800def4 <_Balloc+0x64>
 800deda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dede:	e00e      	b.n	800defe <_Balloc+0x6e>
 800dee0:	2221      	movs	r2, #33	@ 0x21
 800dee2:	2104      	movs	r1, #4
 800dee4:	4620      	mov	r0, r4
 800dee6:	f001 fd71 	bl	800f9cc <_calloc_r>
 800deea:	69e3      	ldr	r3, [r4, #28]
 800deec:	60f0      	str	r0, [r6, #12]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1e4      	bne.n	800debe <_Balloc+0x2e>
 800def4:	2000      	movs	r0, #0
 800def6:	bd70      	pop	{r4, r5, r6, pc}
 800def8:	6802      	ldr	r2, [r0, #0]
 800defa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800defe:	2300      	movs	r3, #0
 800df00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df04:	e7f7      	b.n	800def6 <_Balloc+0x66>
 800df06:	bf00      	nop
 800df08:	080107b2 	.word	0x080107b2
 800df0c:	08010832 	.word	0x08010832

0800df10 <_Bfree>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	69c6      	ldr	r6, [r0, #28]
 800df14:	4605      	mov	r5, r0
 800df16:	460c      	mov	r4, r1
 800df18:	b976      	cbnz	r6, 800df38 <_Bfree+0x28>
 800df1a:	2010      	movs	r0, #16
 800df1c:	f7ff ff02 	bl	800dd24 <malloc>
 800df20:	4602      	mov	r2, r0
 800df22:	61e8      	str	r0, [r5, #28]
 800df24:	b920      	cbnz	r0, 800df30 <_Bfree+0x20>
 800df26:	4b09      	ldr	r3, [pc, #36]	@ (800df4c <_Bfree+0x3c>)
 800df28:	4809      	ldr	r0, [pc, #36]	@ (800df50 <_Bfree+0x40>)
 800df2a:	218f      	movs	r1, #143	@ 0x8f
 800df2c:	f001 fd30 	bl	800f990 <__assert_func>
 800df30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df34:	6006      	str	r6, [r0, #0]
 800df36:	60c6      	str	r6, [r0, #12]
 800df38:	b13c      	cbz	r4, 800df4a <_Bfree+0x3a>
 800df3a:	69eb      	ldr	r3, [r5, #28]
 800df3c:	6862      	ldr	r2, [r4, #4]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df44:	6021      	str	r1, [r4, #0]
 800df46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df4a:	bd70      	pop	{r4, r5, r6, pc}
 800df4c:	080107b2 	.word	0x080107b2
 800df50:	08010832 	.word	0x08010832

0800df54 <__multadd>:
 800df54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df58:	690d      	ldr	r5, [r1, #16]
 800df5a:	4607      	mov	r7, r0
 800df5c:	460c      	mov	r4, r1
 800df5e:	461e      	mov	r6, r3
 800df60:	f101 0c14 	add.w	ip, r1, #20
 800df64:	2000      	movs	r0, #0
 800df66:	f8dc 3000 	ldr.w	r3, [ip]
 800df6a:	b299      	uxth	r1, r3
 800df6c:	fb02 6101 	mla	r1, r2, r1, r6
 800df70:	0c1e      	lsrs	r6, r3, #16
 800df72:	0c0b      	lsrs	r3, r1, #16
 800df74:	fb02 3306 	mla	r3, r2, r6, r3
 800df78:	b289      	uxth	r1, r1
 800df7a:	3001      	adds	r0, #1
 800df7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df80:	4285      	cmp	r5, r0
 800df82:	f84c 1b04 	str.w	r1, [ip], #4
 800df86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df8a:	dcec      	bgt.n	800df66 <__multadd+0x12>
 800df8c:	b30e      	cbz	r6, 800dfd2 <__multadd+0x7e>
 800df8e:	68a3      	ldr	r3, [r4, #8]
 800df90:	42ab      	cmp	r3, r5
 800df92:	dc19      	bgt.n	800dfc8 <__multadd+0x74>
 800df94:	6861      	ldr	r1, [r4, #4]
 800df96:	4638      	mov	r0, r7
 800df98:	3101      	adds	r1, #1
 800df9a:	f7ff ff79 	bl	800de90 <_Balloc>
 800df9e:	4680      	mov	r8, r0
 800dfa0:	b928      	cbnz	r0, 800dfae <__multadd+0x5a>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800dfd8 <__multadd+0x84>)
 800dfa6:	480d      	ldr	r0, [pc, #52]	@ (800dfdc <__multadd+0x88>)
 800dfa8:	21ba      	movs	r1, #186	@ 0xba
 800dfaa:	f001 fcf1 	bl	800f990 <__assert_func>
 800dfae:	6922      	ldr	r2, [r4, #16]
 800dfb0:	3202      	adds	r2, #2
 800dfb2:	f104 010c 	add.w	r1, r4, #12
 800dfb6:	0092      	lsls	r2, r2, #2
 800dfb8:	300c      	adds	r0, #12
 800dfba:	f7ff f806 	bl	800cfca <memcpy>
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	4638      	mov	r0, r7
 800dfc2:	f7ff ffa5 	bl	800df10 <_Bfree>
 800dfc6:	4644      	mov	r4, r8
 800dfc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfcc:	3501      	adds	r5, #1
 800dfce:	615e      	str	r6, [r3, #20]
 800dfd0:	6125      	str	r5, [r4, #16]
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd8:	08010821 	.word	0x08010821
 800dfdc:	08010832 	.word	0x08010832

0800dfe0 <__s2b>:
 800dfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	4615      	mov	r5, r2
 800dfe8:	461f      	mov	r7, r3
 800dfea:	2209      	movs	r2, #9
 800dfec:	3308      	adds	r3, #8
 800dfee:	4606      	mov	r6, r0
 800dff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dff4:	2100      	movs	r1, #0
 800dff6:	2201      	movs	r2, #1
 800dff8:	429a      	cmp	r2, r3
 800dffa:	db09      	blt.n	800e010 <__s2b+0x30>
 800dffc:	4630      	mov	r0, r6
 800dffe:	f7ff ff47 	bl	800de90 <_Balloc>
 800e002:	b940      	cbnz	r0, 800e016 <__s2b+0x36>
 800e004:	4602      	mov	r2, r0
 800e006:	4b19      	ldr	r3, [pc, #100]	@ (800e06c <__s2b+0x8c>)
 800e008:	4819      	ldr	r0, [pc, #100]	@ (800e070 <__s2b+0x90>)
 800e00a:	21d3      	movs	r1, #211	@ 0xd3
 800e00c:	f001 fcc0 	bl	800f990 <__assert_func>
 800e010:	0052      	lsls	r2, r2, #1
 800e012:	3101      	adds	r1, #1
 800e014:	e7f0      	b.n	800dff8 <__s2b+0x18>
 800e016:	9b08      	ldr	r3, [sp, #32]
 800e018:	6143      	str	r3, [r0, #20]
 800e01a:	2d09      	cmp	r5, #9
 800e01c:	f04f 0301 	mov.w	r3, #1
 800e020:	6103      	str	r3, [r0, #16]
 800e022:	dd16      	ble.n	800e052 <__s2b+0x72>
 800e024:	f104 0909 	add.w	r9, r4, #9
 800e028:	46c8      	mov	r8, r9
 800e02a:	442c      	add	r4, r5
 800e02c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e030:	4601      	mov	r1, r0
 800e032:	3b30      	subs	r3, #48	@ 0x30
 800e034:	220a      	movs	r2, #10
 800e036:	4630      	mov	r0, r6
 800e038:	f7ff ff8c 	bl	800df54 <__multadd>
 800e03c:	45a0      	cmp	r8, r4
 800e03e:	d1f5      	bne.n	800e02c <__s2b+0x4c>
 800e040:	f1a5 0408 	sub.w	r4, r5, #8
 800e044:	444c      	add	r4, r9
 800e046:	1b2d      	subs	r5, r5, r4
 800e048:	1963      	adds	r3, r4, r5
 800e04a:	42bb      	cmp	r3, r7
 800e04c:	db04      	blt.n	800e058 <__s2b+0x78>
 800e04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e052:	340a      	adds	r4, #10
 800e054:	2509      	movs	r5, #9
 800e056:	e7f6      	b.n	800e046 <__s2b+0x66>
 800e058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e05c:	4601      	mov	r1, r0
 800e05e:	3b30      	subs	r3, #48	@ 0x30
 800e060:	220a      	movs	r2, #10
 800e062:	4630      	mov	r0, r6
 800e064:	f7ff ff76 	bl	800df54 <__multadd>
 800e068:	e7ee      	b.n	800e048 <__s2b+0x68>
 800e06a:	bf00      	nop
 800e06c:	08010821 	.word	0x08010821
 800e070:	08010832 	.word	0x08010832

0800e074 <__hi0bits>:
 800e074:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e078:	4603      	mov	r3, r0
 800e07a:	bf36      	itet	cc
 800e07c:	0403      	lslcc	r3, r0, #16
 800e07e:	2000      	movcs	r0, #0
 800e080:	2010      	movcc	r0, #16
 800e082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e086:	bf3c      	itt	cc
 800e088:	021b      	lslcc	r3, r3, #8
 800e08a:	3008      	addcc	r0, #8
 800e08c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e090:	bf3c      	itt	cc
 800e092:	011b      	lslcc	r3, r3, #4
 800e094:	3004      	addcc	r0, #4
 800e096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e09a:	bf3c      	itt	cc
 800e09c:	009b      	lslcc	r3, r3, #2
 800e09e:	3002      	addcc	r0, #2
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	db05      	blt.n	800e0b0 <__hi0bits+0x3c>
 800e0a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0a8:	f100 0001 	add.w	r0, r0, #1
 800e0ac:	bf08      	it	eq
 800e0ae:	2020      	moveq	r0, #32
 800e0b0:	4770      	bx	lr

0800e0b2 <__lo0bits>:
 800e0b2:	6803      	ldr	r3, [r0, #0]
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	f013 0007 	ands.w	r0, r3, #7
 800e0ba:	d00b      	beq.n	800e0d4 <__lo0bits+0x22>
 800e0bc:	07d9      	lsls	r1, r3, #31
 800e0be:	d421      	bmi.n	800e104 <__lo0bits+0x52>
 800e0c0:	0798      	lsls	r0, r3, #30
 800e0c2:	bf49      	itett	mi
 800e0c4:	085b      	lsrmi	r3, r3, #1
 800e0c6:	089b      	lsrpl	r3, r3, #2
 800e0c8:	2001      	movmi	r0, #1
 800e0ca:	6013      	strmi	r3, [r2, #0]
 800e0cc:	bf5c      	itt	pl
 800e0ce:	6013      	strpl	r3, [r2, #0]
 800e0d0:	2002      	movpl	r0, #2
 800e0d2:	4770      	bx	lr
 800e0d4:	b299      	uxth	r1, r3
 800e0d6:	b909      	cbnz	r1, 800e0dc <__lo0bits+0x2a>
 800e0d8:	0c1b      	lsrs	r3, r3, #16
 800e0da:	2010      	movs	r0, #16
 800e0dc:	b2d9      	uxtb	r1, r3
 800e0de:	b909      	cbnz	r1, 800e0e4 <__lo0bits+0x32>
 800e0e0:	3008      	adds	r0, #8
 800e0e2:	0a1b      	lsrs	r3, r3, #8
 800e0e4:	0719      	lsls	r1, r3, #28
 800e0e6:	bf04      	itt	eq
 800e0e8:	091b      	lsreq	r3, r3, #4
 800e0ea:	3004      	addeq	r0, #4
 800e0ec:	0799      	lsls	r1, r3, #30
 800e0ee:	bf04      	itt	eq
 800e0f0:	089b      	lsreq	r3, r3, #2
 800e0f2:	3002      	addeq	r0, #2
 800e0f4:	07d9      	lsls	r1, r3, #31
 800e0f6:	d403      	bmi.n	800e100 <__lo0bits+0x4e>
 800e0f8:	085b      	lsrs	r3, r3, #1
 800e0fa:	f100 0001 	add.w	r0, r0, #1
 800e0fe:	d003      	beq.n	800e108 <__lo0bits+0x56>
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	4770      	bx	lr
 800e104:	2000      	movs	r0, #0
 800e106:	4770      	bx	lr
 800e108:	2020      	movs	r0, #32
 800e10a:	4770      	bx	lr

0800e10c <__i2b>:
 800e10c:	b510      	push	{r4, lr}
 800e10e:	460c      	mov	r4, r1
 800e110:	2101      	movs	r1, #1
 800e112:	f7ff febd 	bl	800de90 <_Balloc>
 800e116:	4602      	mov	r2, r0
 800e118:	b928      	cbnz	r0, 800e126 <__i2b+0x1a>
 800e11a:	4b05      	ldr	r3, [pc, #20]	@ (800e130 <__i2b+0x24>)
 800e11c:	4805      	ldr	r0, [pc, #20]	@ (800e134 <__i2b+0x28>)
 800e11e:	f240 1145 	movw	r1, #325	@ 0x145
 800e122:	f001 fc35 	bl	800f990 <__assert_func>
 800e126:	2301      	movs	r3, #1
 800e128:	6144      	str	r4, [r0, #20]
 800e12a:	6103      	str	r3, [r0, #16]
 800e12c:	bd10      	pop	{r4, pc}
 800e12e:	bf00      	nop
 800e130:	08010821 	.word	0x08010821
 800e134:	08010832 	.word	0x08010832

0800e138 <__multiply>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	4614      	mov	r4, r2
 800e13e:	690a      	ldr	r2, [r1, #16]
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	429a      	cmp	r2, r3
 800e144:	bfa8      	it	ge
 800e146:	4623      	movge	r3, r4
 800e148:	460f      	mov	r7, r1
 800e14a:	bfa4      	itt	ge
 800e14c:	460c      	movge	r4, r1
 800e14e:	461f      	movge	r7, r3
 800e150:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e154:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e158:	68a3      	ldr	r3, [r4, #8]
 800e15a:	6861      	ldr	r1, [r4, #4]
 800e15c:	eb0a 0609 	add.w	r6, sl, r9
 800e160:	42b3      	cmp	r3, r6
 800e162:	b085      	sub	sp, #20
 800e164:	bfb8      	it	lt
 800e166:	3101      	addlt	r1, #1
 800e168:	f7ff fe92 	bl	800de90 <_Balloc>
 800e16c:	b930      	cbnz	r0, 800e17c <__multiply+0x44>
 800e16e:	4602      	mov	r2, r0
 800e170:	4b44      	ldr	r3, [pc, #272]	@ (800e284 <__multiply+0x14c>)
 800e172:	4845      	ldr	r0, [pc, #276]	@ (800e288 <__multiply+0x150>)
 800e174:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e178:	f001 fc0a 	bl	800f990 <__assert_func>
 800e17c:	f100 0514 	add.w	r5, r0, #20
 800e180:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e184:	462b      	mov	r3, r5
 800e186:	2200      	movs	r2, #0
 800e188:	4543      	cmp	r3, r8
 800e18a:	d321      	bcc.n	800e1d0 <__multiply+0x98>
 800e18c:	f107 0114 	add.w	r1, r7, #20
 800e190:	f104 0214 	add.w	r2, r4, #20
 800e194:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e198:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e19c:	9302      	str	r3, [sp, #8]
 800e19e:	1b13      	subs	r3, r2, r4
 800e1a0:	3b15      	subs	r3, #21
 800e1a2:	f023 0303 	bic.w	r3, r3, #3
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	f104 0715 	add.w	r7, r4, #21
 800e1ac:	42ba      	cmp	r2, r7
 800e1ae:	bf38      	it	cc
 800e1b0:	2304      	movcc	r3, #4
 800e1b2:	9301      	str	r3, [sp, #4]
 800e1b4:	9b02      	ldr	r3, [sp, #8]
 800e1b6:	9103      	str	r1, [sp, #12]
 800e1b8:	428b      	cmp	r3, r1
 800e1ba:	d80c      	bhi.n	800e1d6 <__multiply+0x9e>
 800e1bc:	2e00      	cmp	r6, #0
 800e1be:	dd03      	ble.n	800e1c8 <__multiply+0x90>
 800e1c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d05b      	beq.n	800e280 <__multiply+0x148>
 800e1c8:	6106      	str	r6, [r0, #16]
 800e1ca:	b005      	add	sp, #20
 800e1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d0:	f843 2b04 	str.w	r2, [r3], #4
 800e1d4:	e7d8      	b.n	800e188 <__multiply+0x50>
 800e1d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1da:	f1ba 0f00 	cmp.w	sl, #0
 800e1de:	d024      	beq.n	800e22a <__multiply+0xf2>
 800e1e0:	f104 0e14 	add.w	lr, r4, #20
 800e1e4:	46a9      	mov	r9, r5
 800e1e6:	f04f 0c00 	mov.w	ip, #0
 800e1ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e1ee:	f8d9 3000 	ldr.w	r3, [r9]
 800e1f2:	fa1f fb87 	uxth.w	fp, r7
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e1fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e200:	f8d9 7000 	ldr.w	r7, [r9]
 800e204:	4463      	add	r3, ip
 800e206:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e20a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e20e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e212:	b29b      	uxth	r3, r3
 800e214:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e218:	4572      	cmp	r2, lr
 800e21a:	f849 3b04 	str.w	r3, [r9], #4
 800e21e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e222:	d8e2      	bhi.n	800e1ea <__multiply+0xb2>
 800e224:	9b01      	ldr	r3, [sp, #4]
 800e226:	f845 c003 	str.w	ip, [r5, r3]
 800e22a:	9b03      	ldr	r3, [sp, #12]
 800e22c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e230:	3104      	adds	r1, #4
 800e232:	f1b9 0f00 	cmp.w	r9, #0
 800e236:	d021      	beq.n	800e27c <__multiply+0x144>
 800e238:	682b      	ldr	r3, [r5, #0]
 800e23a:	f104 0c14 	add.w	ip, r4, #20
 800e23e:	46ae      	mov	lr, r5
 800e240:	f04f 0a00 	mov.w	sl, #0
 800e244:	f8bc b000 	ldrh.w	fp, [ip]
 800e248:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e24c:	fb09 770b 	mla	r7, r9, fp, r7
 800e250:	4457      	add	r7, sl
 800e252:	b29b      	uxth	r3, r3
 800e254:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e258:	f84e 3b04 	str.w	r3, [lr], #4
 800e25c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e260:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e264:	f8be 3000 	ldrh.w	r3, [lr]
 800e268:	fb09 330a 	mla	r3, r9, sl, r3
 800e26c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e270:	4562      	cmp	r2, ip
 800e272:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e276:	d8e5      	bhi.n	800e244 <__multiply+0x10c>
 800e278:	9f01      	ldr	r7, [sp, #4]
 800e27a:	51eb      	str	r3, [r5, r7]
 800e27c:	3504      	adds	r5, #4
 800e27e:	e799      	b.n	800e1b4 <__multiply+0x7c>
 800e280:	3e01      	subs	r6, #1
 800e282:	e79b      	b.n	800e1bc <__multiply+0x84>
 800e284:	08010821 	.word	0x08010821
 800e288:	08010832 	.word	0x08010832

0800e28c <__pow5mult>:
 800e28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e290:	4615      	mov	r5, r2
 800e292:	f012 0203 	ands.w	r2, r2, #3
 800e296:	4607      	mov	r7, r0
 800e298:	460e      	mov	r6, r1
 800e29a:	d007      	beq.n	800e2ac <__pow5mult+0x20>
 800e29c:	4c25      	ldr	r4, [pc, #148]	@ (800e334 <__pow5mult+0xa8>)
 800e29e:	3a01      	subs	r2, #1
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2a6:	f7ff fe55 	bl	800df54 <__multadd>
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	10ad      	asrs	r5, r5, #2
 800e2ae:	d03d      	beq.n	800e32c <__pow5mult+0xa0>
 800e2b0:	69fc      	ldr	r4, [r7, #28]
 800e2b2:	b97c      	cbnz	r4, 800e2d4 <__pow5mult+0x48>
 800e2b4:	2010      	movs	r0, #16
 800e2b6:	f7ff fd35 	bl	800dd24 <malloc>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	61f8      	str	r0, [r7, #28]
 800e2be:	b928      	cbnz	r0, 800e2cc <__pow5mult+0x40>
 800e2c0:	4b1d      	ldr	r3, [pc, #116]	@ (800e338 <__pow5mult+0xac>)
 800e2c2:	481e      	ldr	r0, [pc, #120]	@ (800e33c <__pow5mult+0xb0>)
 800e2c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2c8:	f001 fb62 	bl	800f990 <__assert_func>
 800e2cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2d0:	6004      	str	r4, [r0, #0]
 800e2d2:	60c4      	str	r4, [r0, #12]
 800e2d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2dc:	b94c      	cbnz	r4, 800e2f2 <__pow5mult+0x66>
 800e2de:	f240 2171 	movw	r1, #625	@ 0x271
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	f7ff ff12 	bl	800e10c <__i2b>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	f04f 0900 	mov.w	r9, #0
 800e2f6:	07eb      	lsls	r3, r5, #31
 800e2f8:	d50a      	bpl.n	800e310 <__pow5mult+0x84>
 800e2fa:	4631      	mov	r1, r6
 800e2fc:	4622      	mov	r2, r4
 800e2fe:	4638      	mov	r0, r7
 800e300:	f7ff ff1a 	bl	800e138 <__multiply>
 800e304:	4631      	mov	r1, r6
 800e306:	4680      	mov	r8, r0
 800e308:	4638      	mov	r0, r7
 800e30a:	f7ff fe01 	bl	800df10 <_Bfree>
 800e30e:	4646      	mov	r6, r8
 800e310:	106d      	asrs	r5, r5, #1
 800e312:	d00b      	beq.n	800e32c <__pow5mult+0xa0>
 800e314:	6820      	ldr	r0, [r4, #0]
 800e316:	b938      	cbnz	r0, 800e328 <__pow5mult+0x9c>
 800e318:	4622      	mov	r2, r4
 800e31a:	4621      	mov	r1, r4
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7ff ff0b 	bl	800e138 <__multiply>
 800e322:	6020      	str	r0, [r4, #0]
 800e324:	f8c0 9000 	str.w	r9, [r0]
 800e328:	4604      	mov	r4, r0
 800e32a:	e7e4      	b.n	800e2f6 <__pow5mult+0x6a>
 800e32c:	4630      	mov	r0, r6
 800e32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e332:	bf00      	nop
 800e334:	0801088c 	.word	0x0801088c
 800e338:	080107b2 	.word	0x080107b2
 800e33c:	08010832 	.word	0x08010832

0800e340 <__lshift>:
 800e340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e344:	460c      	mov	r4, r1
 800e346:	6849      	ldr	r1, [r1, #4]
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e34e:	68a3      	ldr	r3, [r4, #8]
 800e350:	4607      	mov	r7, r0
 800e352:	4691      	mov	r9, r2
 800e354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e358:	f108 0601 	add.w	r6, r8, #1
 800e35c:	42b3      	cmp	r3, r6
 800e35e:	db0b      	blt.n	800e378 <__lshift+0x38>
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fd95 	bl	800de90 <_Balloc>
 800e366:	4605      	mov	r5, r0
 800e368:	b948      	cbnz	r0, 800e37e <__lshift+0x3e>
 800e36a:	4602      	mov	r2, r0
 800e36c:	4b28      	ldr	r3, [pc, #160]	@ (800e410 <__lshift+0xd0>)
 800e36e:	4829      	ldr	r0, [pc, #164]	@ (800e414 <__lshift+0xd4>)
 800e370:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e374:	f001 fb0c 	bl	800f990 <__assert_func>
 800e378:	3101      	adds	r1, #1
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	e7ee      	b.n	800e35c <__lshift+0x1c>
 800e37e:	2300      	movs	r3, #0
 800e380:	f100 0114 	add.w	r1, r0, #20
 800e384:	f100 0210 	add.w	r2, r0, #16
 800e388:	4618      	mov	r0, r3
 800e38a:	4553      	cmp	r3, sl
 800e38c:	db33      	blt.n	800e3f6 <__lshift+0xb6>
 800e38e:	6920      	ldr	r0, [r4, #16]
 800e390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e394:	f104 0314 	add.w	r3, r4, #20
 800e398:	f019 091f 	ands.w	r9, r9, #31
 800e39c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3a4:	d02b      	beq.n	800e3fe <__lshift+0xbe>
 800e3a6:	f1c9 0e20 	rsb	lr, r9, #32
 800e3aa:	468a      	mov	sl, r1
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	fa00 f009 	lsl.w	r0, r0, r9
 800e3b4:	4310      	orrs	r0, r2
 800e3b6:	f84a 0b04 	str.w	r0, [sl], #4
 800e3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3be:	459c      	cmp	ip, r3
 800e3c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3c4:	d8f3      	bhi.n	800e3ae <__lshift+0x6e>
 800e3c6:	ebac 0304 	sub.w	r3, ip, r4
 800e3ca:	3b15      	subs	r3, #21
 800e3cc:	f023 0303 	bic.w	r3, r3, #3
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	f104 0015 	add.w	r0, r4, #21
 800e3d6:	4584      	cmp	ip, r0
 800e3d8:	bf38      	it	cc
 800e3da:	2304      	movcc	r3, #4
 800e3dc:	50ca      	str	r2, [r1, r3]
 800e3de:	b10a      	cbz	r2, 800e3e4 <__lshift+0xa4>
 800e3e0:	f108 0602 	add.w	r6, r8, #2
 800e3e4:	3e01      	subs	r6, #1
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	612e      	str	r6, [r5, #16]
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	f7ff fd90 	bl	800df10 <_Bfree>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	e7c5      	b.n	800e38a <__lshift+0x4a>
 800e3fe:	3904      	subs	r1, #4
 800e400:	f853 2b04 	ldr.w	r2, [r3], #4
 800e404:	f841 2f04 	str.w	r2, [r1, #4]!
 800e408:	459c      	cmp	ip, r3
 800e40a:	d8f9      	bhi.n	800e400 <__lshift+0xc0>
 800e40c:	e7ea      	b.n	800e3e4 <__lshift+0xa4>
 800e40e:	bf00      	nop
 800e410:	08010821 	.word	0x08010821
 800e414:	08010832 	.word	0x08010832

0800e418 <__mcmp>:
 800e418:	690a      	ldr	r2, [r1, #16]
 800e41a:	4603      	mov	r3, r0
 800e41c:	6900      	ldr	r0, [r0, #16]
 800e41e:	1a80      	subs	r0, r0, r2
 800e420:	b530      	push	{r4, r5, lr}
 800e422:	d10e      	bne.n	800e442 <__mcmp+0x2a>
 800e424:	3314      	adds	r3, #20
 800e426:	3114      	adds	r1, #20
 800e428:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e42c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e430:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e434:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e438:	4295      	cmp	r5, r2
 800e43a:	d003      	beq.n	800e444 <__mcmp+0x2c>
 800e43c:	d205      	bcs.n	800e44a <__mcmp+0x32>
 800e43e:	f04f 30ff 	mov.w	r0, #4294967295
 800e442:	bd30      	pop	{r4, r5, pc}
 800e444:	42a3      	cmp	r3, r4
 800e446:	d3f3      	bcc.n	800e430 <__mcmp+0x18>
 800e448:	e7fb      	b.n	800e442 <__mcmp+0x2a>
 800e44a:	2001      	movs	r0, #1
 800e44c:	e7f9      	b.n	800e442 <__mcmp+0x2a>
	...

0800e450 <__mdiff>:
 800e450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	4689      	mov	r9, r1
 800e456:	4606      	mov	r6, r0
 800e458:	4611      	mov	r1, r2
 800e45a:	4648      	mov	r0, r9
 800e45c:	4614      	mov	r4, r2
 800e45e:	f7ff ffdb 	bl	800e418 <__mcmp>
 800e462:	1e05      	subs	r5, r0, #0
 800e464:	d112      	bne.n	800e48c <__mdiff+0x3c>
 800e466:	4629      	mov	r1, r5
 800e468:	4630      	mov	r0, r6
 800e46a:	f7ff fd11 	bl	800de90 <_Balloc>
 800e46e:	4602      	mov	r2, r0
 800e470:	b928      	cbnz	r0, 800e47e <__mdiff+0x2e>
 800e472:	4b3f      	ldr	r3, [pc, #252]	@ (800e570 <__mdiff+0x120>)
 800e474:	f240 2137 	movw	r1, #567	@ 0x237
 800e478:	483e      	ldr	r0, [pc, #248]	@ (800e574 <__mdiff+0x124>)
 800e47a:	f001 fa89 	bl	800f990 <__assert_func>
 800e47e:	2301      	movs	r3, #1
 800e480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e484:	4610      	mov	r0, r2
 800e486:	b003      	add	sp, #12
 800e488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48c:	bfbc      	itt	lt
 800e48e:	464b      	movlt	r3, r9
 800e490:	46a1      	movlt	r9, r4
 800e492:	4630      	mov	r0, r6
 800e494:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e498:	bfba      	itte	lt
 800e49a:	461c      	movlt	r4, r3
 800e49c:	2501      	movlt	r5, #1
 800e49e:	2500      	movge	r5, #0
 800e4a0:	f7ff fcf6 	bl	800de90 <_Balloc>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	b918      	cbnz	r0, 800e4b0 <__mdiff+0x60>
 800e4a8:	4b31      	ldr	r3, [pc, #196]	@ (800e570 <__mdiff+0x120>)
 800e4aa:	f240 2145 	movw	r1, #581	@ 0x245
 800e4ae:	e7e3      	b.n	800e478 <__mdiff+0x28>
 800e4b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4b4:	6926      	ldr	r6, [r4, #16]
 800e4b6:	60c5      	str	r5, [r0, #12]
 800e4b8:	f109 0310 	add.w	r3, r9, #16
 800e4bc:	f109 0514 	add.w	r5, r9, #20
 800e4c0:	f104 0e14 	add.w	lr, r4, #20
 800e4c4:	f100 0b14 	add.w	fp, r0, #20
 800e4c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	46d9      	mov	r9, fp
 800e4d4:	f04f 0c00 	mov.w	ip, #0
 800e4d8:	9b01      	ldr	r3, [sp, #4]
 800e4da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e4de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e4e2:	9301      	str	r3, [sp, #4]
 800e4e4:	fa1f f38a 	uxth.w	r3, sl
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	b283      	uxth	r3, r0
 800e4ec:	1acb      	subs	r3, r1, r3
 800e4ee:	0c00      	lsrs	r0, r0, #16
 800e4f0:	4463      	add	r3, ip
 800e4f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e4f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e500:	4576      	cmp	r6, lr
 800e502:	f849 3b04 	str.w	r3, [r9], #4
 800e506:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e50a:	d8e5      	bhi.n	800e4d8 <__mdiff+0x88>
 800e50c:	1b33      	subs	r3, r6, r4
 800e50e:	3b15      	subs	r3, #21
 800e510:	f023 0303 	bic.w	r3, r3, #3
 800e514:	3415      	adds	r4, #21
 800e516:	3304      	adds	r3, #4
 800e518:	42a6      	cmp	r6, r4
 800e51a:	bf38      	it	cc
 800e51c:	2304      	movcc	r3, #4
 800e51e:	441d      	add	r5, r3
 800e520:	445b      	add	r3, fp
 800e522:	461e      	mov	r6, r3
 800e524:	462c      	mov	r4, r5
 800e526:	4544      	cmp	r4, r8
 800e528:	d30e      	bcc.n	800e548 <__mdiff+0xf8>
 800e52a:	f108 0103 	add.w	r1, r8, #3
 800e52e:	1b49      	subs	r1, r1, r5
 800e530:	f021 0103 	bic.w	r1, r1, #3
 800e534:	3d03      	subs	r5, #3
 800e536:	45a8      	cmp	r8, r5
 800e538:	bf38      	it	cc
 800e53a:	2100      	movcc	r1, #0
 800e53c:	440b      	add	r3, r1
 800e53e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e542:	b191      	cbz	r1, 800e56a <__mdiff+0x11a>
 800e544:	6117      	str	r7, [r2, #16]
 800e546:	e79d      	b.n	800e484 <__mdiff+0x34>
 800e548:	f854 1b04 	ldr.w	r1, [r4], #4
 800e54c:	46e6      	mov	lr, ip
 800e54e:	0c08      	lsrs	r0, r1, #16
 800e550:	fa1c fc81 	uxtah	ip, ip, r1
 800e554:	4471      	add	r1, lr
 800e556:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e55a:	b289      	uxth	r1, r1
 800e55c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e560:	f846 1b04 	str.w	r1, [r6], #4
 800e564:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e568:	e7dd      	b.n	800e526 <__mdiff+0xd6>
 800e56a:	3f01      	subs	r7, #1
 800e56c:	e7e7      	b.n	800e53e <__mdiff+0xee>
 800e56e:	bf00      	nop
 800e570:	08010821 	.word	0x08010821
 800e574:	08010832 	.word	0x08010832

0800e578 <__ulp>:
 800e578:	b082      	sub	sp, #8
 800e57a:	ed8d 0b00 	vstr	d0, [sp]
 800e57e:	9a01      	ldr	r2, [sp, #4]
 800e580:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c0 <__ulp+0x48>)
 800e582:	4013      	ands	r3, r2
 800e584:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	dc08      	bgt.n	800e59e <__ulp+0x26>
 800e58c:	425b      	negs	r3, r3
 800e58e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e592:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e596:	da04      	bge.n	800e5a2 <__ulp+0x2a>
 800e598:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e59c:	4113      	asrs	r3, r2
 800e59e:	2200      	movs	r2, #0
 800e5a0:	e008      	b.n	800e5b4 <__ulp+0x3c>
 800e5a2:	f1a2 0314 	sub.w	r3, r2, #20
 800e5a6:	2b1e      	cmp	r3, #30
 800e5a8:	bfda      	itte	le
 800e5aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e5ae:	40da      	lsrle	r2, r3
 800e5b0:	2201      	movgt	r2, #1
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4610      	mov	r0, r2
 800e5b8:	ec41 0b10 	vmov	d0, r0, r1
 800e5bc:	b002      	add	sp, #8
 800e5be:	4770      	bx	lr
 800e5c0:	7ff00000 	.word	0x7ff00000

0800e5c4 <__b2d>:
 800e5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c8:	6906      	ldr	r6, [r0, #16]
 800e5ca:	f100 0814 	add.w	r8, r0, #20
 800e5ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e5d2:	1f37      	subs	r7, r6, #4
 800e5d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e5d8:	4610      	mov	r0, r2
 800e5da:	f7ff fd4b 	bl	800e074 <__hi0bits>
 800e5de:	f1c0 0320 	rsb	r3, r0, #32
 800e5e2:	280a      	cmp	r0, #10
 800e5e4:	600b      	str	r3, [r1, #0]
 800e5e6:	491b      	ldr	r1, [pc, #108]	@ (800e654 <__b2d+0x90>)
 800e5e8:	dc15      	bgt.n	800e616 <__b2d+0x52>
 800e5ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800e5ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800e5f2:	45b8      	cmp	r8, r7
 800e5f4:	ea43 0501 	orr.w	r5, r3, r1
 800e5f8:	bf34      	ite	cc
 800e5fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e5fe:	2300      	movcs	r3, #0
 800e600:	3015      	adds	r0, #21
 800e602:	fa02 f000 	lsl.w	r0, r2, r0
 800e606:	fa23 f30c 	lsr.w	r3, r3, ip
 800e60a:	4303      	orrs	r3, r0
 800e60c:	461c      	mov	r4, r3
 800e60e:	ec45 4b10 	vmov	d0, r4, r5
 800e612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e616:	45b8      	cmp	r8, r7
 800e618:	bf3a      	itte	cc
 800e61a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e61e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e622:	2300      	movcs	r3, #0
 800e624:	380b      	subs	r0, #11
 800e626:	d012      	beq.n	800e64e <__b2d+0x8a>
 800e628:	f1c0 0120 	rsb	r1, r0, #32
 800e62c:	fa23 f401 	lsr.w	r4, r3, r1
 800e630:	4082      	lsls	r2, r0
 800e632:	4322      	orrs	r2, r4
 800e634:	4547      	cmp	r7, r8
 800e636:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e63a:	bf8c      	ite	hi
 800e63c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e640:	2200      	movls	r2, #0
 800e642:	4083      	lsls	r3, r0
 800e644:	40ca      	lsrs	r2, r1
 800e646:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e64a:	4313      	orrs	r3, r2
 800e64c:	e7de      	b.n	800e60c <__b2d+0x48>
 800e64e:	ea42 0501 	orr.w	r5, r2, r1
 800e652:	e7db      	b.n	800e60c <__b2d+0x48>
 800e654:	3ff00000 	.word	0x3ff00000

0800e658 <__d2b>:
 800e658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e65c:	460f      	mov	r7, r1
 800e65e:	2101      	movs	r1, #1
 800e660:	ec59 8b10 	vmov	r8, r9, d0
 800e664:	4616      	mov	r6, r2
 800e666:	f7ff fc13 	bl	800de90 <_Balloc>
 800e66a:	4604      	mov	r4, r0
 800e66c:	b930      	cbnz	r0, 800e67c <__d2b+0x24>
 800e66e:	4602      	mov	r2, r0
 800e670:	4b23      	ldr	r3, [pc, #140]	@ (800e700 <__d2b+0xa8>)
 800e672:	4824      	ldr	r0, [pc, #144]	@ (800e704 <__d2b+0xac>)
 800e674:	f240 310f 	movw	r1, #783	@ 0x30f
 800e678:	f001 f98a 	bl	800f990 <__assert_func>
 800e67c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e684:	b10d      	cbz	r5, 800e68a <__d2b+0x32>
 800e686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	f1b8 0300 	subs.w	r3, r8, #0
 800e690:	d023      	beq.n	800e6da <__d2b+0x82>
 800e692:	4668      	mov	r0, sp
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	f7ff fd0c 	bl	800e0b2 <__lo0bits>
 800e69a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e69e:	b1d0      	cbz	r0, 800e6d6 <__d2b+0x7e>
 800e6a0:	f1c0 0320 	rsb	r3, r0, #32
 800e6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a8:	430b      	orrs	r3, r1
 800e6aa:	40c2      	lsrs	r2, r0
 800e6ac:	6163      	str	r3, [r4, #20]
 800e6ae:	9201      	str	r2, [sp, #4]
 800e6b0:	9b01      	ldr	r3, [sp, #4]
 800e6b2:	61a3      	str	r3, [r4, #24]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	bf0c      	ite	eq
 800e6b8:	2201      	moveq	r2, #1
 800e6ba:	2202      	movne	r2, #2
 800e6bc:	6122      	str	r2, [r4, #16]
 800e6be:	b1a5      	cbz	r5, 800e6ea <__d2b+0x92>
 800e6c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6c4:	4405      	add	r5, r0
 800e6c6:	603d      	str	r5, [r7, #0]
 800e6c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6cc:	6030      	str	r0, [r6, #0]
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	b003      	add	sp, #12
 800e6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d6:	6161      	str	r1, [r4, #20]
 800e6d8:	e7ea      	b.n	800e6b0 <__d2b+0x58>
 800e6da:	a801      	add	r0, sp, #4
 800e6dc:	f7ff fce9 	bl	800e0b2 <__lo0bits>
 800e6e0:	9b01      	ldr	r3, [sp, #4]
 800e6e2:	6163      	str	r3, [r4, #20]
 800e6e4:	3020      	adds	r0, #32
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	e7e8      	b.n	800e6bc <__d2b+0x64>
 800e6ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e6f2:	6038      	str	r0, [r7, #0]
 800e6f4:	6918      	ldr	r0, [r3, #16]
 800e6f6:	f7ff fcbd 	bl	800e074 <__hi0bits>
 800e6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6fe:	e7e5      	b.n	800e6cc <__d2b+0x74>
 800e700:	08010821 	.word	0x08010821
 800e704:	08010832 	.word	0x08010832

0800e708 <__ratio>:
 800e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	b085      	sub	sp, #20
 800e70e:	e9cd 1000 	strd	r1, r0, [sp]
 800e712:	a902      	add	r1, sp, #8
 800e714:	f7ff ff56 	bl	800e5c4 <__b2d>
 800e718:	9800      	ldr	r0, [sp, #0]
 800e71a:	a903      	add	r1, sp, #12
 800e71c:	ec55 4b10 	vmov	r4, r5, d0
 800e720:	f7ff ff50 	bl	800e5c4 <__b2d>
 800e724:	9b01      	ldr	r3, [sp, #4]
 800e726:	6919      	ldr	r1, [r3, #16]
 800e728:	9b00      	ldr	r3, [sp, #0]
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	1ac9      	subs	r1, r1, r3
 800e72e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e732:	1a9b      	subs	r3, r3, r2
 800e734:	ec5b ab10 	vmov	sl, fp, d0
 800e738:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	bfce      	itee	gt
 800e740:	462a      	movgt	r2, r5
 800e742:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e746:	465a      	movle	r2, fp
 800e748:	462f      	mov	r7, r5
 800e74a:	46d9      	mov	r9, fp
 800e74c:	bfcc      	ite	gt
 800e74e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e752:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e756:	464b      	mov	r3, r9
 800e758:	4652      	mov	r2, sl
 800e75a:	4620      	mov	r0, r4
 800e75c:	4639      	mov	r1, r7
 800e75e:	f7f2 f875 	bl	800084c <__aeabi_ddiv>
 800e762:	ec41 0b10 	vmov	d0, r0, r1
 800e766:	b005      	add	sp, #20
 800e768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e76c <__copybits>:
 800e76c:	3901      	subs	r1, #1
 800e76e:	b570      	push	{r4, r5, r6, lr}
 800e770:	1149      	asrs	r1, r1, #5
 800e772:	6914      	ldr	r4, [r2, #16]
 800e774:	3101      	adds	r1, #1
 800e776:	f102 0314 	add.w	r3, r2, #20
 800e77a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e77e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e782:	1f05      	subs	r5, r0, #4
 800e784:	42a3      	cmp	r3, r4
 800e786:	d30c      	bcc.n	800e7a2 <__copybits+0x36>
 800e788:	1aa3      	subs	r3, r4, r2
 800e78a:	3b11      	subs	r3, #17
 800e78c:	f023 0303 	bic.w	r3, r3, #3
 800e790:	3211      	adds	r2, #17
 800e792:	42a2      	cmp	r2, r4
 800e794:	bf88      	it	hi
 800e796:	2300      	movhi	r3, #0
 800e798:	4418      	add	r0, r3
 800e79a:	2300      	movs	r3, #0
 800e79c:	4288      	cmp	r0, r1
 800e79e:	d305      	bcc.n	800e7ac <__copybits+0x40>
 800e7a0:	bd70      	pop	{r4, r5, r6, pc}
 800e7a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7aa:	e7eb      	b.n	800e784 <__copybits+0x18>
 800e7ac:	f840 3b04 	str.w	r3, [r0], #4
 800e7b0:	e7f4      	b.n	800e79c <__copybits+0x30>

0800e7b2 <__any_on>:
 800e7b2:	f100 0214 	add.w	r2, r0, #20
 800e7b6:	6900      	ldr	r0, [r0, #16]
 800e7b8:	114b      	asrs	r3, r1, #5
 800e7ba:	4298      	cmp	r0, r3
 800e7bc:	b510      	push	{r4, lr}
 800e7be:	db11      	blt.n	800e7e4 <__any_on+0x32>
 800e7c0:	dd0a      	ble.n	800e7d8 <__any_on+0x26>
 800e7c2:	f011 011f 	ands.w	r1, r1, #31
 800e7c6:	d007      	beq.n	800e7d8 <__any_on+0x26>
 800e7c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7cc:	fa24 f001 	lsr.w	r0, r4, r1
 800e7d0:	fa00 f101 	lsl.w	r1, r0, r1
 800e7d4:	428c      	cmp	r4, r1
 800e7d6:	d10b      	bne.n	800e7f0 <__any_on+0x3e>
 800e7d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d803      	bhi.n	800e7e8 <__any_on+0x36>
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	bd10      	pop	{r4, pc}
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	e7f7      	b.n	800e7d8 <__any_on+0x26>
 800e7e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7ec:	2900      	cmp	r1, #0
 800e7ee:	d0f5      	beq.n	800e7dc <__any_on+0x2a>
 800e7f0:	2001      	movs	r0, #1
 800e7f2:	e7f6      	b.n	800e7e2 <__any_on+0x30>

0800e7f4 <sulp>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	460d      	mov	r5, r1
 800e7fa:	ec45 4b10 	vmov	d0, r4, r5
 800e7fe:	4616      	mov	r6, r2
 800e800:	f7ff feba 	bl	800e578 <__ulp>
 800e804:	ec51 0b10 	vmov	r0, r1, d0
 800e808:	b17e      	cbz	r6, 800e82a <sulp+0x36>
 800e80a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e80e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e812:	2b00      	cmp	r3, #0
 800e814:	dd09      	ble.n	800e82a <sulp+0x36>
 800e816:	051b      	lsls	r3, r3, #20
 800e818:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e81c:	2400      	movs	r4, #0
 800e81e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e822:	4622      	mov	r2, r4
 800e824:	462b      	mov	r3, r5
 800e826:	f7f1 fee7 	bl	80005f8 <__aeabi_dmul>
 800e82a:	ec41 0b10 	vmov	d0, r0, r1
 800e82e:	bd70      	pop	{r4, r5, r6, pc}

0800e830 <_strtod_l>:
 800e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e834:	b09f      	sub	sp, #124	@ 0x7c
 800e836:	460c      	mov	r4, r1
 800e838:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e83a:	2200      	movs	r2, #0
 800e83c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e83e:	9005      	str	r0, [sp, #20]
 800e840:	f04f 0a00 	mov.w	sl, #0
 800e844:	f04f 0b00 	mov.w	fp, #0
 800e848:	460a      	mov	r2, r1
 800e84a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e84c:	7811      	ldrb	r1, [r2, #0]
 800e84e:	292b      	cmp	r1, #43	@ 0x2b
 800e850:	d04a      	beq.n	800e8e8 <_strtod_l+0xb8>
 800e852:	d838      	bhi.n	800e8c6 <_strtod_l+0x96>
 800e854:	290d      	cmp	r1, #13
 800e856:	d832      	bhi.n	800e8be <_strtod_l+0x8e>
 800e858:	2908      	cmp	r1, #8
 800e85a:	d832      	bhi.n	800e8c2 <_strtod_l+0x92>
 800e85c:	2900      	cmp	r1, #0
 800e85e:	d03b      	beq.n	800e8d8 <_strtod_l+0xa8>
 800e860:	2200      	movs	r2, #0
 800e862:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e864:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e866:	782a      	ldrb	r2, [r5, #0]
 800e868:	2a30      	cmp	r2, #48	@ 0x30
 800e86a:	f040 80b3 	bne.w	800e9d4 <_strtod_l+0x1a4>
 800e86e:	786a      	ldrb	r2, [r5, #1]
 800e870:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e874:	2a58      	cmp	r2, #88	@ 0x58
 800e876:	d16e      	bne.n	800e956 <_strtod_l+0x126>
 800e878:	9302      	str	r3, [sp, #8]
 800e87a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	4a8e      	ldr	r2, [pc, #568]	@ (800eabc <_strtod_l+0x28c>)
 800e884:	9805      	ldr	r0, [sp, #20]
 800e886:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e888:	a919      	add	r1, sp, #100	@ 0x64
 800e88a:	f001 f91b 	bl	800fac4 <__gethex>
 800e88e:	f010 060f 	ands.w	r6, r0, #15
 800e892:	4604      	mov	r4, r0
 800e894:	d005      	beq.n	800e8a2 <_strtod_l+0x72>
 800e896:	2e06      	cmp	r6, #6
 800e898:	d128      	bne.n	800e8ec <_strtod_l+0xbc>
 800e89a:	3501      	adds	r5, #1
 800e89c:	2300      	movs	r3, #0
 800e89e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e8a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f040 858e 	bne.w	800f3c6 <_strtod_l+0xb96>
 800e8aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8ac:	b1cb      	cbz	r3, 800e8e2 <_strtod_l+0xb2>
 800e8ae:	4652      	mov	r2, sl
 800e8b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e8b4:	ec43 2b10 	vmov	d0, r2, r3
 800e8b8:	b01f      	add	sp, #124	@ 0x7c
 800e8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8be:	2920      	cmp	r1, #32
 800e8c0:	d1ce      	bne.n	800e860 <_strtod_l+0x30>
 800e8c2:	3201      	adds	r2, #1
 800e8c4:	e7c1      	b.n	800e84a <_strtod_l+0x1a>
 800e8c6:	292d      	cmp	r1, #45	@ 0x2d
 800e8c8:	d1ca      	bne.n	800e860 <_strtod_l+0x30>
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e8ce:	1c51      	adds	r1, r2, #1
 800e8d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800e8d2:	7852      	ldrb	r2, [r2, #1]
 800e8d4:	2a00      	cmp	r2, #0
 800e8d6:	d1c5      	bne.n	800e864 <_strtod_l+0x34>
 800e8d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8da:	9419      	str	r4, [sp, #100]	@ 0x64
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f040 8570 	bne.w	800f3c2 <_strtod_l+0xb92>
 800e8e2:	4652      	mov	r2, sl
 800e8e4:	465b      	mov	r3, fp
 800e8e6:	e7e5      	b.n	800e8b4 <_strtod_l+0x84>
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	e7ef      	b.n	800e8cc <_strtod_l+0x9c>
 800e8ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8ee:	b13a      	cbz	r2, 800e900 <_strtod_l+0xd0>
 800e8f0:	2135      	movs	r1, #53	@ 0x35
 800e8f2:	a81c      	add	r0, sp, #112	@ 0x70
 800e8f4:	f7ff ff3a 	bl	800e76c <__copybits>
 800e8f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8fa:	9805      	ldr	r0, [sp, #20]
 800e8fc:	f7ff fb08 	bl	800df10 <_Bfree>
 800e900:	3e01      	subs	r6, #1
 800e902:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e904:	2e04      	cmp	r6, #4
 800e906:	d806      	bhi.n	800e916 <_strtod_l+0xe6>
 800e908:	e8df f006 	tbb	[pc, r6]
 800e90c:	201d0314 	.word	0x201d0314
 800e910:	14          	.byte	0x14
 800e911:	00          	.byte	0x00
 800e912:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e916:	05e1      	lsls	r1, r4, #23
 800e918:	bf48      	it	mi
 800e91a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e91e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e922:	0d1b      	lsrs	r3, r3, #20
 800e924:	051b      	lsls	r3, r3, #20
 800e926:	2b00      	cmp	r3, #0
 800e928:	d1bb      	bne.n	800e8a2 <_strtod_l+0x72>
 800e92a:	f7fe fb21 	bl	800cf70 <__errno>
 800e92e:	2322      	movs	r3, #34	@ 0x22
 800e930:	6003      	str	r3, [r0, #0]
 800e932:	e7b6      	b.n	800e8a2 <_strtod_l+0x72>
 800e934:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e938:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e93c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e940:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e944:	e7e7      	b.n	800e916 <_strtod_l+0xe6>
 800e946:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800eac4 <_strtod_l+0x294>
 800e94a:	e7e4      	b.n	800e916 <_strtod_l+0xe6>
 800e94c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e950:	f04f 3aff 	mov.w	sl, #4294967295
 800e954:	e7df      	b.n	800e916 <_strtod_l+0xe6>
 800e956:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e95c:	785b      	ldrb	r3, [r3, #1]
 800e95e:	2b30      	cmp	r3, #48	@ 0x30
 800e960:	d0f9      	beq.n	800e956 <_strtod_l+0x126>
 800e962:	2b00      	cmp	r3, #0
 800e964:	d09d      	beq.n	800e8a2 <_strtod_l+0x72>
 800e966:	2301      	movs	r3, #1
 800e968:	9309      	str	r3, [sp, #36]	@ 0x24
 800e96a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e96c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e96e:	2300      	movs	r3, #0
 800e970:	9308      	str	r3, [sp, #32]
 800e972:	930a      	str	r3, [sp, #40]	@ 0x28
 800e974:	461f      	mov	r7, r3
 800e976:	220a      	movs	r2, #10
 800e978:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e97a:	7805      	ldrb	r5, [r0, #0]
 800e97c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e980:	b2d9      	uxtb	r1, r3
 800e982:	2909      	cmp	r1, #9
 800e984:	d928      	bls.n	800e9d8 <_strtod_l+0x1a8>
 800e986:	494e      	ldr	r1, [pc, #312]	@ (800eac0 <_strtod_l+0x290>)
 800e988:	2201      	movs	r2, #1
 800e98a:	f000 ffd5 	bl	800f938 <strncmp>
 800e98e:	2800      	cmp	r0, #0
 800e990:	d032      	beq.n	800e9f8 <_strtod_l+0x1c8>
 800e992:	2000      	movs	r0, #0
 800e994:	462a      	mov	r2, r5
 800e996:	4681      	mov	r9, r0
 800e998:	463d      	mov	r5, r7
 800e99a:	4603      	mov	r3, r0
 800e99c:	2a65      	cmp	r2, #101	@ 0x65
 800e99e:	d001      	beq.n	800e9a4 <_strtod_l+0x174>
 800e9a0:	2a45      	cmp	r2, #69	@ 0x45
 800e9a2:	d114      	bne.n	800e9ce <_strtod_l+0x19e>
 800e9a4:	b91d      	cbnz	r5, 800e9ae <_strtod_l+0x17e>
 800e9a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9a8:	4302      	orrs	r2, r0
 800e9aa:	d095      	beq.n	800e8d8 <_strtod_l+0xa8>
 800e9ac:	2500      	movs	r5, #0
 800e9ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e9b0:	1c62      	adds	r2, r4, #1
 800e9b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9b4:	7862      	ldrb	r2, [r4, #1]
 800e9b6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e9b8:	d077      	beq.n	800eaaa <_strtod_l+0x27a>
 800e9ba:	2a2d      	cmp	r2, #45	@ 0x2d
 800e9bc:	d07b      	beq.n	800eab6 <_strtod_l+0x286>
 800e9be:	f04f 0c00 	mov.w	ip, #0
 800e9c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e9c6:	2909      	cmp	r1, #9
 800e9c8:	f240 8082 	bls.w	800ead0 <_strtod_l+0x2a0>
 800e9cc:	9419      	str	r4, [sp, #100]	@ 0x64
 800e9ce:	f04f 0800 	mov.w	r8, #0
 800e9d2:	e0a2      	b.n	800eb1a <_strtod_l+0x2ea>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	e7c7      	b.n	800e968 <_strtod_l+0x138>
 800e9d8:	2f08      	cmp	r7, #8
 800e9da:	bfd5      	itete	le
 800e9dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e9de:	9908      	ldrgt	r1, [sp, #32]
 800e9e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e9e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e9e8:	f100 0001 	add.w	r0, r0, #1
 800e9ec:	bfd4      	ite	le
 800e9ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e9f0:	9308      	strgt	r3, [sp, #32]
 800e9f2:	3701      	adds	r7, #1
 800e9f4:	9019      	str	r0, [sp, #100]	@ 0x64
 800e9f6:	e7bf      	b.n	800e978 <_strtod_l+0x148>
 800e9f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9fa:	1c5a      	adds	r2, r3, #1
 800e9fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9fe:	785a      	ldrb	r2, [r3, #1]
 800ea00:	b37f      	cbz	r7, 800ea62 <_strtod_l+0x232>
 800ea02:	4681      	mov	r9, r0
 800ea04:	463d      	mov	r5, r7
 800ea06:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ea0a:	2b09      	cmp	r3, #9
 800ea0c:	d912      	bls.n	800ea34 <_strtod_l+0x204>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e7c4      	b.n	800e99c <_strtod_l+0x16c>
 800ea12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea14:	1c5a      	adds	r2, r3, #1
 800ea16:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea18:	785a      	ldrb	r2, [r3, #1]
 800ea1a:	3001      	adds	r0, #1
 800ea1c:	2a30      	cmp	r2, #48	@ 0x30
 800ea1e:	d0f8      	beq.n	800ea12 <_strtod_l+0x1e2>
 800ea20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ea24:	2b08      	cmp	r3, #8
 800ea26:	f200 84d3 	bhi.w	800f3d0 <_strtod_l+0xba0>
 800ea2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea2e:	4681      	mov	r9, r0
 800ea30:	2000      	movs	r0, #0
 800ea32:	4605      	mov	r5, r0
 800ea34:	3a30      	subs	r2, #48	@ 0x30
 800ea36:	f100 0301 	add.w	r3, r0, #1
 800ea3a:	d02a      	beq.n	800ea92 <_strtod_l+0x262>
 800ea3c:	4499      	add	r9, r3
 800ea3e:	eb00 0c05 	add.w	ip, r0, r5
 800ea42:	462b      	mov	r3, r5
 800ea44:	210a      	movs	r1, #10
 800ea46:	4563      	cmp	r3, ip
 800ea48:	d10d      	bne.n	800ea66 <_strtod_l+0x236>
 800ea4a:	1c69      	adds	r1, r5, #1
 800ea4c:	4401      	add	r1, r0
 800ea4e:	4428      	add	r0, r5
 800ea50:	2808      	cmp	r0, #8
 800ea52:	dc16      	bgt.n	800ea82 <_strtod_l+0x252>
 800ea54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ea56:	230a      	movs	r3, #10
 800ea58:	fb03 2300 	mla	r3, r3, r0, r2
 800ea5c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea5e:	2300      	movs	r3, #0
 800ea60:	e018      	b.n	800ea94 <_strtod_l+0x264>
 800ea62:	4638      	mov	r0, r7
 800ea64:	e7da      	b.n	800ea1c <_strtod_l+0x1ec>
 800ea66:	2b08      	cmp	r3, #8
 800ea68:	f103 0301 	add.w	r3, r3, #1
 800ea6c:	dc03      	bgt.n	800ea76 <_strtod_l+0x246>
 800ea6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ea70:	434e      	muls	r6, r1
 800ea72:	960a      	str	r6, [sp, #40]	@ 0x28
 800ea74:	e7e7      	b.n	800ea46 <_strtod_l+0x216>
 800ea76:	2b10      	cmp	r3, #16
 800ea78:	bfde      	ittt	le
 800ea7a:	9e08      	ldrle	r6, [sp, #32]
 800ea7c:	434e      	mulle	r6, r1
 800ea7e:	9608      	strle	r6, [sp, #32]
 800ea80:	e7e1      	b.n	800ea46 <_strtod_l+0x216>
 800ea82:	280f      	cmp	r0, #15
 800ea84:	dceb      	bgt.n	800ea5e <_strtod_l+0x22e>
 800ea86:	9808      	ldr	r0, [sp, #32]
 800ea88:	230a      	movs	r3, #10
 800ea8a:	fb03 2300 	mla	r3, r3, r0, r2
 800ea8e:	9308      	str	r3, [sp, #32]
 800ea90:	e7e5      	b.n	800ea5e <_strtod_l+0x22e>
 800ea92:	4629      	mov	r1, r5
 800ea94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea96:	1c50      	adds	r0, r2, #1
 800ea98:	9019      	str	r0, [sp, #100]	@ 0x64
 800ea9a:	7852      	ldrb	r2, [r2, #1]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	460d      	mov	r5, r1
 800eaa0:	e7b1      	b.n	800ea06 <_strtod_l+0x1d6>
 800eaa2:	f04f 0900 	mov.w	r9, #0
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e77d      	b.n	800e9a6 <_strtod_l+0x176>
 800eaaa:	f04f 0c00 	mov.w	ip, #0
 800eaae:	1ca2      	adds	r2, r4, #2
 800eab0:	9219      	str	r2, [sp, #100]	@ 0x64
 800eab2:	78a2      	ldrb	r2, [r4, #2]
 800eab4:	e785      	b.n	800e9c2 <_strtod_l+0x192>
 800eab6:	f04f 0c01 	mov.w	ip, #1
 800eaba:	e7f8      	b.n	800eaae <_strtod_l+0x27e>
 800eabc:	080109a0 	.word	0x080109a0
 800eac0:	08010988 	.word	0x08010988
 800eac4:	7ff00000 	.word	0x7ff00000
 800eac8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eaca:	1c51      	adds	r1, r2, #1
 800eacc:	9119      	str	r1, [sp, #100]	@ 0x64
 800eace:	7852      	ldrb	r2, [r2, #1]
 800ead0:	2a30      	cmp	r2, #48	@ 0x30
 800ead2:	d0f9      	beq.n	800eac8 <_strtod_l+0x298>
 800ead4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ead8:	2908      	cmp	r1, #8
 800eada:	f63f af78 	bhi.w	800e9ce <_strtod_l+0x19e>
 800eade:	3a30      	subs	r2, #48	@ 0x30
 800eae0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eae4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eae6:	f04f 080a 	mov.w	r8, #10
 800eaea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eaec:	1c56      	adds	r6, r2, #1
 800eaee:	9619      	str	r6, [sp, #100]	@ 0x64
 800eaf0:	7852      	ldrb	r2, [r2, #1]
 800eaf2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800eaf6:	f1be 0f09 	cmp.w	lr, #9
 800eafa:	d939      	bls.n	800eb70 <_strtod_l+0x340>
 800eafc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eafe:	1a76      	subs	r6, r6, r1
 800eb00:	2e08      	cmp	r6, #8
 800eb02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eb06:	dc03      	bgt.n	800eb10 <_strtod_l+0x2e0>
 800eb08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eb0a:	4588      	cmp	r8, r1
 800eb0c:	bfa8      	it	ge
 800eb0e:	4688      	movge	r8, r1
 800eb10:	f1bc 0f00 	cmp.w	ip, #0
 800eb14:	d001      	beq.n	800eb1a <_strtod_l+0x2ea>
 800eb16:	f1c8 0800 	rsb	r8, r8, #0
 800eb1a:	2d00      	cmp	r5, #0
 800eb1c:	d14e      	bne.n	800ebbc <_strtod_l+0x38c>
 800eb1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb20:	4308      	orrs	r0, r1
 800eb22:	f47f aebe 	bne.w	800e8a2 <_strtod_l+0x72>
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f47f aed6 	bne.w	800e8d8 <_strtod_l+0xa8>
 800eb2c:	2a69      	cmp	r2, #105	@ 0x69
 800eb2e:	d028      	beq.n	800eb82 <_strtod_l+0x352>
 800eb30:	dc25      	bgt.n	800eb7e <_strtod_l+0x34e>
 800eb32:	2a49      	cmp	r2, #73	@ 0x49
 800eb34:	d025      	beq.n	800eb82 <_strtod_l+0x352>
 800eb36:	2a4e      	cmp	r2, #78	@ 0x4e
 800eb38:	f47f aece 	bne.w	800e8d8 <_strtod_l+0xa8>
 800eb3c:	499b      	ldr	r1, [pc, #620]	@ (800edac <_strtod_l+0x57c>)
 800eb3e:	a819      	add	r0, sp, #100	@ 0x64
 800eb40:	f001 f9e2 	bl	800ff08 <__match>
 800eb44:	2800      	cmp	r0, #0
 800eb46:	f43f aec7 	beq.w	800e8d8 <_strtod_l+0xa8>
 800eb4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	2b28      	cmp	r3, #40	@ 0x28
 800eb50:	d12e      	bne.n	800ebb0 <_strtod_l+0x380>
 800eb52:	4997      	ldr	r1, [pc, #604]	@ (800edb0 <_strtod_l+0x580>)
 800eb54:	aa1c      	add	r2, sp, #112	@ 0x70
 800eb56:	a819      	add	r0, sp, #100	@ 0x64
 800eb58:	f001 f9ea 	bl	800ff30 <__hexnan>
 800eb5c:	2805      	cmp	r0, #5
 800eb5e:	d127      	bne.n	800ebb0 <_strtod_l+0x380>
 800eb60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eb66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eb6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eb6e:	e698      	b.n	800e8a2 <_strtod_l+0x72>
 800eb70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eb72:	fb08 2101 	mla	r1, r8, r1, r2
 800eb76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eb7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb7c:	e7b5      	b.n	800eaea <_strtod_l+0x2ba>
 800eb7e:	2a6e      	cmp	r2, #110	@ 0x6e
 800eb80:	e7da      	b.n	800eb38 <_strtod_l+0x308>
 800eb82:	498c      	ldr	r1, [pc, #560]	@ (800edb4 <_strtod_l+0x584>)
 800eb84:	a819      	add	r0, sp, #100	@ 0x64
 800eb86:	f001 f9bf 	bl	800ff08 <__match>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	f43f aea4 	beq.w	800e8d8 <_strtod_l+0xa8>
 800eb90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb92:	4989      	ldr	r1, [pc, #548]	@ (800edb8 <_strtod_l+0x588>)
 800eb94:	3b01      	subs	r3, #1
 800eb96:	a819      	add	r0, sp, #100	@ 0x64
 800eb98:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb9a:	f001 f9b5 	bl	800ff08 <__match>
 800eb9e:	b910      	cbnz	r0, 800eba6 <_strtod_l+0x376>
 800eba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eba2:	3301      	adds	r3, #1
 800eba4:	9319      	str	r3, [sp, #100]	@ 0x64
 800eba6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800edc8 <_strtod_l+0x598>
 800ebaa:	f04f 0a00 	mov.w	sl, #0
 800ebae:	e678      	b.n	800e8a2 <_strtod_l+0x72>
 800ebb0:	4882      	ldr	r0, [pc, #520]	@ (800edbc <_strtod_l+0x58c>)
 800ebb2:	f000 fee5 	bl	800f980 <nan>
 800ebb6:	ec5b ab10 	vmov	sl, fp, d0
 800ebba:	e672      	b.n	800e8a2 <_strtod_l+0x72>
 800ebbc:	eba8 0309 	sub.w	r3, r8, r9
 800ebc0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ebc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebc4:	2f00      	cmp	r7, #0
 800ebc6:	bf08      	it	eq
 800ebc8:	462f      	moveq	r7, r5
 800ebca:	2d10      	cmp	r5, #16
 800ebcc:	462c      	mov	r4, r5
 800ebce:	bfa8      	it	ge
 800ebd0:	2410      	movge	r4, #16
 800ebd2:	f7f1 fc97 	bl	8000504 <__aeabi_ui2d>
 800ebd6:	2d09      	cmp	r5, #9
 800ebd8:	4682      	mov	sl, r0
 800ebda:	468b      	mov	fp, r1
 800ebdc:	dc13      	bgt.n	800ec06 <_strtod_l+0x3d6>
 800ebde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f43f ae5e 	beq.w	800e8a2 <_strtod_l+0x72>
 800ebe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe8:	dd78      	ble.n	800ecdc <_strtod_l+0x4ac>
 800ebea:	2b16      	cmp	r3, #22
 800ebec:	dc5f      	bgt.n	800ecae <_strtod_l+0x47e>
 800ebee:	4974      	ldr	r1, [pc, #464]	@ (800edc0 <_strtod_l+0x590>)
 800ebf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ebf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebf8:	4652      	mov	r2, sl
 800ebfa:	465b      	mov	r3, fp
 800ebfc:	f7f1 fcfc 	bl	80005f8 <__aeabi_dmul>
 800ec00:	4682      	mov	sl, r0
 800ec02:	468b      	mov	fp, r1
 800ec04:	e64d      	b.n	800e8a2 <_strtod_l+0x72>
 800ec06:	4b6e      	ldr	r3, [pc, #440]	@ (800edc0 <_strtod_l+0x590>)
 800ec08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ec10:	f7f1 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ec14:	4682      	mov	sl, r0
 800ec16:	9808      	ldr	r0, [sp, #32]
 800ec18:	468b      	mov	fp, r1
 800ec1a:	f7f1 fc73 	bl	8000504 <__aeabi_ui2d>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	4650      	mov	r0, sl
 800ec24:	4659      	mov	r1, fp
 800ec26:	f7f1 fb31 	bl	800028c <__adddf3>
 800ec2a:	2d0f      	cmp	r5, #15
 800ec2c:	4682      	mov	sl, r0
 800ec2e:	468b      	mov	fp, r1
 800ec30:	ddd5      	ble.n	800ebde <_strtod_l+0x3ae>
 800ec32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec34:	1b2c      	subs	r4, r5, r4
 800ec36:	441c      	add	r4, r3
 800ec38:	2c00      	cmp	r4, #0
 800ec3a:	f340 8096 	ble.w	800ed6a <_strtod_l+0x53a>
 800ec3e:	f014 030f 	ands.w	r3, r4, #15
 800ec42:	d00a      	beq.n	800ec5a <_strtod_l+0x42a>
 800ec44:	495e      	ldr	r1, [pc, #376]	@ (800edc0 <_strtod_l+0x590>)
 800ec46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec4a:	4652      	mov	r2, sl
 800ec4c:	465b      	mov	r3, fp
 800ec4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec52:	f7f1 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ec56:	4682      	mov	sl, r0
 800ec58:	468b      	mov	fp, r1
 800ec5a:	f034 040f 	bics.w	r4, r4, #15
 800ec5e:	d073      	beq.n	800ed48 <_strtod_l+0x518>
 800ec60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ec64:	dd48      	ble.n	800ecf8 <_strtod_l+0x4c8>
 800ec66:	2400      	movs	r4, #0
 800ec68:	46a0      	mov	r8, r4
 800ec6a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ec6c:	46a1      	mov	r9, r4
 800ec6e:	9a05      	ldr	r2, [sp, #20]
 800ec70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800edc8 <_strtod_l+0x598>
 800ec74:	2322      	movs	r3, #34	@ 0x22
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	f04f 0a00 	mov.w	sl, #0
 800ec7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f43f ae0f 	beq.w	800e8a2 <_strtod_l+0x72>
 800ec84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec86:	9805      	ldr	r0, [sp, #20]
 800ec88:	f7ff f942 	bl	800df10 <_Bfree>
 800ec8c:	9805      	ldr	r0, [sp, #20]
 800ec8e:	4649      	mov	r1, r9
 800ec90:	f7ff f93e 	bl	800df10 <_Bfree>
 800ec94:	9805      	ldr	r0, [sp, #20]
 800ec96:	4641      	mov	r1, r8
 800ec98:	f7ff f93a 	bl	800df10 <_Bfree>
 800ec9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec9e:	9805      	ldr	r0, [sp, #20]
 800eca0:	f7ff f936 	bl	800df10 <_Bfree>
 800eca4:	9805      	ldr	r0, [sp, #20]
 800eca6:	4621      	mov	r1, r4
 800eca8:	f7ff f932 	bl	800df10 <_Bfree>
 800ecac:	e5f9      	b.n	800e8a2 <_strtod_l+0x72>
 800ecae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	dbbc      	blt.n	800ec32 <_strtod_l+0x402>
 800ecb8:	4c41      	ldr	r4, [pc, #260]	@ (800edc0 <_strtod_l+0x590>)
 800ecba:	f1c5 050f 	rsb	r5, r5, #15
 800ecbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ecc2:	4652      	mov	r2, sl
 800ecc4:	465b      	mov	r3, fp
 800ecc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecca:	f7f1 fc95 	bl	80005f8 <__aeabi_dmul>
 800ecce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecd0:	1b5d      	subs	r5, r3, r5
 800ecd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ecd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ecda:	e78f      	b.n	800ebfc <_strtod_l+0x3cc>
 800ecdc:	3316      	adds	r3, #22
 800ecde:	dba8      	blt.n	800ec32 <_strtod_l+0x402>
 800ece0:	4b37      	ldr	r3, [pc, #220]	@ (800edc0 <_strtod_l+0x590>)
 800ece2:	eba9 0808 	sub.w	r8, r9, r8
 800ece6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ecea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ecee:	4650      	mov	r0, sl
 800ecf0:	4659      	mov	r1, fp
 800ecf2:	f7f1 fdab 	bl	800084c <__aeabi_ddiv>
 800ecf6:	e783      	b.n	800ec00 <_strtod_l+0x3d0>
 800ecf8:	4b32      	ldr	r3, [pc, #200]	@ (800edc4 <_strtod_l+0x594>)
 800ecfa:	9308      	str	r3, [sp, #32]
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	1124      	asrs	r4, r4, #4
 800ed00:	4650      	mov	r0, sl
 800ed02:	4659      	mov	r1, fp
 800ed04:	461e      	mov	r6, r3
 800ed06:	2c01      	cmp	r4, #1
 800ed08:	dc21      	bgt.n	800ed4e <_strtod_l+0x51e>
 800ed0a:	b10b      	cbz	r3, 800ed10 <_strtod_l+0x4e0>
 800ed0c:	4682      	mov	sl, r0
 800ed0e:	468b      	mov	fp, r1
 800ed10:	492c      	ldr	r1, [pc, #176]	@ (800edc4 <_strtod_l+0x594>)
 800ed12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ed16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ed1a:	4652      	mov	r2, sl
 800ed1c:	465b      	mov	r3, fp
 800ed1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed22:	f7f1 fc69 	bl	80005f8 <__aeabi_dmul>
 800ed26:	4b28      	ldr	r3, [pc, #160]	@ (800edc8 <_strtod_l+0x598>)
 800ed28:	460a      	mov	r2, r1
 800ed2a:	400b      	ands	r3, r1
 800ed2c:	4927      	ldr	r1, [pc, #156]	@ (800edcc <_strtod_l+0x59c>)
 800ed2e:	428b      	cmp	r3, r1
 800ed30:	4682      	mov	sl, r0
 800ed32:	d898      	bhi.n	800ec66 <_strtod_l+0x436>
 800ed34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ed38:	428b      	cmp	r3, r1
 800ed3a:	bf86      	itte	hi
 800ed3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800edd0 <_strtod_l+0x5a0>
 800ed40:	f04f 3aff 	movhi.w	sl, #4294967295
 800ed44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ed48:	2300      	movs	r3, #0
 800ed4a:	9308      	str	r3, [sp, #32]
 800ed4c:	e07a      	b.n	800ee44 <_strtod_l+0x614>
 800ed4e:	07e2      	lsls	r2, r4, #31
 800ed50:	d505      	bpl.n	800ed5e <_strtod_l+0x52e>
 800ed52:	9b08      	ldr	r3, [sp, #32]
 800ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed58:	f7f1 fc4e 	bl	80005f8 <__aeabi_dmul>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	9a08      	ldr	r2, [sp, #32]
 800ed60:	3208      	adds	r2, #8
 800ed62:	3601      	adds	r6, #1
 800ed64:	1064      	asrs	r4, r4, #1
 800ed66:	9208      	str	r2, [sp, #32]
 800ed68:	e7cd      	b.n	800ed06 <_strtod_l+0x4d6>
 800ed6a:	d0ed      	beq.n	800ed48 <_strtod_l+0x518>
 800ed6c:	4264      	negs	r4, r4
 800ed6e:	f014 020f 	ands.w	r2, r4, #15
 800ed72:	d00a      	beq.n	800ed8a <_strtod_l+0x55a>
 800ed74:	4b12      	ldr	r3, [pc, #72]	@ (800edc0 <_strtod_l+0x590>)
 800ed76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed7a:	4650      	mov	r0, sl
 800ed7c:	4659      	mov	r1, fp
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	f7f1 fd63 	bl	800084c <__aeabi_ddiv>
 800ed86:	4682      	mov	sl, r0
 800ed88:	468b      	mov	fp, r1
 800ed8a:	1124      	asrs	r4, r4, #4
 800ed8c:	d0dc      	beq.n	800ed48 <_strtod_l+0x518>
 800ed8e:	2c1f      	cmp	r4, #31
 800ed90:	dd20      	ble.n	800edd4 <_strtod_l+0x5a4>
 800ed92:	2400      	movs	r4, #0
 800ed94:	46a0      	mov	r8, r4
 800ed96:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed98:	46a1      	mov	r9, r4
 800ed9a:	9a05      	ldr	r2, [sp, #20]
 800ed9c:	2322      	movs	r3, #34	@ 0x22
 800ed9e:	f04f 0a00 	mov.w	sl, #0
 800eda2:	f04f 0b00 	mov.w	fp, #0
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	e768      	b.n	800ec7c <_strtod_l+0x44c>
 800edaa:	bf00      	nop
 800edac:	08010779 	.word	0x08010779
 800edb0:	0801098c 	.word	0x0801098c
 800edb4:	08010771 	.word	0x08010771
 800edb8:	080107a8 	.word	0x080107a8
 800edbc:	08010b35 	.word	0x08010b35
 800edc0:	080108c0 	.word	0x080108c0
 800edc4:	08010898 	.word	0x08010898
 800edc8:	7ff00000 	.word	0x7ff00000
 800edcc:	7ca00000 	.word	0x7ca00000
 800edd0:	7fefffff 	.word	0x7fefffff
 800edd4:	f014 0310 	ands.w	r3, r4, #16
 800edd8:	bf18      	it	ne
 800edda:	236a      	movne	r3, #106	@ 0x6a
 800eddc:	4ea9      	ldr	r6, [pc, #676]	@ (800f084 <_strtod_l+0x854>)
 800edde:	9308      	str	r3, [sp, #32]
 800ede0:	4650      	mov	r0, sl
 800ede2:	4659      	mov	r1, fp
 800ede4:	2300      	movs	r3, #0
 800ede6:	07e2      	lsls	r2, r4, #31
 800ede8:	d504      	bpl.n	800edf4 <_strtod_l+0x5c4>
 800edea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edee:	f7f1 fc03 	bl	80005f8 <__aeabi_dmul>
 800edf2:	2301      	movs	r3, #1
 800edf4:	1064      	asrs	r4, r4, #1
 800edf6:	f106 0608 	add.w	r6, r6, #8
 800edfa:	d1f4      	bne.n	800ede6 <_strtod_l+0x5b6>
 800edfc:	b10b      	cbz	r3, 800ee02 <_strtod_l+0x5d2>
 800edfe:	4682      	mov	sl, r0
 800ee00:	468b      	mov	fp, r1
 800ee02:	9b08      	ldr	r3, [sp, #32]
 800ee04:	b1b3      	cbz	r3, 800ee34 <_strtod_l+0x604>
 800ee06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ee0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	4659      	mov	r1, fp
 800ee12:	dd0f      	ble.n	800ee34 <_strtod_l+0x604>
 800ee14:	2b1f      	cmp	r3, #31
 800ee16:	dd55      	ble.n	800eec4 <_strtod_l+0x694>
 800ee18:	2b34      	cmp	r3, #52	@ 0x34
 800ee1a:	bfde      	ittt	le
 800ee1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ee20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ee24:	4093      	lslle	r3, r2
 800ee26:	f04f 0a00 	mov.w	sl, #0
 800ee2a:	bfcc      	ite	gt
 800ee2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ee30:	ea03 0b01 	andle.w	fp, r3, r1
 800ee34:	2200      	movs	r2, #0
 800ee36:	2300      	movs	r3, #0
 800ee38:	4650      	mov	r0, sl
 800ee3a:	4659      	mov	r1, fp
 800ee3c:	f7f1 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d1a6      	bne.n	800ed92 <_strtod_l+0x562>
 800ee44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee46:	9300      	str	r3, [sp, #0]
 800ee48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ee4a:	9805      	ldr	r0, [sp, #20]
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	463a      	mov	r2, r7
 800ee50:	f7ff f8c6 	bl	800dfe0 <__s2b>
 800ee54:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee56:	2800      	cmp	r0, #0
 800ee58:	f43f af05 	beq.w	800ec66 <_strtod_l+0x436>
 800ee5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee5e:	2a00      	cmp	r2, #0
 800ee60:	eba9 0308 	sub.w	r3, r9, r8
 800ee64:	bfa8      	it	ge
 800ee66:	2300      	movge	r3, #0
 800ee68:	9312      	str	r3, [sp, #72]	@ 0x48
 800ee6a:	2400      	movs	r4, #0
 800ee6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ee70:	9316      	str	r3, [sp, #88]	@ 0x58
 800ee72:	46a0      	mov	r8, r4
 800ee74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee76:	9805      	ldr	r0, [sp, #20]
 800ee78:	6859      	ldr	r1, [r3, #4]
 800ee7a:	f7ff f809 	bl	800de90 <_Balloc>
 800ee7e:	4681      	mov	r9, r0
 800ee80:	2800      	cmp	r0, #0
 800ee82:	f43f aef4 	beq.w	800ec6e <_strtod_l+0x43e>
 800ee86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee88:	691a      	ldr	r2, [r3, #16]
 800ee8a:	3202      	adds	r2, #2
 800ee8c:	f103 010c 	add.w	r1, r3, #12
 800ee90:	0092      	lsls	r2, r2, #2
 800ee92:	300c      	adds	r0, #12
 800ee94:	f7fe f899 	bl	800cfca <memcpy>
 800ee98:	ec4b ab10 	vmov	d0, sl, fp
 800ee9c:	9805      	ldr	r0, [sp, #20]
 800ee9e:	aa1c      	add	r2, sp, #112	@ 0x70
 800eea0:	a91b      	add	r1, sp, #108	@ 0x6c
 800eea2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800eea6:	f7ff fbd7 	bl	800e658 <__d2b>
 800eeaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800eeac:	2800      	cmp	r0, #0
 800eeae:	f43f aede 	beq.w	800ec6e <_strtod_l+0x43e>
 800eeb2:	9805      	ldr	r0, [sp, #20]
 800eeb4:	2101      	movs	r1, #1
 800eeb6:	f7ff f929 	bl	800e10c <__i2b>
 800eeba:	4680      	mov	r8, r0
 800eebc:	b948      	cbnz	r0, 800eed2 <_strtod_l+0x6a2>
 800eebe:	f04f 0800 	mov.w	r8, #0
 800eec2:	e6d4      	b.n	800ec6e <_strtod_l+0x43e>
 800eec4:	f04f 32ff 	mov.w	r2, #4294967295
 800eec8:	fa02 f303 	lsl.w	r3, r2, r3
 800eecc:	ea03 0a0a 	and.w	sl, r3, sl
 800eed0:	e7b0      	b.n	800ee34 <_strtod_l+0x604>
 800eed2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800eed4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800eed6:	2d00      	cmp	r5, #0
 800eed8:	bfab      	itete	ge
 800eeda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800eedc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800eede:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800eee0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800eee2:	bfac      	ite	ge
 800eee4:	18ef      	addge	r7, r5, r3
 800eee6:	1b5e      	sublt	r6, r3, r5
 800eee8:	9b08      	ldr	r3, [sp, #32]
 800eeea:	1aed      	subs	r5, r5, r3
 800eeec:	4415      	add	r5, r2
 800eeee:	4b66      	ldr	r3, [pc, #408]	@ (800f088 <_strtod_l+0x858>)
 800eef0:	3d01      	subs	r5, #1
 800eef2:	429d      	cmp	r5, r3
 800eef4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eef8:	da50      	bge.n	800ef9c <_strtod_l+0x76c>
 800eefa:	1b5b      	subs	r3, r3, r5
 800eefc:	2b1f      	cmp	r3, #31
 800eefe:	eba2 0203 	sub.w	r2, r2, r3
 800ef02:	f04f 0101 	mov.w	r1, #1
 800ef06:	dc3d      	bgt.n	800ef84 <_strtod_l+0x754>
 800ef08:	fa01 f303 	lsl.w	r3, r1, r3
 800ef0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef0e:	2300      	movs	r3, #0
 800ef10:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef12:	18bd      	adds	r5, r7, r2
 800ef14:	9b08      	ldr	r3, [sp, #32]
 800ef16:	42af      	cmp	r7, r5
 800ef18:	4416      	add	r6, r2
 800ef1a:	441e      	add	r6, r3
 800ef1c:	463b      	mov	r3, r7
 800ef1e:	bfa8      	it	ge
 800ef20:	462b      	movge	r3, r5
 800ef22:	42b3      	cmp	r3, r6
 800ef24:	bfa8      	it	ge
 800ef26:	4633      	movge	r3, r6
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	bfc2      	ittt	gt
 800ef2c:	1aed      	subgt	r5, r5, r3
 800ef2e:	1af6      	subgt	r6, r6, r3
 800ef30:	1aff      	subgt	r7, r7, r3
 800ef32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	dd16      	ble.n	800ef66 <_strtod_l+0x736>
 800ef38:	4641      	mov	r1, r8
 800ef3a:	9805      	ldr	r0, [sp, #20]
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	f7ff f9a5 	bl	800e28c <__pow5mult>
 800ef42:	4680      	mov	r8, r0
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d0ba      	beq.n	800eebe <_strtod_l+0x68e>
 800ef48:	4601      	mov	r1, r0
 800ef4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ef4c:	9805      	ldr	r0, [sp, #20]
 800ef4e:	f7ff f8f3 	bl	800e138 <__multiply>
 800ef52:	900e      	str	r0, [sp, #56]	@ 0x38
 800ef54:	2800      	cmp	r0, #0
 800ef56:	f43f ae8a 	beq.w	800ec6e <_strtod_l+0x43e>
 800ef5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef5c:	9805      	ldr	r0, [sp, #20]
 800ef5e:	f7fe ffd7 	bl	800df10 <_Bfree>
 800ef62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef64:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef66:	2d00      	cmp	r5, #0
 800ef68:	dc1d      	bgt.n	800efa6 <_strtod_l+0x776>
 800ef6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dd23      	ble.n	800efb8 <_strtod_l+0x788>
 800ef70:	4649      	mov	r1, r9
 800ef72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ef74:	9805      	ldr	r0, [sp, #20]
 800ef76:	f7ff f989 	bl	800e28c <__pow5mult>
 800ef7a:	4681      	mov	r9, r0
 800ef7c:	b9e0      	cbnz	r0, 800efb8 <_strtod_l+0x788>
 800ef7e:	f04f 0900 	mov.w	r9, #0
 800ef82:	e674      	b.n	800ec6e <_strtod_l+0x43e>
 800ef84:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ef88:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ef8c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ef90:	35e2      	adds	r5, #226	@ 0xe2
 800ef92:	fa01 f305 	lsl.w	r3, r1, r5
 800ef96:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef98:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ef9a:	e7ba      	b.n	800ef12 <_strtod_l+0x6e2>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800efa0:	2301      	movs	r3, #1
 800efa2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800efa4:	e7b5      	b.n	800ef12 <_strtod_l+0x6e2>
 800efa6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efa8:	9805      	ldr	r0, [sp, #20]
 800efaa:	462a      	mov	r2, r5
 800efac:	f7ff f9c8 	bl	800e340 <__lshift>
 800efb0:	901a      	str	r0, [sp, #104]	@ 0x68
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d1d9      	bne.n	800ef6a <_strtod_l+0x73a>
 800efb6:	e65a      	b.n	800ec6e <_strtod_l+0x43e>
 800efb8:	2e00      	cmp	r6, #0
 800efba:	dd07      	ble.n	800efcc <_strtod_l+0x79c>
 800efbc:	4649      	mov	r1, r9
 800efbe:	9805      	ldr	r0, [sp, #20]
 800efc0:	4632      	mov	r2, r6
 800efc2:	f7ff f9bd 	bl	800e340 <__lshift>
 800efc6:	4681      	mov	r9, r0
 800efc8:	2800      	cmp	r0, #0
 800efca:	d0d8      	beq.n	800ef7e <_strtod_l+0x74e>
 800efcc:	2f00      	cmp	r7, #0
 800efce:	dd08      	ble.n	800efe2 <_strtod_l+0x7b2>
 800efd0:	4641      	mov	r1, r8
 800efd2:	9805      	ldr	r0, [sp, #20]
 800efd4:	463a      	mov	r2, r7
 800efd6:	f7ff f9b3 	bl	800e340 <__lshift>
 800efda:	4680      	mov	r8, r0
 800efdc:	2800      	cmp	r0, #0
 800efde:	f43f ae46 	beq.w	800ec6e <_strtod_l+0x43e>
 800efe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efe4:	9805      	ldr	r0, [sp, #20]
 800efe6:	464a      	mov	r2, r9
 800efe8:	f7ff fa32 	bl	800e450 <__mdiff>
 800efec:	4604      	mov	r4, r0
 800efee:	2800      	cmp	r0, #0
 800eff0:	f43f ae3d 	beq.w	800ec6e <_strtod_l+0x43e>
 800eff4:	68c3      	ldr	r3, [r0, #12]
 800eff6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eff8:	2300      	movs	r3, #0
 800effa:	60c3      	str	r3, [r0, #12]
 800effc:	4641      	mov	r1, r8
 800effe:	f7ff fa0b 	bl	800e418 <__mcmp>
 800f002:	2800      	cmp	r0, #0
 800f004:	da46      	bge.n	800f094 <_strtod_l+0x864>
 800f006:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f008:	ea53 030a 	orrs.w	r3, r3, sl
 800f00c:	d16c      	bne.n	800f0e8 <_strtod_l+0x8b8>
 800f00e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f012:	2b00      	cmp	r3, #0
 800f014:	d168      	bne.n	800f0e8 <_strtod_l+0x8b8>
 800f016:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f01a:	0d1b      	lsrs	r3, r3, #20
 800f01c:	051b      	lsls	r3, r3, #20
 800f01e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f022:	d961      	bls.n	800f0e8 <_strtod_l+0x8b8>
 800f024:	6963      	ldr	r3, [r4, #20]
 800f026:	b913      	cbnz	r3, 800f02e <_strtod_l+0x7fe>
 800f028:	6923      	ldr	r3, [r4, #16]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	dd5c      	ble.n	800f0e8 <_strtod_l+0x8b8>
 800f02e:	4621      	mov	r1, r4
 800f030:	2201      	movs	r2, #1
 800f032:	9805      	ldr	r0, [sp, #20]
 800f034:	f7ff f984 	bl	800e340 <__lshift>
 800f038:	4641      	mov	r1, r8
 800f03a:	4604      	mov	r4, r0
 800f03c:	f7ff f9ec 	bl	800e418 <__mcmp>
 800f040:	2800      	cmp	r0, #0
 800f042:	dd51      	ble.n	800f0e8 <_strtod_l+0x8b8>
 800f044:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f048:	9a08      	ldr	r2, [sp, #32]
 800f04a:	0d1b      	lsrs	r3, r3, #20
 800f04c:	051b      	lsls	r3, r3, #20
 800f04e:	2a00      	cmp	r2, #0
 800f050:	d06b      	beq.n	800f12a <_strtod_l+0x8fa>
 800f052:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f056:	d868      	bhi.n	800f12a <_strtod_l+0x8fa>
 800f058:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f05c:	f67f ae9d 	bls.w	800ed9a <_strtod_l+0x56a>
 800f060:	4b0a      	ldr	r3, [pc, #40]	@ (800f08c <_strtod_l+0x85c>)
 800f062:	4650      	mov	r0, sl
 800f064:	4659      	mov	r1, fp
 800f066:	2200      	movs	r2, #0
 800f068:	f7f1 fac6 	bl	80005f8 <__aeabi_dmul>
 800f06c:	4b08      	ldr	r3, [pc, #32]	@ (800f090 <_strtod_l+0x860>)
 800f06e:	400b      	ands	r3, r1
 800f070:	4682      	mov	sl, r0
 800f072:	468b      	mov	fp, r1
 800f074:	2b00      	cmp	r3, #0
 800f076:	f47f ae05 	bne.w	800ec84 <_strtod_l+0x454>
 800f07a:	9a05      	ldr	r2, [sp, #20]
 800f07c:	2322      	movs	r3, #34	@ 0x22
 800f07e:	6013      	str	r3, [r2, #0]
 800f080:	e600      	b.n	800ec84 <_strtod_l+0x454>
 800f082:	bf00      	nop
 800f084:	080109b8 	.word	0x080109b8
 800f088:	fffffc02 	.word	0xfffffc02
 800f08c:	39500000 	.word	0x39500000
 800f090:	7ff00000 	.word	0x7ff00000
 800f094:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f098:	d165      	bne.n	800f166 <_strtod_l+0x936>
 800f09a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f09c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0a0:	b35a      	cbz	r2, 800f0fa <_strtod_l+0x8ca>
 800f0a2:	4a9f      	ldr	r2, [pc, #636]	@ (800f320 <_strtod_l+0xaf0>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d12b      	bne.n	800f100 <_strtod_l+0x8d0>
 800f0a8:	9b08      	ldr	r3, [sp, #32]
 800f0aa:	4651      	mov	r1, sl
 800f0ac:	b303      	cbz	r3, 800f0f0 <_strtod_l+0x8c0>
 800f0ae:	4b9d      	ldr	r3, [pc, #628]	@ (800f324 <_strtod_l+0xaf4>)
 800f0b0:	465a      	mov	r2, fp
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0bc:	d81b      	bhi.n	800f0f6 <_strtod_l+0x8c6>
 800f0be:	0d1b      	lsrs	r3, r3, #20
 800f0c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0c8:	4299      	cmp	r1, r3
 800f0ca:	d119      	bne.n	800f100 <_strtod_l+0x8d0>
 800f0cc:	4b96      	ldr	r3, [pc, #600]	@ (800f328 <_strtod_l+0xaf8>)
 800f0ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d102      	bne.n	800f0da <_strtod_l+0x8aa>
 800f0d4:	3101      	adds	r1, #1
 800f0d6:	f43f adca 	beq.w	800ec6e <_strtod_l+0x43e>
 800f0da:	4b92      	ldr	r3, [pc, #584]	@ (800f324 <_strtod_l+0xaf4>)
 800f0dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0de:	401a      	ands	r2, r3
 800f0e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f0e4:	f04f 0a00 	mov.w	sl, #0
 800f0e8:	9b08      	ldr	r3, [sp, #32]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1b8      	bne.n	800f060 <_strtod_l+0x830>
 800f0ee:	e5c9      	b.n	800ec84 <_strtod_l+0x454>
 800f0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f4:	e7e8      	b.n	800f0c8 <_strtod_l+0x898>
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	e7e6      	b.n	800f0c8 <_strtod_l+0x898>
 800f0fa:	ea53 030a 	orrs.w	r3, r3, sl
 800f0fe:	d0a1      	beq.n	800f044 <_strtod_l+0x814>
 800f100:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f102:	b1db      	cbz	r3, 800f13c <_strtod_l+0x90c>
 800f104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f106:	4213      	tst	r3, r2
 800f108:	d0ee      	beq.n	800f0e8 <_strtod_l+0x8b8>
 800f10a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f10c:	9a08      	ldr	r2, [sp, #32]
 800f10e:	4650      	mov	r0, sl
 800f110:	4659      	mov	r1, fp
 800f112:	b1bb      	cbz	r3, 800f144 <_strtod_l+0x914>
 800f114:	f7ff fb6e 	bl	800e7f4 <sulp>
 800f118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f11c:	ec53 2b10 	vmov	r2, r3, d0
 800f120:	f7f1 f8b4 	bl	800028c <__adddf3>
 800f124:	4682      	mov	sl, r0
 800f126:	468b      	mov	fp, r1
 800f128:	e7de      	b.n	800f0e8 <_strtod_l+0x8b8>
 800f12a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f12e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f132:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f136:	f04f 3aff 	mov.w	sl, #4294967295
 800f13a:	e7d5      	b.n	800f0e8 <_strtod_l+0x8b8>
 800f13c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f13e:	ea13 0f0a 	tst.w	r3, sl
 800f142:	e7e1      	b.n	800f108 <_strtod_l+0x8d8>
 800f144:	f7ff fb56 	bl	800e7f4 <sulp>
 800f148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f14c:	ec53 2b10 	vmov	r2, r3, d0
 800f150:	f7f1 f89a 	bl	8000288 <__aeabi_dsub>
 800f154:	2200      	movs	r2, #0
 800f156:	2300      	movs	r3, #0
 800f158:	4682      	mov	sl, r0
 800f15a:	468b      	mov	fp, r1
 800f15c:	f7f1 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f160:	2800      	cmp	r0, #0
 800f162:	d0c1      	beq.n	800f0e8 <_strtod_l+0x8b8>
 800f164:	e619      	b.n	800ed9a <_strtod_l+0x56a>
 800f166:	4641      	mov	r1, r8
 800f168:	4620      	mov	r0, r4
 800f16a:	f7ff facd 	bl	800e708 <__ratio>
 800f16e:	ec57 6b10 	vmov	r6, r7, d0
 800f172:	2200      	movs	r2, #0
 800f174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f178:	4630      	mov	r0, r6
 800f17a:	4639      	mov	r1, r7
 800f17c:	f7f1 fcb8 	bl	8000af0 <__aeabi_dcmple>
 800f180:	2800      	cmp	r0, #0
 800f182:	d06f      	beq.n	800f264 <_strtod_l+0xa34>
 800f184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f186:	2b00      	cmp	r3, #0
 800f188:	d17a      	bne.n	800f280 <_strtod_l+0xa50>
 800f18a:	f1ba 0f00 	cmp.w	sl, #0
 800f18e:	d158      	bne.n	800f242 <_strtod_l+0xa12>
 800f190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f196:	2b00      	cmp	r3, #0
 800f198:	d15a      	bne.n	800f250 <_strtod_l+0xa20>
 800f19a:	4b64      	ldr	r3, [pc, #400]	@ (800f32c <_strtod_l+0xafc>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	4630      	mov	r0, r6
 800f1a0:	4639      	mov	r1, r7
 800f1a2:	f7f1 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d159      	bne.n	800f25e <_strtod_l+0xa2e>
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	4639      	mov	r1, r7
 800f1ae:	4b60      	ldr	r3, [pc, #384]	@ (800f330 <_strtod_l+0xb00>)
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f7f1 fa21 	bl	80005f8 <__aeabi_dmul>
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	460f      	mov	r7, r1
 800f1ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f1be:	9606      	str	r6, [sp, #24]
 800f1c0:	9307      	str	r3, [sp, #28]
 800f1c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1c6:	4d57      	ldr	r5, [pc, #348]	@ (800f324 <_strtod_l+0xaf4>)
 800f1c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ce:	401d      	ands	r5, r3
 800f1d0:	4b58      	ldr	r3, [pc, #352]	@ (800f334 <_strtod_l+0xb04>)
 800f1d2:	429d      	cmp	r5, r3
 800f1d4:	f040 80b2 	bne.w	800f33c <_strtod_l+0xb0c>
 800f1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f1de:	ec4b ab10 	vmov	d0, sl, fp
 800f1e2:	f7ff f9c9 	bl	800e578 <__ulp>
 800f1e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1ea:	ec51 0b10 	vmov	r0, r1, d0
 800f1ee:	f7f1 fa03 	bl	80005f8 <__aeabi_dmul>
 800f1f2:	4652      	mov	r2, sl
 800f1f4:	465b      	mov	r3, fp
 800f1f6:	f7f1 f849 	bl	800028c <__adddf3>
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4949      	ldr	r1, [pc, #292]	@ (800f324 <_strtod_l+0xaf4>)
 800f1fe:	4a4e      	ldr	r2, [pc, #312]	@ (800f338 <_strtod_l+0xb08>)
 800f200:	4019      	ands	r1, r3
 800f202:	4291      	cmp	r1, r2
 800f204:	4682      	mov	sl, r0
 800f206:	d942      	bls.n	800f28e <_strtod_l+0xa5e>
 800f208:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f20a:	4b47      	ldr	r3, [pc, #284]	@ (800f328 <_strtod_l+0xaf8>)
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d103      	bne.n	800f218 <_strtod_l+0x9e8>
 800f210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f212:	3301      	adds	r3, #1
 800f214:	f43f ad2b 	beq.w	800ec6e <_strtod_l+0x43e>
 800f218:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f328 <_strtod_l+0xaf8>
 800f21c:	f04f 3aff 	mov.w	sl, #4294967295
 800f220:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f222:	9805      	ldr	r0, [sp, #20]
 800f224:	f7fe fe74 	bl	800df10 <_Bfree>
 800f228:	9805      	ldr	r0, [sp, #20]
 800f22a:	4649      	mov	r1, r9
 800f22c:	f7fe fe70 	bl	800df10 <_Bfree>
 800f230:	9805      	ldr	r0, [sp, #20]
 800f232:	4641      	mov	r1, r8
 800f234:	f7fe fe6c 	bl	800df10 <_Bfree>
 800f238:	9805      	ldr	r0, [sp, #20]
 800f23a:	4621      	mov	r1, r4
 800f23c:	f7fe fe68 	bl	800df10 <_Bfree>
 800f240:	e618      	b.n	800ee74 <_strtod_l+0x644>
 800f242:	f1ba 0f01 	cmp.w	sl, #1
 800f246:	d103      	bne.n	800f250 <_strtod_l+0xa20>
 800f248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f43f ada5 	beq.w	800ed9a <_strtod_l+0x56a>
 800f250:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f300 <_strtod_l+0xad0>
 800f254:	4f35      	ldr	r7, [pc, #212]	@ (800f32c <_strtod_l+0xafc>)
 800f256:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f25a:	2600      	movs	r6, #0
 800f25c:	e7b1      	b.n	800f1c2 <_strtod_l+0x992>
 800f25e:	4f34      	ldr	r7, [pc, #208]	@ (800f330 <_strtod_l+0xb00>)
 800f260:	2600      	movs	r6, #0
 800f262:	e7aa      	b.n	800f1ba <_strtod_l+0x98a>
 800f264:	4b32      	ldr	r3, [pc, #200]	@ (800f330 <_strtod_l+0xb00>)
 800f266:	4630      	mov	r0, r6
 800f268:	4639      	mov	r1, r7
 800f26a:	2200      	movs	r2, #0
 800f26c:	f7f1 f9c4 	bl	80005f8 <__aeabi_dmul>
 800f270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f272:	4606      	mov	r6, r0
 800f274:	460f      	mov	r7, r1
 800f276:	2b00      	cmp	r3, #0
 800f278:	d09f      	beq.n	800f1ba <_strtod_l+0x98a>
 800f27a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f27e:	e7a0      	b.n	800f1c2 <_strtod_l+0x992>
 800f280:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f308 <_strtod_l+0xad8>
 800f284:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f288:	ec57 6b17 	vmov	r6, r7, d7
 800f28c:	e799      	b.n	800f1c2 <_strtod_l+0x992>
 800f28e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f292:	9b08      	ldr	r3, [sp, #32]
 800f294:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1c1      	bne.n	800f220 <_strtod_l+0x9f0>
 800f29c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2a0:	0d1b      	lsrs	r3, r3, #20
 800f2a2:	051b      	lsls	r3, r3, #20
 800f2a4:	429d      	cmp	r5, r3
 800f2a6:	d1bb      	bne.n	800f220 <_strtod_l+0x9f0>
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	f7f1 fcec 	bl	8000c88 <__aeabi_d2lz>
 800f2b0:	f7f1 f974 	bl	800059c <__aeabi_l2d>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	4639      	mov	r1, r7
 800f2bc:	f7f0 ffe4 	bl	8000288 <__aeabi_dsub>
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f2c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2ce:	ea46 060a 	orr.w	r6, r6, sl
 800f2d2:	431e      	orrs	r6, r3
 800f2d4:	d06f      	beq.n	800f3b6 <_strtod_l+0xb86>
 800f2d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f310 <_strtod_l+0xae0>)
 800f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2dc:	f7f1 fbfe 	bl	8000adc <__aeabi_dcmplt>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	f47f accf 	bne.w	800ec84 <_strtod_l+0x454>
 800f2e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f318 <_strtod_l+0xae8>)
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2f0:	f7f1 fc12 	bl	8000b18 <__aeabi_dcmpgt>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d093      	beq.n	800f220 <_strtod_l+0x9f0>
 800f2f8:	e4c4      	b.n	800ec84 <_strtod_l+0x454>
 800f2fa:	bf00      	nop
 800f2fc:	f3af 8000 	nop.w
 800f300:	00000000 	.word	0x00000000
 800f304:	bff00000 	.word	0xbff00000
 800f308:	00000000 	.word	0x00000000
 800f30c:	3ff00000 	.word	0x3ff00000
 800f310:	94a03595 	.word	0x94a03595
 800f314:	3fdfffff 	.word	0x3fdfffff
 800f318:	35afe535 	.word	0x35afe535
 800f31c:	3fe00000 	.word	0x3fe00000
 800f320:	000fffff 	.word	0x000fffff
 800f324:	7ff00000 	.word	0x7ff00000
 800f328:	7fefffff 	.word	0x7fefffff
 800f32c:	3ff00000 	.word	0x3ff00000
 800f330:	3fe00000 	.word	0x3fe00000
 800f334:	7fe00000 	.word	0x7fe00000
 800f338:	7c9fffff 	.word	0x7c9fffff
 800f33c:	9b08      	ldr	r3, [sp, #32]
 800f33e:	b323      	cbz	r3, 800f38a <_strtod_l+0xb5a>
 800f340:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f344:	d821      	bhi.n	800f38a <_strtod_l+0xb5a>
 800f346:	a328      	add	r3, pc, #160	@ (adr r3, 800f3e8 <_strtod_l+0xbb8>)
 800f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34c:	4630      	mov	r0, r6
 800f34e:	4639      	mov	r1, r7
 800f350:	f7f1 fbce 	bl	8000af0 <__aeabi_dcmple>
 800f354:	b1a0      	cbz	r0, 800f380 <_strtod_l+0xb50>
 800f356:	4639      	mov	r1, r7
 800f358:	4630      	mov	r0, r6
 800f35a:	f7f1 fc25 	bl	8000ba8 <__aeabi_d2uiz>
 800f35e:	2801      	cmp	r0, #1
 800f360:	bf38      	it	cc
 800f362:	2001      	movcc	r0, #1
 800f364:	f7f1 f8ce 	bl	8000504 <__aeabi_ui2d>
 800f368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f36a:	4606      	mov	r6, r0
 800f36c:	460f      	mov	r7, r1
 800f36e:	b9fb      	cbnz	r3, 800f3b0 <_strtod_l+0xb80>
 800f370:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f374:	9014      	str	r0, [sp, #80]	@ 0x50
 800f376:	9315      	str	r3, [sp, #84]	@ 0x54
 800f378:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f37c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f380:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f382:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f386:	1b5b      	subs	r3, r3, r5
 800f388:	9311      	str	r3, [sp, #68]	@ 0x44
 800f38a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f38e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f392:	f7ff f8f1 	bl	800e578 <__ulp>
 800f396:	4650      	mov	r0, sl
 800f398:	ec53 2b10 	vmov	r2, r3, d0
 800f39c:	4659      	mov	r1, fp
 800f39e:	f7f1 f92b 	bl	80005f8 <__aeabi_dmul>
 800f3a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f3a6:	f7f0 ff71 	bl	800028c <__adddf3>
 800f3aa:	4682      	mov	sl, r0
 800f3ac:	468b      	mov	fp, r1
 800f3ae:	e770      	b.n	800f292 <_strtod_l+0xa62>
 800f3b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f3b4:	e7e0      	b.n	800f378 <_strtod_l+0xb48>
 800f3b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f3f0 <_strtod_l+0xbc0>)
 800f3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3bc:	f7f1 fb8e 	bl	8000adc <__aeabi_dcmplt>
 800f3c0:	e798      	b.n	800f2f4 <_strtod_l+0xac4>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f3c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	f7ff ba6d 	b.w	800e8aa <_strtod_l+0x7a>
 800f3d0:	2a65      	cmp	r2, #101	@ 0x65
 800f3d2:	f43f ab66 	beq.w	800eaa2 <_strtod_l+0x272>
 800f3d6:	2a45      	cmp	r2, #69	@ 0x45
 800f3d8:	f43f ab63 	beq.w	800eaa2 <_strtod_l+0x272>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	f7ff bb9e 	b.w	800eb1e <_strtod_l+0x2ee>
 800f3e2:	bf00      	nop
 800f3e4:	f3af 8000 	nop.w
 800f3e8:	ffc00000 	.word	0xffc00000
 800f3ec:	41dfffff 	.word	0x41dfffff
 800f3f0:	94a03595 	.word	0x94a03595
 800f3f4:	3fcfffff 	.word	0x3fcfffff

0800f3f8 <_strtod_r>:
 800f3f8:	4b01      	ldr	r3, [pc, #4]	@ (800f400 <_strtod_r+0x8>)
 800f3fa:	f7ff ba19 	b.w	800e830 <_strtod_l>
 800f3fe:	bf00      	nop
 800f400:	200001e0 	.word	0x200001e0

0800f404 <_strtol_l.constprop.0>:
 800f404:	2b24      	cmp	r3, #36	@ 0x24
 800f406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f40a:	4686      	mov	lr, r0
 800f40c:	4690      	mov	r8, r2
 800f40e:	d801      	bhi.n	800f414 <_strtol_l.constprop.0+0x10>
 800f410:	2b01      	cmp	r3, #1
 800f412:	d106      	bne.n	800f422 <_strtol_l.constprop.0+0x1e>
 800f414:	f7fd fdac 	bl	800cf70 <__errno>
 800f418:	2316      	movs	r3, #22
 800f41a:	6003      	str	r3, [r0, #0]
 800f41c:	2000      	movs	r0, #0
 800f41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f422:	4834      	ldr	r0, [pc, #208]	@ (800f4f4 <_strtol_l.constprop.0+0xf0>)
 800f424:	460d      	mov	r5, r1
 800f426:	462a      	mov	r2, r5
 800f428:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f42c:	5d06      	ldrb	r6, [r0, r4]
 800f42e:	f016 0608 	ands.w	r6, r6, #8
 800f432:	d1f8      	bne.n	800f426 <_strtol_l.constprop.0+0x22>
 800f434:	2c2d      	cmp	r4, #45	@ 0x2d
 800f436:	d12d      	bne.n	800f494 <_strtol_l.constprop.0+0x90>
 800f438:	782c      	ldrb	r4, [r5, #0]
 800f43a:	2601      	movs	r6, #1
 800f43c:	1c95      	adds	r5, r2, #2
 800f43e:	f033 0210 	bics.w	r2, r3, #16
 800f442:	d109      	bne.n	800f458 <_strtol_l.constprop.0+0x54>
 800f444:	2c30      	cmp	r4, #48	@ 0x30
 800f446:	d12a      	bne.n	800f49e <_strtol_l.constprop.0+0x9a>
 800f448:	782a      	ldrb	r2, [r5, #0]
 800f44a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f44e:	2a58      	cmp	r2, #88	@ 0x58
 800f450:	d125      	bne.n	800f49e <_strtol_l.constprop.0+0x9a>
 800f452:	786c      	ldrb	r4, [r5, #1]
 800f454:	2310      	movs	r3, #16
 800f456:	3502      	adds	r5, #2
 800f458:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f45c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f460:	2200      	movs	r2, #0
 800f462:	fbbc f9f3 	udiv	r9, ip, r3
 800f466:	4610      	mov	r0, r2
 800f468:	fb03 ca19 	mls	sl, r3, r9, ip
 800f46c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f470:	2f09      	cmp	r7, #9
 800f472:	d81b      	bhi.n	800f4ac <_strtol_l.constprop.0+0xa8>
 800f474:	463c      	mov	r4, r7
 800f476:	42a3      	cmp	r3, r4
 800f478:	dd27      	ble.n	800f4ca <_strtol_l.constprop.0+0xc6>
 800f47a:	1c57      	adds	r7, r2, #1
 800f47c:	d007      	beq.n	800f48e <_strtol_l.constprop.0+0x8a>
 800f47e:	4581      	cmp	r9, r0
 800f480:	d320      	bcc.n	800f4c4 <_strtol_l.constprop.0+0xc0>
 800f482:	d101      	bne.n	800f488 <_strtol_l.constprop.0+0x84>
 800f484:	45a2      	cmp	sl, r4
 800f486:	db1d      	blt.n	800f4c4 <_strtol_l.constprop.0+0xc0>
 800f488:	fb00 4003 	mla	r0, r0, r3, r4
 800f48c:	2201      	movs	r2, #1
 800f48e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f492:	e7eb      	b.n	800f46c <_strtol_l.constprop.0+0x68>
 800f494:	2c2b      	cmp	r4, #43	@ 0x2b
 800f496:	bf04      	itt	eq
 800f498:	782c      	ldrbeq	r4, [r5, #0]
 800f49a:	1c95      	addeq	r5, r2, #2
 800f49c:	e7cf      	b.n	800f43e <_strtol_l.constprop.0+0x3a>
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1da      	bne.n	800f458 <_strtol_l.constprop.0+0x54>
 800f4a2:	2c30      	cmp	r4, #48	@ 0x30
 800f4a4:	bf0c      	ite	eq
 800f4a6:	2308      	moveq	r3, #8
 800f4a8:	230a      	movne	r3, #10
 800f4aa:	e7d5      	b.n	800f458 <_strtol_l.constprop.0+0x54>
 800f4ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f4b0:	2f19      	cmp	r7, #25
 800f4b2:	d801      	bhi.n	800f4b8 <_strtol_l.constprop.0+0xb4>
 800f4b4:	3c37      	subs	r4, #55	@ 0x37
 800f4b6:	e7de      	b.n	800f476 <_strtol_l.constprop.0+0x72>
 800f4b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f4bc:	2f19      	cmp	r7, #25
 800f4be:	d804      	bhi.n	800f4ca <_strtol_l.constprop.0+0xc6>
 800f4c0:	3c57      	subs	r4, #87	@ 0x57
 800f4c2:	e7d8      	b.n	800f476 <_strtol_l.constprop.0+0x72>
 800f4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c8:	e7e1      	b.n	800f48e <_strtol_l.constprop.0+0x8a>
 800f4ca:	1c53      	adds	r3, r2, #1
 800f4cc:	d108      	bne.n	800f4e0 <_strtol_l.constprop.0+0xdc>
 800f4ce:	2322      	movs	r3, #34	@ 0x22
 800f4d0:	f8ce 3000 	str.w	r3, [lr]
 800f4d4:	4660      	mov	r0, ip
 800f4d6:	f1b8 0f00 	cmp.w	r8, #0
 800f4da:	d0a0      	beq.n	800f41e <_strtol_l.constprop.0+0x1a>
 800f4dc:	1e69      	subs	r1, r5, #1
 800f4de:	e006      	b.n	800f4ee <_strtol_l.constprop.0+0xea>
 800f4e0:	b106      	cbz	r6, 800f4e4 <_strtol_l.constprop.0+0xe0>
 800f4e2:	4240      	negs	r0, r0
 800f4e4:	f1b8 0f00 	cmp.w	r8, #0
 800f4e8:	d099      	beq.n	800f41e <_strtol_l.constprop.0+0x1a>
 800f4ea:	2a00      	cmp	r2, #0
 800f4ec:	d1f6      	bne.n	800f4dc <_strtol_l.constprop.0+0xd8>
 800f4ee:	f8c8 1000 	str.w	r1, [r8]
 800f4f2:	e794      	b.n	800f41e <_strtol_l.constprop.0+0x1a>
 800f4f4:	080109e1 	.word	0x080109e1

0800f4f8 <_strtol_r>:
 800f4f8:	f7ff bf84 	b.w	800f404 <_strtol_l.constprop.0>

0800f4fc <__ssputs_r>:
 800f4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f500:	688e      	ldr	r6, [r1, #8]
 800f502:	461f      	mov	r7, r3
 800f504:	42be      	cmp	r6, r7
 800f506:	680b      	ldr	r3, [r1, #0]
 800f508:	4682      	mov	sl, r0
 800f50a:	460c      	mov	r4, r1
 800f50c:	4690      	mov	r8, r2
 800f50e:	d82d      	bhi.n	800f56c <__ssputs_r+0x70>
 800f510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f514:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f518:	d026      	beq.n	800f568 <__ssputs_r+0x6c>
 800f51a:	6965      	ldr	r5, [r4, #20]
 800f51c:	6909      	ldr	r1, [r1, #16]
 800f51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f522:	eba3 0901 	sub.w	r9, r3, r1
 800f526:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f52a:	1c7b      	adds	r3, r7, #1
 800f52c:	444b      	add	r3, r9
 800f52e:	106d      	asrs	r5, r5, #1
 800f530:	429d      	cmp	r5, r3
 800f532:	bf38      	it	cc
 800f534:	461d      	movcc	r5, r3
 800f536:	0553      	lsls	r3, r2, #21
 800f538:	d527      	bpl.n	800f58a <__ssputs_r+0x8e>
 800f53a:	4629      	mov	r1, r5
 800f53c:	f7fe fc1c 	bl	800dd78 <_malloc_r>
 800f540:	4606      	mov	r6, r0
 800f542:	b360      	cbz	r0, 800f59e <__ssputs_r+0xa2>
 800f544:	6921      	ldr	r1, [r4, #16]
 800f546:	464a      	mov	r2, r9
 800f548:	f7fd fd3f 	bl	800cfca <memcpy>
 800f54c:	89a3      	ldrh	r3, [r4, #12]
 800f54e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f556:	81a3      	strh	r3, [r4, #12]
 800f558:	6126      	str	r6, [r4, #16]
 800f55a:	6165      	str	r5, [r4, #20]
 800f55c:	444e      	add	r6, r9
 800f55e:	eba5 0509 	sub.w	r5, r5, r9
 800f562:	6026      	str	r6, [r4, #0]
 800f564:	60a5      	str	r5, [r4, #8]
 800f566:	463e      	mov	r6, r7
 800f568:	42be      	cmp	r6, r7
 800f56a:	d900      	bls.n	800f56e <__ssputs_r+0x72>
 800f56c:	463e      	mov	r6, r7
 800f56e:	6820      	ldr	r0, [r4, #0]
 800f570:	4632      	mov	r2, r6
 800f572:	4641      	mov	r1, r8
 800f574:	f000 f9c6 	bl	800f904 <memmove>
 800f578:	68a3      	ldr	r3, [r4, #8]
 800f57a:	1b9b      	subs	r3, r3, r6
 800f57c:	60a3      	str	r3, [r4, #8]
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	4433      	add	r3, r6
 800f582:	6023      	str	r3, [r4, #0]
 800f584:	2000      	movs	r0, #0
 800f586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f58a:	462a      	mov	r2, r5
 800f58c:	f000 fd7d 	bl	801008a <_realloc_r>
 800f590:	4606      	mov	r6, r0
 800f592:	2800      	cmp	r0, #0
 800f594:	d1e0      	bne.n	800f558 <__ssputs_r+0x5c>
 800f596:	6921      	ldr	r1, [r4, #16]
 800f598:	4650      	mov	r0, sl
 800f59a:	f7fe fb79 	bl	800dc90 <_free_r>
 800f59e:	230c      	movs	r3, #12
 800f5a0:	f8ca 3000 	str.w	r3, [sl]
 800f5a4:	89a3      	ldrh	r3, [r4, #12]
 800f5a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5aa:	81a3      	strh	r3, [r4, #12]
 800f5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b0:	e7e9      	b.n	800f586 <__ssputs_r+0x8a>
	...

0800f5b4 <_svfiprintf_r>:
 800f5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b8:	4698      	mov	r8, r3
 800f5ba:	898b      	ldrh	r3, [r1, #12]
 800f5bc:	061b      	lsls	r3, r3, #24
 800f5be:	b09d      	sub	sp, #116	@ 0x74
 800f5c0:	4607      	mov	r7, r0
 800f5c2:	460d      	mov	r5, r1
 800f5c4:	4614      	mov	r4, r2
 800f5c6:	d510      	bpl.n	800f5ea <_svfiprintf_r+0x36>
 800f5c8:	690b      	ldr	r3, [r1, #16]
 800f5ca:	b973      	cbnz	r3, 800f5ea <_svfiprintf_r+0x36>
 800f5cc:	2140      	movs	r1, #64	@ 0x40
 800f5ce:	f7fe fbd3 	bl	800dd78 <_malloc_r>
 800f5d2:	6028      	str	r0, [r5, #0]
 800f5d4:	6128      	str	r0, [r5, #16]
 800f5d6:	b930      	cbnz	r0, 800f5e6 <_svfiprintf_r+0x32>
 800f5d8:	230c      	movs	r3, #12
 800f5da:	603b      	str	r3, [r7, #0]
 800f5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e0:	b01d      	add	sp, #116	@ 0x74
 800f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e6:	2340      	movs	r3, #64	@ 0x40
 800f5e8:	616b      	str	r3, [r5, #20]
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5ee:	2320      	movs	r3, #32
 800f5f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5f8:	2330      	movs	r3, #48	@ 0x30
 800f5fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f798 <_svfiprintf_r+0x1e4>
 800f5fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f602:	f04f 0901 	mov.w	r9, #1
 800f606:	4623      	mov	r3, r4
 800f608:	469a      	mov	sl, r3
 800f60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f60e:	b10a      	cbz	r2, 800f614 <_svfiprintf_r+0x60>
 800f610:	2a25      	cmp	r2, #37	@ 0x25
 800f612:	d1f9      	bne.n	800f608 <_svfiprintf_r+0x54>
 800f614:	ebba 0b04 	subs.w	fp, sl, r4
 800f618:	d00b      	beq.n	800f632 <_svfiprintf_r+0x7e>
 800f61a:	465b      	mov	r3, fp
 800f61c:	4622      	mov	r2, r4
 800f61e:	4629      	mov	r1, r5
 800f620:	4638      	mov	r0, r7
 800f622:	f7ff ff6b 	bl	800f4fc <__ssputs_r>
 800f626:	3001      	adds	r0, #1
 800f628:	f000 80a7 	beq.w	800f77a <_svfiprintf_r+0x1c6>
 800f62c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f62e:	445a      	add	r2, fp
 800f630:	9209      	str	r2, [sp, #36]	@ 0x24
 800f632:	f89a 3000 	ldrb.w	r3, [sl]
 800f636:	2b00      	cmp	r3, #0
 800f638:	f000 809f 	beq.w	800f77a <_svfiprintf_r+0x1c6>
 800f63c:	2300      	movs	r3, #0
 800f63e:	f04f 32ff 	mov.w	r2, #4294967295
 800f642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f646:	f10a 0a01 	add.w	sl, sl, #1
 800f64a:	9304      	str	r3, [sp, #16]
 800f64c:	9307      	str	r3, [sp, #28]
 800f64e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f652:	931a      	str	r3, [sp, #104]	@ 0x68
 800f654:	4654      	mov	r4, sl
 800f656:	2205      	movs	r2, #5
 800f658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65c:	484e      	ldr	r0, [pc, #312]	@ (800f798 <_svfiprintf_r+0x1e4>)
 800f65e:	f7f0 fdb7 	bl	80001d0 <memchr>
 800f662:	9a04      	ldr	r2, [sp, #16]
 800f664:	b9d8      	cbnz	r0, 800f69e <_svfiprintf_r+0xea>
 800f666:	06d0      	lsls	r0, r2, #27
 800f668:	bf44      	itt	mi
 800f66a:	2320      	movmi	r3, #32
 800f66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f670:	0711      	lsls	r1, r2, #28
 800f672:	bf44      	itt	mi
 800f674:	232b      	movmi	r3, #43	@ 0x2b
 800f676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f67a:	f89a 3000 	ldrb.w	r3, [sl]
 800f67e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f680:	d015      	beq.n	800f6ae <_svfiprintf_r+0xfa>
 800f682:	9a07      	ldr	r2, [sp, #28]
 800f684:	4654      	mov	r4, sl
 800f686:	2000      	movs	r0, #0
 800f688:	f04f 0c0a 	mov.w	ip, #10
 800f68c:	4621      	mov	r1, r4
 800f68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f692:	3b30      	subs	r3, #48	@ 0x30
 800f694:	2b09      	cmp	r3, #9
 800f696:	d94b      	bls.n	800f730 <_svfiprintf_r+0x17c>
 800f698:	b1b0      	cbz	r0, 800f6c8 <_svfiprintf_r+0x114>
 800f69a:	9207      	str	r2, [sp, #28]
 800f69c:	e014      	b.n	800f6c8 <_svfiprintf_r+0x114>
 800f69e:	eba0 0308 	sub.w	r3, r0, r8
 800f6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	9304      	str	r3, [sp, #16]
 800f6aa:	46a2      	mov	sl, r4
 800f6ac:	e7d2      	b.n	800f654 <_svfiprintf_r+0xa0>
 800f6ae:	9b03      	ldr	r3, [sp, #12]
 800f6b0:	1d19      	adds	r1, r3, #4
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	9103      	str	r1, [sp, #12]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	bfbb      	ittet	lt
 800f6ba:	425b      	neglt	r3, r3
 800f6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f6c0:	9307      	strge	r3, [sp, #28]
 800f6c2:	9307      	strlt	r3, [sp, #28]
 800f6c4:	bfb8      	it	lt
 800f6c6:	9204      	strlt	r2, [sp, #16]
 800f6c8:	7823      	ldrb	r3, [r4, #0]
 800f6ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6cc:	d10a      	bne.n	800f6e4 <_svfiprintf_r+0x130>
 800f6ce:	7863      	ldrb	r3, [r4, #1]
 800f6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6d2:	d132      	bne.n	800f73a <_svfiprintf_r+0x186>
 800f6d4:	9b03      	ldr	r3, [sp, #12]
 800f6d6:	1d1a      	adds	r2, r3, #4
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	9203      	str	r2, [sp, #12]
 800f6dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6e0:	3402      	adds	r4, #2
 800f6e2:	9305      	str	r3, [sp, #20]
 800f6e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f7a8 <_svfiprintf_r+0x1f4>
 800f6e8:	7821      	ldrb	r1, [r4, #0]
 800f6ea:	2203      	movs	r2, #3
 800f6ec:	4650      	mov	r0, sl
 800f6ee:	f7f0 fd6f 	bl	80001d0 <memchr>
 800f6f2:	b138      	cbz	r0, 800f704 <_svfiprintf_r+0x150>
 800f6f4:	9b04      	ldr	r3, [sp, #16]
 800f6f6:	eba0 000a 	sub.w	r0, r0, sl
 800f6fa:	2240      	movs	r2, #64	@ 0x40
 800f6fc:	4082      	lsls	r2, r0
 800f6fe:	4313      	orrs	r3, r2
 800f700:	3401      	adds	r4, #1
 800f702:	9304      	str	r3, [sp, #16]
 800f704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f708:	4824      	ldr	r0, [pc, #144]	@ (800f79c <_svfiprintf_r+0x1e8>)
 800f70a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f70e:	2206      	movs	r2, #6
 800f710:	f7f0 fd5e 	bl	80001d0 <memchr>
 800f714:	2800      	cmp	r0, #0
 800f716:	d036      	beq.n	800f786 <_svfiprintf_r+0x1d2>
 800f718:	4b21      	ldr	r3, [pc, #132]	@ (800f7a0 <_svfiprintf_r+0x1ec>)
 800f71a:	bb1b      	cbnz	r3, 800f764 <_svfiprintf_r+0x1b0>
 800f71c:	9b03      	ldr	r3, [sp, #12]
 800f71e:	3307      	adds	r3, #7
 800f720:	f023 0307 	bic.w	r3, r3, #7
 800f724:	3308      	adds	r3, #8
 800f726:	9303      	str	r3, [sp, #12]
 800f728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f72a:	4433      	add	r3, r6
 800f72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f72e:	e76a      	b.n	800f606 <_svfiprintf_r+0x52>
 800f730:	fb0c 3202 	mla	r2, ip, r2, r3
 800f734:	460c      	mov	r4, r1
 800f736:	2001      	movs	r0, #1
 800f738:	e7a8      	b.n	800f68c <_svfiprintf_r+0xd8>
 800f73a:	2300      	movs	r3, #0
 800f73c:	3401      	adds	r4, #1
 800f73e:	9305      	str	r3, [sp, #20]
 800f740:	4619      	mov	r1, r3
 800f742:	f04f 0c0a 	mov.w	ip, #10
 800f746:	4620      	mov	r0, r4
 800f748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f74c:	3a30      	subs	r2, #48	@ 0x30
 800f74e:	2a09      	cmp	r2, #9
 800f750:	d903      	bls.n	800f75a <_svfiprintf_r+0x1a6>
 800f752:	2b00      	cmp	r3, #0
 800f754:	d0c6      	beq.n	800f6e4 <_svfiprintf_r+0x130>
 800f756:	9105      	str	r1, [sp, #20]
 800f758:	e7c4      	b.n	800f6e4 <_svfiprintf_r+0x130>
 800f75a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f75e:	4604      	mov	r4, r0
 800f760:	2301      	movs	r3, #1
 800f762:	e7f0      	b.n	800f746 <_svfiprintf_r+0x192>
 800f764:	ab03      	add	r3, sp, #12
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	462a      	mov	r2, r5
 800f76a:	4b0e      	ldr	r3, [pc, #56]	@ (800f7a4 <_svfiprintf_r+0x1f0>)
 800f76c:	a904      	add	r1, sp, #16
 800f76e:	4638      	mov	r0, r7
 800f770:	f7fc fc86 	bl	800c080 <_printf_float>
 800f774:	1c42      	adds	r2, r0, #1
 800f776:	4606      	mov	r6, r0
 800f778:	d1d6      	bne.n	800f728 <_svfiprintf_r+0x174>
 800f77a:	89ab      	ldrh	r3, [r5, #12]
 800f77c:	065b      	lsls	r3, r3, #25
 800f77e:	f53f af2d 	bmi.w	800f5dc <_svfiprintf_r+0x28>
 800f782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f784:	e72c      	b.n	800f5e0 <_svfiprintf_r+0x2c>
 800f786:	ab03      	add	r3, sp, #12
 800f788:	9300      	str	r3, [sp, #0]
 800f78a:	462a      	mov	r2, r5
 800f78c:	4b05      	ldr	r3, [pc, #20]	@ (800f7a4 <_svfiprintf_r+0x1f0>)
 800f78e:	a904      	add	r1, sp, #16
 800f790:	4638      	mov	r0, r7
 800f792:	f7fc ff0d 	bl	800c5b0 <_printf_i>
 800f796:	e7ed      	b.n	800f774 <_svfiprintf_r+0x1c0>
 800f798:	08010ae1 	.word	0x08010ae1
 800f79c:	08010aeb 	.word	0x08010aeb
 800f7a0:	0800c081 	.word	0x0800c081
 800f7a4:	0800f4fd 	.word	0x0800f4fd
 800f7a8:	08010ae7 	.word	0x08010ae7

0800f7ac <__sflush_r>:
 800f7ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b4:	0716      	lsls	r6, r2, #28
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	d454      	bmi.n	800f866 <__sflush_r+0xba>
 800f7bc:	684b      	ldr	r3, [r1, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	dc02      	bgt.n	800f7c8 <__sflush_r+0x1c>
 800f7c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dd48      	ble.n	800f85a <__sflush_r+0xae>
 800f7c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7ca:	2e00      	cmp	r6, #0
 800f7cc:	d045      	beq.n	800f85a <__sflush_r+0xae>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f7d4:	682f      	ldr	r7, [r5, #0]
 800f7d6:	6a21      	ldr	r1, [r4, #32]
 800f7d8:	602b      	str	r3, [r5, #0]
 800f7da:	d030      	beq.n	800f83e <__sflush_r+0x92>
 800f7dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	0759      	lsls	r1, r3, #29
 800f7e2:	d505      	bpl.n	800f7f0 <__sflush_r+0x44>
 800f7e4:	6863      	ldr	r3, [r4, #4]
 800f7e6:	1ad2      	subs	r2, r2, r3
 800f7e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f7ea:	b10b      	cbz	r3, 800f7f0 <__sflush_r+0x44>
 800f7ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f7ee:	1ad2      	subs	r2, r2, r3
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7f4:	6a21      	ldr	r1, [r4, #32]
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	47b0      	blx	r6
 800f7fa:	1c43      	adds	r3, r0, #1
 800f7fc:	89a3      	ldrh	r3, [r4, #12]
 800f7fe:	d106      	bne.n	800f80e <__sflush_r+0x62>
 800f800:	6829      	ldr	r1, [r5, #0]
 800f802:	291d      	cmp	r1, #29
 800f804:	d82b      	bhi.n	800f85e <__sflush_r+0xb2>
 800f806:	4a2a      	ldr	r2, [pc, #168]	@ (800f8b0 <__sflush_r+0x104>)
 800f808:	410a      	asrs	r2, r1
 800f80a:	07d6      	lsls	r6, r2, #31
 800f80c:	d427      	bmi.n	800f85e <__sflush_r+0xb2>
 800f80e:	2200      	movs	r2, #0
 800f810:	6062      	str	r2, [r4, #4]
 800f812:	04d9      	lsls	r1, r3, #19
 800f814:	6922      	ldr	r2, [r4, #16]
 800f816:	6022      	str	r2, [r4, #0]
 800f818:	d504      	bpl.n	800f824 <__sflush_r+0x78>
 800f81a:	1c42      	adds	r2, r0, #1
 800f81c:	d101      	bne.n	800f822 <__sflush_r+0x76>
 800f81e:	682b      	ldr	r3, [r5, #0]
 800f820:	b903      	cbnz	r3, 800f824 <__sflush_r+0x78>
 800f822:	6560      	str	r0, [r4, #84]	@ 0x54
 800f824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f826:	602f      	str	r7, [r5, #0]
 800f828:	b1b9      	cbz	r1, 800f85a <__sflush_r+0xae>
 800f82a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f82e:	4299      	cmp	r1, r3
 800f830:	d002      	beq.n	800f838 <__sflush_r+0x8c>
 800f832:	4628      	mov	r0, r5
 800f834:	f7fe fa2c 	bl	800dc90 <_free_r>
 800f838:	2300      	movs	r3, #0
 800f83a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f83c:	e00d      	b.n	800f85a <__sflush_r+0xae>
 800f83e:	2301      	movs	r3, #1
 800f840:	4628      	mov	r0, r5
 800f842:	47b0      	blx	r6
 800f844:	4602      	mov	r2, r0
 800f846:	1c50      	adds	r0, r2, #1
 800f848:	d1c9      	bne.n	800f7de <__sflush_r+0x32>
 800f84a:	682b      	ldr	r3, [r5, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d0c6      	beq.n	800f7de <__sflush_r+0x32>
 800f850:	2b1d      	cmp	r3, #29
 800f852:	d001      	beq.n	800f858 <__sflush_r+0xac>
 800f854:	2b16      	cmp	r3, #22
 800f856:	d11e      	bne.n	800f896 <__sflush_r+0xea>
 800f858:	602f      	str	r7, [r5, #0]
 800f85a:	2000      	movs	r0, #0
 800f85c:	e022      	b.n	800f8a4 <__sflush_r+0xf8>
 800f85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f862:	b21b      	sxth	r3, r3
 800f864:	e01b      	b.n	800f89e <__sflush_r+0xf2>
 800f866:	690f      	ldr	r7, [r1, #16]
 800f868:	2f00      	cmp	r7, #0
 800f86a:	d0f6      	beq.n	800f85a <__sflush_r+0xae>
 800f86c:	0793      	lsls	r3, r2, #30
 800f86e:	680e      	ldr	r6, [r1, #0]
 800f870:	bf08      	it	eq
 800f872:	694b      	ldreq	r3, [r1, #20]
 800f874:	600f      	str	r7, [r1, #0]
 800f876:	bf18      	it	ne
 800f878:	2300      	movne	r3, #0
 800f87a:	eba6 0807 	sub.w	r8, r6, r7
 800f87e:	608b      	str	r3, [r1, #8]
 800f880:	f1b8 0f00 	cmp.w	r8, #0
 800f884:	dde9      	ble.n	800f85a <__sflush_r+0xae>
 800f886:	6a21      	ldr	r1, [r4, #32]
 800f888:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f88a:	4643      	mov	r3, r8
 800f88c:	463a      	mov	r2, r7
 800f88e:	4628      	mov	r0, r5
 800f890:	47b0      	blx	r6
 800f892:	2800      	cmp	r0, #0
 800f894:	dc08      	bgt.n	800f8a8 <__sflush_r+0xfc>
 800f896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f89a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f89e:	81a3      	strh	r3, [r4, #12]
 800f8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a8:	4407      	add	r7, r0
 800f8aa:	eba8 0800 	sub.w	r8, r8, r0
 800f8ae:	e7e7      	b.n	800f880 <__sflush_r+0xd4>
 800f8b0:	dfbffffe 	.word	0xdfbffffe

0800f8b4 <_fflush_r>:
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	690b      	ldr	r3, [r1, #16]
 800f8b8:	4605      	mov	r5, r0
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	b913      	cbnz	r3, 800f8c4 <_fflush_r+0x10>
 800f8be:	2500      	movs	r5, #0
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	bd38      	pop	{r3, r4, r5, pc}
 800f8c4:	b118      	cbz	r0, 800f8ce <_fflush_r+0x1a>
 800f8c6:	6a03      	ldr	r3, [r0, #32]
 800f8c8:	b90b      	cbnz	r3, 800f8ce <_fflush_r+0x1a>
 800f8ca:	f7fd fa31 	bl	800cd30 <__sinit>
 800f8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d0f3      	beq.n	800f8be <_fflush_r+0xa>
 800f8d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f8d8:	07d0      	lsls	r0, r2, #31
 800f8da:	d404      	bmi.n	800f8e6 <_fflush_r+0x32>
 800f8dc:	0599      	lsls	r1, r3, #22
 800f8de:	d402      	bmi.n	800f8e6 <_fflush_r+0x32>
 800f8e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8e2:	f7fd fb70 	bl	800cfc6 <__retarget_lock_acquire_recursive>
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	f7ff ff5f 	bl	800f7ac <__sflush_r>
 800f8ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8f0:	07da      	lsls	r2, r3, #31
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	d4e4      	bmi.n	800f8c0 <_fflush_r+0xc>
 800f8f6:	89a3      	ldrh	r3, [r4, #12]
 800f8f8:	059b      	lsls	r3, r3, #22
 800f8fa:	d4e1      	bmi.n	800f8c0 <_fflush_r+0xc>
 800f8fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8fe:	f7fd fb63 	bl	800cfc8 <__retarget_lock_release_recursive>
 800f902:	e7dd      	b.n	800f8c0 <_fflush_r+0xc>

0800f904 <memmove>:
 800f904:	4288      	cmp	r0, r1
 800f906:	b510      	push	{r4, lr}
 800f908:	eb01 0402 	add.w	r4, r1, r2
 800f90c:	d902      	bls.n	800f914 <memmove+0x10>
 800f90e:	4284      	cmp	r4, r0
 800f910:	4623      	mov	r3, r4
 800f912:	d807      	bhi.n	800f924 <memmove+0x20>
 800f914:	1e43      	subs	r3, r0, #1
 800f916:	42a1      	cmp	r1, r4
 800f918:	d008      	beq.n	800f92c <memmove+0x28>
 800f91a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f91e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f922:	e7f8      	b.n	800f916 <memmove+0x12>
 800f924:	4402      	add	r2, r0
 800f926:	4601      	mov	r1, r0
 800f928:	428a      	cmp	r2, r1
 800f92a:	d100      	bne.n	800f92e <memmove+0x2a>
 800f92c:	bd10      	pop	{r4, pc}
 800f92e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f936:	e7f7      	b.n	800f928 <memmove+0x24>

0800f938 <strncmp>:
 800f938:	b510      	push	{r4, lr}
 800f93a:	b16a      	cbz	r2, 800f958 <strncmp+0x20>
 800f93c:	3901      	subs	r1, #1
 800f93e:	1884      	adds	r4, r0, r2
 800f940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f944:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f948:	429a      	cmp	r2, r3
 800f94a:	d103      	bne.n	800f954 <strncmp+0x1c>
 800f94c:	42a0      	cmp	r0, r4
 800f94e:	d001      	beq.n	800f954 <strncmp+0x1c>
 800f950:	2a00      	cmp	r2, #0
 800f952:	d1f5      	bne.n	800f940 <strncmp+0x8>
 800f954:	1ad0      	subs	r0, r2, r3
 800f956:	bd10      	pop	{r4, pc}
 800f958:	4610      	mov	r0, r2
 800f95a:	e7fc      	b.n	800f956 <strncmp+0x1e>

0800f95c <_sbrk_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	4d06      	ldr	r5, [pc, #24]	@ (800f978 <_sbrk_r+0x1c>)
 800f960:	2300      	movs	r3, #0
 800f962:	4604      	mov	r4, r0
 800f964:	4608      	mov	r0, r1
 800f966:	602b      	str	r3, [r5, #0]
 800f968:	f7f2 f8f4 	bl	8001b54 <_sbrk>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	d102      	bne.n	800f976 <_sbrk_r+0x1a>
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	b103      	cbz	r3, 800f976 <_sbrk_r+0x1a>
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	20001c50 	.word	0x20001c50
 800f97c:	00000000 	.word	0x00000000

0800f980 <nan>:
 800f980:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f988 <nan+0x8>
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	00000000 	.word	0x00000000
 800f98c:	7ff80000 	.word	0x7ff80000

0800f990 <__assert_func>:
 800f990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f992:	4614      	mov	r4, r2
 800f994:	461a      	mov	r2, r3
 800f996:	4b09      	ldr	r3, [pc, #36]	@ (800f9bc <__assert_func+0x2c>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4605      	mov	r5, r0
 800f99c:	68d8      	ldr	r0, [r3, #12]
 800f99e:	b954      	cbnz	r4, 800f9b6 <__assert_func+0x26>
 800f9a0:	4b07      	ldr	r3, [pc, #28]	@ (800f9c0 <__assert_func+0x30>)
 800f9a2:	461c      	mov	r4, r3
 800f9a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9a8:	9100      	str	r1, [sp, #0]
 800f9aa:	462b      	mov	r3, r5
 800f9ac:	4905      	ldr	r1, [pc, #20]	@ (800f9c4 <__assert_func+0x34>)
 800f9ae:	f000 fba7 	bl	8010100 <fiprintf>
 800f9b2:	f000 fbb7 	bl	8010124 <abort>
 800f9b6:	4b04      	ldr	r3, [pc, #16]	@ (800f9c8 <__assert_func+0x38>)
 800f9b8:	e7f4      	b.n	800f9a4 <__assert_func+0x14>
 800f9ba:	bf00      	nop
 800f9bc:	20000190 	.word	0x20000190
 800f9c0:	08010b35 	.word	0x08010b35
 800f9c4:	08010b07 	.word	0x08010b07
 800f9c8:	08010afa 	.word	0x08010afa

0800f9cc <_calloc_r>:
 800f9cc:	b570      	push	{r4, r5, r6, lr}
 800f9ce:	fba1 5402 	umull	r5, r4, r1, r2
 800f9d2:	b93c      	cbnz	r4, 800f9e4 <_calloc_r+0x18>
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	f7fe f9cf 	bl	800dd78 <_malloc_r>
 800f9da:	4606      	mov	r6, r0
 800f9dc:	b928      	cbnz	r0, 800f9ea <_calloc_r+0x1e>
 800f9de:	2600      	movs	r6, #0
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	bd70      	pop	{r4, r5, r6, pc}
 800f9e4:	220c      	movs	r2, #12
 800f9e6:	6002      	str	r2, [r0, #0]
 800f9e8:	e7f9      	b.n	800f9de <_calloc_r+0x12>
 800f9ea:	462a      	mov	r2, r5
 800f9ec:	4621      	mov	r1, r4
 800f9ee:	f7fd fa6c 	bl	800ceca <memset>
 800f9f2:	e7f5      	b.n	800f9e0 <_calloc_r+0x14>

0800f9f4 <rshift>:
 800f9f4:	6903      	ldr	r3, [r0, #16]
 800f9f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f9fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa02:	f100 0414 	add.w	r4, r0, #20
 800fa06:	dd45      	ble.n	800fa94 <rshift+0xa0>
 800fa08:	f011 011f 	ands.w	r1, r1, #31
 800fa0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa14:	d10c      	bne.n	800fa30 <rshift+0x3c>
 800fa16:	f100 0710 	add.w	r7, r0, #16
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	42b1      	cmp	r1, r6
 800fa1e:	d334      	bcc.n	800fa8a <rshift+0x96>
 800fa20:	1a9b      	subs	r3, r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	1eea      	subs	r2, r5, #3
 800fa26:	4296      	cmp	r6, r2
 800fa28:	bf38      	it	cc
 800fa2a:	2300      	movcc	r3, #0
 800fa2c:	4423      	add	r3, r4
 800fa2e:	e015      	b.n	800fa5c <rshift+0x68>
 800fa30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fa34:	f1c1 0820 	rsb	r8, r1, #32
 800fa38:	40cf      	lsrs	r7, r1
 800fa3a:	f105 0e04 	add.w	lr, r5, #4
 800fa3e:	46a1      	mov	r9, r4
 800fa40:	4576      	cmp	r6, lr
 800fa42:	46f4      	mov	ip, lr
 800fa44:	d815      	bhi.n	800fa72 <rshift+0x7e>
 800fa46:	1a9a      	subs	r2, r3, r2
 800fa48:	0092      	lsls	r2, r2, #2
 800fa4a:	3a04      	subs	r2, #4
 800fa4c:	3501      	adds	r5, #1
 800fa4e:	42ae      	cmp	r6, r5
 800fa50:	bf38      	it	cc
 800fa52:	2200      	movcc	r2, #0
 800fa54:	18a3      	adds	r3, r4, r2
 800fa56:	50a7      	str	r7, [r4, r2]
 800fa58:	b107      	cbz	r7, 800fa5c <rshift+0x68>
 800fa5a:	3304      	adds	r3, #4
 800fa5c:	1b1a      	subs	r2, r3, r4
 800fa5e:	42a3      	cmp	r3, r4
 800fa60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa64:	bf08      	it	eq
 800fa66:	2300      	moveq	r3, #0
 800fa68:	6102      	str	r2, [r0, #16]
 800fa6a:	bf08      	it	eq
 800fa6c:	6143      	streq	r3, [r0, #20]
 800fa6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa72:	f8dc c000 	ldr.w	ip, [ip]
 800fa76:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa7a:	ea4c 0707 	orr.w	r7, ip, r7
 800fa7e:	f849 7b04 	str.w	r7, [r9], #4
 800fa82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa86:	40cf      	lsrs	r7, r1
 800fa88:	e7da      	b.n	800fa40 <rshift+0x4c>
 800fa8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fa8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fa92:	e7c3      	b.n	800fa1c <rshift+0x28>
 800fa94:	4623      	mov	r3, r4
 800fa96:	e7e1      	b.n	800fa5c <rshift+0x68>

0800fa98 <__hexdig_fun>:
 800fa98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fa9c:	2b09      	cmp	r3, #9
 800fa9e:	d802      	bhi.n	800faa6 <__hexdig_fun+0xe>
 800faa0:	3820      	subs	r0, #32
 800faa2:	b2c0      	uxtb	r0, r0
 800faa4:	4770      	bx	lr
 800faa6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800faaa:	2b05      	cmp	r3, #5
 800faac:	d801      	bhi.n	800fab2 <__hexdig_fun+0x1a>
 800faae:	3847      	subs	r0, #71	@ 0x47
 800fab0:	e7f7      	b.n	800faa2 <__hexdig_fun+0xa>
 800fab2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fab6:	2b05      	cmp	r3, #5
 800fab8:	d801      	bhi.n	800fabe <__hexdig_fun+0x26>
 800faba:	3827      	subs	r0, #39	@ 0x27
 800fabc:	e7f1      	b.n	800faa2 <__hexdig_fun+0xa>
 800fabe:	2000      	movs	r0, #0
 800fac0:	4770      	bx	lr
	...

0800fac4 <__gethex>:
 800fac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac8:	b085      	sub	sp, #20
 800faca:	468a      	mov	sl, r1
 800facc:	9302      	str	r3, [sp, #8]
 800face:	680b      	ldr	r3, [r1, #0]
 800fad0:	9001      	str	r0, [sp, #4]
 800fad2:	4690      	mov	r8, r2
 800fad4:	1c9c      	adds	r4, r3, #2
 800fad6:	46a1      	mov	r9, r4
 800fad8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fadc:	2830      	cmp	r0, #48	@ 0x30
 800fade:	d0fa      	beq.n	800fad6 <__gethex+0x12>
 800fae0:	eba9 0303 	sub.w	r3, r9, r3
 800fae4:	f1a3 0b02 	sub.w	fp, r3, #2
 800fae8:	f7ff ffd6 	bl	800fa98 <__hexdig_fun>
 800faec:	4605      	mov	r5, r0
 800faee:	2800      	cmp	r0, #0
 800faf0:	d168      	bne.n	800fbc4 <__gethex+0x100>
 800faf2:	49a0      	ldr	r1, [pc, #640]	@ (800fd74 <__gethex+0x2b0>)
 800faf4:	2201      	movs	r2, #1
 800faf6:	4648      	mov	r0, r9
 800faf8:	f7ff ff1e 	bl	800f938 <strncmp>
 800fafc:	4607      	mov	r7, r0
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d167      	bne.n	800fbd2 <__gethex+0x10e>
 800fb02:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fb06:	4626      	mov	r6, r4
 800fb08:	f7ff ffc6 	bl	800fa98 <__hexdig_fun>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d062      	beq.n	800fbd6 <__gethex+0x112>
 800fb10:	4623      	mov	r3, r4
 800fb12:	7818      	ldrb	r0, [r3, #0]
 800fb14:	2830      	cmp	r0, #48	@ 0x30
 800fb16:	4699      	mov	r9, r3
 800fb18:	f103 0301 	add.w	r3, r3, #1
 800fb1c:	d0f9      	beq.n	800fb12 <__gethex+0x4e>
 800fb1e:	f7ff ffbb 	bl	800fa98 <__hexdig_fun>
 800fb22:	fab0 f580 	clz	r5, r0
 800fb26:	096d      	lsrs	r5, r5, #5
 800fb28:	f04f 0b01 	mov.w	fp, #1
 800fb2c:	464a      	mov	r2, r9
 800fb2e:	4616      	mov	r6, r2
 800fb30:	3201      	adds	r2, #1
 800fb32:	7830      	ldrb	r0, [r6, #0]
 800fb34:	f7ff ffb0 	bl	800fa98 <__hexdig_fun>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d1f8      	bne.n	800fb2e <__gethex+0x6a>
 800fb3c:	498d      	ldr	r1, [pc, #564]	@ (800fd74 <__gethex+0x2b0>)
 800fb3e:	2201      	movs	r2, #1
 800fb40:	4630      	mov	r0, r6
 800fb42:	f7ff fef9 	bl	800f938 <strncmp>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d13f      	bne.n	800fbca <__gethex+0x106>
 800fb4a:	b944      	cbnz	r4, 800fb5e <__gethex+0x9a>
 800fb4c:	1c74      	adds	r4, r6, #1
 800fb4e:	4622      	mov	r2, r4
 800fb50:	4616      	mov	r6, r2
 800fb52:	3201      	adds	r2, #1
 800fb54:	7830      	ldrb	r0, [r6, #0]
 800fb56:	f7ff ff9f 	bl	800fa98 <__hexdig_fun>
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	d1f8      	bne.n	800fb50 <__gethex+0x8c>
 800fb5e:	1ba4      	subs	r4, r4, r6
 800fb60:	00a7      	lsls	r7, r4, #2
 800fb62:	7833      	ldrb	r3, [r6, #0]
 800fb64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fb68:	2b50      	cmp	r3, #80	@ 0x50
 800fb6a:	d13e      	bne.n	800fbea <__gethex+0x126>
 800fb6c:	7873      	ldrb	r3, [r6, #1]
 800fb6e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fb70:	d033      	beq.n	800fbda <__gethex+0x116>
 800fb72:	2b2d      	cmp	r3, #45	@ 0x2d
 800fb74:	d034      	beq.n	800fbe0 <__gethex+0x11c>
 800fb76:	1c71      	adds	r1, r6, #1
 800fb78:	2400      	movs	r4, #0
 800fb7a:	7808      	ldrb	r0, [r1, #0]
 800fb7c:	f7ff ff8c 	bl	800fa98 <__hexdig_fun>
 800fb80:	1e43      	subs	r3, r0, #1
 800fb82:	b2db      	uxtb	r3, r3
 800fb84:	2b18      	cmp	r3, #24
 800fb86:	d830      	bhi.n	800fbea <__gethex+0x126>
 800fb88:	f1a0 0210 	sub.w	r2, r0, #16
 800fb8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb90:	f7ff ff82 	bl	800fa98 <__hexdig_fun>
 800fb94:	f100 3cff 	add.w	ip, r0, #4294967295
 800fb98:	fa5f fc8c 	uxtb.w	ip, ip
 800fb9c:	f1bc 0f18 	cmp.w	ip, #24
 800fba0:	f04f 030a 	mov.w	r3, #10
 800fba4:	d91e      	bls.n	800fbe4 <__gethex+0x120>
 800fba6:	b104      	cbz	r4, 800fbaa <__gethex+0xe6>
 800fba8:	4252      	negs	r2, r2
 800fbaa:	4417      	add	r7, r2
 800fbac:	f8ca 1000 	str.w	r1, [sl]
 800fbb0:	b1ed      	cbz	r5, 800fbee <__gethex+0x12a>
 800fbb2:	f1bb 0f00 	cmp.w	fp, #0
 800fbb6:	bf0c      	ite	eq
 800fbb8:	2506      	moveq	r5, #6
 800fbba:	2500      	movne	r5, #0
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	b005      	add	sp, #20
 800fbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc4:	2500      	movs	r5, #0
 800fbc6:	462c      	mov	r4, r5
 800fbc8:	e7b0      	b.n	800fb2c <__gethex+0x68>
 800fbca:	2c00      	cmp	r4, #0
 800fbcc:	d1c7      	bne.n	800fb5e <__gethex+0x9a>
 800fbce:	4627      	mov	r7, r4
 800fbd0:	e7c7      	b.n	800fb62 <__gethex+0x9e>
 800fbd2:	464e      	mov	r6, r9
 800fbd4:	462f      	mov	r7, r5
 800fbd6:	2501      	movs	r5, #1
 800fbd8:	e7c3      	b.n	800fb62 <__gethex+0x9e>
 800fbda:	2400      	movs	r4, #0
 800fbdc:	1cb1      	adds	r1, r6, #2
 800fbde:	e7cc      	b.n	800fb7a <__gethex+0xb6>
 800fbe0:	2401      	movs	r4, #1
 800fbe2:	e7fb      	b.n	800fbdc <__gethex+0x118>
 800fbe4:	fb03 0002 	mla	r0, r3, r2, r0
 800fbe8:	e7ce      	b.n	800fb88 <__gethex+0xc4>
 800fbea:	4631      	mov	r1, r6
 800fbec:	e7de      	b.n	800fbac <__gethex+0xe8>
 800fbee:	eba6 0309 	sub.w	r3, r6, r9
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	2b07      	cmp	r3, #7
 800fbf8:	dc0a      	bgt.n	800fc10 <__gethex+0x14c>
 800fbfa:	9801      	ldr	r0, [sp, #4]
 800fbfc:	f7fe f948 	bl	800de90 <_Balloc>
 800fc00:	4604      	mov	r4, r0
 800fc02:	b940      	cbnz	r0, 800fc16 <__gethex+0x152>
 800fc04:	4b5c      	ldr	r3, [pc, #368]	@ (800fd78 <__gethex+0x2b4>)
 800fc06:	4602      	mov	r2, r0
 800fc08:	21e4      	movs	r1, #228	@ 0xe4
 800fc0a:	485c      	ldr	r0, [pc, #368]	@ (800fd7c <__gethex+0x2b8>)
 800fc0c:	f7ff fec0 	bl	800f990 <__assert_func>
 800fc10:	3101      	adds	r1, #1
 800fc12:	105b      	asrs	r3, r3, #1
 800fc14:	e7ef      	b.n	800fbf6 <__gethex+0x132>
 800fc16:	f100 0a14 	add.w	sl, r0, #20
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	4655      	mov	r5, sl
 800fc1e:	469b      	mov	fp, r3
 800fc20:	45b1      	cmp	r9, r6
 800fc22:	d337      	bcc.n	800fc94 <__gethex+0x1d0>
 800fc24:	f845 bb04 	str.w	fp, [r5], #4
 800fc28:	eba5 050a 	sub.w	r5, r5, sl
 800fc2c:	10ad      	asrs	r5, r5, #2
 800fc2e:	6125      	str	r5, [r4, #16]
 800fc30:	4658      	mov	r0, fp
 800fc32:	f7fe fa1f 	bl	800e074 <__hi0bits>
 800fc36:	016d      	lsls	r5, r5, #5
 800fc38:	f8d8 6000 	ldr.w	r6, [r8]
 800fc3c:	1a2d      	subs	r5, r5, r0
 800fc3e:	42b5      	cmp	r5, r6
 800fc40:	dd54      	ble.n	800fcec <__gethex+0x228>
 800fc42:	1bad      	subs	r5, r5, r6
 800fc44:	4629      	mov	r1, r5
 800fc46:	4620      	mov	r0, r4
 800fc48:	f7fe fdb3 	bl	800e7b2 <__any_on>
 800fc4c:	4681      	mov	r9, r0
 800fc4e:	b178      	cbz	r0, 800fc70 <__gethex+0x1ac>
 800fc50:	1e6b      	subs	r3, r5, #1
 800fc52:	1159      	asrs	r1, r3, #5
 800fc54:	f003 021f 	and.w	r2, r3, #31
 800fc58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fc5c:	f04f 0901 	mov.w	r9, #1
 800fc60:	fa09 f202 	lsl.w	r2, r9, r2
 800fc64:	420a      	tst	r2, r1
 800fc66:	d003      	beq.n	800fc70 <__gethex+0x1ac>
 800fc68:	454b      	cmp	r3, r9
 800fc6a:	dc36      	bgt.n	800fcda <__gethex+0x216>
 800fc6c:	f04f 0902 	mov.w	r9, #2
 800fc70:	4629      	mov	r1, r5
 800fc72:	4620      	mov	r0, r4
 800fc74:	f7ff febe 	bl	800f9f4 <rshift>
 800fc78:	442f      	add	r7, r5
 800fc7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc7e:	42bb      	cmp	r3, r7
 800fc80:	da42      	bge.n	800fd08 <__gethex+0x244>
 800fc82:	9801      	ldr	r0, [sp, #4]
 800fc84:	4621      	mov	r1, r4
 800fc86:	f7fe f943 	bl	800df10 <_Bfree>
 800fc8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	6013      	str	r3, [r2, #0]
 800fc90:	25a3      	movs	r5, #163	@ 0xa3
 800fc92:	e793      	b.n	800fbbc <__gethex+0xf8>
 800fc94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fc98:	2a2e      	cmp	r2, #46	@ 0x2e
 800fc9a:	d012      	beq.n	800fcc2 <__gethex+0x1fe>
 800fc9c:	2b20      	cmp	r3, #32
 800fc9e:	d104      	bne.n	800fcaa <__gethex+0x1e6>
 800fca0:	f845 bb04 	str.w	fp, [r5], #4
 800fca4:	f04f 0b00 	mov.w	fp, #0
 800fca8:	465b      	mov	r3, fp
 800fcaa:	7830      	ldrb	r0, [r6, #0]
 800fcac:	9303      	str	r3, [sp, #12]
 800fcae:	f7ff fef3 	bl	800fa98 <__hexdig_fun>
 800fcb2:	9b03      	ldr	r3, [sp, #12]
 800fcb4:	f000 000f 	and.w	r0, r0, #15
 800fcb8:	4098      	lsls	r0, r3
 800fcba:	ea4b 0b00 	orr.w	fp, fp, r0
 800fcbe:	3304      	adds	r3, #4
 800fcc0:	e7ae      	b.n	800fc20 <__gethex+0x15c>
 800fcc2:	45b1      	cmp	r9, r6
 800fcc4:	d8ea      	bhi.n	800fc9c <__gethex+0x1d8>
 800fcc6:	492b      	ldr	r1, [pc, #172]	@ (800fd74 <__gethex+0x2b0>)
 800fcc8:	9303      	str	r3, [sp, #12]
 800fcca:	2201      	movs	r2, #1
 800fccc:	4630      	mov	r0, r6
 800fcce:	f7ff fe33 	bl	800f938 <strncmp>
 800fcd2:	9b03      	ldr	r3, [sp, #12]
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d1e1      	bne.n	800fc9c <__gethex+0x1d8>
 800fcd8:	e7a2      	b.n	800fc20 <__gethex+0x15c>
 800fcda:	1ea9      	subs	r1, r5, #2
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f7fe fd68 	bl	800e7b2 <__any_on>
 800fce2:	2800      	cmp	r0, #0
 800fce4:	d0c2      	beq.n	800fc6c <__gethex+0x1a8>
 800fce6:	f04f 0903 	mov.w	r9, #3
 800fcea:	e7c1      	b.n	800fc70 <__gethex+0x1ac>
 800fcec:	da09      	bge.n	800fd02 <__gethex+0x23e>
 800fcee:	1b75      	subs	r5, r6, r5
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	9801      	ldr	r0, [sp, #4]
 800fcf4:	462a      	mov	r2, r5
 800fcf6:	f7fe fb23 	bl	800e340 <__lshift>
 800fcfa:	1b7f      	subs	r7, r7, r5
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	f100 0a14 	add.w	sl, r0, #20
 800fd02:	f04f 0900 	mov.w	r9, #0
 800fd06:	e7b8      	b.n	800fc7a <__gethex+0x1b6>
 800fd08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fd0c:	42bd      	cmp	r5, r7
 800fd0e:	dd6f      	ble.n	800fdf0 <__gethex+0x32c>
 800fd10:	1bed      	subs	r5, r5, r7
 800fd12:	42ae      	cmp	r6, r5
 800fd14:	dc34      	bgt.n	800fd80 <__gethex+0x2bc>
 800fd16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	d022      	beq.n	800fd64 <__gethex+0x2a0>
 800fd1e:	2b03      	cmp	r3, #3
 800fd20:	d024      	beq.n	800fd6c <__gethex+0x2a8>
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d115      	bne.n	800fd52 <__gethex+0x28e>
 800fd26:	42ae      	cmp	r6, r5
 800fd28:	d113      	bne.n	800fd52 <__gethex+0x28e>
 800fd2a:	2e01      	cmp	r6, #1
 800fd2c:	d10b      	bne.n	800fd46 <__gethex+0x282>
 800fd2e:	9a02      	ldr	r2, [sp, #8]
 800fd30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd34:	6013      	str	r3, [r2, #0]
 800fd36:	2301      	movs	r3, #1
 800fd38:	6123      	str	r3, [r4, #16]
 800fd3a:	f8ca 3000 	str.w	r3, [sl]
 800fd3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd40:	2562      	movs	r5, #98	@ 0x62
 800fd42:	601c      	str	r4, [r3, #0]
 800fd44:	e73a      	b.n	800fbbc <__gethex+0xf8>
 800fd46:	1e71      	subs	r1, r6, #1
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f7fe fd32 	bl	800e7b2 <__any_on>
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	d1ed      	bne.n	800fd2e <__gethex+0x26a>
 800fd52:	9801      	ldr	r0, [sp, #4]
 800fd54:	4621      	mov	r1, r4
 800fd56:	f7fe f8db 	bl	800df10 <_Bfree>
 800fd5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	6013      	str	r3, [r2, #0]
 800fd60:	2550      	movs	r5, #80	@ 0x50
 800fd62:	e72b      	b.n	800fbbc <__gethex+0xf8>
 800fd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1f3      	bne.n	800fd52 <__gethex+0x28e>
 800fd6a:	e7e0      	b.n	800fd2e <__gethex+0x26a>
 800fd6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d1dd      	bne.n	800fd2e <__gethex+0x26a>
 800fd72:	e7ee      	b.n	800fd52 <__gethex+0x28e>
 800fd74:	08010988 	.word	0x08010988
 800fd78:	08010821 	.word	0x08010821
 800fd7c:	08010b36 	.word	0x08010b36
 800fd80:	1e6f      	subs	r7, r5, #1
 800fd82:	f1b9 0f00 	cmp.w	r9, #0
 800fd86:	d130      	bne.n	800fdea <__gethex+0x326>
 800fd88:	b127      	cbz	r7, 800fd94 <__gethex+0x2d0>
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f7fe fd10 	bl	800e7b2 <__any_on>
 800fd92:	4681      	mov	r9, r0
 800fd94:	117a      	asrs	r2, r7, #5
 800fd96:	2301      	movs	r3, #1
 800fd98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fd9c:	f007 071f 	and.w	r7, r7, #31
 800fda0:	40bb      	lsls	r3, r7
 800fda2:	4213      	tst	r3, r2
 800fda4:	4629      	mov	r1, r5
 800fda6:	4620      	mov	r0, r4
 800fda8:	bf18      	it	ne
 800fdaa:	f049 0902 	orrne.w	r9, r9, #2
 800fdae:	f7ff fe21 	bl	800f9f4 <rshift>
 800fdb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fdb6:	1b76      	subs	r6, r6, r5
 800fdb8:	2502      	movs	r5, #2
 800fdba:	f1b9 0f00 	cmp.w	r9, #0
 800fdbe:	d047      	beq.n	800fe50 <__gethex+0x38c>
 800fdc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	d015      	beq.n	800fdf4 <__gethex+0x330>
 800fdc8:	2b03      	cmp	r3, #3
 800fdca:	d017      	beq.n	800fdfc <__gethex+0x338>
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d109      	bne.n	800fde4 <__gethex+0x320>
 800fdd0:	f019 0f02 	tst.w	r9, #2
 800fdd4:	d006      	beq.n	800fde4 <__gethex+0x320>
 800fdd6:	f8da 3000 	ldr.w	r3, [sl]
 800fdda:	ea49 0903 	orr.w	r9, r9, r3
 800fdde:	f019 0f01 	tst.w	r9, #1
 800fde2:	d10e      	bne.n	800fe02 <__gethex+0x33e>
 800fde4:	f045 0510 	orr.w	r5, r5, #16
 800fde8:	e032      	b.n	800fe50 <__gethex+0x38c>
 800fdea:	f04f 0901 	mov.w	r9, #1
 800fdee:	e7d1      	b.n	800fd94 <__gethex+0x2d0>
 800fdf0:	2501      	movs	r5, #1
 800fdf2:	e7e2      	b.n	800fdba <__gethex+0x2f6>
 800fdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdf6:	f1c3 0301 	rsb	r3, r3, #1
 800fdfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fdfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d0f0      	beq.n	800fde4 <__gethex+0x320>
 800fe02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fe06:	f104 0314 	add.w	r3, r4, #20
 800fe0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fe0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fe12:	f04f 0c00 	mov.w	ip, #0
 800fe16:	4618      	mov	r0, r3
 800fe18:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fe20:	d01b      	beq.n	800fe5a <__gethex+0x396>
 800fe22:	3201      	adds	r2, #1
 800fe24:	6002      	str	r2, [r0, #0]
 800fe26:	2d02      	cmp	r5, #2
 800fe28:	f104 0314 	add.w	r3, r4, #20
 800fe2c:	d13c      	bne.n	800fea8 <__gethex+0x3e4>
 800fe2e:	f8d8 2000 	ldr.w	r2, [r8]
 800fe32:	3a01      	subs	r2, #1
 800fe34:	42b2      	cmp	r2, r6
 800fe36:	d109      	bne.n	800fe4c <__gethex+0x388>
 800fe38:	1171      	asrs	r1, r6, #5
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe40:	f006 061f 	and.w	r6, r6, #31
 800fe44:	fa02 f606 	lsl.w	r6, r2, r6
 800fe48:	421e      	tst	r6, r3
 800fe4a:	d13a      	bne.n	800fec2 <__gethex+0x3fe>
 800fe4c:	f045 0520 	orr.w	r5, r5, #32
 800fe50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe52:	601c      	str	r4, [r3, #0]
 800fe54:	9b02      	ldr	r3, [sp, #8]
 800fe56:	601f      	str	r7, [r3, #0]
 800fe58:	e6b0      	b.n	800fbbc <__gethex+0xf8>
 800fe5a:	4299      	cmp	r1, r3
 800fe5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe60:	d8d9      	bhi.n	800fe16 <__gethex+0x352>
 800fe62:	68a3      	ldr	r3, [r4, #8]
 800fe64:	459b      	cmp	fp, r3
 800fe66:	db17      	blt.n	800fe98 <__gethex+0x3d4>
 800fe68:	6861      	ldr	r1, [r4, #4]
 800fe6a:	9801      	ldr	r0, [sp, #4]
 800fe6c:	3101      	adds	r1, #1
 800fe6e:	f7fe f80f 	bl	800de90 <_Balloc>
 800fe72:	4681      	mov	r9, r0
 800fe74:	b918      	cbnz	r0, 800fe7e <__gethex+0x3ba>
 800fe76:	4b1a      	ldr	r3, [pc, #104]	@ (800fee0 <__gethex+0x41c>)
 800fe78:	4602      	mov	r2, r0
 800fe7a:	2184      	movs	r1, #132	@ 0x84
 800fe7c:	e6c5      	b.n	800fc0a <__gethex+0x146>
 800fe7e:	6922      	ldr	r2, [r4, #16]
 800fe80:	3202      	adds	r2, #2
 800fe82:	f104 010c 	add.w	r1, r4, #12
 800fe86:	0092      	lsls	r2, r2, #2
 800fe88:	300c      	adds	r0, #12
 800fe8a:	f7fd f89e 	bl	800cfca <memcpy>
 800fe8e:	4621      	mov	r1, r4
 800fe90:	9801      	ldr	r0, [sp, #4]
 800fe92:	f7fe f83d 	bl	800df10 <_Bfree>
 800fe96:	464c      	mov	r4, r9
 800fe98:	6923      	ldr	r3, [r4, #16]
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fea0:	6122      	str	r2, [r4, #16]
 800fea2:	2201      	movs	r2, #1
 800fea4:	615a      	str	r2, [r3, #20]
 800fea6:	e7be      	b.n	800fe26 <__gethex+0x362>
 800fea8:	6922      	ldr	r2, [r4, #16]
 800feaa:	455a      	cmp	r2, fp
 800feac:	dd0b      	ble.n	800fec6 <__gethex+0x402>
 800feae:	2101      	movs	r1, #1
 800feb0:	4620      	mov	r0, r4
 800feb2:	f7ff fd9f 	bl	800f9f4 <rshift>
 800feb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800feba:	3701      	adds	r7, #1
 800febc:	42bb      	cmp	r3, r7
 800febe:	f6ff aee0 	blt.w	800fc82 <__gethex+0x1be>
 800fec2:	2501      	movs	r5, #1
 800fec4:	e7c2      	b.n	800fe4c <__gethex+0x388>
 800fec6:	f016 061f 	ands.w	r6, r6, #31
 800feca:	d0fa      	beq.n	800fec2 <__gethex+0x3fe>
 800fecc:	4453      	add	r3, sl
 800fece:	f1c6 0620 	rsb	r6, r6, #32
 800fed2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fed6:	f7fe f8cd 	bl	800e074 <__hi0bits>
 800feda:	42b0      	cmp	r0, r6
 800fedc:	dbe7      	blt.n	800feae <__gethex+0x3ea>
 800fede:	e7f0      	b.n	800fec2 <__gethex+0x3fe>
 800fee0:	08010821 	.word	0x08010821

0800fee4 <L_shift>:
 800fee4:	f1c2 0208 	rsb	r2, r2, #8
 800fee8:	0092      	lsls	r2, r2, #2
 800feea:	b570      	push	{r4, r5, r6, lr}
 800feec:	f1c2 0620 	rsb	r6, r2, #32
 800fef0:	6843      	ldr	r3, [r0, #4]
 800fef2:	6804      	ldr	r4, [r0, #0]
 800fef4:	fa03 f506 	lsl.w	r5, r3, r6
 800fef8:	432c      	orrs	r4, r5
 800fefa:	40d3      	lsrs	r3, r2
 800fefc:	6004      	str	r4, [r0, #0]
 800fefe:	f840 3f04 	str.w	r3, [r0, #4]!
 800ff02:	4288      	cmp	r0, r1
 800ff04:	d3f4      	bcc.n	800fef0 <L_shift+0xc>
 800ff06:	bd70      	pop	{r4, r5, r6, pc}

0800ff08 <__match>:
 800ff08:	b530      	push	{r4, r5, lr}
 800ff0a:	6803      	ldr	r3, [r0, #0]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff12:	b914      	cbnz	r4, 800ff1a <__match+0x12>
 800ff14:	6003      	str	r3, [r0, #0]
 800ff16:	2001      	movs	r0, #1
 800ff18:	bd30      	pop	{r4, r5, pc}
 800ff1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ff22:	2d19      	cmp	r5, #25
 800ff24:	bf98      	it	ls
 800ff26:	3220      	addls	r2, #32
 800ff28:	42a2      	cmp	r2, r4
 800ff2a:	d0f0      	beq.n	800ff0e <__match+0x6>
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	e7f3      	b.n	800ff18 <__match+0x10>

0800ff30 <__hexnan>:
 800ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff34:	680b      	ldr	r3, [r1, #0]
 800ff36:	6801      	ldr	r1, [r0, #0]
 800ff38:	115e      	asrs	r6, r3, #5
 800ff3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff3e:	f013 031f 	ands.w	r3, r3, #31
 800ff42:	b087      	sub	sp, #28
 800ff44:	bf18      	it	ne
 800ff46:	3604      	addne	r6, #4
 800ff48:	2500      	movs	r5, #0
 800ff4a:	1f37      	subs	r7, r6, #4
 800ff4c:	4682      	mov	sl, r0
 800ff4e:	4690      	mov	r8, r2
 800ff50:	9301      	str	r3, [sp, #4]
 800ff52:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff56:	46b9      	mov	r9, r7
 800ff58:	463c      	mov	r4, r7
 800ff5a:	9502      	str	r5, [sp, #8]
 800ff5c:	46ab      	mov	fp, r5
 800ff5e:	784a      	ldrb	r2, [r1, #1]
 800ff60:	1c4b      	adds	r3, r1, #1
 800ff62:	9303      	str	r3, [sp, #12]
 800ff64:	b342      	cbz	r2, 800ffb8 <__hexnan+0x88>
 800ff66:	4610      	mov	r0, r2
 800ff68:	9105      	str	r1, [sp, #20]
 800ff6a:	9204      	str	r2, [sp, #16]
 800ff6c:	f7ff fd94 	bl	800fa98 <__hexdig_fun>
 800ff70:	2800      	cmp	r0, #0
 800ff72:	d151      	bne.n	8010018 <__hexnan+0xe8>
 800ff74:	9a04      	ldr	r2, [sp, #16]
 800ff76:	9905      	ldr	r1, [sp, #20]
 800ff78:	2a20      	cmp	r2, #32
 800ff7a:	d818      	bhi.n	800ffae <__hexnan+0x7e>
 800ff7c:	9b02      	ldr	r3, [sp, #8]
 800ff7e:	459b      	cmp	fp, r3
 800ff80:	dd13      	ble.n	800ffaa <__hexnan+0x7a>
 800ff82:	454c      	cmp	r4, r9
 800ff84:	d206      	bcs.n	800ff94 <__hexnan+0x64>
 800ff86:	2d07      	cmp	r5, #7
 800ff88:	dc04      	bgt.n	800ff94 <__hexnan+0x64>
 800ff8a:	462a      	mov	r2, r5
 800ff8c:	4649      	mov	r1, r9
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f7ff ffa8 	bl	800fee4 <L_shift>
 800ff94:	4544      	cmp	r4, r8
 800ff96:	d952      	bls.n	801003e <__hexnan+0x10e>
 800ff98:	2300      	movs	r3, #0
 800ff9a:	f1a4 0904 	sub.w	r9, r4, #4
 800ff9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ffa2:	f8cd b008 	str.w	fp, [sp, #8]
 800ffa6:	464c      	mov	r4, r9
 800ffa8:	461d      	mov	r5, r3
 800ffaa:	9903      	ldr	r1, [sp, #12]
 800ffac:	e7d7      	b.n	800ff5e <__hexnan+0x2e>
 800ffae:	2a29      	cmp	r2, #41	@ 0x29
 800ffb0:	d157      	bne.n	8010062 <__hexnan+0x132>
 800ffb2:	3102      	adds	r1, #2
 800ffb4:	f8ca 1000 	str.w	r1, [sl]
 800ffb8:	f1bb 0f00 	cmp.w	fp, #0
 800ffbc:	d051      	beq.n	8010062 <__hexnan+0x132>
 800ffbe:	454c      	cmp	r4, r9
 800ffc0:	d206      	bcs.n	800ffd0 <__hexnan+0xa0>
 800ffc2:	2d07      	cmp	r5, #7
 800ffc4:	dc04      	bgt.n	800ffd0 <__hexnan+0xa0>
 800ffc6:	462a      	mov	r2, r5
 800ffc8:	4649      	mov	r1, r9
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7ff ff8a 	bl	800fee4 <L_shift>
 800ffd0:	4544      	cmp	r4, r8
 800ffd2:	d936      	bls.n	8010042 <__hexnan+0x112>
 800ffd4:	f1a8 0204 	sub.w	r2, r8, #4
 800ffd8:	4623      	mov	r3, r4
 800ffda:	f853 1b04 	ldr.w	r1, [r3], #4
 800ffde:	f842 1f04 	str.w	r1, [r2, #4]!
 800ffe2:	429f      	cmp	r7, r3
 800ffe4:	d2f9      	bcs.n	800ffda <__hexnan+0xaa>
 800ffe6:	1b3b      	subs	r3, r7, r4
 800ffe8:	f023 0303 	bic.w	r3, r3, #3
 800ffec:	3304      	adds	r3, #4
 800ffee:	3401      	adds	r4, #1
 800fff0:	3e03      	subs	r6, #3
 800fff2:	42b4      	cmp	r4, r6
 800fff4:	bf88      	it	hi
 800fff6:	2304      	movhi	r3, #4
 800fff8:	4443      	add	r3, r8
 800fffa:	2200      	movs	r2, #0
 800fffc:	f843 2b04 	str.w	r2, [r3], #4
 8010000:	429f      	cmp	r7, r3
 8010002:	d2fb      	bcs.n	800fffc <__hexnan+0xcc>
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	b91b      	cbnz	r3, 8010010 <__hexnan+0xe0>
 8010008:	4547      	cmp	r7, r8
 801000a:	d128      	bne.n	801005e <__hexnan+0x12e>
 801000c:	2301      	movs	r3, #1
 801000e:	603b      	str	r3, [r7, #0]
 8010010:	2005      	movs	r0, #5
 8010012:	b007      	add	sp, #28
 8010014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010018:	3501      	adds	r5, #1
 801001a:	2d08      	cmp	r5, #8
 801001c:	f10b 0b01 	add.w	fp, fp, #1
 8010020:	dd06      	ble.n	8010030 <__hexnan+0x100>
 8010022:	4544      	cmp	r4, r8
 8010024:	d9c1      	bls.n	800ffaa <__hexnan+0x7a>
 8010026:	2300      	movs	r3, #0
 8010028:	f844 3c04 	str.w	r3, [r4, #-4]
 801002c:	2501      	movs	r5, #1
 801002e:	3c04      	subs	r4, #4
 8010030:	6822      	ldr	r2, [r4, #0]
 8010032:	f000 000f 	and.w	r0, r0, #15
 8010036:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801003a:	6020      	str	r0, [r4, #0]
 801003c:	e7b5      	b.n	800ffaa <__hexnan+0x7a>
 801003e:	2508      	movs	r5, #8
 8010040:	e7b3      	b.n	800ffaa <__hexnan+0x7a>
 8010042:	9b01      	ldr	r3, [sp, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d0dd      	beq.n	8010004 <__hexnan+0xd4>
 8010048:	f1c3 0320 	rsb	r3, r3, #32
 801004c:	f04f 32ff 	mov.w	r2, #4294967295
 8010050:	40da      	lsrs	r2, r3
 8010052:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010056:	4013      	ands	r3, r2
 8010058:	f846 3c04 	str.w	r3, [r6, #-4]
 801005c:	e7d2      	b.n	8010004 <__hexnan+0xd4>
 801005e:	3f04      	subs	r7, #4
 8010060:	e7d0      	b.n	8010004 <__hexnan+0xd4>
 8010062:	2004      	movs	r0, #4
 8010064:	e7d5      	b.n	8010012 <__hexnan+0xe2>

08010066 <__ascii_mbtowc>:
 8010066:	b082      	sub	sp, #8
 8010068:	b901      	cbnz	r1, 801006c <__ascii_mbtowc+0x6>
 801006a:	a901      	add	r1, sp, #4
 801006c:	b142      	cbz	r2, 8010080 <__ascii_mbtowc+0x1a>
 801006e:	b14b      	cbz	r3, 8010084 <__ascii_mbtowc+0x1e>
 8010070:	7813      	ldrb	r3, [r2, #0]
 8010072:	600b      	str	r3, [r1, #0]
 8010074:	7812      	ldrb	r2, [r2, #0]
 8010076:	1e10      	subs	r0, r2, #0
 8010078:	bf18      	it	ne
 801007a:	2001      	movne	r0, #1
 801007c:	b002      	add	sp, #8
 801007e:	4770      	bx	lr
 8010080:	4610      	mov	r0, r2
 8010082:	e7fb      	b.n	801007c <__ascii_mbtowc+0x16>
 8010084:	f06f 0001 	mvn.w	r0, #1
 8010088:	e7f8      	b.n	801007c <__ascii_mbtowc+0x16>

0801008a <_realloc_r>:
 801008a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801008e:	4680      	mov	r8, r0
 8010090:	4615      	mov	r5, r2
 8010092:	460c      	mov	r4, r1
 8010094:	b921      	cbnz	r1, 80100a0 <_realloc_r+0x16>
 8010096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801009a:	4611      	mov	r1, r2
 801009c:	f7fd be6c 	b.w	800dd78 <_malloc_r>
 80100a0:	b92a      	cbnz	r2, 80100ae <_realloc_r+0x24>
 80100a2:	f7fd fdf5 	bl	800dc90 <_free_r>
 80100a6:	2400      	movs	r4, #0
 80100a8:	4620      	mov	r0, r4
 80100aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ae:	f000 f840 	bl	8010132 <_malloc_usable_size_r>
 80100b2:	4285      	cmp	r5, r0
 80100b4:	4606      	mov	r6, r0
 80100b6:	d802      	bhi.n	80100be <_realloc_r+0x34>
 80100b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80100bc:	d8f4      	bhi.n	80100a8 <_realloc_r+0x1e>
 80100be:	4629      	mov	r1, r5
 80100c0:	4640      	mov	r0, r8
 80100c2:	f7fd fe59 	bl	800dd78 <_malloc_r>
 80100c6:	4607      	mov	r7, r0
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d0ec      	beq.n	80100a6 <_realloc_r+0x1c>
 80100cc:	42b5      	cmp	r5, r6
 80100ce:	462a      	mov	r2, r5
 80100d0:	4621      	mov	r1, r4
 80100d2:	bf28      	it	cs
 80100d4:	4632      	movcs	r2, r6
 80100d6:	f7fc ff78 	bl	800cfca <memcpy>
 80100da:	4621      	mov	r1, r4
 80100dc:	4640      	mov	r0, r8
 80100de:	f7fd fdd7 	bl	800dc90 <_free_r>
 80100e2:	463c      	mov	r4, r7
 80100e4:	e7e0      	b.n	80100a8 <_realloc_r+0x1e>

080100e6 <__ascii_wctomb>:
 80100e6:	4603      	mov	r3, r0
 80100e8:	4608      	mov	r0, r1
 80100ea:	b141      	cbz	r1, 80100fe <__ascii_wctomb+0x18>
 80100ec:	2aff      	cmp	r2, #255	@ 0xff
 80100ee:	d904      	bls.n	80100fa <__ascii_wctomb+0x14>
 80100f0:	228a      	movs	r2, #138	@ 0x8a
 80100f2:	601a      	str	r2, [r3, #0]
 80100f4:	f04f 30ff 	mov.w	r0, #4294967295
 80100f8:	4770      	bx	lr
 80100fa:	700a      	strb	r2, [r1, #0]
 80100fc:	2001      	movs	r0, #1
 80100fe:	4770      	bx	lr

08010100 <fiprintf>:
 8010100:	b40e      	push	{r1, r2, r3}
 8010102:	b503      	push	{r0, r1, lr}
 8010104:	4601      	mov	r1, r0
 8010106:	ab03      	add	r3, sp, #12
 8010108:	4805      	ldr	r0, [pc, #20]	@ (8010120 <fiprintf+0x20>)
 801010a:	f853 2b04 	ldr.w	r2, [r3], #4
 801010e:	6800      	ldr	r0, [r0, #0]
 8010110:	9301      	str	r3, [sp, #4]
 8010112:	f000 f83f 	bl	8010194 <_vfiprintf_r>
 8010116:	b002      	add	sp, #8
 8010118:	f85d eb04 	ldr.w	lr, [sp], #4
 801011c:	b003      	add	sp, #12
 801011e:	4770      	bx	lr
 8010120:	20000190 	.word	0x20000190

08010124 <abort>:
 8010124:	b508      	push	{r3, lr}
 8010126:	2006      	movs	r0, #6
 8010128:	f000 fa08 	bl	801053c <raise>
 801012c:	2001      	movs	r0, #1
 801012e:	f7f1 fc99 	bl	8001a64 <_exit>

08010132 <_malloc_usable_size_r>:
 8010132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010136:	1f18      	subs	r0, r3, #4
 8010138:	2b00      	cmp	r3, #0
 801013a:	bfbc      	itt	lt
 801013c:	580b      	ldrlt	r3, [r1, r0]
 801013e:	18c0      	addlt	r0, r0, r3
 8010140:	4770      	bx	lr

08010142 <__sfputc_r>:
 8010142:	6893      	ldr	r3, [r2, #8]
 8010144:	3b01      	subs	r3, #1
 8010146:	2b00      	cmp	r3, #0
 8010148:	b410      	push	{r4}
 801014a:	6093      	str	r3, [r2, #8]
 801014c:	da08      	bge.n	8010160 <__sfputc_r+0x1e>
 801014e:	6994      	ldr	r4, [r2, #24]
 8010150:	42a3      	cmp	r3, r4
 8010152:	db01      	blt.n	8010158 <__sfputc_r+0x16>
 8010154:	290a      	cmp	r1, #10
 8010156:	d103      	bne.n	8010160 <__sfputc_r+0x1e>
 8010158:	f85d 4b04 	ldr.w	r4, [sp], #4
 801015c:	f000 b932 	b.w	80103c4 <__swbuf_r>
 8010160:	6813      	ldr	r3, [r2, #0]
 8010162:	1c58      	adds	r0, r3, #1
 8010164:	6010      	str	r0, [r2, #0]
 8010166:	7019      	strb	r1, [r3, #0]
 8010168:	4608      	mov	r0, r1
 801016a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801016e:	4770      	bx	lr

08010170 <__sfputs_r>:
 8010170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010172:	4606      	mov	r6, r0
 8010174:	460f      	mov	r7, r1
 8010176:	4614      	mov	r4, r2
 8010178:	18d5      	adds	r5, r2, r3
 801017a:	42ac      	cmp	r4, r5
 801017c:	d101      	bne.n	8010182 <__sfputs_r+0x12>
 801017e:	2000      	movs	r0, #0
 8010180:	e007      	b.n	8010192 <__sfputs_r+0x22>
 8010182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010186:	463a      	mov	r2, r7
 8010188:	4630      	mov	r0, r6
 801018a:	f7ff ffda 	bl	8010142 <__sfputc_r>
 801018e:	1c43      	adds	r3, r0, #1
 8010190:	d1f3      	bne.n	801017a <__sfputs_r+0xa>
 8010192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010194 <_vfiprintf_r>:
 8010194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010198:	460d      	mov	r5, r1
 801019a:	b09d      	sub	sp, #116	@ 0x74
 801019c:	4614      	mov	r4, r2
 801019e:	4698      	mov	r8, r3
 80101a0:	4606      	mov	r6, r0
 80101a2:	b118      	cbz	r0, 80101ac <_vfiprintf_r+0x18>
 80101a4:	6a03      	ldr	r3, [r0, #32]
 80101a6:	b90b      	cbnz	r3, 80101ac <_vfiprintf_r+0x18>
 80101a8:	f7fc fdc2 	bl	800cd30 <__sinit>
 80101ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101ae:	07d9      	lsls	r1, r3, #31
 80101b0:	d405      	bmi.n	80101be <_vfiprintf_r+0x2a>
 80101b2:	89ab      	ldrh	r3, [r5, #12]
 80101b4:	059a      	lsls	r2, r3, #22
 80101b6:	d402      	bmi.n	80101be <_vfiprintf_r+0x2a>
 80101b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101ba:	f7fc ff04 	bl	800cfc6 <__retarget_lock_acquire_recursive>
 80101be:	89ab      	ldrh	r3, [r5, #12]
 80101c0:	071b      	lsls	r3, r3, #28
 80101c2:	d501      	bpl.n	80101c8 <_vfiprintf_r+0x34>
 80101c4:	692b      	ldr	r3, [r5, #16]
 80101c6:	b99b      	cbnz	r3, 80101f0 <_vfiprintf_r+0x5c>
 80101c8:	4629      	mov	r1, r5
 80101ca:	4630      	mov	r0, r6
 80101cc:	f000 f938 	bl	8010440 <__swsetup_r>
 80101d0:	b170      	cbz	r0, 80101f0 <_vfiprintf_r+0x5c>
 80101d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101d4:	07dc      	lsls	r4, r3, #31
 80101d6:	d504      	bpl.n	80101e2 <_vfiprintf_r+0x4e>
 80101d8:	f04f 30ff 	mov.w	r0, #4294967295
 80101dc:	b01d      	add	sp, #116	@ 0x74
 80101de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e2:	89ab      	ldrh	r3, [r5, #12]
 80101e4:	0598      	lsls	r0, r3, #22
 80101e6:	d4f7      	bmi.n	80101d8 <_vfiprintf_r+0x44>
 80101e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101ea:	f7fc feed 	bl	800cfc8 <__retarget_lock_release_recursive>
 80101ee:	e7f3      	b.n	80101d8 <_vfiprintf_r+0x44>
 80101f0:	2300      	movs	r3, #0
 80101f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80101f4:	2320      	movs	r3, #32
 80101f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80101fe:	2330      	movs	r3, #48	@ 0x30
 8010200:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103b0 <_vfiprintf_r+0x21c>
 8010204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010208:	f04f 0901 	mov.w	r9, #1
 801020c:	4623      	mov	r3, r4
 801020e:	469a      	mov	sl, r3
 8010210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010214:	b10a      	cbz	r2, 801021a <_vfiprintf_r+0x86>
 8010216:	2a25      	cmp	r2, #37	@ 0x25
 8010218:	d1f9      	bne.n	801020e <_vfiprintf_r+0x7a>
 801021a:	ebba 0b04 	subs.w	fp, sl, r4
 801021e:	d00b      	beq.n	8010238 <_vfiprintf_r+0xa4>
 8010220:	465b      	mov	r3, fp
 8010222:	4622      	mov	r2, r4
 8010224:	4629      	mov	r1, r5
 8010226:	4630      	mov	r0, r6
 8010228:	f7ff ffa2 	bl	8010170 <__sfputs_r>
 801022c:	3001      	adds	r0, #1
 801022e:	f000 80a7 	beq.w	8010380 <_vfiprintf_r+0x1ec>
 8010232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010234:	445a      	add	r2, fp
 8010236:	9209      	str	r2, [sp, #36]	@ 0x24
 8010238:	f89a 3000 	ldrb.w	r3, [sl]
 801023c:	2b00      	cmp	r3, #0
 801023e:	f000 809f 	beq.w	8010380 <_vfiprintf_r+0x1ec>
 8010242:	2300      	movs	r3, #0
 8010244:	f04f 32ff 	mov.w	r2, #4294967295
 8010248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801024c:	f10a 0a01 	add.w	sl, sl, #1
 8010250:	9304      	str	r3, [sp, #16]
 8010252:	9307      	str	r3, [sp, #28]
 8010254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010258:	931a      	str	r3, [sp, #104]	@ 0x68
 801025a:	4654      	mov	r4, sl
 801025c:	2205      	movs	r2, #5
 801025e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010262:	4853      	ldr	r0, [pc, #332]	@ (80103b0 <_vfiprintf_r+0x21c>)
 8010264:	f7ef ffb4 	bl	80001d0 <memchr>
 8010268:	9a04      	ldr	r2, [sp, #16]
 801026a:	b9d8      	cbnz	r0, 80102a4 <_vfiprintf_r+0x110>
 801026c:	06d1      	lsls	r1, r2, #27
 801026e:	bf44      	itt	mi
 8010270:	2320      	movmi	r3, #32
 8010272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010276:	0713      	lsls	r3, r2, #28
 8010278:	bf44      	itt	mi
 801027a:	232b      	movmi	r3, #43	@ 0x2b
 801027c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010280:	f89a 3000 	ldrb.w	r3, [sl]
 8010284:	2b2a      	cmp	r3, #42	@ 0x2a
 8010286:	d015      	beq.n	80102b4 <_vfiprintf_r+0x120>
 8010288:	9a07      	ldr	r2, [sp, #28]
 801028a:	4654      	mov	r4, sl
 801028c:	2000      	movs	r0, #0
 801028e:	f04f 0c0a 	mov.w	ip, #10
 8010292:	4621      	mov	r1, r4
 8010294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010298:	3b30      	subs	r3, #48	@ 0x30
 801029a:	2b09      	cmp	r3, #9
 801029c:	d94b      	bls.n	8010336 <_vfiprintf_r+0x1a2>
 801029e:	b1b0      	cbz	r0, 80102ce <_vfiprintf_r+0x13a>
 80102a0:	9207      	str	r2, [sp, #28]
 80102a2:	e014      	b.n	80102ce <_vfiprintf_r+0x13a>
 80102a4:	eba0 0308 	sub.w	r3, r0, r8
 80102a8:	fa09 f303 	lsl.w	r3, r9, r3
 80102ac:	4313      	orrs	r3, r2
 80102ae:	9304      	str	r3, [sp, #16]
 80102b0:	46a2      	mov	sl, r4
 80102b2:	e7d2      	b.n	801025a <_vfiprintf_r+0xc6>
 80102b4:	9b03      	ldr	r3, [sp, #12]
 80102b6:	1d19      	adds	r1, r3, #4
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	9103      	str	r1, [sp, #12]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	bfbb      	ittet	lt
 80102c0:	425b      	neglt	r3, r3
 80102c2:	f042 0202 	orrlt.w	r2, r2, #2
 80102c6:	9307      	strge	r3, [sp, #28]
 80102c8:	9307      	strlt	r3, [sp, #28]
 80102ca:	bfb8      	it	lt
 80102cc:	9204      	strlt	r2, [sp, #16]
 80102ce:	7823      	ldrb	r3, [r4, #0]
 80102d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80102d2:	d10a      	bne.n	80102ea <_vfiprintf_r+0x156>
 80102d4:	7863      	ldrb	r3, [r4, #1]
 80102d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80102d8:	d132      	bne.n	8010340 <_vfiprintf_r+0x1ac>
 80102da:	9b03      	ldr	r3, [sp, #12]
 80102dc:	1d1a      	adds	r2, r3, #4
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	9203      	str	r2, [sp, #12]
 80102e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102e6:	3402      	adds	r4, #2
 80102e8:	9305      	str	r3, [sp, #20]
 80102ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80103c0 <_vfiprintf_r+0x22c>
 80102ee:	7821      	ldrb	r1, [r4, #0]
 80102f0:	2203      	movs	r2, #3
 80102f2:	4650      	mov	r0, sl
 80102f4:	f7ef ff6c 	bl	80001d0 <memchr>
 80102f8:	b138      	cbz	r0, 801030a <_vfiprintf_r+0x176>
 80102fa:	9b04      	ldr	r3, [sp, #16]
 80102fc:	eba0 000a 	sub.w	r0, r0, sl
 8010300:	2240      	movs	r2, #64	@ 0x40
 8010302:	4082      	lsls	r2, r0
 8010304:	4313      	orrs	r3, r2
 8010306:	3401      	adds	r4, #1
 8010308:	9304      	str	r3, [sp, #16]
 801030a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801030e:	4829      	ldr	r0, [pc, #164]	@ (80103b4 <_vfiprintf_r+0x220>)
 8010310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010314:	2206      	movs	r2, #6
 8010316:	f7ef ff5b 	bl	80001d0 <memchr>
 801031a:	2800      	cmp	r0, #0
 801031c:	d03f      	beq.n	801039e <_vfiprintf_r+0x20a>
 801031e:	4b26      	ldr	r3, [pc, #152]	@ (80103b8 <_vfiprintf_r+0x224>)
 8010320:	bb1b      	cbnz	r3, 801036a <_vfiprintf_r+0x1d6>
 8010322:	9b03      	ldr	r3, [sp, #12]
 8010324:	3307      	adds	r3, #7
 8010326:	f023 0307 	bic.w	r3, r3, #7
 801032a:	3308      	adds	r3, #8
 801032c:	9303      	str	r3, [sp, #12]
 801032e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010330:	443b      	add	r3, r7
 8010332:	9309      	str	r3, [sp, #36]	@ 0x24
 8010334:	e76a      	b.n	801020c <_vfiprintf_r+0x78>
 8010336:	fb0c 3202 	mla	r2, ip, r2, r3
 801033a:	460c      	mov	r4, r1
 801033c:	2001      	movs	r0, #1
 801033e:	e7a8      	b.n	8010292 <_vfiprintf_r+0xfe>
 8010340:	2300      	movs	r3, #0
 8010342:	3401      	adds	r4, #1
 8010344:	9305      	str	r3, [sp, #20]
 8010346:	4619      	mov	r1, r3
 8010348:	f04f 0c0a 	mov.w	ip, #10
 801034c:	4620      	mov	r0, r4
 801034e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010352:	3a30      	subs	r2, #48	@ 0x30
 8010354:	2a09      	cmp	r2, #9
 8010356:	d903      	bls.n	8010360 <_vfiprintf_r+0x1cc>
 8010358:	2b00      	cmp	r3, #0
 801035a:	d0c6      	beq.n	80102ea <_vfiprintf_r+0x156>
 801035c:	9105      	str	r1, [sp, #20]
 801035e:	e7c4      	b.n	80102ea <_vfiprintf_r+0x156>
 8010360:	fb0c 2101 	mla	r1, ip, r1, r2
 8010364:	4604      	mov	r4, r0
 8010366:	2301      	movs	r3, #1
 8010368:	e7f0      	b.n	801034c <_vfiprintf_r+0x1b8>
 801036a:	ab03      	add	r3, sp, #12
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	462a      	mov	r2, r5
 8010370:	4b12      	ldr	r3, [pc, #72]	@ (80103bc <_vfiprintf_r+0x228>)
 8010372:	a904      	add	r1, sp, #16
 8010374:	4630      	mov	r0, r6
 8010376:	f7fb fe83 	bl	800c080 <_printf_float>
 801037a:	4607      	mov	r7, r0
 801037c:	1c78      	adds	r0, r7, #1
 801037e:	d1d6      	bne.n	801032e <_vfiprintf_r+0x19a>
 8010380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010382:	07d9      	lsls	r1, r3, #31
 8010384:	d405      	bmi.n	8010392 <_vfiprintf_r+0x1fe>
 8010386:	89ab      	ldrh	r3, [r5, #12]
 8010388:	059a      	lsls	r2, r3, #22
 801038a:	d402      	bmi.n	8010392 <_vfiprintf_r+0x1fe>
 801038c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801038e:	f7fc fe1b 	bl	800cfc8 <__retarget_lock_release_recursive>
 8010392:	89ab      	ldrh	r3, [r5, #12]
 8010394:	065b      	lsls	r3, r3, #25
 8010396:	f53f af1f 	bmi.w	80101d8 <_vfiprintf_r+0x44>
 801039a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801039c:	e71e      	b.n	80101dc <_vfiprintf_r+0x48>
 801039e:	ab03      	add	r3, sp, #12
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	462a      	mov	r2, r5
 80103a4:	4b05      	ldr	r3, [pc, #20]	@ (80103bc <_vfiprintf_r+0x228>)
 80103a6:	a904      	add	r1, sp, #16
 80103a8:	4630      	mov	r0, r6
 80103aa:	f7fc f901 	bl	800c5b0 <_printf_i>
 80103ae:	e7e4      	b.n	801037a <_vfiprintf_r+0x1e6>
 80103b0:	08010ae1 	.word	0x08010ae1
 80103b4:	08010aeb 	.word	0x08010aeb
 80103b8:	0800c081 	.word	0x0800c081
 80103bc:	08010171 	.word	0x08010171
 80103c0:	08010ae7 	.word	0x08010ae7

080103c4 <__swbuf_r>:
 80103c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c6:	460e      	mov	r6, r1
 80103c8:	4614      	mov	r4, r2
 80103ca:	4605      	mov	r5, r0
 80103cc:	b118      	cbz	r0, 80103d6 <__swbuf_r+0x12>
 80103ce:	6a03      	ldr	r3, [r0, #32]
 80103d0:	b90b      	cbnz	r3, 80103d6 <__swbuf_r+0x12>
 80103d2:	f7fc fcad 	bl	800cd30 <__sinit>
 80103d6:	69a3      	ldr	r3, [r4, #24]
 80103d8:	60a3      	str	r3, [r4, #8]
 80103da:	89a3      	ldrh	r3, [r4, #12]
 80103dc:	071a      	lsls	r2, r3, #28
 80103de:	d501      	bpl.n	80103e4 <__swbuf_r+0x20>
 80103e0:	6923      	ldr	r3, [r4, #16]
 80103e2:	b943      	cbnz	r3, 80103f6 <__swbuf_r+0x32>
 80103e4:	4621      	mov	r1, r4
 80103e6:	4628      	mov	r0, r5
 80103e8:	f000 f82a 	bl	8010440 <__swsetup_r>
 80103ec:	b118      	cbz	r0, 80103f6 <__swbuf_r+0x32>
 80103ee:	f04f 37ff 	mov.w	r7, #4294967295
 80103f2:	4638      	mov	r0, r7
 80103f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103f6:	6823      	ldr	r3, [r4, #0]
 80103f8:	6922      	ldr	r2, [r4, #16]
 80103fa:	1a98      	subs	r0, r3, r2
 80103fc:	6963      	ldr	r3, [r4, #20]
 80103fe:	b2f6      	uxtb	r6, r6
 8010400:	4283      	cmp	r3, r0
 8010402:	4637      	mov	r7, r6
 8010404:	dc05      	bgt.n	8010412 <__swbuf_r+0x4e>
 8010406:	4621      	mov	r1, r4
 8010408:	4628      	mov	r0, r5
 801040a:	f7ff fa53 	bl	800f8b4 <_fflush_r>
 801040e:	2800      	cmp	r0, #0
 8010410:	d1ed      	bne.n	80103ee <__swbuf_r+0x2a>
 8010412:	68a3      	ldr	r3, [r4, #8]
 8010414:	3b01      	subs	r3, #1
 8010416:	60a3      	str	r3, [r4, #8]
 8010418:	6823      	ldr	r3, [r4, #0]
 801041a:	1c5a      	adds	r2, r3, #1
 801041c:	6022      	str	r2, [r4, #0]
 801041e:	701e      	strb	r6, [r3, #0]
 8010420:	6962      	ldr	r2, [r4, #20]
 8010422:	1c43      	adds	r3, r0, #1
 8010424:	429a      	cmp	r2, r3
 8010426:	d004      	beq.n	8010432 <__swbuf_r+0x6e>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	07db      	lsls	r3, r3, #31
 801042c:	d5e1      	bpl.n	80103f2 <__swbuf_r+0x2e>
 801042e:	2e0a      	cmp	r6, #10
 8010430:	d1df      	bne.n	80103f2 <__swbuf_r+0x2e>
 8010432:	4621      	mov	r1, r4
 8010434:	4628      	mov	r0, r5
 8010436:	f7ff fa3d 	bl	800f8b4 <_fflush_r>
 801043a:	2800      	cmp	r0, #0
 801043c:	d0d9      	beq.n	80103f2 <__swbuf_r+0x2e>
 801043e:	e7d6      	b.n	80103ee <__swbuf_r+0x2a>

08010440 <__swsetup_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4b29      	ldr	r3, [pc, #164]	@ (80104e8 <__swsetup_r+0xa8>)
 8010444:	4605      	mov	r5, r0
 8010446:	6818      	ldr	r0, [r3, #0]
 8010448:	460c      	mov	r4, r1
 801044a:	b118      	cbz	r0, 8010454 <__swsetup_r+0x14>
 801044c:	6a03      	ldr	r3, [r0, #32]
 801044e:	b90b      	cbnz	r3, 8010454 <__swsetup_r+0x14>
 8010450:	f7fc fc6e 	bl	800cd30 <__sinit>
 8010454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010458:	0719      	lsls	r1, r3, #28
 801045a:	d422      	bmi.n	80104a2 <__swsetup_r+0x62>
 801045c:	06da      	lsls	r2, r3, #27
 801045e:	d407      	bmi.n	8010470 <__swsetup_r+0x30>
 8010460:	2209      	movs	r2, #9
 8010462:	602a      	str	r2, [r5, #0]
 8010464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010468:	81a3      	strh	r3, [r4, #12]
 801046a:	f04f 30ff 	mov.w	r0, #4294967295
 801046e:	e033      	b.n	80104d8 <__swsetup_r+0x98>
 8010470:	0758      	lsls	r0, r3, #29
 8010472:	d512      	bpl.n	801049a <__swsetup_r+0x5a>
 8010474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010476:	b141      	cbz	r1, 801048a <__swsetup_r+0x4a>
 8010478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801047c:	4299      	cmp	r1, r3
 801047e:	d002      	beq.n	8010486 <__swsetup_r+0x46>
 8010480:	4628      	mov	r0, r5
 8010482:	f7fd fc05 	bl	800dc90 <_free_r>
 8010486:	2300      	movs	r3, #0
 8010488:	6363      	str	r3, [r4, #52]	@ 0x34
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010490:	81a3      	strh	r3, [r4, #12]
 8010492:	2300      	movs	r3, #0
 8010494:	6063      	str	r3, [r4, #4]
 8010496:	6923      	ldr	r3, [r4, #16]
 8010498:	6023      	str	r3, [r4, #0]
 801049a:	89a3      	ldrh	r3, [r4, #12]
 801049c:	f043 0308 	orr.w	r3, r3, #8
 80104a0:	81a3      	strh	r3, [r4, #12]
 80104a2:	6923      	ldr	r3, [r4, #16]
 80104a4:	b94b      	cbnz	r3, 80104ba <__swsetup_r+0x7a>
 80104a6:	89a3      	ldrh	r3, [r4, #12]
 80104a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80104ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104b0:	d003      	beq.n	80104ba <__swsetup_r+0x7a>
 80104b2:	4621      	mov	r1, r4
 80104b4:	4628      	mov	r0, r5
 80104b6:	f000 f883 	bl	80105c0 <__smakebuf_r>
 80104ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104be:	f013 0201 	ands.w	r2, r3, #1
 80104c2:	d00a      	beq.n	80104da <__swsetup_r+0x9a>
 80104c4:	2200      	movs	r2, #0
 80104c6:	60a2      	str	r2, [r4, #8]
 80104c8:	6962      	ldr	r2, [r4, #20]
 80104ca:	4252      	negs	r2, r2
 80104cc:	61a2      	str	r2, [r4, #24]
 80104ce:	6922      	ldr	r2, [r4, #16]
 80104d0:	b942      	cbnz	r2, 80104e4 <__swsetup_r+0xa4>
 80104d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80104d6:	d1c5      	bne.n	8010464 <__swsetup_r+0x24>
 80104d8:	bd38      	pop	{r3, r4, r5, pc}
 80104da:	0799      	lsls	r1, r3, #30
 80104dc:	bf58      	it	pl
 80104de:	6962      	ldrpl	r2, [r4, #20]
 80104e0:	60a2      	str	r2, [r4, #8]
 80104e2:	e7f4      	b.n	80104ce <__swsetup_r+0x8e>
 80104e4:	2000      	movs	r0, #0
 80104e6:	e7f7      	b.n	80104d8 <__swsetup_r+0x98>
 80104e8:	20000190 	.word	0x20000190

080104ec <_raise_r>:
 80104ec:	291f      	cmp	r1, #31
 80104ee:	b538      	push	{r3, r4, r5, lr}
 80104f0:	4605      	mov	r5, r0
 80104f2:	460c      	mov	r4, r1
 80104f4:	d904      	bls.n	8010500 <_raise_r+0x14>
 80104f6:	2316      	movs	r3, #22
 80104f8:	6003      	str	r3, [r0, #0]
 80104fa:	f04f 30ff 	mov.w	r0, #4294967295
 80104fe:	bd38      	pop	{r3, r4, r5, pc}
 8010500:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010502:	b112      	cbz	r2, 801050a <_raise_r+0x1e>
 8010504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010508:	b94b      	cbnz	r3, 801051e <_raise_r+0x32>
 801050a:	4628      	mov	r0, r5
 801050c:	f000 f830 	bl	8010570 <_getpid_r>
 8010510:	4622      	mov	r2, r4
 8010512:	4601      	mov	r1, r0
 8010514:	4628      	mov	r0, r5
 8010516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801051a:	f000 b817 	b.w	801054c <_kill_r>
 801051e:	2b01      	cmp	r3, #1
 8010520:	d00a      	beq.n	8010538 <_raise_r+0x4c>
 8010522:	1c59      	adds	r1, r3, #1
 8010524:	d103      	bne.n	801052e <_raise_r+0x42>
 8010526:	2316      	movs	r3, #22
 8010528:	6003      	str	r3, [r0, #0]
 801052a:	2001      	movs	r0, #1
 801052c:	e7e7      	b.n	80104fe <_raise_r+0x12>
 801052e:	2100      	movs	r1, #0
 8010530:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010534:	4620      	mov	r0, r4
 8010536:	4798      	blx	r3
 8010538:	2000      	movs	r0, #0
 801053a:	e7e0      	b.n	80104fe <_raise_r+0x12>

0801053c <raise>:
 801053c:	4b02      	ldr	r3, [pc, #8]	@ (8010548 <raise+0xc>)
 801053e:	4601      	mov	r1, r0
 8010540:	6818      	ldr	r0, [r3, #0]
 8010542:	f7ff bfd3 	b.w	80104ec <_raise_r>
 8010546:	bf00      	nop
 8010548:	20000190 	.word	0x20000190

0801054c <_kill_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4d07      	ldr	r5, [pc, #28]	@ (801056c <_kill_r+0x20>)
 8010550:	2300      	movs	r3, #0
 8010552:	4604      	mov	r4, r0
 8010554:	4608      	mov	r0, r1
 8010556:	4611      	mov	r1, r2
 8010558:	602b      	str	r3, [r5, #0]
 801055a:	f7f1 fa73 	bl	8001a44 <_kill>
 801055e:	1c43      	adds	r3, r0, #1
 8010560:	d102      	bne.n	8010568 <_kill_r+0x1c>
 8010562:	682b      	ldr	r3, [r5, #0]
 8010564:	b103      	cbz	r3, 8010568 <_kill_r+0x1c>
 8010566:	6023      	str	r3, [r4, #0]
 8010568:	bd38      	pop	{r3, r4, r5, pc}
 801056a:	bf00      	nop
 801056c:	20001c50 	.word	0x20001c50

08010570 <_getpid_r>:
 8010570:	f7f1 ba60 	b.w	8001a34 <_getpid>

08010574 <__swhatbuf_r>:
 8010574:	b570      	push	{r4, r5, r6, lr}
 8010576:	460c      	mov	r4, r1
 8010578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801057c:	2900      	cmp	r1, #0
 801057e:	b096      	sub	sp, #88	@ 0x58
 8010580:	4615      	mov	r5, r2
 8010582:	461e      	mov	r6, r3
 8010584:	da0d      	bge.n	80105a2 <__swhatbuf_r+0x2e>
 8010586:	89a3      	ldrh	r3, [r4, #12]
 8010588:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801058c:	f04f 0100 	mov.w	r1, #0
 8010590:	bf14      	ite	ne
 8010592:	2340      	movne	r3, #64	@ 0x40
 8010594:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010598:	2000      	movs	r0, #0
 801059a:	6031      	str	r1, [r6, #0]
 801059c:	602b      	str	r3, [r5, #0]
 801059e:	b016      	add	sp, #88	@ 0x58
 80105a0:	bd70      	pop	{r4, r5, r6, pc}
 80105a2:	466a      	mov	r2, sp
 80105a4:	f000 f848 	bl	8010638 <_fstat_r>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	dbec      	blt.n	8010586 <__swhatbuf_r+0x12>
 80105ac:	9901      	ldr	r1, [sp, #4]
 80105ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80105b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80105b6:	4259      	negs	r1, r3
 80105b8:	4159      	adcs	r1, r3
 80105ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105be:	e7eb      	b.n	8010598 <__swhatbuf_r+0x24>

080105c0 <__smakebuf_r>:
 80105c0:	898b      	ldrh	r3, [r1, #12]
 80105c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105c4:	079d      	lsls	r5, r3, #30
 80105c6:	4606      	mov	r6, r0
 80105c8:	460c      	mov	r4, r1
 80105ca:	d507      	bpl.n	80105dc <__smakebuf_r+0x1c>
 80105cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105d0:	6023      	str	r3, [r4, #0]
 80105d2:	6123      	str	r3, [r4, #16]
 80105d4:	2301      	movs	r3, #1
 80105d6:	6163      	str	r3, [r4, #20]
 80105d8:	b003      	add	sp, #12
 80105da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105dc:	ab01      	add	r3, sp, #4
 80105de:	466a      	mov	r2, sp
 80105e0:	f7ff ffc8 	bl	8010574 <__swhatbuf_r>
 80105e4:	9f00      	ldr	r7, [sp, #0]
 80105e6:	4605      	mov	r5, r0
 80105e8:	4639      	mov	r1, r7
 80105ea:	4630      	mov	r0, r6
 80105ec:	f7fd fbc4 	bl	800dd78 <_malloc_r>
 80105f0:	b948      	cbnz	r0, 8010606 <__smakebuf_r+0x46>
 80105f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105f6:	059a      	lsls	r2, r3, #22
 80105f8:	d4ee      	bmi.n	80105d8 <__smakebuf_r+0x18>
 80105fa:	f023 0303 	bic.w	r3, r3, #3
 80105fe:	f043 0302 	orr.w	r3, r3, #2
 8010602:	81a3      	strh	r3, [r4, #12]
 8010604:	e7e2      	b.n	80105cc <__smakebuf_r+0xc>
 8010606:	89a3      	ldrh	r3, [r4, #12]
 8010608:	6020      	str	r0, [r4, #0]
 801060a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801060e:	81a3      	strh	r3, [r4, #12]
 8010610:	9b01      	ldr	r3, [sp, #4]
 8010612:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010616:	b15b      	cbz	r3, 8010630 <__smakebuf_r+0x70>
 8010618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801061c:	4630      	mov	r0, r6
 801061e:	f000 f81d 	bl	801065c <_isatty_r>
 8010622:	b128      	cbz	r0, 8010630 <__smakebuf_r+0x70>
 8010624:	89a3      	ldrh	r3, [r4, #12]
 8010626:	f023 0303 	bic.w	r3, r3, #3
 801062a:	f043 0301 	orr.w	r3, r3, #1
 801062e:	81a3      	strh	r3, [r4, #12]
 8010630:	89a3      	ldrh	r3, [r4, #12]
 8010632:	431d      	orrs	r5, r3
 8010634:	81a5      	strh	r5, [r4, #12]
 8010636:	e7cf      	b.n	80105d8 <__smakebuf_r+0x18>

08010638 <_fstat_r>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d07      	ldr	r5, [pc, #28]	@ (8010658 <_fstat_r+0x20>)
 801063c:	2300      	movs	r3, #0
 801063e:	4604      	mov	r4, r0
 8010640:	4608      	mov	r0, r1
 8010642:	4611      	mov	r1, r2
 8010644:	602b      	str	r3, [r5, #0]
 8010646:	f7f1 fa5d 	bl	8001b04 <_fstat>
 801064a:	1c43      	adds	r3, r0, #1
 801064c:	d102      	bne.n	8010654 <_fstat_r+0x1c>
 801064e:	682b      	ldr	r3, [r5, #0]
 8010650:	b103      	cbz	r3, 8010654 <_fstat_r+0x1c>
 8010652:	6023      	str	r3, [r4, #0]
 8010654:	bd38      	pop	{r3, r4, r5, pc}
 8010656:	bf00      	nop
 8010658:	20001c50 	.word	0x20001c50

0801065c <_isatty_r>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	4d06      	ldr	r5, [pc, #24]	@ (8010678 <_isatty_r+0x1c>)
 8010660:	2300      	movs	r3, #0
 8010662:	4604      	mov	r4, r0
 8010664:	4608      	mov	r0, r1
 8010666:	602b      	str	r3, [r5, #0]
 8010668:	f7f1 fa5c 	bl	8001b24 <_isatty>
 801066c:	1c43      	adds	r3, r0, #1
 801066e:	d102      	bne.n	8010676 <_isatty_r+0x1a>
 8010670:	682b      	ldr	r3, [r5, #0]
 8010672:	b103      	cbz	r3, 8010676 <_isatty_r+0x1a>
 8010674:	6023      	str	r3, [r4, #0]
 8010676:	bd38      	pop	{r3, r4, r5, pc}
 8010678:	20001c50 	.word	0x20001c50

0801067c <_init>:
 801067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067e:	bf00      	nop
 8010680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010682:	bc08      	pop	{r3}
 8010684:	469e      	mov	lr, r3
 8010686:	4770      	bx	lr

08010688 <_fini>:
 8010688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801068a:	bf00      	nop
 801068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801068e:	bc08      	pop	{r3}
 8010690:	469e      	mov	lr, r3
 8010692:	4770      	bx	lr
