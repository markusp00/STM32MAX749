
STM32MAX749Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800f690  0800f690  00010690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb70  0800fb70  00011344  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb70  0800fb70  00010b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb78  0800fb78  00011344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb78  0800fb78  00010b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb7c  0800fb7c  00010b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800fb80  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011344  2**0
                  CONTENTS
 10 .bss          00001494  20000344  20000344  00011344  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200017d8  200017d8  00011344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011344  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016359  00000000  00000000  00011374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c21  00000000  00000000  000276cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0002b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e79  00000000  00000000  0002c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002236b  00000000  00000000  0002d491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6d7  00000000  00000000  0004f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bcd9e  00000000  00000000  0006aed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127c71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063f4  00000000  00000000  00127cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0012e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000344 	.word	0x20000344
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f674 	.word	0x0800f674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000348 	.word	0x20000348
 80001cc:	0800f674 	.word	0x0800f674

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <Read_ADC_Value>:
static void MX_ADC1_Init(void);
static void MX_DAC_Init(void);
/* USER CODE BEGIN PFP */
// Function to read ADC value from channel IN2 (PA1)
uint32_t Read_ADC_Value(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // Start the ADC conversion
 8000cf8:	480b      	ldr	r0, [pc, #44]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000cfa:	f000 ff99 	bl	8001c30 <HAL_ADC_Start>

    // Wait for the conversion to complete
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8000d02:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000d04:	f001 f8e0 	bl	8001ec8 <HAL_ADC_PollForConversion>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d105      	bne.n	8000d1a <Read_ADC_Value+0x26>
    {
        ADC_val = HAL_ADC_GetValue(&hadc1);  // Read the ADC converted value
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000d10:	f001 f9dc 	bl	80020cc <HAL_ADC_GetValue>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <Read_ADC_Value+0x38>)
 8000d18:	6013      	str	r3, [r2, #0]
    }

    HAL_ADC_Stop(&hadc1);  // Stop the ADC
 8000d1a:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <Read_ADC_Value+0x34>)
 8000d1c:	f001 f89e 	bl	8001e5c <HAL_ADC_Stop>
    return ADC_val;      // Return the ADC value
 8000d20:	4b02      	ldr	r3, [pc, #8]	@ (8000d2c <Read_ADC_Value+0x38>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000360 	.word	0x20000360
 8000d2c:	200004bc 	.word	0x200004bc

08000d30 <Set_DAC_Output>:

void Set_DAC_Output(uint32_t value)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    if(value > 4096) value = 4096;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d3e:	d902      	bls.n	8000d46 <Set_DAC_Output+0x16>
 8000d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d44:	607b      	str	r3, [r7, #4]
    else if(value < 0) value = 0;

	// Start the DAC if not already started
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d46:	2100      	movs	r1, #0
 8000d48:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <Set_DAC_Output+0x34>)
 8000d4a:	f002 f881 	bl	8002e50 <HAL_DAC_Start>

    // Set the DAC value (assuming a 12-bit value)
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <Set_DAC_Output+0x34>)
 8000d56:	f002 f856 	bl	8002e06 <HAL_DAC_SetValue>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200003b0 	.word	0x200003b0

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b096      	sub	sp, #88	@ 0x58
 8000d6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6e:	f000 fcf5 	bl	800175c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d72:	f000 f893 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d76:	f000 fa0d 	bl	8001194 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d7a:	f000 f98d 	bl	8001098 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d7e:	f000 f9cb 	bl	8001118 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000d82:	f000 f8ef 	bl	8000f64 <MX_ADC1_Init>
  MX_DAC_Init();
 8000d86:	f000 f95d 	bl	8001044 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000d8a:	f009 fbf7 	bl	800a57c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  // Buffer for USB_COM
  char txBuf[64];
  uint16_t temp_num = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(rxBuf[0] == 117) (DAC_val = DAC_val + 1);
 8000d94:	4b3a      	ldr	r3, [pc, #232]	@ (8000e80 <main+0x118>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b75      	cmp	r3, #117	@ 0x75
 8000d9a:	d105      	bne.n	8000da8 <main+0x40>
 8000d9c:	4b39      	ldr	r3, [pc, #228]	@ (8000e84 <main+0x11c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a38      	ldr	r2, [pc, #224]	@ (8000e84 <main+0x11c>)
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e008      	b.n	8000dba <main+0x52>
	else if(rxBuf[0] == 100) (DAC_val = DAC_val - 1);
 8000da8:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <main+0x118>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b64      	cmp	r3, #100	@ 0x64
 8000dae:	d104      	bne.n	8000dba <main+0x52>
 8000db0:	4b34      	ldr	r3, [pc, #208]	@ (8000e84 <main+0x11c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	4a33      	ldr	r2, [pc, #204]	@ (8000e84 <main+0x11c>)
 8000db8:	6013      	str	r3, [r2, #0]

	if(DAC_val > 4096) DAC_val = 4096;
 8000dba:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <main+0x11c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000dc2:	d903      	bls.n	8000dcc <main+0x64>
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <main+0x11c>)
 8000dc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dca:	601a      	str	r2, [r3, #0]
	else if (DAC_val < 0) DAC_val = 0;

	HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f000 fd2b 	bl	8001828 <HAL_Delay>
	ADC_val = Read_ADC_Value();
 8000dd2:	f7ff ff8f 	bl	8000cf4 <Read_ADC_Value>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e88 <main+0x120>)
 8000dda:	6013      	str	r3, [r2, #0]
	measured_voltage = ((float)ADC_val / 4096) * 3.3;
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e88 <main+0x120>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000e8c <main+0x124>
 8000dec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000df0:	ee16 0a90 	vmov	r0, s13
 8000df4:	f7ff fba8 	bl	8000548 <__aeabi_f2d>
 8000df8:	a31f      	add	r3, pc, #124	@ (adr r3, 8000e78 <main+0x110>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff fbfb 	bl	80005f8 <__aeabi_dmul>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff feed 	bl	8000be8 <__aeabi_d2f>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a1f      	ldr	r2, [pc, #124]	@ (8000e90 <main+0x128>)
 8000e12:	6013      	str	r3, [r2, #0]
	temp_num = temp_num + 1;
 8000e14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	Set_DAC_Output(DAC_val);
 8000e1e:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <main+0x11c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff84 	bl	8000d30 <Set_DAC_Output>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000e28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2c:	4819      	ldr	r0, [pc, #100]	@ (8000e94 <main+0x12c>)
 8000e2e:	f002 fa39 	bl	80032a4 <HAL_GPIO_TogglePin>
//	  snprintf(txBuf, sizeof(txBuf), "Number: %d \r\n", temp_num);
//	  CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
	  snprintf(txBuf, sizeof(txBuf), "DAC_val: %ld \t ADC value: %ld \t Measured voltage: %f \r\n", DAC_val, ADC_val, measured_voltage);
 8000e32:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <main+0x11c>)
 8000e34:	681d      	ldr	r5, [r3, #0]
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <main+0x120>)
 8000e38:	681c      	ldr	r4, [r3, #0]
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <main+0x128>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb82 	bl	8000548 <__aeabi_f2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	1d38      	adds	r0, r7, #4
 8000e4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e4e:	9400      	str	r4, [sp, #0]
 8000e50:	462b      	mov	r3, r5
 8000e52:	4a11      	ldr	r2, [pc, #68]	@ (8000e98 <main+0x130>)
 8000e54:	2140      	movs	r1, #64	@ 0x40
 8000e56:	f00a ff9d 	bl	800bd94 <sniprintf>
	  CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fa07 	bl	8000270 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fc5a 	bl	800a724 <CDC_Transmit_FS>
	if(rxBuf[0] == 117) (DAC_val = DAC_val + 1);
 8000e70:	e790      	b.n	8000d94 <main+0x2c>
 8000e72:	bf00      	nop
 8000e74:	f3af 8000 	nop.w
 8000e78:	66666666 	.word	0x66666666
 8000e7c:	400a6666 	.word	0x400a6666
 8000e80:	2000047c 	.word	0x2000047c
 8000e84:	200004c0 	.word	0x200004c0
 8000e88:	200004bc 	.word	0x200004bc
 8000e8c:	45800000 	.word	0x45800000
 8000e90:	200004c4 	.word	0x200004c4
 8000e94:	48001000 	.word	0x48001000
 8000e98:	0800f690 	.word	0x0800f690

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09e      	sub	sp, #120	@ 0x78
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ea6:	2228      	movs	r2, #40	@ 0x28
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00b f809 	bl	800bec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	223c      	movs	r2, #60	@ 0x3c
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00a fffb 	bl	800bec2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ed0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ed4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eda:	2301      	movs	r3, #1
 8000edc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000eec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ef0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 ffea 	bl	8004ed0 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f02:	f000 f9c5 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 f812 	bl	8005f4c <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f2e:	f000 f9af 	bl	8001290 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <SystemClock_Config+0xc4>)
 8000f34:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f40:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f005 f9cf 	bl	80062ec <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f54:	f000 f99c 	bl	8001290 <Error_Handler>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3778      	adds	r7, #120	@ 0x78
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	000200a0 	.word	0x000200a0

08000f64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f86:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000f88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fae:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe0:	4817      	ldr	r0, [pc, #92]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000fe2:	f000 fc45 	bl	8001870 <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f000 f950 	bl	8001290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4811      	ldr	r0, [pc, #68]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8000ffc:	f001 fb5e 	bl	80026bc <HAL_ADCEx_MultiModeConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001006:	f000 f943 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800100a:	2302      	movs	r3, #2
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100e:	2301      	movs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	@ (8001040 <MX_ADC1_Init+0xdc>)
 8001028:	f001 f85e 	bl	80020e8 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001032:	f000 f92d 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000360 	.word	0x20000360

08001044 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_DAC_Init+0x4c>)
 8001056:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <MX_DAC_Init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800105a:	480d      	ldr	r0, [pc, #52]	@ (8001090 <MX_DAC_Init+0x4c>)
 800105c:	f001 feb1 	bl	8002dc2 <HAL_DAC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001066:	f000 f913 	bl	8001290 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_DAC_Init+0x4c>)
 800107a:	f001 ff34 	bl	8002ee6 <HAL_DAC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001084:	f000 f904 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200003b0 	.word	0x200003b0
 8001094:	40007400 	.word	0x40007400

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <MX_I2C1_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	@ (8001110 <MX_I2C1_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <MX_I2C1_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <MX_I2C1_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <MX_I2C1_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	@ (800110c <MX_I2C1_Init+0x74>)
 80010d4:	f002 f900 	bl	80032d8 <HAL_I2C_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010de:	f000 f8d7 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	@ (800110c <MX_I2C1_Init+0x74>)
 80010e6:	f002 f992 	bl	800340e <HAL_I2CEx_ConfigAnalogFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 f8ce 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_I2C1_Init+0x74>)
 80010f8:	f002 f9d4 	bl	80034a4 <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 f8c5 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200003c4 	.word	0x200003c4
 8001110:	40005400 	.word	0x40005400
 8001114:	2000090e 	.word	0x2000090e

08001118 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_SPI1_Init+0x74>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <MX_SPI1_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_SPI1_Init+0x74>)
 8001124:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_SPI1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_SPI1_Init+0x74>)
 8001132:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001136:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_SPI1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_SPI1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_SPI1_Init+0x74>)
 8001146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800114a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_SPI1_Init+0x74>)
 800114e:	2208      	movs	r2, #8
 8001150:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_SPI1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_SPI1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_SPI1_Init+0x74>)
 8001166:	2207      	movs	r2, #7
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_SPI1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_SPI1_Init+0x74>)
 8001172:	2208      	movs	r2, #8
 8001174:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_SPI1_Init+0x74>)
 8001178:	f005 fa68 	bl	800664c <HAL_SPI_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001182:	f000 f885 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000418 	.word	0x20000418
 8001190:	40013000 	.word	0x40013000

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a36      	ldr	r2, [pc, #216]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a30      	ldr	r2, [pc, #192]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011da:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a2a      	ldr	r2, [pc, #168]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a24      	ldr	r2, [pc, #144]	@ (8001288 <MX_GPIO_Init+0xf4>)
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <MX_GPIO_Init+0xf4>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <MX_GPIO_Init+0xf4>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <MX_GPIO_Init+0xf4>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001214:	6153      	str	r3, [r2, #20]
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_GPIO_Init+0xf4>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001222:	2200      	movs	r2, #0
 8001224:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001228:	4818      	ldr	r0, [pc, #96]	@ (800128c <MX_GPIO_Init+0xf8>)
 800122a:	f002 f823 	bl	8003274 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800122e:	2337      	movs	r3, #55	@ 0x37
 8001230:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001232:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_GPIO_Init+0xf8>)
 8001244:	f001 fe9c 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001248:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800124c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480a      	ldr	r0, [pc, #40]	@ (800128c <MX_GPIO_Init+0xf8>)
 8001262:	f001 fe8d 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127c:	f001 fe80 	bl	8002f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	@ 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	48001000 	.word	0x48001000

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_MspInit+0x44>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <HAL_MspInit+0x44>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <HAL_MspInit+0x44>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_MspInit+0x44>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <HAL_MspInit+0x44>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_MspInit+0x44>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012d2:	2007      	movs	r0, #7
 80012d4:	f001 fd34 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001304:	d124      	bne.n	8001350 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_ADC_MspInit+0x74>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_ADC_MspInit+0x74>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6153      	str	r3, [r2, #20]
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_ADC_MspInit+0x74>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_ADC_MspInit+0x74>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a0d      	ldr	r2, [pc, #52]	@ (8001358 <HAL_ADC_MspInit+0x74>)
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_ADC_MspInit+0x74>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134c:	f001 fe18 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a15      	ldr	r2, [pc, #84]	@ (80013d0 <HAL_DAC_MspInit+0x74>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d124      	bne.n	80013c8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_DAC_MspInit+0x78>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <HAL_DAC_MspInit+0x78>)
 8001384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_DAC_MspInit+0x78>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_DAC_MspInit+0x78>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <HAL_DAC_MspInit+0x78>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	6153      	str	r3, [r2, #20]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_DAC_MspInit+0x78>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ae:	2310      	movs	r3, #16
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b2:	2303      	movs	r3, #3
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c4:	f001 fddc 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40007400 	.word	0x40007400
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_I2C_MspInit+0x7c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d127      	bne.n	800144a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_I2C_MspInit+0x80>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a16      	ldr	r2, [pc, #88]	@ (8001458 <HAL_I2C_MspInit+0x80>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_I2C_MspInit+0x80>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001412:	23c0      	movs	r3, #192	@ 0xc0
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001416:	2312      	movs	r3, #18
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141a:	2301      	movs	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001422:	2304      	movs	r3, #4
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	480b      	ldr	r0, [pc, #44]	@ (800145c <HAL_I2C_MspInit+0x84>)
 800142e:	f001 fda7 	bl	8002f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_I2C_MspInit+0x80>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_I2C_MspInit+0x80>)
 8001438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800143c:	61d3      	str	r3, [r2, #28]
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_I2C_MspInit+0x80>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40005400 	.word	0x40005400
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400

08001460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <HAL_SPI_MspInit+0x7c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d128      	bne.n	80014d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_SPI_MspInit+0x80>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a16      	ldr	r2, [pc, #88]	@ (80014e0 <HAL_SPI_MspInit+0x80>)
 8001488:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <HAL_SPI_MspInit+0x80>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_SPI_MspInit+0x80>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <HAL_SPI_MspInit+0x80>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_SPI_MspInit+0x80>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80014b2:	23e0      	movs	r3, #224	@ 0xe0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c2:	2305      	movs	r3, #5
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d0:	f001 fd56 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	@ 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40013000 	.word	0x40013000
 80014e0:	40021000 	.word	0x40021000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f955 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800154a:	f002 f8e4 	bl	8003716 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20001198 	.word	0x20001198

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001572:	f00a fcf9 	bl	800bf68 <__errno>
 8001576:	4603      	mov	r3, r0
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_exit>:

void _exit (int status)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffe7 	bl	8001568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <_exit+0x12>

0800159e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e00a      	b.n	80015c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b0:	f3af 8000 	nop.w
 80015b4:	4601      	mov	r1, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	60ba      	str	r2, [r7, #8]
 80015bc:	b2ca      	uxtb	r2, r1
 80015be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf0      	blt.n	80015b0 <_read+0x12>
  }

  return len;
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e009      	b.n	80015fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	60ba      	str	r2, [r7, #8]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	dbf1      	blt.n	80015ea <_write+0x12>
  }
  return len;
 8001606:	687b      	ldr	r3, [r7, #4]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_close>:

int _close(int file)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001638:	605a      	str	r2, [r3, #4]
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_isatty>:

int _isatty(int file)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f00a fc5e 	bl	800bf68 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2000a000 	.word	0x2000a000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	200004c8 	.word	0x200004c8
 80016e0:	200017d8 	.word	0x200017d8

080016e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001740 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800170c:	f7ff ffea 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopForever+0x6>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopForever+0xe>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopForever+0x16>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f00a fc1d 	bl	800bf74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173a:	f7ff fb15 	bl	8000d68 <main>

0800173e <LoopForever>:

LoopForever:
    b LoopForever
 800173e:	e7fe      	b.n	800173e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001740:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 800174c:	0800fb80 	.word	0x0800fb80
  ldr r2, =_sbss
 8001750:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001754:	200017d8 	.word	0x200017d8

08001758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC1_2_IRQHandler>
	...

0800175c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_Init+0x28>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <HAL_Init+0x28>)
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f001 fae7 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	2000      	movs	r0, #0
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fd90 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40022000 	.word	0x40022000

08001788 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 faff 	bl	8002daa <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f001 fac7 	bl	8002d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	200004cc 	.word	0x200004cc

08001810 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;  
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200004cc 	.word	0x200004cc

08001828 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008

08001870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b09a      	sub	sp, #104	@ 0x68
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e1c9      	b.n	8001c24 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d176      	bne.n	8001990 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d152      	bne.n	8001950 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fd0d 	bl	80012e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d13b      	bne.n	8001950 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 f845 	bl	8002968 <ADC_Disable>
 80018de:	4603      	mov	r3, r0
 80018e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d12f      	bne.n	8001950 <HAL_ADC_Init+0xe0>
 80018f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d12b      	bne.n	8001950 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001900:	f023 0302 	bic.w	r3, r3, #2
 8001904:	f043 0202 	orr.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800191a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800192a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800192c:	4b86      	ldr	r3, [pc, #536]	@ (8001b48 <HAL_ADC_Init+0x2d8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a86      	ldr	r2, [pc, #536]	@ (8001b4c <HAL_ADC_Init+0x2dc>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9a      	lsrs	r2, r3, #18
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001942:	e002      	b.n	800194a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3b01      	subs	r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f9      	bne.n	8001944 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800196c:	d110      	bne.n	8001990 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f023 0312 	bic.w	r3, r3, #18
 8001976:	f043 0210 	orr.w	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 8136 	bne.w	8001c0a <HAL_ADC_Init+0x39a>
 800199e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 8131 	bne.w	8001c0a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 8129 	bne.w	8001c0a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019d0:	d004      	beq.n	80019dc <HAL_ADC_Init+0x16c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b50 <HAL_ADC_Init+0x2e0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_Init+0x170>
 80019dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b54 <HAL_ADC_Init+0x2e4>)
 80019de:	e000      	b.n	80019e2 <HAL_ADC_Init+0x172>
 80019e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <HAL_ADC_Init+0x2e8>)
 80019e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019ec:	d102      	bne.n	80019f4 <HAL_ADC_Init+0x184>
 80019ee:	4b58      	ldr	r3, [pc, #352]	@ (8001b50 <HAL_ADC_Init+0x2e0>)
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	e01a      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a55      	ldr	r2, [pc, #340]	@ (8001b50 <HAL_ADC_Init+0x2e0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d103      	bne.n	8001a06 <HAL_ADC_Init+0x196>
 80019fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e011      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a54      	ldr	r2, [pc, #336]	@ (8001b5c <HAL_ADC_Init+0x2ec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d102      	bne.n	8001a16 <HAL_ADC_Init+0x1a6>
 8001a10:	4b53      	ldr	r3, [pc, #332]	@ (8001b60 <HAL_ADC_Init+0x2f0>)
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e009      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a51      	ldr	r2, [pc, #324]	@ (8001b60 <HAL_ADC_Init+0x2f0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <HAL_ADC_Init+0x1b6>
 8001a20:	4b4e      	ldr	r3, [pc, #312]	@ (8001b5c <HAL_ADC_Init+0x2ec>)
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e001      	b.n	8001a2a <HAL_ADC_Init+0x1ba>
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_ADC_Init+0x1da>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Init+0x1da>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_ADC_Init+0x1dc>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11c      	bne.n	8001a8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d010      	beq.n	8001a78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_ADC_Init+0x202>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Init+0x202>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_ADC_Init+0x204>
 8001a72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7e5b      	ldrb	r3, [r3, #25]
 8001a8e:	035b      	lsls	r3, r3, #13
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a94:	2a01      	cmp	r2, #1
 8001a96:	d002      	beq.n	8001a9e <HAL_ADC_Init+0x22e>
 8001a98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a9c:	e000      	b.n	8001aa0 <HAL_ADC_Init+0x230>
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d11b      	bne.n	8001af6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7e5b      	ldrb	r3, [r3, #25]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	3b01      	subs	r3, #1
 8001acc:	045a      	lsls	r2, r3, #17
 8001ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ad8:	e00d      	b.n	8001af6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001ae2:	f043 0220 	orr.w	r2, r3, #32
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d03a      	beq.n	8001b74 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <HAL_ADC_Init+0x2ec>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_Init+0x2a2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <HAL_ADC_Init+0x2f0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d128      	bne.n	8001b64 <HAL_ADC_Init+0x2f4>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001b1a:	d012      	beq.n	8001b42 <HAL_ADC_Init+0x2d2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b24:	d00a      	beq.n	8001b3c <HAL_ADC_Init+0x2cc>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001b2e:	d002      	beq.n	8001b36 <HAL_ADC_Init+0x2c6>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	e018      	b.n	8001b68 <HAL_ADC_Init+0x2f8>
 8001b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b3a:	e015      	b.n	8001b68 <HAL_ADC_Init+0x2f8>
 8001b3c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001b40:	e012      	b.n	8001b68 <HAL_ADC_Init+0x2f8>
 8001b42:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001b46:	e00f      	b.n	8001b68 <HAL_ADC_Init+0x2f8>
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	431bde83 	.word	0x431bde83
 8001b50:	50000100 	.word	0x50000100
 8001b54:	50000300 	.word	0x50000300
 8001b58:	50000700 	.word	0x50000700
 8001b5c:	50000400 	.word	0x50000400
 8001b60:	50000500 	.word	0x50000500
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b70:	4313      	orrs	r3, r2
 8001b72:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d114      	bne.n	8001bac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b90:	f023 0302 	bic.w	r3, r3, #2
 8001b94:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7e1b      	ldrb	r3, [r3, #24]
 8001b9a:	039a      	lsls	r2, r3, #14
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_ADC_Init+0x3bc>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d10c      	bne.n	8001be2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f023 010f 	bic.w	r1, r3, #15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	1e5a      	subs	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	631a      	str	r2, [r3, #48]	@ 0x30
 8001be0:	e007      	b.n	8001bf2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020f 	bic.w	r2, r2, #15
 8001bf0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f023 0303 	bic.w	r3, r3, #3
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c08:	e00a      	b.n	8001c20 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f023 0312 	bic.w	r3, r3, #18
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3768      	adds	r7, #104	@ 0x68
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	fff0c007 	.word	0xfff0c007

08001c30 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 80f9 	bne.w	8001e3e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Start+0x2a>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e0f4      	b.n	8001e44 <HAL_ADC_Start+0x214>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fe1c 	bl	80028a0 <ADC_Enable>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 80e0 	bne.w	8001e34 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c90:	d004      	beq.n	8001c9c <HAL_ADC_Start+0x6c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6d      	ldr	r2, [pc, #436]	@ (8001e4c <HAL_ADC_Start+0x21c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_Start+0x7a>
 8001c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e50 <HAL_ADC_Start+0x220>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_ADC_Start+0x9a>
 8001ca8:	e005      	b.n	8001cb6 <HAL_ADC_Start+0x86>
 8001caa:	4b6a      	ldr	r3, [pc, #424]	@ (8001e54 <HAL_ADC_Start+0x224>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_ADC_Start+0x9a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cbe:	d004      	beq.n	8001cca <HAL_ADC_Start+0x9a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a64      	ldr	r2, [pc, #400]	@ (8001e58 <HAL_ADC_Start+0x228>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d115      	bne.n	8001cf6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d036      	beq.n	8001d52 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001cf4:	e02d      	b.n	8001d52 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d0a:	d004      	beq.n	8001d16 <HAL_ADC_Start+0xe6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4e      	ldr	r2, [pc, #312]	@ (8001e4c <HAL_ADC_Start+0x21c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_Start+0xfc>
 8001d16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e008      	b.n	8001d3e <HAL_ADC_Start+0x10e>
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e58 <HAL_ADC_Start+0x228>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	f023 0206 	bic.w	r2, r3, #6
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	221c      	movs	r2, #28
 8001d82:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d8c:	d004      	beq.n	8001d98 <HAL_ADC_Start+0x168>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <HAL_ADC_Start+0x21c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d106      	bne.n	8001da6 <HAL_ADC_Start+0x176>
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_ADC_Start+0x220>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d03e      	beq.n	8001e22 <HAL_ADC_Start+0x1f2>
 8001da4:	e005      	b.n	8001db2 <HAL_ADC_Start+0x182>
 8001da6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e54 <HAL_ADC_Start+0x224>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d037      	beq.n	8001e22 <HAL_ADC_Start+0x1f2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Start+0x196>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a22      	ldr	r2, [pc, #136]	@ (8001e4c <HAL_ADC_Start+0x21c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d106      	bne.n	8001dd4 <HAL_ADC_Start+0x1a4>
 8001dc6:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <HAL_ADC_Start+0x220>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d027      	beq.n	8001e22 <HAL_ADC_Start+0x1f2>
 8001dd2:	e005      	b.n	8001de0 <HAL_ADC_Start+0x1b0>
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <HAL_ADC_Start+0x224>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d020      	beq.n	8001e22 <HAL_ADC_Start+0x1f2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_Start+0x1c4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_ADC_Start+0x21c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d106      	bne.n	8001e02 <HAL_ADC_Start+0x1d2>
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_ADC_Start+0x220>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d010      	beq.n	8001e22 <HAL_ADC_Start+0x1f2>
 8001e00:	e005      	b.n	8001e0e <HAL_ADC_Start+0x1de>
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <HAL_ADC_Start+0x224>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d009      	beq.n	8001e22 <HAL_ADC_Start+0x1f2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e16:	d004      	beq.n	8001e22 <HAL_ADC_Start+0x1f2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <HAL_ADC_Start+0x228>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10f      	bne.n	8001e42 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0204 	orr.w	r2, r2, #4
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	e006      	b.n	8001e42 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001e3c:	e001      	b.n	8001e42 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	50000100 	.word	0x50000100
 8001e50:	50000300 	.word	0x50000300
 8001e54:	50000700 	.word	0x50000700
 8001e58:	50000400 	.word	0x50000400

08001e5c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Stop+0x1a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e023      	b.n	8001ebe <HAL_ADC_Stop+0x62>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e7e:	216c      	movs	r1, #108	@ 0x6c
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fdd7 	bl	8002a34 <ADC_ConversionStop>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fd69 	bl	8002968 <ADC_Disable>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d102      	bne.n	8001ee4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e03a      	b.n	8001f5a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eec:	d004      	beq.n	8001ef8 <HAL_ADC_PollForConversion+0x30>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a72      	ldr	r2, [pc, #456]	@ (80020bc <HAL_ADC_PollForConversion+0x1f4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_PollForConversion+0x34>
 8001ef8:	4b71      	ldr	r3, [pc, #452]	@ (80020c0 <HAL_ADC_PollForConversion+0x1f8>)
 8001efa:	e000      	b.n	8001efe <HAL_ADC_PollForConversion+0x36>
 8001efc:	4b71      	ldr	r3, [pc, #452]	@ (80020c4 <HAL_ADC_PollForConversion+0x1fc>)
 8001efe:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d112      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d11d      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f043 0220 	orr.w	r2, r3, #32
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0bf      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f043 0220 	orr.w	r2, r3, #32
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0ad      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f56:	230c      	movs	r3, #12
 8001f58:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f62:	d004      	beq.n	8001f6e <HAL_ADC_PollForConversion+0xa6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a54      	ldr	r2, [pc, #336]	@ (80020bc <HAL_ADC_PollForConversion+0x1f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d106      	bne.n	8001f7c <HAL_ADC_PollForConversion+0xb4>
 8001f6e:	4b54      	ldr	r3, [pc, #336]	@ (80020c0 <HAL_ADC_PollForConversion+0x1f8>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d010      	beq.n	8001f9c <HAL_ADC_PollForConversion+0xd4>
 8001f7a:	e005      	b.n	8001f88 <HAL_ADC_PollForConversion+0xc0>
 8001f7c:	4b51      	ldr	r3, [pc, #324]	@ (80020c4 <HAL_ADC_PollForConversion+0x1fc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <HAL_ADC_PollForConversion+0xd4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_PollForConversion+0xd4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4c      	ldr	r2, [pc, #304]	@ (80020c8 <HAL_ADC_PollForConversion+0x200>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d104      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e00f      	b.n	8001fc6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fae:	d004      	beq.n	8001fba <HAL_ADC_PollForConversion+0xf2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a41      	ldr	r2, [pc, #260]	@ (80020bc <HAL_ADC_PollForConversion+0x1f4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d102      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0xf8>
 8001fba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fbe:	e000      	b.n	8001fc2 <HAL_ADC_PollForConversion+0xfa>
 8001fc0:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_ADC_PollForConversion+0x200>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001fc6:	f7ff fc23 	bl	8001810 <HAL_GetTick>
 8001fca:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fcc:	e021      	b.n	8002012 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d01d      	beq.n	8002012 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_ADC_PollForConversion+0x124>
 8001fdc:	f7ff fc18 	bl	8001810 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d212      	bcs.n	8002012 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10b      	bne.n	8002012 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e04f      	b.n	80020b2 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0d6      	beq.n	8001fce <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002036:	2b00      	cmp	r3, #0
 8002038:	d131      	bne.n	800209e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002040:	2b00      	cmp	r3, #0
 8002042:	d12c      	bne.n	800209e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b08      	cmp	r3, #8
 8002050:	d125      	bne.n	800209e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d112      	bne.n	8002086 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
 8002084:	e00b      	b.n	800209e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d103      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	50000100 	.word	0x50000100
 80020c0:	50000300 	.word	0x50000300
 80020c4:	50000700 	.word	0x50000700
 80020c8:	50000400 	.word	0x50000400

080020cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b09b      	sub	sp, #108	@ 0x6c
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x22>
 8002106:	2302      	movs	r3, #2
 8002108:	e2c8      	b.n	800269c <HAL_ADC_ConfigChannel+0x5b4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 82ac 	bne.w	800267a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b04      	cmp	r3, #4
 8002128:	d81c      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	461a      	mov	r2, r3
 800213e:	231f      	movs	r3, #31
 8002140:	4093      	lsls	r3, r2
 8002142:	43db      	mvns	r3, r3
 8002144:	4019      	ands	r1, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30
 8002162:	e063      	b.n	800222c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b09      	cmp	r3, #9
 800216a:	d81e      	bhi.n	80021aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	3b1e      	subs	r3, #30
 8002180:	221f      	movs	r2, #31
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	4019      	ands	r1, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	3b1e      	subs	r3, #30
 800219c:	fa00 f203 	lsl.w	r2, r0, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80021a8:	e040      	b.n	800222c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b0e      	cmp	r3, #14
 80021b0:	d81e      	bhi.n	80021f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	3b3c      	subs	r3, #60	@ 0x3c
 80021c6:	221f      	movs	r2, #31
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4019      	ands	r1, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	3b3c      	subs	r3, #60	@ 0x3c
 80021e2:	fa00 f203 	lsl.w	r2, r0, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80021ee:	e01d      	b.n	800222c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	3b5a      	subs	r3, #90	@ 0x5a
 8002204:	221f      	movs	r2, #31
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	4019      	ands	r1, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	3b5a      	subs	r3, #90	@ 0x5a
 8002220:	fa00 f203 	lsl.w	r2, r0, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 80e5 	bne.w	8002406 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d91c      	bls.n	800227e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6999      	ldr	r1, [r3, #24]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	3b1e      	subs	r3, #30
 8002256:	2207      	movs	r2, #7
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	4019      	ands	r1, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6898      	ldr	r0, [r3, #8]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	3b1e      	subs	r3, #30
 8002270:	fa00 f203 	lsl.w	r2, r0, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	619a      	str	r2, [r3, #24]
 800227c:	e019      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6959      	ldr	r1, [r3, #20]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	2207      	movs	r2, #7
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	4019      	ands	r1, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6898      	ldr	r0, [r3, #8]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d84f      	bhi.n	8002374 <HAL_ADC_ConfigChannel+0x28c>
 80022d4:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <HAL_ADC_ConfigChannel+0x1f4>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	0800230f 	.word	0x0800230f
 80022e4:	08002331 	.word	0x08002331
 80022e8:	08002353 	.word	0x08002353
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022f2:	4b99      	ldr	r3, [pc, #612]	@ (8002558 <HAL_ADC_ConfigChannel+0x470>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	0691      	lsls	r1, r2, #26
 80022fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022fe:	430a      	orrs	r2, r1
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800230a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800230c:	e07b      	b.n	8002406 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002314:	4b90      	ldr	r3, [pc, #576]	@ (8002558 <HAL_ADC_ConfigChannel+0x470>)
 8002316:	4013      	ands	r3, r2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	0691      	lsls	r1, r2, #26
 800231e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002320:	430a      	orrs	r2, r1
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800232c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800232e:	e06a      	b.n	8002406 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002336:	4b88      	ldr	r3, [pc, #544]	@ (8002558 <HAL_ADC_ConfigChannel+0x470>)
 8002338:	4013      	ands	r3, r2
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	0691      	lsls	r1, r2, #26
 8002340:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002342:	430a      	orrs	r2, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800234e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002350:	e059      	b.n	8002406 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002358:	4b7f      	ldr	r3, [pc, #508]	@ (8002558 <HAL_ADC_ConfigChannel+0x470>)
 800235a:	4013      	ands	r3, r2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	0691      	lsls	r1, r2, #26
 8002362:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002364:	430a      	orrs	r2, r1
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002370:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002372:	e048      	b.n	8002406 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002396:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	069b      	lsls	r3, r3, #26
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ba:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	069b      	lsls	r3, r3, #26
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d107      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023de:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d107      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002402:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002404:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d108      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x33e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x33e>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_ADC_ConfigChannel+0x340>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	f040 8131 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d00f      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43da      	mvns	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	400a      	ands	r2, r1
 8002450:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002454:	e049      	b.n	80024ea <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	409a      	lsls	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b09      	cmp	r3, #9
 8002476:	d91c      	bls.n	80024b2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6999      	ldr	r1, [r3, #24]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	3b1b      	subs	r3, #27
 800248a:	2207      	movs	r2, #7
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	4019      	ands	r1, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6898      	ldr	r0, [r3, #8]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	3b1b      	subs	r3, #27
 80024a4:	fa00 f203 	lsl.w	r2, r0, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	619a      	str	r2, [r3, #24]
 80024b0:	e01b      	b.n	80024ea <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	2207      	movs	r2, #7
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4019      	ands	r1, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6898      	ldr	r0, [r3, #8]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024f2:	d004      	beq.n	80024fe <HAL_ADC_ConfigChannel+0x416>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a18      	ldr	r2, [pc, #96]	@ (800255c <HAL_ADC_ConfigChannel+0x474>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x41a>
 80024fe:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_ADC_ConfigChannel+0x478>)
 8002500:	e000      	b.n	8002504 <HAL_ADC_ConfigChannel+0x41c>
 8002502:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <HAL_ADC_ConfigChannel+0x47c>)
 8002504:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b10      	cmp	r3, #16
 800250c:	d105      	bne.n	800251a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800250e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800251e:	2b11      	cmp	r3, #17
 8002520:	d105      	bne.n	800252e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002532:	2b12      	cmp	r3, #18
 8002534:	f040 80ac 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 80a5 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800254e:	d10b      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x480>
 8002550:	4b02      	ldr	r3, [pc, #8]	@ (800255c <HAL_ADC_ConfigChannel+0x474>)
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e023      	b.n	800259e <HAL_ADC_ConfigChannel+0x4b6>
 8002556:	bf00      	nop
 8002558:	83fff000 	.word	0x83fff000
 800255c:	50000100 	.word	0x50000100
 8002560:	50000300 	.word	0x50000300
 8002564:	50000700 	.word	0x50000700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a4e      	ldr	r2, [pc, #312]	@ (80026a8 <HAL_ADC_ConfigChannel+0x5c0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d103      	bne.n	800257a <HAL_ADC_ConfigChannel+0x492>
 8002572:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e011      	b.n	800259e <HAL_ADC_ConfigChannel+0x4b6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a4b      	ldr	r2, [pc, #300]	@ (80026ac <HAL_ADC_ConfigChannel+0x5c4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d102      	bne.n	800258a <HAL_ADC_ConfigChannel+0x4a2>
 8002584:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e009      	b.n	800259e <HAL_ADC_ConfigChannel+0x4b6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a48      	ldr	r2, [pc, #288]	@ (80026b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d102      	bne.n	800259a <HAL_ADC_ConfigChannel+0x4b2>
 8002594:	4b45      	ldr	r3, [pc, #276]	@ (80026ac <HAL_ADC_ConfigChannel+0x5c4>)
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e001      	b.n	800259e <HAL_ADC_ConfigChannel+0x4b6>
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_ADC_ConfigChannel+0x4d6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x4d6>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x4d8>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d150      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x4fe>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x4fe>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x500>
 80025e6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13c      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d11d      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x548>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025fc:	d118      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002608:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260a:	4b2a      	ldr	r3, [pc, #168]	@ (80026b4 <HAL_ADC_ConfigChannel+0x5cc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2a      	ldr	r2, [pc, #168]	@ (80026b8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9a      	lsrs	r2, r3, #18
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002620:	e002      	b.n	8002628 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800262e:	e02e      	b.n	800268e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b11      	cmp	r3, #17
 8002636:	d10b      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x568>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002640:	d106      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800264a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800264c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800264e:	e01e      	b.n	800268e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b12      	cmp	r3, #18
 8002656:	d11a      	bne.n	800268e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002662:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002664:	e013      	b.n	800268e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002678:	e00a      	b.n	8002690 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f043 0220 	orr.w	r2, r3, #32
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800268c:	e000      	b.n	8002690 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800268e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002698:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800269c:	4618      	mov	r0, r3
 800269e:	376c      	adds	r7, #108	@ 0x6c
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	50000100 	.word	0x50000100
 80026ac:	50000400 	.word	0x50000400
 80026b0:	50000500 	.word	0x50000500
 80026b4:	20000000 	.word	0x20000000
 80026b8:	431bde83 	.word	0x431bde83

080026bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80026bc:	b480      	push	{r7}
 80026be:	b099      	sub	sp, #100	@ 0x64
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d4:	d102      	bne.n	80026dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80026d6:	4b6d      	ldr	r3, [pc, #436]	@ (800288c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	e01a      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a6a      	ldr	r2, [pc, #424]	@ (800288c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d103      	bne.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80026e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	e011      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a67      	ldr	r2, [pc, #412]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d102      	bne.n	80026fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026f8:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	e009      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a64      	ldr	r2, [pc, #400]	@ (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002708:	4b61      	ldr	r3, [pc, #388]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	e001      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b0      	b.n	800287e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002726:	2302      	movs	r3, #2
 8002728:	e0a9      	b.n	800287e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 808d 	bne.w	800285c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 8086 	bne.w	800285c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002758:	d004      	beq.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a4b      	ldr	r2, [pc, #300]	@ (800288c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002764:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002766:	e000      	b.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002768:	4b4c      	ldr	r3, [pc, #304]	@ (800289c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800276a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d040      	beq.n	80027f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002774:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002786:	035b      	lsls	r3, r3, #13
 8002788:	430b      	orrs	r3, r1
 800278a:	431a      	orrs	r2, r3
 800278c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800278e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d108      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d15c      	bne.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d107      	bne.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80027d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d14b      	bne.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80027d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027e0:	f023 030f 	bic.w	r3, r3, #15
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	6811      	ldr	r1, [r2, #0]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	6892      	ldr	r2, [r2, #8]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027f4:	e03c      	b.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002800:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d108      	bne.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d123      	bne.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002844:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d112      	bne.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800284a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002852:	f023 030f 	bic.w	r3, r3, #15
 8002856:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002858:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800285a:	e009      	b.n	8002870 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800286e:	e000      	b.n	8002872 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002870:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800287a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800287e:	4618      	mov	r0, r3
 8002880:	3764      	adds	r7, #100	@ 0x64
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	50000100 	.word	0x50000100
 8002890:	50000400 	.word	0x50000400
 8002894:	50000500 	.word	0x50000500
 8002898:	50000300 	.word	0x50000300
 800289c:	50000700 	.word	0x50000700

080028a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d108      	bne.n	80028cc <ADC_Enable+0x2c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <ADC_Enable+0x2c>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <ADC_Enable+0x2e>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d143      	bne.n	800295a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b22      	ldr	r3, [pc, #136]	@ (8002964 <ADC_Enable+0xc4>)
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f043 0210 	orr.w	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e02f      	b.n	800295c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800290c:	f7fe ff80 	bl	8001810 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002912:	e01b      	b.n	800294c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002914:	f7fe ff7c 	bl	8001810 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d914      	bls.n	800294c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d00d      	beq.n	800294c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	f043 0210 	orr.w	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d1dc      	bne.n	8002914 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	8000003f 	.word	0x8000003f

08002968 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <ADC_Disable+0x2c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <ADC_Disable+0x2c>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <ADC_Disable+0x2e>
 8002994:	2300      	movs	r3, #0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d047      	beq.n	8002a2a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030d 	and.w	r3, r3, #13
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10f      	bne.n	80029c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0202 	orr.w	r2, r2, #2
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2203      	movs	r2, #3
 80029be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80029c0:	f7fe ff26 	bl	8001810 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029c6:	e029      	b.n	8002a1c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f043 0210 	orr.w	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e023      	b.n	8002a2c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029e4:	f7fe ff14 	bl	8001810 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d914      	bls.n	8002a1c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10d      	bne.n	8002a1c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0210 	orr.w	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e007      	b.n	8002a2c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d0dc      	beq.n	80029e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 809b 	beq.w	8002b90 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a68:	d12a      	bne.n	8002ac0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d126      	bne.n	8002ac0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d122      	bne.n	8002ac0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002a7e:	e014      	b.n	8002aaa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4a46      	ldr	r2, [pc, #280]	@ (8002b9c <ADC_ConversionStop+0x168>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d90d      	bls.n	8002aa4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f043 0210 	orr.w	r2, r3, #16
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e076      	b.n	8002b92 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b40      	cmp	r3, #64	@ 0x40
 8002ab6:	d1e3      	bne.n	8002a80 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2240      	movs	r2, #64	@ 0x40
 8002abe:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b60      	cmp	r3, #96	@ 0x60
 8002ac4:	d015      	beq.n	8002af2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d10e      	bne.n	8002af2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0210 	orr.w	r2, r2, #16
 8002af0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d015      	beq.n	8002b24 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d10e      	bne.n	8002b24 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b60      	cmp	r3, #96	@ 0x60
 8002b28:	d005      	beq.n	8002b36 <ADC_ConversionStop+0x102>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b6c      	cmp	r3, #108	@ 0x6c
 8002b2e:	d105      	bne.n	8002b3c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b30:	230c      	movs	r3, #12
 8002b32:	617b      	str	r3, [r7, #20]
        break;
 8002b34:	e005      	b.n	8002b42 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b36:	2308      	movs	r3, #8
 8002b38:	617b      	str	r3, [r7, #20]
        break;
 8002b3a:	e002      	b.n	8002b42 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	617b      	str	r3, [r7, #20]
        break;
 8002b40:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b42:	f7fe fe65 	bl	8001810 <HAL_GetTick>
 8002b46:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b48:	e01b      	b.n	8002b82 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b4a:	f7fe fe61 	bl	8001810 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b0b      	cmp	r3, #11
 8002b56:	d914      	bls.n	8002b82 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1dc      	bne.n	8002b4a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	000993ff 	.word	0x000993ff

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db0b      	blt.n	8002c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4907      	ldr	r1, [pc, #28]	@ (8002c3c <__NVIC_EnableIRQ+0x38>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db0a      	blt.n	8002c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	490c      	ldr	r1, [pc, #48]	@ (8002c8c <__NVIC_SetPriority+0x4c>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	0112      	lsls	r2, r2, #4
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	440b      	add	r3, r1
 8002c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c68:	e00a      	b.n	8002c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4908      	ldr	r1, [pc, #32]	@ (8002c90 <__NVIC_SetPriority+0x50>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	3b04      	subs	r3, #4
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	761a      	strb	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f1c3 0307 	rsb	r3, r3, #7
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	bf28      	it	cs
 8002cb2:	2304      	movcs	r3, #4
 8002cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d902      	bls.n	8002cc4 <NVIC_EncodePriority+0x30>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b03      	subs	r3, #3
 8002cc2:	e000      	b.n	8002cc6 <NVIC_EncodePriority+0x32>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	4313      	orrs	r3, r2
         );
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	@ 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d0c:	d301      	bcc.n	8002d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d12:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <SysTick_Config+0x40>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f7ff ff8e 	bl	8002c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <SysTick_Config+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2a:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <SysTick_Config+0x40>)
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010

08002d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff29 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d68:	f7ff ff3e 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f7ff ff8e 	bl	8002c94 <NVIC_EncodePriority>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff5d 	bl	8002c40 <__NVIC_SetPriority>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff31 	bl	8002c04 <__NVIC_EnableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffa2 	bl	8002cfc <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e014      	b.n	8002dfe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	791b      	ldrb	r3, [r3, #4]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe fab9 	bl	800135c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e004      	b.n	8002e3a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	3314      	adds	r3, #20
 8002e38:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	795b      	ldrb	r3, [r3, #5]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_DAC_Start+0x16>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e039      	b.n	8002eda <HAL_DAC_Start+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002e96:	2b3c      	cmp	r3, #60	@ 0x3c
 8002e98:	d118      	bne.n	8002ecc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e00f      	b.n	8002ecc <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002eb6:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 8002eba:	d107      	bne.n	8002ecc <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0202 	orr.w	r2, r2, #2
 8002eca:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	795b      	ldrb	r3, [r3, #5]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_DAC_ConfigChannel+0x20>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e036      	b.n	8002f74 <HAL_DAC_ConfigChannel+0x8e>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002f1a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	22c0      	movs	r2, #192	@ 0xc0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8e:	e154      	b.n	800323a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8146 	beq.w	8003234 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d005      	beq.n	8002fc0 <HAL_GPIO_Init+0x40>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d130      	bne.n	8003022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	f003 0201 	and.w	r2, r3, #1
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b03      	cmp	r3, #3
 800302c:	d017      	beq.n	800305e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d123      	bne.n	80030b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	08da      	lsrs	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3208      	adds	r2, #8
 8003072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	6939      	ldr	r1, [r7, #16]
 80030ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0203 	and.w	r2, r3, #3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a0 	beq.w	8003234 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f4:	4b58      	ldr	r3, [pc, #352]	@ (8003258 <HAL_GPIO_Init+0x2d8>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	4a57      	ldr	r2, [pc, #348]	@ (8003258 <HAL_GPIO_Init+0x2d8>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6193      	str	r3, [r2, #24]
 8003100:	4b55      	ldr	r3, [pc, #340]	@ (8003258 <HAL_GPIO_Init+0x2d8>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800310c:	4a53      	ldr	r2, [pc, #332]	@ (800325c <HAL_GPIO_Init+0x2dc>)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	220f      	movs	r2, #15
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003136:	d019      	beq.n	800316c <HAL_GPIO_Init+0x1ec>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a49      	ldr	r2, [pc, #292]	@ (8003260 <HAL_GPIO_Init+0x2e0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <HAL_GPIO_Init+0x1e8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a48      	ldr	r2, [pc, #288]	@ (8003264 <HAL_GPIO_Init+0x2e4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00d      	beq.n	8003164 <HAL_GPIO_Init+0x1e4>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a47      	ldr	r2, [pc, #284]	@ (8003268 <HAL_GPIO_Init+0x2e8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <HAL_GPIO_Init+0x1e0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a46      	ldr	r2, [pc, #280]	@ (800326c <HAL_GPIO_Init+0x2ec>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_GPIO_Init+0x1dc>
 8003158:	2304      	movs	r3, #4
 800315a:	e008      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 800315c:	2305      	movs	r3, #5
 800315e:	e006      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 8003160:	2303      	movs	r3, #3
 8003162:	e004      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 8003164:	2302      	movs	r3, #2
 8003166:	e002      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_GPIO_Init+0x1ee>
 800316c:	2300      	movs	r3, #0
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	f002 0203 	and.w	r2, r2, #3
 8003174:	0092      	lsls	r2, r2, #2
 8003176:	4093      	lsls	r3, r2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800317e:	4937      	ldr	r1, [pc, #220]	@ (800325c <HAL_GPIO_Init+0x2dc>)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318c:	4b38      	ldr	r3, [pc, #224]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031da:	4a25      	ldr	r2, [pc, #148]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e0:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003204:	4a1a      	ldr	r2, [pc, #104]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800322e:	4a10      	ldr	r2, [pc, #64]	@ (8003270 <HAL_GPIO_Init+0x2f0>)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f aea3 	bne.w	8002f90 <HAL_GPIO_Init+0x10>
  }
}
 800324a:	bf00      	nop
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000
 8003260:	48000400 	.word	0x48000400
 8003264:	48000800 	.word	0x48000800
 8003268:	48000c00 	.word	0x48000c00
 800326c:	48001000 	.word	0x48001000
 8003270:	40010400 	.word	0x40010400

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003290:	e002      	b.n	8003298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4013      	ands	r3, r2
 80032bc:	041a      	lsls	r2, r3, #16
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43d9      	mvns	r1, r3
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	400b      	ands	r3, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e08d      	b.n	8003406 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe f86a 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	@ 0x24
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	e006      	b.n	8003360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800335e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d108      	bne.n	800337a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	e007      	b.n	800338a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003388:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800339c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69d9      	ldr	r1, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b20      	cmp	r3, #32
 8003422:	d138      	bne.n	8003496 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800342e:	2302      	movs	r3, #2
 8003430:	e032      	b.n	8003498 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2224      	movs	r2, #36	@ 0x24
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003460:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d139      	bne.n	800352e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e033      	b.n	8003530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	@ 0x24
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0b9      	b.n	80036c2 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f007 fa14 	bl	800a990 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f003 f92b 	bl	80067d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	e03e      	b.n	80035fe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	3311      	adds	r3, #17
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	3310      	adds	r3, #16
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	3313      	adds	r3, #19
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	3320      	adds	r3, #32
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	3324      	adds	r3, #36	@ 0x24
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	3301      	adds	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	791b      	ldrb	r3, [r3, #4]
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	429a      	cmp	r2, r3
 8003606:	d3bb      	bcc.n	8003580 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	e044      	b.n	8003698 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	440b      	add	r3, r1
 800361c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	440b      	add	r3, r1
 8003648:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	440b      	add	r3, r1
 8003674:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	3301      	adds	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	791b      	ldrb	r3, [r3, #4]
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3b5      	bcc.n	800360e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036ae:	f003 f8aa 	bl	8006806 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_PCD_Start+0x16>
 80036dc:	2302      	movs	r3, #2
 80036de:	e016      	b.n	800370e <HAL_PCD_Start+0x44>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 f858 	bl	80067a2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80036f2:	2101      	movs	r1, #1
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f007 fbe7 	bl	800aec8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 fb16 	bl	8008d30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f005 fb0f 	bl	8008d46 <USB_ReadInterrupts>
 8003728:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fab1 	bl	8003c9c <PCD_EP_ISR_Handler>

    return;
 800373a:	e0bd      	b.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003742:	2b00      	cmp	r3, #0
 8003744:	d013      	beq.n	800376e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003758:	b292      	uxth	r2, r2
 800375a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f007 f9b7 	bl	800aad2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003764:	2100      	movs	r1, #0
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8a9 	bl	80038be <HAL_PCD_SetAddress>

    return;
 800376c:	e0a4      	b.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800378a:	b292      	uxth	r2, r2
 800378c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003790:	e092      	b.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ae:	b292      	uxth	r2, r2
 80037b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037b4:	e080      	b.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d027      	beq.n	8003810 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	b292      	uxth	r2, r2
 80037d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0208 	bic.w	r2, r2, #8
 80037ea:	b292      	uxth	r2, r2
 80037ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f007 f9a7 	bl	800ab44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003808:	b292      	uxth	r2, r2
 800380a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800380e:	e053      	b.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003816:	2b00      	cmp	r3, #0
 8003818:	d027      	beq.n	800386a <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0208 	orr.w	r2, r2, #8
 800382c:	b292      	uxth	r2, r2
 800382e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003844:	b292      	uxth	r2, r2
 8003846:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0204 	orr.w	r2, r2, #4
 800385c:	b292      	uxth	r2, r2
 800385e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f007 f954 	bl	800ab10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003868:	e026      	b.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00f      	beq.n	8003894 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003886:	b292      	uxth	r2, r2
 8003888:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f007 f912 	bl	800aab6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003892:	e011      	b.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038b0:	b292      	uxth	r2, r2
 80038b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038b6:	bf00      	nop
  }
}
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_PCD_SetAddress+0x1a>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e012      	b.n	80038fe <HAL_PCD_SetAddress+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f005 fa0a 	bl	8008d08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	4608      	mov	r0, r1
 8003910:	4611      	mov	r1, r2
 8003912:	461a      	mov	r2, r3
 8003914:	4603      	mov	r3, r0
 8003916:	70fb      	strb	r3, [r7, #3]
 8003918:	460b      	mov	r3, r1
 800391a:	803b      	strh	r3, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003928:	2b00      	cmp	r3, #0
 800392a:	da0e      	bge.n	800394a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 0207 	and.w	r2, r3, #7
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	3310      	adds	r3, #16
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	705a      	strb	r2, [r3, #1]
 8003948:	e00e      	b.n	8003968 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 0207 	and.w	r2, r3, #7
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003974:	883a      	ldrh	r2, [r7, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	78ba      	ldrb	r2, [r7, #2]
 800397e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003980:	78bb      	ldrb	r3, [r7, #2]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d102      	bne.n	800398c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_PCD_EP_Open+0x94>
 8003996:	2302      	movs	r3, #2
 8003998:	e00e      	b.n	80039b8 <HAL_PCD_EP_Open+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 ff4b 	bl	8006844 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039b6:	7afb      	ldrb	r3, [r7, #11]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da0e      	bge.n	80039f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 0207 	and.w	r2, r3, #7
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	3310      	adds	r3, #16
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	705a      	strb	r2, [r3, #1]
 80039f0:	e00e      	b.n	8003a10 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	f003 0207 	and.w	r2, r3, #7
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_PCD_EP_Close+0x6a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e00e      	b.n	8003a48 <HAL_PCD_EP_Close+0x88>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68f9      	ldr	r1, [r7, #12]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f003 fac7 	bl	8006fcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	f003 0207 	and.w	r2, r3, #7
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a90:	7afb      	ldrb	r3, [r7, #11]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6979      	ldr	r1, [r7, #20]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fc7f 	bl	80073a6 <USB_EPStartXfer>

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 0207 	and.w	r2, r3, #7
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003ad4:	681b      	ldr	r3, [r3, #0]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	460b      	mov	r3, r1
 8003af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f003 0207 	and.w	r2, r3, #7
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	3310      	adds	r3, #16
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6979      	ldr	r1, [r7, #20]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 fc30 	bl	80073a6 <USB_EPStartXfer>

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	7912      	ldrb	r2, [r2, #4]
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e03e      	b.n	8003bec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	da0e      	bge.n	8003b94 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	f003 0207 	and.w	r2, r3, #7
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3310      	adds	r3, #16
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	705a      	strb	r2, [r3, #1]
 8003b92:	e00c      	b.n	8003bae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_PCD_EP_SetStall+0x7e>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e00e      	b.n	8003bec <HAL_PCD_EP_SetStall+0x9c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f004 ff94 	bl	8008b0a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	7912      	ldrb	r2, [r2, #4]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e040      	b.n	8003c94 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da0e      	bge.n	8003c38 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 0207 	and.w	r2, r3, #7
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	3310      	adds	r3, #16
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	705a      	strb	r2, [r3, #1]
 8003c36:	e00e      	b.n	8003c56 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_EP_ClrStall+0x82>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e00e      	b.n	8003c94 <HAL_PCD_EP_ClrStall+0xa0>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 ff91 	bl	8008bac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b096      	sub	sp, #88	@ 0x58
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ca4:	e3bb      	b.n	800441e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003cb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8003cc0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 8175 	bne.w	8003fb4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d14e      	bne.n	8003d74 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	81fb      	strh	r3, [r7, #14]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3310      	adds	r3, #16
 8003cfe:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	3302      	adds	r3, #2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	441a      	add	r2, r3
 8003d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f006 fea0 	bl	800aa82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7b1b      	ldrb	r3, [r3, #12]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8368 	beq.w	800441e <PCD_EP_ISR_Handler+0x782>
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 8363 	bne.w	800441e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7b1b      	ldrb	r3, [r3, #12]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	731a      	strb	r2, [r3, #12]
 8003d72:	e354      	b.n	800441e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d7a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d034      	beq.n	8003dfc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	3306      	adds	r3, #6
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f005 f80e 	bl	8008df2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003de2:	4013      	ands	r3, r2
 8003de4:	823b      	strh	r3, [r7, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	8a3a      	ldrh	r2, [r7, #16]
 8003dec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003df0:	b292      	uxth	r2, r2
 8003df2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f006 fe17 	bl	800aa28 <HAL_PCD_SetupStageCallback>
 8003dfa:	e310      	b.n	800441e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dfc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f280 830c 	bge.w	800441e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e12:	4013      	ands	r3, r2
 8003e14:	83fb      	strh	r3, [r7, #30]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	8bfa      	ldrh	r2, [r7, #30]
 8003e1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e20:	b292      	uxth	r2, r2
 8003e22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	3306      	adds	r3, #6
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d019      	beq.n	8003e8c <PCD_EP_ISR_Handler+0x1f0>
 8003e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e66:	6959      	ldr	r1, [r3, #20]
 8003e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	f004 ffbe 	bl	8008df2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	441a      	add	r2, r3
 8003e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e84:	2100      	movs	r1, #0
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f006 fde0 	bl	800aa4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f040 82bd 	bne.w	800441e <PCD_EP_ISR_Handler+0x782>
 8003ea4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003ea8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eb0:	f000 82b5 	beq.w	800441e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4413      	add	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <PCD_EP_ISR_Handler+0x266>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	e039      	b.n	8003f76 <PCD_EP_ISR_Handler+0x2da>
 8003f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f08:	d818      	bhi.n	8003f3c <PCD_EP_ISR_Handler+0x2a0>
 8003f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <PCD_EP_ISR_Handler+0x288>
 8003f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f20:	3301      	adds	r3, #1
 8003f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	029b      	lsls	r3, r3, #10
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	801a      	strh	r2, [r3, #0]
 8003f3a:	e01c      	b.n	8003f76 <PCD_EP_ISR_Handler+0x2da>
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <PCD_EP_ISR_Handler+0x2ba>
 8003f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f52:	3b01      	subs	r3, #1
 8003f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4313      	orrs	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f86:	827b      	strh	r3, [r7, #18]
 8003f88:	8a7b      	ldrh	r3, [r7, #18]
 8003f8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f8e:	827b      	strh	r3, [r7, #18]
 8003f90:	8a7b      	ldrh	r3, [r7, #18]
 8003f92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f96:	827b      	strh	r3, [r7, #18]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	8a7b      	ldrh	r3, [r7, #18]
 8003f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	8013      	strh	r3, [r2, #0]
 8003fb2:	e234      	b.n	800441e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fc8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f280 80fc 	bge.w	80041ca <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003fe8:	4013      	ands	r3, r2
 8003fea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004000:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004004:	b292      	uxth	r2, r2
 8004006:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004008:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800401e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004020:	7b1b      	ldrb	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d125      	bne.n	8004072 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800402e:	b29b      	uxth	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	3306      	adds	r3, #6
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004052:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8092 	beq.w	8004180 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004062:	6959      	ldr	r1, [r3, #20]
 8004064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004066:	88da      	ldrh	r2, [r3, #6]
 8004068:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800406c:	f004 fec1 	bl	8008df2 <USB_ReadPMA>
 8004070:	e086      	b.n	8004180 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004074:	78db      	ldrb	r3, [r3, #3]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d10a      	bne.n	8004090 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800407a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800407e:	461a      	mov	r2, r3
 8004080:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9d9 	bl	800443a <HAL_PCD_EP_DB_Receive>
 8004088:	4603      	mov	r3, r0
 800408a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800408e:	e077      	b.n	8004180 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040aa:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80040c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d024      	beq.n	8004138 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	3302      	adds	r3, #2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004116:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800411a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02e      	beq.n	8004180 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	6959      	ldr	r1, [r3, #20]
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	891a      	ldrh	r2, [r3, #8]
 800412e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004132:	f004 fe5e 	bl	8008df2 <USB_ReadPMA>
 8004136:	e023      	b.n	8004180 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004140:	b29b      	uxth	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	3306      	adds	r3, #6
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004160:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004172:	6959      	ldr	r1, [r3, #20]
 8004174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004176:	895a      	ldrh	r2, [r3, #10]
 8004178:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800417c:	f004 fe39 	bl	8008df2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004188:	441a      	add	r2, r3
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800418e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004196:	441a      	add	r2, r3
 8004198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800419c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <PCD_EP_ISR_Handler+0x514>
 80041a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80041a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d206      	bcs.n	80041be <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f006 fc48 	bl	800aa4c <HAL_PCD_DataOutStageCallback>
 80041bc:	e005      	b.n	80041ca <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041c4:	4618      	mov	r0, r3
 80041c6:	f003 f8ee 	bl	80073a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8123 	beq.w	800441e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80041d8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	3310      	adds	r3, #16
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004206:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	441a      	add	r2, r3
 8004218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800421c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004224:	b29b      	uxth	r3, r3
 8004226:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422a:	78db      	ldrb	r3, [r3, #3]
 800422c:	2b01      	cmp	r3, #1
 800422e:	f040 80a2 	bne.w	8004376 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423a:	7b1b      	ldrb	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8093 	beq.w	8004368 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004242:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d046      	beq.n	80042dc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d126      	bne.n	80042a4 <PCD_EP_ISR_Handler+0x608>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004264:	b29b      	uxth	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	4413      	add	r3, r2
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	011a      	lsls	r2, r3, #4
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	4413      	add	r3, r2
 8004278:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004288:	b29a      	uxth	r2, r3
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429c:	b29a      	uxth	r2, r3
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	801a      	strh	r2, [r3, #0]
 80042a2:	e061      	b.n	8004368 <PCD_EP_ISR_Handler+0x6cc>
 80042a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a6:	785b      	ldrb	r3, [r3, #1]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d15d      	bne.n	8004368 <PCD_EP_ISR_Handler+0x6cc>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c0:	4413      	add	r3, r2
 80042c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	011a      	lsls	r2, r3, #4
 80042ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042cc:	4413      	add	r3, r2
 80042ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	2200      	movs	r2, #0
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	e045      	b.n	8004368 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d126      	bne.n	8004338 <PCD_EP_ISR_Handler+0x69c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fe:	4413      	add	r3, r2
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	011a      	lsls	r2, r3, #4
 8004308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430a:	4413      	add	r3, r2
 800430c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004310:	633b      	str	r3, [r7, #48]	@ 0x30
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800431c:	b29a      	uxth	r2, r3
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004330:	b29a      	uxth	r2, r3
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	e017      	b.n	8004368 <PCD_EP_ISR_Handler+0x6cc>
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d113      	bne.n	8004368 <PCD_EP_ISR_Handler+0x6cc>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434e:	4413      	add	r3, r2
 8004350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	011a      	lsls	r2, r3, #4
 8004358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435a:	4413      	add	r3, r2
 800435c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	2200      	movs	r2, #0
 8004366:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f006 fb87 	bl	800aa82 <HAL_PCD_DataInStageCallback>
 8004374:	e053      	b.n	800441e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004376:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800437a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d146      	bne.n	8004410 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800438a:	b29b      	uxth	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	3302      	adds	r3, #2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80043ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d907      	bls.n	80043ca <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80043ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043c2:	1ad2      	subs	r2, r2, r3
 80043c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c6:	619a      	str	r2, [r3, #24]
 80043c8:	e002      	b.n	80043d0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80043ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043cc:	2200      	movs	r2, #0
 80043ce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80043d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f006 fb4f 	bl	800aa82 <HAL_PCD_DataInStageCallback>
 80043e4:	e01b      	b.n	800441e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043ee:	441a      	add	r2, r3
 80043f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80043f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043fc:	441a      	add	r2, r3
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004408:	4618      	mov	r0, r3
 800440a:	f002 ffcc 	bl	80073a6 <USB_EPStartXfer>
 800440e:	e006      	b.n	800441e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004410:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004414:	461a      	mov	r2, r3
 8004416:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f91b 	bl	8004654 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004426:	b29b      	uxth	r3, r3
 8004428:	b21b      	sxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	f6ff ac3b 	blt.w	8003ca6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3758      	adds	r7, #88	@ 0x58
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b088      	sub	sp, #32
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	4613      	mov	r3, r2
 8004446:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004448:	88fb      	ldrh	r3, [r7, #6]
 800444a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d07e      	beq.n	8004550 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	3302      	adds	r3, #2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	8b7b      	ldrh	r3, [r7, #26]
 8004482:	429a      	cmp	r2, r3
 8004484:	d306      	bcc.n	8004494 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	8b7b      	ldrh	r3, [r7, #26]
 800448c:	1ad2      	subs	r2, r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	619a      	str	r2, [r3, #24]
 8004492:	e002      	b.n	800449a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d123      	bne.n	80044ea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044bc:	833b      	strh	r3, [r7, #24]
 80044be:	8b3b      	ldrh	r3, [r7, #24]
 80044c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044c4:	833b      	strh	r3, [r7, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	8b3b      	ldrh	r3, [r7, #24]
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01f      	beq.n	8004534 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450e:	82fb      	strh	r3, [r7, #22]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	8afb      	ldrh	r3, [r7, #22]
 8004520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004530:	b29b      	uxth	r3, r3
 8004532:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004534:	8b7b      	ldrh	r3, [r7, #26]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8087 	beq.w	800464a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6959      	ldr	r1, [r3, #20]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	891a      	ldrh	r2, [r3, #8]
 8004548:	8b7b      	ldrh	r3, [r7, #26]
 800454a:	f004 fc52 	bl	8008df2 <USB_ReadPMA>
 800454e:	e07c      	b.n	800464a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004558:	b29b      	uxth	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	3306      	adds	r3, #6
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004578:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	8b7b      	ldrh	r3, [r7, #26]
 8004580:	429a      	cmp	r2, r3
 8004582:	d306      	bcc.n	8004592 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	1ad2      	subs	r2, r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	619a      	str	r2, [r3, #24]
 8004590:	e002      	b.n	8004598 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d123      	bne.n	80045e8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ba:	83fb      	strh	r3, [r7, #30]
 80045bc:	8bfb      	ldrh	r3, [r7, #30]
 80045be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045c2:	83fb      	strh	r3, [r7, #30]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	8bfb      	ldrh	r3, [r7, #30]
 80045d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11f      	bne.n	8004632 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460c:	83bb      	strh	r3, [r7, #28]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	8bbb      	ldrh	r3, [r7, #28]
 800461e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800462a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800462e:	b29b      	uxth	r3, r3
 8004630:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004632:	8b7b      	ldrh	r3, [r7, #26]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6959      	ldr	r1, [r3, #20]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	895a      	ldrh	r2, [r3, #10]
 8004644:	8b7b      	ldrh	r3, [r7, #26]
 8004646:	f004 fbd4 	bl	8008df2 <USB_ReadPMA>
    }
  }

  return count;
 800464a:	8b7b      	ldrh	r3, [r7, #26]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b0a4      	sub	sp, #144	@ 0x90
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	4613      	mov	r3, r2
 8004660:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 81dd 	beq.w	8004a28 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	3302      	adds	r3, #2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004696:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d907      	bls.n	80046b6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	619a      	str	r2, [r3, #24]
 80046b4:	e002      	b.n	80046bc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f040 80b9 	bne.w	8004838 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	785b      	ldrb	r3, [r3, #1]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d126      	bne.n	800471c <HAL_PCD_EP_DB_Transmit+0xc8>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046dc:	b29b      	uxth	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e2:	4413      	add	r3, r2
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	011a      	lsls	r2, r3, #4
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	4413      	add	r3, r2
 80046f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004700:	b29a      	uxth	r2, r3
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004714:	b29a      	uxth	r2, r3
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	e01a      	b.n	8004752 <HAL_PCD_EP_DB_Transmit+0xfe>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d116      	bne.n	8004752 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	637b      	str	r3, [r7, #52]	@ 0x34
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	4413      	add	r3, r2
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004744:	4413      	add	r3, r2
 8004746:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800474a:	633b      	str	r3, [r7, #48]	@ 0x30
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	2200      	movs	r2, #0
 8004750:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	785b      	ldrb	r3, [r3, #1]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d126      	bne.n	80047ae <HAL_PCD_EP_DB_Transmit+0x15a>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800476e:	b29b      	uxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	011a      	lsls	r2, r3, #4
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004792:	b29a      	uxth	r2, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	e017      	b.n	80047de <HAL_PCD_EP_DB_Transmit+0x18a>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d113      	bne.n	80047de <HAL_PCD_EP_DB_Transmit+0x18a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047be:	b29b      	uxth	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c4:	4413      	add	r3, r2
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	011a      	lsls	r2, r3, #4
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	4413      	add	r3, r2
 80047d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2200      	movs	r2, #0
 80047dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f006 f94c 	bl	800aa82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 82fc 	beq.w	8004dee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004810:	82fb      	strh	r3, [r7, #22]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8afb      	ldrh	r3, [r7, #22]
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800482e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
 8004836:	e2da      	b.n	8004dee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d021      	beq.n	8004886 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800487a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800487e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004882:	b29b      	uxth	r3, r3
 8004884:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 82ae 	bne.w	8004dee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800489a:	441a      	add	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80048a8:	441a      	add	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d30b      	bcc.n	80048d2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	621a      	str	r2, [r3, #32]
 80048d0:	e017      	b.n	8004902 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d108      	bne.n	80048ec <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80048da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80048de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80048ea:	e00a      	b.n	8004902 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2200      	movs	r2, #0
 8004900:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d165      	bne.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x382>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004918:	b29b      	uxth	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800491e:	4413      	add	r3, r2
 8004920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	011a      	lsls	r2, r3, #4
 8004928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492a:	4413      	add	r3, r2
 800492c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004930:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800493c:	b29a      	uxth	r2, r3
 800493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <HAL_PCD_EP_DB_Transmit+0x30c>
 800494a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004958:	b29a      	uxth	r2, r3
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	e057      	b.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004964:	2b3e      	cmp	r3, #62	@ 0x3e
 8004966:	d818      	bhi.n	800499a <HAL_PCD_EP_DB_Transmit+0x346>
 8004968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004970:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_PCD_EP_DB_Transmit+0x32e>
 800497c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800497e:	3301      	adds	r3, #1
 8004980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29a      	uxth	r2, r3
 8004988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498a:	b29b      	uxth	r3, r3
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	b29b      	uxth	r3, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	b29a      	uxth	r2, r3
 8004994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	e03a      	b.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800499a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x360>
 80049ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049b0:	3b01      	subs	r3, #1
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049bc:	b29b      	uxth	r3, r3
 80049be:	029b      	lsls	r3, r3, #10
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	4313      	orrs	r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	e01c      	b.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d118      	bne.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049f2:	4413      	add	r3, r2
 80049f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	011a      	lsls	r2, r3, #4
 80049fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a0e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6959      	ldr	r1, [r3, #20]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	891a      	ldrh	r2, [r3, #8]
 8004a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f004 f9a0 	bl	8008d66 <USB_WritePMA>
 8004a26:	e1e2      	b.n	8004dee <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3306      	adds	r3, #6
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a50:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d307      	bcc.n	8004a70 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a68:	1ad2      	subs	r2, r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	619a      	str	r2, [r3, #24]
 8004a6e:	e002      	b.n	8004a76 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2200      	movs	r2, #0
 8004a74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 80c0 	bne.w	8004c00 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d126      	bne.n	8004ad6 <HAL_PCD_EP_DB_Transmit+0x482>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a9c:	4413      	add	r3, r2
 8004a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	011a      	lsls	r2, r3, #4
 8004aa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004aae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	e01a      	b.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d116      	bne.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af2:	4413      	add	r3, r2
 8004af4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	011a      	lsls	r2, r3, #4
 8004afc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004afe:	4413      	add	r3, r2
 8004b00:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b08:	2200      	movs	r2, #0
 8004b0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d12b      	bne.n	8004b72 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2e:	4413      	add	r3, r2
 8004b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	011a      	lsls	r2, r3, #4
 8004b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	e017      	b.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d113      	bne.n	8004ba2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b88:	4413      	add	r3, r2
 8004b8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	011a      	lsls	r2, r3, #4
 8004b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b94:	4413      	add	r3, r2
 8004b96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f005 ff6a 	bl	800aa82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f040 811a 	bne.w	8004dee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
 8004bfe:	e0f6      	b.n	8004dee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d121      	bne.n	8004c4e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c24:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	441a      	add	r2, r3
 8004c36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 80ca 	bne.w	8004dee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c62:	441a      	add	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004c70:	441a      	add	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d30b      	bcc.n	8004c9a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	621a      	str	r2, [r3, #32]
 8004c98:	e017      	b.n	8004cca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004ca2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004cb2:	e00a      	b.n	8004cca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d165      	bne.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x750>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cec:	4413      	add	r3, r2
 8004cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	011a      	lsls	r2, r3, #4
 8004cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <HAL_PCD_EP_DB_Transmit+0x6da>
 8004d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	e054      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d32:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d34:	d818      	bhi.n	8004d68 <HAL_PCD_EP_DB_Transmit+0x714>
 8004d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004d4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	029b      	lsls	r3, r3, #10
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	e037      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4313      	orrs	r3, r2
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e019      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d115      	bne.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x784>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dba:	4413      	add	r3, r2
 8004dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	011a      	lsls	r2, r3, #4
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dd6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6959      	ldr	r1, [r3, #20]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	895a      	ldrh	r2, [r3, #10]
 8004de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f003 ffbc 	bl	8008d66 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e08:	82bb      	strh	r3, [r7, #20]
 8004e0a:	8abb      	ldrh	r3, [r7, #20]
 8004e0c:	f083 0310 	eor.w	r3, r3, #16
 8004e10:	82bb      	strh	r3, [r7, #20]
 8004e12:	8abb      	ldrh	r3, [r7, #20]
 8004e14:	f083 0320 	eor.w	r3, r3, #32
 8004e18:	82bb      	strh	r3, [r7, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	8abb      	ldrh	r3, [r7, #20]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3790      	adds	r7, #144	@ 0x90
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	817b      	strh	r3, [r7, #10]
 8004e56:	4613      	mov	r3, r2
 8004e58:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e5a:	897b      	ldrh	r3, [r7, #10]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e66:	897b      	ldrh	r3, [r7, #10]
 8004e68:	f003 0207 	and.w	r2, r3, #7
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3310      	adds	r3, #16
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e009      	b.n	8004e92 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e7e:	897a      	ldrh	r2, [r7, #10]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e92:	893b      	ldrh	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	80da      	strh	r2, [r3, #6]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004edc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ee0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f001 b823 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 817d 	beq.w	8005206 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f0c:	4bbc      	ldr	r3, [pc, #752]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d00c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f18:	4bb9      	ldr	r3, [pc, #740]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d15c      	bne.n	8004fde <HAL_RCC_OscConfig+0x10e>
 8004f24:	4bb6      	ldr	r3, [pc, #728]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f30:	d155      	bne.n	8004fde <HAL_RCC_OscConfig+0x10e>
 8004f32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f36:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d102      	bne.n	8004f64 <HAL_RCC_OscConfig+0x94>
 8004f5e:	4ba8      	ldr	r3, [pc, #672]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	e015      	b.n	8004f90 <HAL_RCC_OscConfig+0xc0>
 8004f64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f68:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004f70:	fa93 f3a3 	rbit	r3, r3
 8004f74:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004f78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f7c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004f80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004f84:	fa93 f3a3 	rbit	r3, r3
 8004f88:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004f8c:	4b9c      	ldr	r3, [pc, #624]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f94:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004f98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004f9c:	fa92 f2a2 	rbit	r2, r2
 8004fa0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004fa4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004fa8:	fab2 f282 	clz	r2, r2
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	f042 0220 	orr.w	r2, r2, #32
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	f002 021f 	and.w	r2, r2, #31
 8004fb8:	2101      	movs	r1, #1
 8004fba:	fa01 f202 	lsl.w	r2, r1, r2
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 811f 	beq.w	8005204 <HAL_RCC_OscConfig+0x334>
 8004fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 8116 	bne.w	8005204 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f000 bfaf 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fee:	d106      	bne.n	8004ffe <HAL_RCC_OscConfig+0x12e>
 8004ff0:	4b83      	ldr	r3, [pc, #524]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a82      	ldr	r2, [pc, #520]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e036      	b.n	800506c <HAL_RCC_OscConfig+0x19c>
 8004ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005002:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x158>
 800500e:	4b7c      	ldr	r3, [pc, #496]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a7b      	ldr	r2, [pc, #492]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b79      	ldr	r3, [pc, #484]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a78      	ldr	r2, [pc, #480]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e021      	b.n	800506c <HAL_RCC_OscConfig+0x19c>
 8005028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800502c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0x184>
 800503a:	4b71      	ldr	r3, [pc, #452]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a70      	ldr	r2, [pc, #448]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b6e      	ldr	r3, [pc, #440]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6d      	ldr	r2, [pc, #436]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0x19c>
 8005054:	4b6a      	ldr	r3, [pc, #424]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a69      	ldr	r2, [pc, #420]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b67      	ldr	r3, [pc, #412]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a66      	ldr	r2, [pc, #408]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800506a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800506c:	4b64      	ldr	r3, [pc, #400]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 800506e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005070:	f023 020f 	bic.w	r2, r3, #15
 8005074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005078:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	495f      	ldr	r1, [pc, #380]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005082:	4313      	orrs	r3, r2
 8005084:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800508a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d059      	beq.n	800514a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005096:	f7fc fbbb 	bl	8001810 <HAL_GetTick>
 800509a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fc fbb6 	bl	8001810 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b64      	cmp	r3, #100	@ 0x64
 80050ae:	d902      	bls.n	80050b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	f000 bf43 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
 80050b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80050c2:	fa93 f3a3 	rbit	r3, r3
 80050c6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80050ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d102      	bne.n	80050e8 <HAL_RCC_OscConfig+0x218>
 80050e2:	4b47      	ldr	r3, [pc, #284]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	e015      	b.n	8005114 <HAL_RCC_OscConfig+0x244>
 80050e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80050ec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80050f4:	fa93 f3a3 	rbit	r3, r3
 80050f8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80050fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005100:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005104:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005110:	4b3b      	ldr	r3, [pc, #236]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005118:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800511c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005120:	fa92 f2a2 	rbit	r2, r2
 8005124:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005128:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800512c:	fab2 f282 	clz	r2, r2
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	f042 0220 	orr.w	r2, r2, #32
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	f002 021f 	and.w	r2, r2, #31
 800513c:	2101      	movs	r1, #1
 800513e:	fa01 f202 	lsl.w	r2, r1, r2
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ab      	beq.n	80050a0 <HAL_RCC_OscConfig+0x1d0>
 8005148:	e05d      	b.n	8005206 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7fc fb61 	bl	8001810 <HAL_GetTick>
 800514e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005154:	f7fc fb5c 	bl	8001810 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	@ 0x64
 8005162:	d902      	bls.n	800516a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	f000 bee9 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
 800516a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800516e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005172:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005176:	fa93 f3a3 	rbit	r3, r3
 800517a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800517e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d102      	bne.n	800519c <HAL_RCC_OscConfig+0x2cc>
 8005196:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	e015      	b.n	80051c8 <HAL_RCC_OscConfig+0x2f8>
 800519c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051a0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80051b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051b4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80051b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80051bc:	fa93 f3a3 	rbit	r3, r3
 80051c0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80051c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005200 <HAL_RCC_OscConfig+0x330>)
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051cc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80051d0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80051d4:	fa92 f2a2 	rbit	r2, r2
 80051d8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80051dc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80051e0:	fab2 f282 	clz	r2, r2
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	f042 0220 	orr.w	r2, r2, #32
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	f002 021f 	and.w	r2, r2, #31
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f202 	lsl.w	r2, r1, r2
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ab      	bne.n	8005154 <HAL_RCC_OscConfig+0x284>
 80051fc:	e003      	b.n	8005206 <HAL_RCC_OscConfig+0x336>
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800520a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 817d 	beq.w	8005516 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800521c:	4ba6      	ldr	r3, [pc, #664]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005228:	4ba3      	ldr	r3, [pc, #652]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b08      	cmp	r3, #8
 8005232:	d172      	bne.n	800531a <HAL_RCC_OscConfig+0x44a>
 8005234:	4ba0      	ldr	r3, [pc, #640]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d16c      	bne.n	800531a <HAL_RCC_OscConfig+0x44a>
 8005240:	2302      	movs	r3, #2
 8005242:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800524a:	fa93 f3a3 	rbit	r3, r3
 800524e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005252:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d102      	bne.n	8005270 <HAL_RCC_OscConfig+0x3a0>
 800526a:	4b93      	ldr	r3, [pc, #588]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	e013      	b.n	8005298 <HAL_RCC_OscConfig+0x3c8>
 8005270:	2302      	movs	r3, #2
 8005272:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005282:	2302      	movs	r3, #2
 8005284:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005288:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800528c:	fa93 f3a3 	rbit	r3, r3
 8005290:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005294:	4b88      	ldr	r3, [pc, #544]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	2202      	movs	r2, #2
 800529a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800529e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80052a2:	fa92 f2a2 	rbit	r2, r2
 80052a6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80052aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80052ae:	fab2 f282 	clz	r2, r2
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	f042 0220 	orr.w	r2, r2, #32
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f002 021f 	and.w	r2, r2, #31
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCC_OscConfig+0x410>
 80052ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f000 be2e 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e0:	4b75      	ldr	r3, [pc, #468]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	21f8      	movs	r1, #248	@ 0xf8
 80052f6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80052fe:	fa91 f1a1 	rbit	r1, r1
 8005302:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005306:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800530a:	fab1 f181 	clz	r1, r1
 800530e:	b2c9      	uxtb	r1, r1
 8005310:	408b      	lsls	r3, r1
 8005312:	4969      	ldr	r1, [pc, #420]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005318:	e0fd      	b.n	8005516 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800531a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800531e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8088 	beq.w	800543c <HAL_RCC_OscConfig+0x56c>
 800532c:	2301      	movs	r3, #1
 800532e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800533e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800534c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	461a      	mov	r2, r3
 8005354:	2301      	movs	r3, #1
 8005356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fc fa5a 	bl	8001810 <HAL_GetTick>
 800535c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005362:	f7fc fa55 	bl	8001810 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d902      	bls.n	8005378 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	f000 bde2 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
 8005378:	2302      	movs	r3, #2
 800537a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800538a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538e:	fab3 f383 	clz	r3, r3
 8005392:	b2db      	uxtb	r3, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d102      	bne.n	80053a8 <HAL_RCC_OscConfig+0x4d8>
 80053a2:	4b45      	ldr	r3, [pc, #276]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	e013      	b.n	80053d0 <HAL_RCC_OscConfig+0x500>
 80053a8:	2302      	movs	r3, #2
 80053aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80053b2:	fa93 f3a3 	rbit	r3, r3
 80053b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80053ba:	2302      	movs	r3, #2
 80053bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80053c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80053c4:	fa93 f3a3 	rbit	r3, r3
 80053c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80053cc:	4b3a      	ldr	r3, [pc, #232]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	2202      	movs	r2, #2
 80053d2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80053d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80053da:	fa92 f2a2 	rbit	r2, r2
 80053de:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80053e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80053e6:	fab2 f282 	clz	r2, r2
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	f042 0220 	orr.w	r2, r2, #32
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	f002 021f 	and.w	r2, r2, #31
 80053f6:	2101      	movs	r1, #1
 80053f8:	fa01 f202 	lsl.w	r2, r1, r2
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0af      	beq.n	8005362 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005402:	4b2d      	ldr	r3, [pc, #180]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800540a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800540e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	21f8      	movs	r1, #248	@ 0xf8
 8005418:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005420:	fa91 f1a1 	rbit	r1, r1
 8005424:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005428:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800542c:	fab1 f181 	clz	r1, r1
 8005430:	b2c9      	uxtb	r1, r1
 8005432:	408b      	lsls	r3, r1
 8005434:	4920      	ldr	r1, [pc, #128]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
 800543a:	e06c      	b.n	8005516 <HAL_RCC_OscConfig+0x646>
 800543c:	2301      	movs	r3, #1
 800543e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005442:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005446:	fa93 f3a3 	rbit	r3, r3
 800544a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800544e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005452:	fab3 f383 	clz	r3, r3
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800545c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	461a      	mov	r2, r3
 8005464:	2300      	movs	r3, #0
 8005466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fc f9d2 	bl	8001810 <HAL_GetTick>
 800546c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005470:	e00a      	b.n	8005488 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005472:	f7fc f9cd 	bl	8001810 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d902      	bls.n	8005488 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	f000 bd5a 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
 8005488:	2302      	movs	r3, #2
 800548a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800549a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	fab3 f383 	clz	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d104      	bne.n	80054bc <HAL_RCC_OscConfig+0x5ec>
 80054b2:	4b01      	ldr	r3, [pc, #4]	@ (80054b8 <HAL_RCC_OscConfig+0x5e8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	e015      	b.n	80054e4 <HAL_RCC_OscConfig+0x614>
 80054b8:	40021000 	.word	0x40021000
 80054bc:	2302      	movs	r3, #2
 80054be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054c6:	fa93 f3a3 	rbit	r3, r3
 80054ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80054ce:	2302      	movs	r3, #2
 80054d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80054d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80054d8:	fa93 f3a3 	rbit	r3, r3
 80054dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80054e0:	4bc8      	ldr	r3, [pc, #800]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	2202      	movs	r2, #2
 80054e6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80054ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80054ee:	fa92 f2a2 	rbit	r2, r2
 80054f2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80054f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80054fa:	fab2 f282 	clz	r2, r2
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	f042 0220 	orr.w	r2, r2, #32
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	f002 021f 	and.w	r2, r2, #31
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f202 	lsl.w	r2, r1, r2
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ad      	bne.n	8005472 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800551a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8110 	beq.w	800574c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d079      	beq.n	8005630 <HAL_RCC_OscConfig+0x760>
 800553c:	2301      	movs	r3, #1
 800553e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800554e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005552:	fab3 f383 	clz	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	4bab      	ldr	r3, [pc, #684]	@ (8005808 <HAL_RCC_OscConfig+0x938>)
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	461a      	mov	r2, r3
 8005562:	2301      	movs	r3, #1
 8005564:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005566:	f7fc f953 	bl	8001810 <HAL_GetTick>
 800556a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005570:	f7fc f94e 	bl	8001810 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d902      	bls.n	8005586 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	f000 bcdb 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
 8005586:	2302      	movs	r3, #2
 8005588:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800559c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80055a0:	2202      	movs	r2, #2
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	fa93 f2a3 	rbit	r2, r3
 80055b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	2202      	movs	r2, #2
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	fa93 f2a3 	rbit	r2, r3
 80055d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055e0:	4b88      	ldr	r3, [pc, #544]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 80055e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80055ec:	2102      	movs	r1, #2
 80055ee:	6019      	str	r1, [r3, #0]
 80055f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	fa93 f1a3 	rbit	r1, r3
 80055fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005602:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005606:	6019      	str	r1, [r3, #0]
  return result;
 8005608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800560c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	fab3 f383 	clz	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0a0      	beq.n	8005570 <HAL_RCC_OscConfig+0x6a0>
 800562e:	e08d      	b.n	800574c <HAL_RCC_OscConfig+0x87c>
 8005630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005634:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005640:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	fa93 f2a3 	rbit	r2, r3
 800564a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800564e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005652:	601a      	str	r2, [r3, #0]
  return result;
 8005654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005658:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800565c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	4b68      	ldr	r3, [pc, #416]	@ (8005808 <HAL_RCC_OscConfig+0x938>)
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	461a      	mov	r2, r3
 800566e:	2300      	movs	r3, #0
 8005670:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005672:	f7fc f8cd 	bl	8001810 <HAL_GetTick>
 8005676:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800567a:	e00a      	b.n	8005692 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567c:	f7fc f8c8 	bl	8001810 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d902      	bls.n	8005692 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	f000 bc55 	b.w	8005f3c <HAL_RCC_OscConfig+0x106c>
 8005692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005696:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800569a:	2202      	movs	r2, #2
 800569c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	fa93 f2a3 	rbit	r2, r3
 80056ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056be:	2202      	movs	r2, #2
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	fa93 f2a3 	rbit	r2, r3
 80056d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80056e2:	2202      	movs	r2, #2
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	fa93 f2a3 	rbit	r2, r3
 80056f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80056fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fe:	4b41      	ldr	r3, [pc, #260]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 8005700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005706:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800570a:	2102      	movs	r1, #2
 800570c:	6019      	str	r1, [r3, #0]
 800570e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005712:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	fa93 f1a3 	rbit	r1, r3
 800571c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005720:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005724:	6019      	str	r1, [r3, #0]
  return result;
 8005726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800572a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2101      	movs	r1, #1
 8005742:	fa01 f303 	lsl.w	r3, r1, r3
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d197      	bne.n	800567c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005750:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 81a1 	beq.w	8005aa4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005762:	2300      	movs	r3, #0
 8005764:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005768:	4b26      	ldr	r3, [pc, #152]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d116      	bne.n	80057a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005774:	4b23      	ldr	r3, [pc, #140]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	4a22      	ldr	r2, [pc, #136]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577e:	61d3      	str	r3, [r2, #28]
 8005780:	4b20      	ldr	r3, [pc, #128]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800578c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005796:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800579a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a2:	4b1a      	ldr	r3, [pc, #104]	@ (800580c <HAL_RCC_OscConfig+0x93c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d11a      	bne.n	80057e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ae:	4b17      	ldr	r3, [pc, #92]	@ (800580c <HAL_RCC_OscConfig+0x93c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a16      	ldr	r2, [pc, #88]	@ (800580c <HAL_RCC_OscConfig+0x93c>)
 80057b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ba:	f7fc f829 	bl	8001810 <HAL_GetTick>
 80057be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c2:	e009      	b.n	80057d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c4:	f7fc f824 	bl	8001810 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b64      	cmp	r3, #100	@ 0x64
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e3b1      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d8:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <HAL_RCC_OscConfig+0x93c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ef      	beq.n	80057c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d10d      	bne.n	8005810 <HAL_RCC_OscConfig+0x940>
 80057f4:	4b03      	ldr	r3, [pc, #12]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	4a02      	ldr	r2, [pc, #8]	@ (8005804 <HAL_RCC_OscConfig+0x934>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6213      	str	r3, [r2, #32]
 8005800:	e03c      	b.n	800587c <HAL_RCC_OscConfig+0x9ac>
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	10908120 	.word	0x10908120
 800580c:	40007000 	.word	0x40007000
 8005810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005814:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <HAL_RCC_OscConfig+0x96a>
 8005820:	4bc1      	ldr	r3, [pc, #772]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	4ac0      	ldr	r2, [pc, #768]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	6213      	str	r3, [r2, #32]
 800582c:	4bbe      	ldr	r3, [pc, #760]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	4abd      	ldr	r2, [pc, #756]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005832:	f023 0304 	bic.w	r3, r3, #4
 8005836:	6213      	str	r3, [r2, #32]
 8005838:	e020      	b.n	800587c <HAL_RCC_OscConfig+0x9ac>
 800583a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800583e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b05      	cmp	r3, #5
 8005848:	d10c      	bne.n	8005864 <HAL_RCC_OscConfig+0x994>
 800584a:	4bb7      	ldr	r3, [pc, #732]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4ab6      	ldr	r2, [pc, #728]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005850:	f043 0304 	orr.w	r3, r3, #4
 8005854:	6213      	str	r3, [r2, #32]
 8005856:	4bb4      	ldr	r3, [pc, #720]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4ab3      	ldr	r2, [pc, #716]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	6213      	str	r3, [r2, #32]
 8005862:	e00b      	b.n	800587c <HAL_RCC_OscConfig+0x9ac>
 8005864:	4bb0      	ldr	r3, [pc, #704]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	4aaf      	ldr	r2, [pc, #700]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	6213      	str	r3, [r2, #32]
 8005870:	4bad      	ldr	r3, [pc, #692]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	4aac      	ldr	r2, [pc, #688]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005876:	f023 0304 	bic.w	r3, r3, #4
 800587a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800587c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8081 	beq.w	8005990 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588e:	f7fb ffbf 	bl	8001810 <HAL_GetTick>
 8005892:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005898:	f7fb ffba 	bl	8001810 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e345      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
 80058b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80058b8:	2202      	movs	r2, #2
 80058ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	fa93 f2a3 	rbit	r2, r3
 80058ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80058dc:	2202      	movs	r2, #2
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	fa93 f2a3 	rbit	r2, r3
 80058ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80058f6:	601a      	str	r2, [r3, #0]
  return result;
 80058f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005900:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005902:	fab3 f383 	clz	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f043 0302 	orr.w	r3, r3, #2
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d102      	bne.n	800591c <HAL_RCC_OscConfig+0xa4c>
 8005916:	4b84      	ldr	r3, [pc, #528]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	e013      	b.n	8005944 <HAL_RCC_OscConfig+0xa74>
 800591c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005920:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005924:	2202      	movs	r2, #2
 8005926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800592c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	fa93 f2a3 	rbit	r2, r3
 8005936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800593a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	4b79      	ldr	r3, [pc, #484]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005948:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800594c:	2102      	movs	r1, #2
 800594e:	6011      	str	r1, [r2, #0]
 8005950:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005954:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	fa92 f1a2 	rbit	r1, r2
 800595e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005962:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005966:	6011      	str	r1, [r2, #0]
  return result;
 8005968:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800596c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	fab2 f282 	clz	r2, r2
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	f002 021f 	and.w	r2, r2, #31
 8005982:	2101      	movs	r1, #1
 8005984:	fa01 f202 	lsl.w	r2, r1, r2
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d084      	beq.n	8005898 <HAL_RCC_OscConfig+0x9c8>
 800598e:	e07f      	b.n	8005a90 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005990:	f7fb ff3e 	bl	8001810 <HAL_GetTick>
 8005994:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005998:	e00b      	b.n	80059b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800599a:	f7fb ff39 	bl	8001810 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e2c4      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
 80059b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80059ba:	2202      	movs	r2, #2
 80059bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	fa93 f2a3 	rbit	r2, r3
 80059cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80059de:	2202      	movs	r2, #2
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	fa93 f2a3 	rbit	r2, r3
 80059f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80059f8:	601a      	str	r2, [r3, #0]
  return result;
 80059fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005a02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a04:	fab3 f383 	clz	r3, r3
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f043 0302 	orr.w	r3, r3, #2
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d102      	bne.n	8005a1e <HAL_RCC_OscConfig+0xb4e>
 8005a18:	4b43      	ldr	r3, [pc, #268]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	e013      	b.n	8005a46 <HAL_RCC_OscConfig+0xb76>
 8005a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a22:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005a26:	2202      	movs	r2, #2
 8005a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a2e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	fa93 f2a3 	rbit	r2, r3
 8005a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a3c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	4b39      	ldr	r3, [pc, #228]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a4a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005a4e:	2102      	movs	r1, #2
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a56:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	fa92 f1a2 	rbit	r1, r2
 8005a60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a64:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005a68:	6011      	str	r1, [r2, #0]
  return result;
 8005a6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a6e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	fab2 f282 	clz	r2, r2
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	f002 021f 	and.w	r2, r2, #31
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d184      	bne.n	800599a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a90:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d105      	bne.n	8005aa4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a98:	4b23      	ldr	r3, [pc, #140]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aa2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8242 	beq.w	8005f3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b28 <HAL_RCC_OscConfig+0xc58>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	f000 8213 	beq.w	8005eea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ac8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	f040 8162 	bne.w	8005d9a <HAL_RCC_OscConfig+0xeca>
 8005ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ada:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005ade:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ae8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	fa93 f2a3 	rbit	r2, r3
 8005af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005af6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005afa:	601a      	str	r2, [r3, #0]
  return result;
 8005afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b00:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005b04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b06:	fab3 f383 	clz	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005b10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	461a      	mov	r2, r3
 8005b18:	2300      	movs	r3, #0
 8005b1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fb fe78 	bl	8001810 <HAL_GetTick>
 8005b20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b24:	e00c      	b.n	8005b40 <HAL_RCC_OscConfig+0xc70>
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fb fe70 	bl	8001810 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e1fd      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
 8005b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b44:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b52:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	fa93 f2a3 	rbit	r2, r3
 8005b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b60:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005b64:	601a      	str	r2, [r3, #0]
  return result;
 8005b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b6a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005b6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b70:	fab3 f383 	clz	r3, r3
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d102      	bne.n	8005b8a <HAL_RCC_OscConfig+0xcba>
 8005b84:	4bb0      	ldr	r3, [pc, #704]	@ (8005e48 <HAL_RCC_OscConfig+0xf78>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	e027      	b.n	8005bda <HAL_RCC_OscConfig+0xd0a>
 8005b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b8e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005b92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b9c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	fa93 f2a3 	rbit	r2, r3
 8005ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005baa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bb4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bc2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	fa93 f2a3 	rbit	r2, r3
 8005bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bd0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8005e48 <HAL_RCC_OscConfig+0xf78>)
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bde:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005be2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005be6:	6011      	str	r1, [r2, #0]
 8005be8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	fa92 f1a2 	rbit	r1, r2
 8005bf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005bfa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005bfe:	6011      	str	r1, [r2, #0]
  return result;
 8005c00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005c04:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	fab2 f282 	clz	r2, r2
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	f042 0220 	orr.w	r2, r2, #32
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	f002 021f 	and.w	r2, r2, #31
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c20:	4013      	ands	r3, r2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d182      	bne.n	8005b2c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c26:	4b88      	ldr	r3, [pc, #544]	@ (8005e48 <HAL_RCC_OscConfig+0xf78>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	430b      	orrs	r3, r1
 8005c48:	497f      	ldr	r1, [pc, #508]	@ (8005e48 <HAL_RCC_OscConfig+0xf78>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	604b      	str	r3, [r1, #4]
 8005c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c52:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005c56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c60:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	fa93 f2a3 	rbit	r2, r3
 8005c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c6e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005c72:	601a      	str	r2, [r3, #0]
  return result;
 8005c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c78:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005c7c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005c88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2301      	movs	r3, #1
 8005c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fb fdbc 	bl	8001810 <HAL_GetTick>
 8005c98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c9c:	e009      	b.n	8005cb2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c9e:	f7fb fdb7 	bl	8001810 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e144      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
 8005cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cb6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005cba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cc4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	fa93 f2a3 	rbit	r2, r3
 8005cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cd2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005cd6:	601a      	str	r2, [r3, #0]
  return result;
 8005cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cdc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005ce0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d102      	bne.n	8005cfc <HAL_RCC_OscConfig+0xe2c>
 8005cf6:	4b54      	ldr	r3, [pc, #336]	@ (8005e48 <HAL_RCC_OscConfig+0xf78>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	e027      	b.n	8005d4c <HAL_RCC_OscConfig+0xe7c>
 8005cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d00:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005d04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	fa93 f2a3 	rbit	r2, r3
 8005d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d1c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d26:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005d2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d34:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	fa93 f2a3 	rbit	r2, r3
 8005d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d42:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	4b3f      	ldr	r3, [pc, #252]	@ (8005e48 <HAL_RCC_OscConfig+0xf78>)
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d50:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005d54:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005d58:	6011      	str	r1, [r2, #0]
 8005d5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d5e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005d62:	6812      	ldr	r2, [r2, #0]
 8005d64:	fa92 f1a2 	rbit	r1, r2
 8005d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d6c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005d70:	6011      	str	r1, [r2, #0]
  return result;
 8005d72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d76:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	fab2 f282 	clz	r2, r2
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	f042 0220 	orr.w	r2, r2, #32
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	f002 021f 	and.w	r2, r2, #31
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d92:	4013      	ands	r3, r2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d082      	beq.n	8005c9e <HAL_RCC_OscConfig+0xdce>
 8005d98:	e0cf      	b.n	8005f3a <HAL_RCC_OscConfig+0x106a>
 8005d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d9e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005da2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	fa93 f2a3 	rbit	r2, r3
 8005db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005dbe:	601a      	str	r2, [r3, #0]
  return result;
 8005dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dc4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005dc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dca:	fab3 f383 	clz	r3, r3
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005dd4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2300      	movs	r3, #0
 8005dde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fb fd16 	bl	8001810 <HAL_GetTick>
 8005de4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de8:	e009      	b.n	8005dfe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dea:	f7fb fd11 	bl	8001810 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e09e      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
 8005dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e02:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005e06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e10:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	fa93 f2a3 	rbit	r2, r3
 8005e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e1e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005e22:	601a      	str	r2, [r3, #0]
  return result;
 8005e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e28:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005e2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e2e:	fab3 f383 	clz	r3, r3
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f043 0301 	orr.w	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d104      	bne.n	8005e4c <HAL_RCC_OscConfig+0xf7c>
 8005e42:	4b01      	ldr	r3, [pc, #4]	@ (8005e48 <HAL_RCC_OscConfig+0xf78>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	e029      	b.n	8005e9c <HAL_RCC_OscConfig+0xfcc>
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e50:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005e54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e5e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fa93 f2a3 	rbit	r2, r3
 8005e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e6c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e76:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005e7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e84:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	fa93 f2a3 	rbit	r2, r3
 8005e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e92:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	4b2b      	ldr	r3, [pc, #172]	@ (8005f48 <HAL_RCC_OscConfig+0x1078>)
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ea0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005ea4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005ea8:	6011      	str	r1, [r2, #0]
 8005eaa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005eae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	fa92 f1a2 	rbit	r1, r2
 8005eb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ebc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005ec0:	6011      	str	r1, [r2, #0]
  return result;
 8005ec2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005ec6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	fab2 f282 	clz	r2, r2
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	f042 0220 	orr.w	r2, r2, #32
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	f002 021f 	and.w	r2, r2, #31
 8005edc:	2101      	movs	r1, #1
 8005ede:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d180      	bne.n	8005dea <HAL_RCC_OscConfig+0xf1a>
 8005ee8:	e027      	b.n	8005f3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e01e      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005efe:	4b12      	ldr	r3, [pc, #72]	@ (8005f48 <HAL_RCC_OscConfig+0x1078>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005f0a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d10b      	bne.n	8005f36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005f1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005f22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000

08005f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b09e      	sub	sp, #120	@ 0x78
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e162      	b.n	800622a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f64:	4b90      	ldr	r3, [pc, #576]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d910      	bls.n	8005f94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f72:	4b8d      	ldr	r3, [pc, #564]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f023 0207 	bic.w	r2, r3, #7
 8005f7a:	498b      	ldr	r1, [pc, #556]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f82:	4b89      	ldr	r3, [pc, #548]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e14a      	b.n	800622a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa0:	4b82      	ldr	r3, [pc, #520]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	497f      	ldr	r1, [pc, #508]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80dc 	beq.w	8006178 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d13c      	bne.n	8006042 <HAL_RCC_ClockConfig+0xf6>
 8005fc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005fcc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fd0:	fa93 f3a3 	rbit	r3, r3
 8005fd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd8:	fab3 f383 	clz	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d102      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0xa6>
 8005fec:	4b6f      	ldr	r3, [pc, #444]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	e00f      	b.n	8006012 <HAL_RCC_ClockConfig+0xc6>
 8005ff2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ffa:	fa93 f3a3 	rbit	r3, r3
 8005ffe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006000:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006004:	663b      	str	r3, [r7, #96]	@ 0x60
 8006006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006008:	fa93 f3a3 	rbit	r3, r3
 800600c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800600e:	4b67      	ldr	r3, [pc, #412]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006016:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006018:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800601a:	fa92 f2a2 	rbit	r2, r2
 800601e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006020:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006022:	fab2 f282 	clz	r2, r2
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	f042 0220 	orr.w	r2, r2, #32
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	f002 021f 	and.w	r2, r2, #31
 8006032:	2101      	movs	r1, #1
 8006034:	fa01 f202 	lsl.w	r2, r1, r2
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d17b      	bne.n	8006136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e0f3      	b.n	800622a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d13c      	bne.n	80060c4 <HAL_RCC_ClockConfig+0x178>
 800604a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800604e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006052:	fa93 f3a3 	rbit	r3, r3
 8006056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605a:	fab3 f383 	clz	r3, r3
 800605e:	b2db      	uxtb	r3, r3
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b01      	cmp	r3, #1
 800606c:	d102      	bne.n	8006074 <HAL_RCC_ClockConfig+0x128>
 800606e:	4b4f      	ldr	r3, [pc, #316]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	e00f      	b.n	8006094 <HAL_RCC_ClockConfig+0x148>
 8006074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006078:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800607c:	fa93 f3a3 	rbit	r3, r3
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
 8006082:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006086:	643b      	str	r3, [r7, #64]	@ 0x40
 8006088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800608a:	fa93 f3a3 	rbit	r3, r3
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006090:	4b46      	ldr	r3, [pc, #280]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006098:	63ba      	str	r2, [r7, #56]	@ 0x38
 800609a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800609c:	fa92 f2a2 	rbit	r2, r2
 80060a0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80060a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060a4:	fab2 f282 	clz	r2, r2
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	f042 0220 	orr.w	r2, r2, #32
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	f002 021f 	and.w	r2, r2, #31
 80060b4:	2101      	movs	r1, #1
 80060b6:	fa01 f202 	lsl.w	r2, r1, r2
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d13a      	bne.n	8006136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0b2      	b.n	800622a <HAL_RCC_ClockConfig+0x2de>
 80060c4:	2302      	movs	r3, #2
 80060c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	fa93 f3a3 	rbit	r3, r3
 80060ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80060d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d2:	fab3 f383 	clz	r3, r3
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d102      	bne.n	80060ec <HAL_RCC_ClockConfig+0x1a0>
 80060e6:	4b31      	ldr	r3, [pc, #196]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	e00d      	b.n	8006108 <HAL_RCC_ClockConfig+0x1bc>
 80060ec:	2302      	movs	r3, #2
 80060ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	fa93 f3a3 	rbit	r3, r3
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f8:	2302      	movs	r3, #2
 80060fa:	623b      	str	r3, [r7, #32]
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	fa93 f3a3 	rbit	r3, r3
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	4b29      	ldr	r3, [pc, #164]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	2202      	movs	r2, #2
 800610a:	61ba      	str	r2, [r7, #24]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	fa92 f2a2 	rbit	r2, r2
 8006112:	617a      	str	r2, [r7, #20]
  return result;
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	fab2 f282 	clz	r2, r2
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	f042 0220 	orr.w	r2, r2, #32
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	f002 021f 	and.w	r2, r2, #31
 8006126:	2101      	movs	r1, #1
 8006128:	fa01 f202 	lsl.w	r2, r1, r2
 800612c:	4013      	ands	r3, r2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e079      	b.n	800622a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006136:	4b1d      	ldr	r3, [pc, #116]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f023 0203 	bic.w	r2, r3, #3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	491a      	ldr	r1, [pc, #104]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8006144:	4313      	orrs	r3, r2
 8006146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006148:	f7fb fb62 	bl	8001810 <HAL_GetTick>
 800614c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614e:	e00a      	b.n	8006166 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006150:	f7fb fb5e 	bl	8001810 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e061      	b.n	800622a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006166:	4b11      	ldr	r3, [pc, #68]	@ (80061ac <HAL_RCC_ClockConfig+0x260>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 020c 	and.w	r2, r3, #12
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	429a      	cmp	r2, r3
 8006176:	d1eb      	bne.n	8006150 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006178:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d214      	bcs.n	80061b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006186:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f023 0207 	bic.w	r2, r3, #7
 800618e:	4906      	ldr	r1, [pc, #24]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006196:	4b04      	ldr	r3, [pc, #16]	@ (80061a8 <HAL_RCC_ClockConfig+0x25c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e040      	b.n	800622a <HAL_RCC_ClockConfig+0x2de>
 80061a8:	40022000 	.word	0x40022000
 80061ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	491a      	ldr	r1, [pc, #104]	@ (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061da:	4b16      	ldr	r3, [pc, #88]	@ (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4912      	ldr	r1, [pc, #72]	@ (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80061ee:	f000 f829 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 80061f2:	4601      	mov	r1, r0
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <HAL_RCC_ClockConfig+0x2e8>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061fc:	22f0      	movs	r2, #240	@ 0xf0
 80061fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	fa92 f2a2 	rbit	r2, r2
 8006206:	60fa      	str	r2, [r7, #12]
  return result;
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	fab2 f282 	clz	r2, r2
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	40d3      	lsrs	r3, r2
 8006212:	4a09      	ldr	r2, [pc, #36]	@ (8006238 <HAL_RCC_ClockConfig+0x2ec>)
 8006214:	5cd3      	ldrb	r3, [r2, r3]
 8006216:	fa21 f303 	lsr.w	r3, r1, r3
 800621a:	4a08      	ldr	r2, [pc, #32]	@ (800623c <HAL_RCC_ClockConfig+0x2f0>)
 800621c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800621e:	4b08      	ldr	r3, [pc, #32]	@ (8006240 <HAL_RCC_ClockConfig+0x2f4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f7fb fab0 	bl	8001788 <HAL_InitTick>
  
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3778      	adds	r7, #120	@ 0x78
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000
 8006238:	0800f710 	.word	0x0800f710
 800623c:	20000000 	.word	0x20000000
 8006240:	20000004 	.word	0x20000004

08006244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800625e:	4b1e      	ldr	r3, [pc, #120]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 030c 	and.w	r3, r3, #12
 800626a:	2b04      	cmp	r3, #4
 800626c:	d002      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0x30>
 800626e:	2b08      	cmp	r3, #8
 8006270:	d003      	beq.n	800627a <HAL_RCC_GetSysClockFreq+0x36>
 8006272:	e026      	b.n	80062c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006274:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x98>)
 8006276:	613b      	str	r3, [r7, #16]
      break;
 8006278:	e026      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	0c9b      	lsrs	r3, r3, #18
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	4a17      	ldr	r2, [pc, #92]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006284:	5cd3      	ldrb	r3, [r2, r3]
 8006286:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006288:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	4a14      	ldr	r2, [pc, #80]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006292:	5cd3      	ldrb	r3, [r2, r3]
 8006294:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062a0:	4a0e      	ldr	r2, [pc, #56]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x98>)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	e004      	b.n	80062bc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a0c      	ldr	r2, [pc, #48]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	613b      	str	r3, [r7, #16]
      break;
 80062c0:	e002      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062c2:	4b06      	ldr	r3, [pc, #24]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x98>)
 80062c4:	613b      	str	r3, [r7, #16]
      break;
 80062c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062c8:	693b      	ldr	r3, [r7, #16]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	007a1200 	.word	0x007a1200
 80062e0:	0800f720 	.word	0x0800f720
 80062e4:	0800f730 	.word	0x0800f730
 80062e8:	003d0900 	.word	0x003d0900

080062ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b092      	sub	sp, #72	@ 0x48
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80062fc:	2300      	movs	r3, #0
 80062fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80d4 	beq.w	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006310:	4b4e      	ldr	r3, [pc, #312]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10e      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800631c:	4b4b      	ldr	r3, [pc, #300]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4a4a      	ldr	r2, [pc, #296]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006326:	61d3      	str	r3, [r2, #28]
 8006328:	4b48      	ldr	r3, [pc, #288]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800633a:	4b45      	ldr	r3, [pc, #276]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d118      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006346:	4b42      	ldr	r3, [pc, #264]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a41      	ldr	r2, [pc, #260]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800634c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006350:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006352:	f7fb fa5d 	bl	8001810 <HAL_GetTick>
 8006356:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006358:	e008      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800635a:	f7fb fa59 	bl	8001810 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b64      	cmp	r3, #100	@ 0x64
 8006366:	d901      	bls.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e169      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636c:	4b38      	ldr	r3, [pc, #224]	@ (8006450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006378:	4b34      	ldr	r3, [pc, #208]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8084 	beq.w	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006392:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006394:	429a      	cmp	r2, r3
 8006396:	d07c      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006398:	4b2c      	ldr	r3, [pc, #176]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80063a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	fa93 f3a3 	rbit	r3, r3
 80063ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063b2:	fab3 f383 	clz	r3, r3
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	4b26      	ldr	r3, [pc, #152]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	461a      	mov	r2, r3
 80063c2:	2301      	movs	r3, #1
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80063ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ce:	fa93 f3a3 	rbit	r3, r3
 80063d2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80063d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063d6:	fab3 f383 	clz	r3, r3
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	4b1d      	ldr	r3, [pc, #116]	@ (8006454 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	461a      	mov	r2, r3
 80063e6:	2300      	movs	r3, #0
 80063e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80063ea:	4a18      	ldr	r2, [pc, #96]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80063f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d04b      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063fa:	f7fb fa09 	bl	8001810 <HAL_GetTick>
 80063fe:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006400:	e00a      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006402:	f7fb fa05 	bl	8001810 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006410:	4293      	cmp	r3, r2
 8006412:	d901      	bls.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e113      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006418:	2302      	movs	r3, #2
 800641a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	fa93 f3a3 	rbit	r3, r3
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
 8006424:	2302      	movs	r3, #2
 8006426:	623b      	str	r3, [r7, #32]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	fa93 f3a3 	rbit	r3, r3
 800642e:	61fb      	str	r3, [r7, #28]
  return result;
 8006430:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006432:	fab3 f383 	clz	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d108      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006446:	4b01      	ldr	r3, [pc, #4]	@ (800644c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	e00d      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800644c:	40021000 	.word	0x40021000
 8006450:	40007000 	.word	0x40007000
 8006454:	10908100 	.word	0x10908100
 8006458:	2302      	movs	r3, #2
 800645a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	fa93 f3a3 	rbit	r3, r3
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	4b78      	ldr	r3, [pc, #480]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	2202      	movs	r2, #2
 800646a:	613a      	str	r2, [r7, #16]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	fa92 f2a2 	rbit	r2, r2
 8006472:	60fa      	str	r2, [r7, #12]
  return result;
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	fab2 f282 	clz	r2, r2
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	f002 021f 	and.w	r2, r2, #31
 8006486:	2101      	movs	r1, #1
 8006488:	fa01 f202 	lsl.w	r2, r1, r2
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0b7      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006492:	4b6d      	ldr	r3, [pc, #436]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	496a      	ldr	r1, [pc, #424]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ac:	4b66      	ldr	r3, [pc, #408]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	4a65      	ldr	r2, [pc, #404]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064c4:	4b60      	ldr	r3, [pc, #384]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	f023 0203 	bic.w	r2, r3, #3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	495d      	ldr	r1, [pc, #372]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064e2:	4b59      	ldr	r3, [pc, #356]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	4956      	ldr	r1, [pc, #344]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006500:	4b51      	ldr	r3, [pc, #324]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006504:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	494e      	ldr	r1, [pc, #312]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800651e:	4b4a      	ldr	r3, [pc, #296]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006522:	f023 0210 	bic.w	r2, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	4947      	ldr	r1, [pc, #284]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800652c:	4313      	orrs	r3, r2
 800652e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800653c:	4b42      	ldr	r3, [pc, #264]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	493f      	ldr	r1, [pc, #252]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800655a:	4b3b      	ldr	r3, [pc, #236]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	f023 0220 	bic.w	r2, r3, #32
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	4938      	ldr	r1, [pc, #224]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006568:	4313      	orrs	r3, r2
 800656a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006578:	4b33      	ldr	r3, [pc, #204]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	4930      	ldr	r1, [pc, #192]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006586:	4313      	orrs	r3, r2
 8006588:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006596:	4b2c      	ldr	r3, [pc, #176]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	4929      	ldr	r1, [pc, #164]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065b4:	4b24      	ldr	r3, [pc, #144]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	4921      	ldr	r1, [pc, #132]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80065d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065de:	491a      	ldr	r1, [pc, #104]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80065f0:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	4912      	ldr	r1, [pc, #72]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d008      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800660e:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006612:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661a:	490b      	ldr	r1, [pc, #44]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800662c:	4b06      	ldr	r3, [pc, #24]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006630:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006638:	4903      	ldr	r1, [pc, #12]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800663a:	4313      	orrs	r3, r2
 800663c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3748      	adds	r7, #72	@ 0x48
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40021000 	.word	0x40021000

0800664c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e09d      	b.n	800679a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800666e:	d009      	beq.n	8006684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
 8006676:	e005      	b.n	8006684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fa fede 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066c4:	d902      	bls.n	80066cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	e002      	b.n	80066d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80066d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80066da:	d007      	beq.n	80066ec <HAL_SPI_Init+0xa0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066e4:	d002      	beq.n	80066ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672e:	ea42 0103 	orr.w	r1, r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006736:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	0c1b      	lsrs	r3, r3, #16
 8006748:	f003 0204 	and.w	r2, r3, #4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006768:	ea42 0103 	orr.w	r1, r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006788:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067b2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80067b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067d8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80067dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	4013      	ands	r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006844:	b480      	push	{r7}
 8006846:	b09d      	sub	sp, #116	@ 0x74
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	78db      	ldrb	r3, [r3, #3]
 8006872:	2b03      	cmp	r3, #3
 8006874:	d81f      	bhi.n	80068b6 <USB_ActivateEndpoint+0x72>
 8006876:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <USB_ActivateEndpoint+0x38>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	0800688d 	.word	0x0800688d
 8006880:	080068a9 	.word	0x080068a9
 8006884:	080068bf 	.word	0x080068bf
 8006888:	0800689b 	.word	0x0800689b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800688c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006890:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006894:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006898:	e012      	b.n	80068c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800689a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800689e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80068a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80068a6:	e00b      	b.n	80068c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80068a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80068b4:	e004      	b.n	80068c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80068bc:	e000      	b.n	80068c0 <USB_ActivateEndpoint+0x7c>
      break;
 80068be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068de:	b29b      	uxth	r3, r3
 80068e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068fa:	b21a      	sxth	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b21b      	sxth	r3, r3
 8006902:	4313      	orrs	r3, r2
 8006904:	b21b      	sxth	r3, r3
 8006906:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	7b1b      	ldrb	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 8178 	bne.w	8006c26 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8084 	beq.w	8006a48 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	4413      	add	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	011a      	lsls	r2, r3, #4
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	88db      	ldrh	r3, [r3, #6]
 8006968:	085b      	lsrs	r3, r3, #1
 800696a:	b29b      	uxth	r3, r3
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	827b      	strh	r3, [r7, #18]
 8006982:	8a7b      	ldrh	r3, [r7, #18]
 8006984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <USB_ActivateEndpoint+0x180>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800699e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a2:	823b      	strh	r3, [r7, #16]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	8a3b      	ldrh	r3, [r7, #16]
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	78db      	ldrb	r3, [r3, #3]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d020      	beq.n	8006a0e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e2:	81bb      	strh	r3, [r7, #12]
 80069e4:	89bb      	ldrh	r3, [r7, #12]
 80069e6:	f083 0320 	eor.w	r3, r3, #32
 80069ea:	81bb      	strh	r3, [r7, #12]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	89bb      	ldrh	r3, [r7, #12]
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
 8006a0c:	e2d5      	b.n	8006fba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a24:	81fb      	strh	r3, [r7, #14]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	441a      	add	r2, r3
 8006a30:	89fb      	ldrh	r3, [r7, #14]
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
 8006a46:	e2b8      	b.n	8006fba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	4413      	add	r3, r2
 8006a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	011a      	lsls	r2, r3, #4
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	88db      	ldrh	r3, [r3, #6]
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	4413      	add	r3, r2
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	011a      	lsls	r2, r3, #4
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <USB_ActivateEndpoint+0x28a>
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e039      	b.n	8006b42 <USB_ActivateEndpoint+0x2fe>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ad4:	d818      	bhi.n	8006b08 <USB_ActivateEndpoint+0x2c4>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <USB_ActivateEndpoint+0x2ac>
 8006aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006aec:	3301      	adds	r3, #1
 8006aee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e01c      	b.n	8006b42 <USB_ActivateEndpoint+0x2fe>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <USB_ActivateEndpoint+0x2de>
 8006b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	029b      	lsls	r3, r3, #10
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	4313      	orrs	r3, r2
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006b50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01b      	beq.n	8006b92 <USB_ActivateEndpoint+0x34e>
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b70:	843b      	strh	r3, [r7, #32]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	8c3b      	ldrh	r3, [r7, #32]
 8006b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d124      	bne.n	8006be4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb0:	83bb      	strh	r3, [r7, #28]
 8006bb2:	8bbb      	ldrh	r3, [r7, #28]
 8006bb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006bb8:	83bb      	strh	r3, [r7, #28]
 8006bba:	8bbb      	ldrh	r3, [r7, #28]
 8006bbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006bc0:	83bb      	strh	r3, [r7, #28]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8bbb      	ldrh	r3, [r7, #28]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
 8006be2:	e1ea      	b.n	8006fba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfa:	83fb      	strh	r3, [r7, #30]
 8006bfc:	8bfb      	ldrh	r3, [r7, #30]
 8006bfe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c02:	83fb      	strh	r3, [r7, #30]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	441a      	add	r2, r3
 8006c0e:	8bfb      	ldrh	r3, [r7, #30]
 8006c10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	8013      	strh	r3, [r2, #0]
 8006c24:	e1c9      	b.n	8006fba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	78db      	ldrb	r3, [r3, #3]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d11e      	bne.n	8006c6c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c44:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	441a      	add	r2, r3
 8006c52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c5e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]
 8006c6a:	e01d      	b.n	8006ca8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cb8:	4413      	add	r3, r2
 8006cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	011a      	lsls	r2, r3, #4
 8006cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	891b      	ldrh	r3, [r3, #8]
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cda:	801a      	strh	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cec:	4413      	add	r3, r2
 8006cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	011a      	lsls	r2, r3, #4
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	895b      	ldrh	r3, [r3, #10]
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 8093 	bne.w	8006e40 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006d2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01b      	beq.n	8006d6e <USB_ActivateEndpoint+0x52a>
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006d7c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01b      	beq.n	8006dbe <USB_ActivateEndpoint+0x57a>
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006dd6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006dd8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ddc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006dde:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006de0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006de4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	441a      	add	r2, r3
 8006df0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
 8006e3e:	e0bc      	b.n	8006fba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006e50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01d      	beq.n	8006e98 <USB_ActivateEndpoint+0x654>
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e72:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006ea8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01d      	beq.n	8006ef0 <USB_ActivateEndpoint+0x6ac>
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	78db      	ldrb	r3, [r3, #3]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d024      	beq.n	8006f42 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f0e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006f12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006f16:	f083 0320 	eor.w	r3, r3, #32
 8006f1a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8013      	strh	r3, [r2, #0]
 8006f40:	e01d      	b.n	8006f7e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f58:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	441a      	add	r2, r3
 8006f66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f94:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	441a      	add	r2, r3
 8006fa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006fba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3774      	adds	r7, #116	@ 0x74
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop

08006fcc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b08d      	sub	sp, #52	@ 0x34
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	7b1b      	ldrb	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 808e 	bne.w	80070fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d044      	beq.n	8007072 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	81bb      	strh	r3, [r7, #12]
 8006ff6:	89bb      	ldrh	r3, [r7, #12]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01b      	beq.n	8007038 <USB_DeactivateEndpoint+0x6c>
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007016:	817b      	strh	r3, [r7, #10]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	441a      	add	r2, r3
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800702c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007030:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007034:	b29b      	uxth	r3, r3
 8007036:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800704a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800704e:	813b      	strh	r3, [r7, #8]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	893b      	ldrh	r3, [r7, #8]
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]
 8007070:	e192      	b.n	8007398 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	827b      	strh	r3, [r7, #18]
 8007080:	8a7b      	ldrh	r3, [r7, #18]
 8007082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01b      	beq.n	80070c2 <USB_DeactivateEndpoint+0xf6>
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800709c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a0:	823b      	strh	r3, [r7, #16]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	441a      	add	r2, r3
 80070ac:	8a3b      	ldrh	r3, [r7, #16]
 80070ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070be:	b29b      	uxth	r3, r3
 80070c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d8:	81fb      	strh	r3, [r7, #14]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	89fb      	ldrh	r3, [r7, #14]
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
 80070fa:	e14d      	b.n	8007398 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	785b      	ldrb	r3, [r3, #1]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 80a5 	bne.w	8007250 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	843b      	strh	r3, [r7, #32]
 8007114:	8c3b      	ldrh	r3, [r7, #32]
 8007116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01b      	beq.n	8007156 <USB_DeactivateEndpoint+0x18a>
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007134:	83fb      	strh	r3, [r7, #30]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	441a      	add	r2, r3
 8007140:	8bfb      	ldrh	r3, [r7, #30]
 8007142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800714a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800714e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007152:	b29b      	uxth	r3, r3
 8007154:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	83bb      	strh	r3, [r7, #28]
 8007164:	8bbb      	ldrh	r3, [r7, #28]
 8007166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01b      	beq.n	80071a6 <USB_DeactivateEndpoint+0x1da>
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007184:	837b      	strh	r3, [r7, #26]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	441a      	add	r2, r3
 8007190:	8b7b      	ldrh	r3, [r7, #26]
 8007192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800719a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800719e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071bc:	833b      	strh	r3, [r7, #24]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	441a      	add	r2, r3
 80071c8:	8b3b      	ldrh	r3, [r7, #24]
 80071ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071da:	b29b      	uxth	r3, r3
 80071dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071f4:	82fb      	strh	r3, [r7, #22]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	8afb      	ldrh	r3, [r7, #22]
 8007202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800720a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800722c:	82bb      	strh	r3, [r7, #20]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	441a      	add	r2, r3
 8007238:	8abb      	ldrh	r3, [r7, #20]
 800723a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800723e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724a:	b29b      	uxth	r3, r3
 800724c:	8013      	strh	r3, [r2, #0]
 800724e:	e0a3      	b.n	8007398 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800725e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01b      	beq.n	80072a0 <USB_DeactivateEndpoint+0x2d4>
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800727a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800727e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	441a      	add	r2, r3
 800728a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800728c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007290:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800729c:	b29b      	uxth	r3, r3
 800729e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80072ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01b      	beq.n	80072f0 <USB_DeactivateEndpoint+0x324>
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007306:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800731c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007324:	b29b      	uxth	r3, r3
 8007326:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800733a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007376:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800738c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007394:	b29b      	uxth	r3, r3
 8007396:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3734      	adds	r7, #52	@ 0x34
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b0c2      	sub	sp, #264	@ 0x108
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b4:	6018      	str	r0, [r3, #0]
 80073b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073be:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 86b7 	bne.w	8008140 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80073d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d908      	bls.n	8007400 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80073ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80073fe:	e007      	b.n	8007410 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	7b1b      	ldrb	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d13a      	bne.n	8007496 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6959      	ldr	r1, [r3, #20]
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	88da      	ldrh	r2, [r3, #6]
 8007438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743c:	b29b      	uxth	r3, r3
 800743e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007442:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007446:	6800      	ldr	r0, [r0, #0]
 8007448:	f001 fc8d 	bl	8008d66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007466:	b29b      	uxth	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	011a      	lsls	r2, r3, #4
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4413      	add	r3, r2
 8007482:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748c:	b29a      	uxth	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	f000 be1f 	b.w	80080d4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	78db      	ldrb	r3, [r3, #3]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	f040 8462 	bne.w	8007d6c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80074a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6a1a      	ldr	r2, [r3, #32]
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	f240 83df 	bls.w	8007c84 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80074f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	441a      	add	r2, r3
 800750a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800750e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007516:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800751a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751e:	b29b      	uxth	r3, r3
 8007520:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 81c7 	beq.w	80078f6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	633b      	str	r3, [r7, #48]	@ 0x30
 8007574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d177      	bne.n	8007674 <USB_EPStartXfer+0x2ce>
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800759e:	b29b      	uxth	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	4413      	add	r3, r2
 80075a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	011a      	lsls	r2, r3, #4
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	4413      	add	r3, r2
 80075ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <USB_EPStartXfer+0x248>
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	e067      	b.n	80076be <USB_EPStartXfer+0x318>
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80075f4:	d81c      	bhi.n	8007630 <USB_EPStartXfer+0x28a>
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <USB_EPStartXfer+0x270>
 800760c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007610:	3301      	adds	r3, #1
 8007612:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29a      	uxth	r2, r3
 800761c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007620:	b29b      	uxth	r3, r3
 8007622:	029b      	lsls	r3, r3, #10
 8007624:	b29b      	uxth	r3, r3
 8007626:	4313      	orrs	r3, r2
 8007628:	b29a      	uxth	r2, r3
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	e046      	b.n	80076be <USB_EPStartXfer+0x318>
 8007630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800763a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	2b00      	cmp	r3, #0
 8007644:	d104      	bne.n	8007650 <USB_EPStartXfer+0x2aa>
 8007646:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800764a:	3b01      	subs	r3, #1
 800764c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29a      	uxth	r2, r3
 8007656:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800765a:	b29b      	uxth	r3, r3
 800765c:	029b      	lsls	r3, r3, #10
 800765e:	b29b      	uxth	r3, r3
 8007660:	4313      	orrs	r3, r2
 8007662:	b29b      	uxth	r3, r3
 8007664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766c:	b29a      	uxth	r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	e024      	b.n	80076be <USB_EPStartXfer+0x318>
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d11c      	bne.n	80076be <USB_EPStartXfer+0x318>
 8007684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007692:	b29b      	uxth	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	4413      	add	r3, r2
 800769a:	633b      	str	r3, [r7, #48]	@ 0x30
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	011a      	lsls	r2, r3, #4
 80076aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	895b      	ldrh	r3, [r3, #10]
 80076ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6959      	ldr	r1, [r3, #20]
 80076da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076ec:	6800      	ldr	r0, [r0, #0]
 80076ee:	f001 fb3a 	bl	8008d66 <USB_WritePMA>
            ep->xfer_buff += len;
 80076f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007702:	441a      	add	r2, r3
 8007704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	429a      	cmp	r2, r3
 800772a:	d90f      	bls.n	800774c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a1a      	ldr	r2, [r3, #32]
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773c:	1ad2      	subs	r2, r2, r3
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	621a      	str	r2, [r3, #32]
 800774a:	e00e      	b.n	800776a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800776a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d177      	bne.n	800786a <USB_EPStartXfer+0x4c4>
 800777a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007794:	b29b      	uxth	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	4413      	add	r3, r2
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	011a      	lsls	r2, r3, #4
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	4413      	add	r3, r2
 80077b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <USB_EPStartXfer+0x43e>
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077dc:	b29a      	uxth	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	e06d      	b.n	80078c0 <USB_EPStartXfer+0x51a>
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80077ea:	d81c      	bhi.n	8007826 <USB_EPStartXfer+0x480>
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <USB_EPStartXfer+0x466>
 8007802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007806:	3301      	adds	r3, #1
 8007808:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29a      	uxth	r2, r3
 8007812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b29a      	uxth	r2, r3
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e04c      	b.n	80078c0 <USB_EPStartXfer+0x51a>
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007834:	f003 031f 	and.w	r3, r3, #31
 8007838:	2b00      	cmp	r3, #0
 800783a:	d104      	bne.n	8007846 <USB_EPStartXfer+0x4a0>
 800783c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007840:	3b01      	subs	r3, #1
 8007842:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007850:	b29b      	uxth	r3, r3
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	b29b      	uxth	r3, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	b29b      	uxth	r3, r3
 800785a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007862:	b29a      	uxth	r2, r3
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	e02a      	b.n	80078c0 <USB_EPStartXfer+0x51a>
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d122      	bne.n	80078c0 <USB_EPStartXfer+0x51a>
 800787a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007894:	b29b      	uxth	r3, r3
 8007896:	461a      	mov	r2, r3
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	4413      	add	r3, r2
 800789c:	623b      	str	r3, [r7, #32]
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	011a      	lsls	r2, r3, #4
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	4413      	add	r3, r2
 80078b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078b4:	61fb      	str	r3, [r7, #28]
 80078b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	891b      	ldrh	r3, [r3, #8]
 80078cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6959      	ldr	r1, [r3, #20]
 80078dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078ee:	6800      	ldr	r0, [r0, #0]
 80078f0:	f001 fa39 	bl	8008d66 <USB_WritePMA>
 80078f4:	e3ee      	b.n	80080d4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	785b      	ldrb	r3, [r3, #1]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d177      	bne.n	80079f6 <USB_EPStartXfer+0x650>
 8007906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007926:	4413      	add	r3, r2
 8007928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800792a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	011a      	lsls	r2, r3, #4
 8007938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800793a:	4413      	add	r3, r2
 800793c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007940:	647b      	str	r3, [r7, #68]	@ 0x44
 8007942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800794c:	b29a      	uxth	r2, r3
 800794e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <USB_EPStartXfer+0x5ca>
 800795a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e06d      	b.n	8007a4c <USB_EPStartXfer+0x6a6>
 8007970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007974:	2b3e      	cmp	r3, #62	@ 0x3e
 8007976:	d81c      	bhi.n	80079b2 <USB_EPStartXfer+0x60c>
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <USB_EPStartXfer+0x5f2>
 800798e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007992:	3301      	adds	r3, #1
 8007994:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29a      	uxth	r2, r3
 800799e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	029b      	lsls	r3, r3, #10
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	e04c      	b.n	8007a4c <USB_EPStartXfer+0x6a6>
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <USB_EPStartXfer+0x62c>
 80079c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079cc:	3b01      	subs	r3, #1
 80079ce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	029b      	lsls	r3, r3, #10
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4313      	orrs	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	e02a      	b.n	8007a4c <USB_EPStartXfer+0x6a6>
 80079f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d122      	bne.n	8007a4c <USB_EPStartXfer+0x6a6>
 8007a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a26:	4413      	add	r3, r2
 8007a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	011a      	lsls	r2, r3, #4
 8007a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	891b      	ldrh	r3, [r3, #8]
 8007a58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6959      	ldr	r1, [r3, #20]
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a72:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a76:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	f001 f973 	bl	8008d66 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a90:	441a      	add	r2, r3
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6a1a      	ldr	r2, [r3, #32]
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d90f      	bls.n	8007ada <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	1ad2      	subs	r2, r2, r3
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	621a      	str	r2, [r3, #32]
 8007ad8:	e00e      	b.n	8007af8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2200      	movs	r2, #0
 8007af6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	785b      	ldrb	r3, [r3, #1]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d177      	bne.n	8007c04 <USB_EPStartXfer+0x85e>
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	4413      	add	r3, r2
 8007b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	011a      	lsls	r2, r3, #4
 8007b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b48:	4413      	add	r3, r2
 8007b4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <USB_EPStartXfer+0x7d8>
 8007b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	e067      	b.n	8007c4e <USB_EPStartXfer+0x8a8>
 8007b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b82:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b84:	d81c      	bhi.n	8007bc0 <USB_EPStartXfer+0x81a>
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <USB_EPStartXfer+0x800>
 8007b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	029b      	lsls	r3, r3, #10
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bbc:	801a      	strh	r2, [r3, #0]
 8007bbe:	e046      	b.n	8007c4e <USB_EPStartXfer+0x8a8>
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d104      	bne.n	8007be0 <USB_EPStartXfer+0x83a>
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	029b      	lsls	r3, r3, #10
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e024      	b.n	8007c4e <USB_EPStartXfer+0x8a8>
 8007c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d11c      	bne.n	8007c4e <USB_EPStartXfer+0x8a8>
 8007c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c28:	4413      	add	r3, r2
 8007c2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	011a      	lsls	r2, r3, #4
 8007c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	895b      	ldrh	r3, [r3, #10]
 8007c5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6959      	ldr	r1, [r3, #20]
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c7c:	6800      	ldr	r0, [r0, #0]
 8007c7e:	f001 f872 	bl	8008d66 <USB_WritePMA>
 8007c82:	e227      	b.n	80080d4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d10:	4413      	add	r3, r2
 8007d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	011a      	lsls	r2, r3, #4
 8007d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d24:	4413      	add	r3, r2
 8007d26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	891b      	ldrh	r3, [r3, #8]
 8007d42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6959      	ldr	r1, [r3, #20]
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d64:	6800      	ldr	r0, [r0, #0]
 8007d66:	f000 fffe 	bl	8008d66 <USB_WritePMA>
 8007d6a:	e1b3      	b.n	80080d4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6a1a      	ldr	r2, [r3, #32]
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	1ad2      	subs	r2, r2, r3
 8007d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 80c6 	beq.w	8007f3e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d177      	bne.n	8007ebe <USB_EPStartXfer+0xb18>
 8007dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dee:	4413      	add	r3, r2
 8007df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	011a      	lsls	r2, r3, #4
 8007e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e02:	4413      	add	r3, r2
 8007e04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <USB_EPStartXfer+0xa92>
 8007e22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	e067      	b.n	8007f08 <USB_EPStartXfer+0xb62>
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e3e:	d81c      	bhi.n	8007e7a <USB_EPStartXfer+0xad4>
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <USB_EPStartXfer+0xaba>
 8007e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	029b      	lsls	r3, r3, #10
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	4313      	orrs	r3, r2
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e76:	801a      	strh	r2, [r3, #0]
 8007e78:	e046      	b.n	8007f08 <USB_EPStartXfer+0xb62>
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <USB_EPStartXfer+0xaf4>
 8007e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007e94:	3b01      	subs	r3, #1
 8007e96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eba:	801a      	strh	r2, [r3, #0]
 8007ebc:	e024      	b.n	8007f08 <USB_EPStartXfer+0xb62>
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d11c      	bne.n	8007f08 <USB_EPStartXfer+0xb62>
 8007ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ee2:	4413      	add	r3, r2
 8007ee4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	011a      	lsls	r2, r3, #4
 8007ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007efc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	895b      	ldrh	r3, [r3, #10]
 8007f14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6959      	ldr	r1, [r3, #20]
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f36:	6800      	ldr	r0, [r0, #0]
 8007f38:	f000 ff15 	bl	8008d66 <USB_WritePMA>
 8007f3c:	e0ca      	b.n	80080d4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d177      	bne.n	800803e <USB_EPStartXfer+0xc98>
 8007f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f6e:	4413      	add	r3, r2
 8007f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	011a      	lsls	r2, r3, #4
 8007f80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007f82:	4413      	add	r3, r2
 8007f84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f98:	801a      	strh	r2, [r3, #0]
 8007f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10a      	bne.n	8007fb8 <USB_EPStartXfer+0xc12>
 8007fa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fb4:	801a      	strh	r2, [r3, #0]
 8007fb6:	e073      	b.n	80080a0 <USB_EPStartXfer+0xcfa>
 8007fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fbe:	d81c      	bhi.n	8007ffa <USB_EPStartXfer+0xc54>
 8007fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <USB_EPStartXfer+0xc3a>
 8007fd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007fda:	3301      	adds	r3, #1
 8007fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	029b      	lsls	r3, r3, #10
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e052      	b.n	80080a0 <USB_EPStartXfer+0xcfa>
 8007ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <USB_EPStartXfer+0xc74>
 8008010:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008014:	3b01      	subs	r3, #1
 8008016:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800801a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29a      	uxth	r2, r3
 8008020:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008024:	b29b      	uxth	r3, r3
 8008026:	029b      	lsls	r3, r3, #10
 8008028:	b29b      	uxth	r3, r3
 800802a:	4313      	orrs	r3, r2
 800802c:	b29b      	uxth	r3, r3
 800802e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008036:	b29a      	uxth	r2, r3
 8008038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	e030      	b.n	80080a0 <USB_EPStartXfer+0xcfa>
 800803e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	785b      	ldrb	r3, [r3, #1]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d128      	bne.n	80080a0 <USB_EPStartXfer+0xcfa>
 800804e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800805c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800806a:	b29b      	uxth	r3, r3
 800806c:	461a      	mov	r2, r3
 800806e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008072:	4413      	add	r3, r2
 8008074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	011a      	lsls	r2, r3, #4
 8008086:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800808a:	4413      	add	r3, r2
 800808c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008098:	b29a      	uxth	r2, r3
 800809a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800809e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	891b      	ldrh	r3, [r3, #8]
 80080ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6959      	ldr	r1, [r3, #20]
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80080ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80080ce:	6800      	ldr	r0, [r0, #0]
 80080d0:	f000 fe49 	bl	8008d66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080fa:	817b      	strh	r3, [r7, #10]
 80080fc:	897b      	ldrh	r3, [r7, #10]
 80080fe:	f083 0310 	eor.w	r3, r3, #16
 8008102:	817b      	strh	r3, [r7, #10]
 8008104:	897b      	ldrh	r3, [r7, #10]
 8008106:	f083 0320 	eor.w	r3, r3, #32
 800810a:	817b      	strh	r3, [r7, #10]
 800810c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	441a      	add	r2, r3
 8008126:	897b      	ldrh	r3, [r7, #10]
 8008128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800812c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008138:	b29b      	uxth	r3, r3
 800813a:	8013      	strh	r3, [r2, #0]
 800813c:	f000 bcdf 	b.w	8008afe <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	7b1b      	ldrb	r3, [r3, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 80bc 	bne.w	80082ca <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	699a      	ldr	r2, [r3, #24]
 800815e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d917      	bls.n	800819e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	619a      	str	r2, [r3, #24]
 800819c:	e00e      	b.n	80081bc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800819e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2200      	movs	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081d8:	b29b      	uxth	r3, r3
 80081da:	461a      	mov	r2, r3
 80081dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081e0:	4413      	add	r3, r2
 80081e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	011a      	lsls	r2, r3, #4
 80081f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081f8:	4413      	add	r3, r2
 80081fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800820e:	b29a      	uxth	r2, r3
 8008210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008214:	801a      	strh	r2, [r3, #0]
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10d      	bne.n	800823a <USB_EPStartXfer+0xe94>
 800821e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	f000 bc28 	b.w	8008a8a <USB_EPStartXfer+0x16e4>
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008240:	d81f      	bhi.n	8008282 <USB_EPStartXfer+0xedc>
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <USB_EPStartXfer+0xebc>
 8008258:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800825c:	3301      	adds	r3, #1
 800825e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29a      	uxth	r2, r3
 800826a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800826e:	b29b      	uxth	r3, r3
 8008270:	029b      	lsls	r3, r3, #10
 8008272:	b29b      	uxth	r3, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	b29a      	uxth	r2, r3
 8008278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	f000 bc04 	b.w	8008a8a <USB_EPStartXfer+0x16e4>
 8008282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	2b00      	cmp	r3, #0
 8008296:	d104      	bne.n	80082a2 <USB_EPStartXfer+0xefc>
 8008298:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800829c:	3b01      	subs	r3, #1
 800829e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	029b      	lsls	r3, r3, #10
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e3df      	b.n	8008a8a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	78db      	ldrb	r3, [r3, #3]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	f040 8218 	bne.w	800870c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f040 809d 	bne.w	8008428 <USB_EPStartXfer+0x1082>
 80082ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800830a:	b29b      	uxth	r3, r3
 800830c:	461a      	mov	r2, r3
 800830e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008312:	4413      	add	r3, r2
 8008314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	011a      	lsls	r2, r3, #4
 8008326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800832a:	4413      	add	r3, r2
 800832c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008340:	b29a      	uxth	r2, r3
 8008342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800834c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10c      	bne.n	8008372 <USB_EPStartXfer+0xfcc>
 8008358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008368:	b29a      	uxth	r2, r3
 800836a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800836e:	801a      	strh	r2, [r3, #0]
 8008370:	e08f      	b.n	8008492 <USB_EPStartXfer+0x10ec>
 8008372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008380:	d826      	bhi.n	80083d0 <USB_EPStartXfer+0x102a>
 8008382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <USB_EPStartXfer+0x100c>
 80083a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ac:	3301      	adds	r3, #1
 80083ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083be:	b29b      	uxth	r3, r3
 80083c0:	029b      	lsls	r3, r3, #10
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	4313      	orrs	r3, r2
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083cc:	801a      	strh	r2, [r3, #0]
 80083ce:	e060      	b.n	8008492 <USB_EPStartXfer+0x10ec>
 80083d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	095b      	lsrs	r3, r3, #5
 80083de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <USB_EPStartXfer+0x105a>
 80083f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083fa:	3b01      	subs	r3, #1
 80083fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29a      	uxth	r2, r3
 8008408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800840c:	b29b      	uxth	r3, r3
 800840e:	029b      	lsls	r3, r3, #10
 8008410:	b29b      	uxth	r3, r3
 8008412:	4313      	orrs	r3, r2
 8008414:	b29b      	uxth	r3, r3
 8008416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800841a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841e:	b29a      	uxth	r2, r3
 8008420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	e034      	b.n	8008492 <USB_EPStartXfer+0x10ec>
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d12c      	bne.n	8008492 <USB_EPStartXfer+0x10ec>
 8008438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008454:	b29b      	uxth	r3, r3
 8008456:	461a      	mov	r2, r3
 8008458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800845c:	4413      	add	r3, r2
 800845e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	011a      	lsls	r2, r3, #4
 8008470:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008474:	4413      	add	r3, r2
 8008476:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800847a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800847e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	b29a      	uxth	r2, r3
 800848c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008490:	801a      	strh	r2, [r3, #0]
 8008492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f040 809d 	bne.w	80085ec <USB_EPStartXfer+0x1246>
 80084b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084d6:	4413      	add	r3, r2
 80084d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	011a      	lsls	r2, r3, #4
 80084ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084ee:	4413      	add	r3, r2
 80084f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80084f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10c      	bne.n	8008536 <USB_EPStartXfer+0x1190>
 800851c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852c:	b29a      	uxth	r2, r3
 800852e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	e088      	b.n	8008648 <USB_EPStartXfer+0x12a2>
 8008536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b3e      	cmp	r3, #62	@ 0x3e
 8008544:	d826      	bhi.n	8008594 <USB_EPStartXfer+0x11ee>
 8008546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d004      	beq.n	8008576 <USB_EPStartXfer+0x11d0>
 800856c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008570:	3301      	adds	r3, #1
 8008572:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008576:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29a      	uxth	r2, r3
 800857e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008582:	b29b      	uxth	r3, r3
 8008584:	029b      	lsls	r3, r3, #10
 8008586:	b29b      	uxth	r3, r3
 8008588:	4313      	orrs	r3, r2
 800858a:	b29a      	uxth	r2, r3
 800858c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	e059      	b.n	8008648 <USB_EPStartXfer+0x12a2>
 8008594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f003 031f 	and.w	r3, r3, #31
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d104      	bne.n	80085c4 <USB_EPStartXfer+0x121e>
 80085ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085be:	3b01      	subs	r3, #1
 80085c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	029b      	lsls	r3, r3, #10
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4313      	orrs	r3, r2
 80085d8:	b29b      	uxth	r3, r3
 80085da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	e02d      	b.n	8008648 <USB_EPStartXfer+0x12a2>
 80085ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d125      	bne.n	8008648 <USB_EPStartXfer+0x12a2>
 80085fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800860a:	b29b      	uxth	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008612:	4413      	add	r3, r2
 8008614:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	011a      	lsls	r2, r3, #4
 8008626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800862a:	4413      	add	r3, r2
 800862c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008630:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	b29a      	uxth	r2, r3
 8008642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008646:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8218 	beq.w	8008a8a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800865a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800867a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800867e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <USB_EPStartXfer+0x12ec>
 8008686:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800868a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10d      	bne.n	80086ae <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008692:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 81f5 	bne.w	8008a8a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80086a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f040 81ee 	bne.w	8008a8a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80086ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80086d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	441a      	add	r2, r3
 80086f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80086f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008702:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008706:	b29b      	uxth	r3, r3
 8008708:	8013      	strh	r3, [r2, #0]
 800870a:	e1be      	b.n	8008a8a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800870c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	78db      	ldrb	r3, [r3, #3]
 8008718:	2b01      	cmp	r3, #1
 800871a:	f040 81b4 	bne.w	8008a86 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800871e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800872e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	429a      	cmp	r2, r3
 8008738:	d917      	bls.n	800876a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800873a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800874a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699a      	ldr	r2, [r3, #24]
 8008756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	619a      	str	r2, [r3, #24]
 8008768:	e00e      	b.n	8008788 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800876a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800877a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2200      	movs	r2, #0
 8008786:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	785b      	ldrb	r3, [r3, #1]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f040 8085 	bne.w	80088a4 <USB_EPStartXfer+0x14fe>
 800879a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087be:	4413      	add	r3, r2
 80087c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	011a      	lsls	r2, r3, #4
 80087d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087d6:	4413      	add	r3, r2
 80087d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80087dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10c      	bne.n	8008816 <USB_EPStartXfer+0x1470>
 80087fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800880c:	b29a      	uxth	r2, r3
 800880e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008812:	801a      	strh	r2, [r3, #0]
 8008814:	e077      	b.n	8008906 <USB_EPStartXfer+0x1560>
 8008816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881a:	2b3e      	cmp	r3, #62	@ 0x3e
 800881c:	d81e      	bhi.n	800885c <USB_EPStartXfer+0x14b6>
 800881e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008822:	085b      	lsrs	r3, r3, #1
 8008824:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <USB_EPStartXfer+0x1498>
 8008834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008838:	3301      	adds	r3, #1
 800883a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800883e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29a      	uxth	r2, r3
 8008846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800884a:	b29b      	uxth	r3, r3
 800884c:	029b      	lsls	r3, r3, #10
 800884e:	b29b      	uxth	r3, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	b29a      	uxth	r2, r3
 8008854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008858:	801a      	strh	r2, [r3, #0]
 800885a:	e054      	b.n	8008906 <USB_EPStartXfer+0x1560>
 800885c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008860:	095b      	lsrs	r3, r3, #5
 8008862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	2b00      	cmp	r3, #0
 8008870:	d104      	bne.n	800887c <USB_EPStartXfer+0x14d6>
 8008872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008876:	3b01      	subs	r3, #1
 8008878:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800887c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29a      	uxth	r2, r3
 8008884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008888:	b29b      	uxth	r3, r3
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	b29b      	uxth	r3, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	b29b      	uxth	r3, r3
 8008892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800889a:	b29a      	uxth	r2, r3
 800889c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	e030      	b.n	8008906 <USB_EPStartXfer+0x1560>
 80088a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d128      	bne.n	8008906 <USB_EPStartXfer+0x1560>
 80088b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80088c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088d8:	4413      	add	r3, r2
 80088da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80088de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	011a      	lsls	r2, r3, #4
 80088ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fe:	b29a      	uxth	r2, r3
 8008900:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008904:	801a      	strh	r2, [r3, #0]
 8008906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800890a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f040 8085 	bne.w	8008a30 <USB_EPStartXfer+0x168a>
 8008926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008942:	b29b      	uxth	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800894a:	4413      	add	r3, r2
 800894c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	011a      	lsls	r2, r3, #4
 800895e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008962:	4413      	add	r3, r2
 8008964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800896c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008978:	b29a      	uxth	r2, r3
 800897a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10c      	bne.n	80089a2 <USB_EPStartXfer+0x15fc>
 8008988:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008998:	b29a      	uxth	r2, r3
 800899a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800899e:	801a      	strh	r2, [r3, #0]
 80089a0:	e073      	b.n	8008a8a <USB_EPStartXfer+0x16e4>
 80089a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80089a8:	d81e      	bhi.n	80089e8 <USB_EPStartXfer+0x1642>
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	085b      	lsrs	r3, r3, #1
 80089b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <USB_EPStartXfer+0x1624>
 80089c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089c4:	3301      	adds	r3, #1
 80089c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	029b      	lsls	r3, r3, #10
 80089da:	b29b      	uxth	r3, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	b29a      	uxth	r2, r3
 80089e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80089e4:	801a      	strh	r2, [r3, #0]
 80089e6:	e050      	b.n	8008a8a <USB_EPStartXfer+0x16e4>
 80089e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d104      	bne.n	8008a08 <USB_EPStartXfer+0x1662>
 80089fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a02:	3b01      	subs	r3, #1
 8008a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	029b      	lsls	r3, r3, #10
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	e02c      	b.n	8008a8a <USB_EPStartXfer+0x16e4>
 8008a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d124      	bne.n	8008a8a <USB_EPStartXfer+0x16e4>
 8008a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	461a      	mov	r2, r3
 8008a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008a56:	4413      	add	r3, r2
 8008a58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	011a      	lsls	r2, r3, #4
 8008a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008a6e:	4413      	add	r3, r2
 8008a70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a82:	801a      	strh	r2, [r3, #0]
 8008a84:	e001      	b.n	8008a8a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e03a      	b.n	8008b00 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ab4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ab8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008abc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008ac0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ac4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ac8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	441a      	add	r2, r3
 8008ae6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d020      	beq.n	8008b5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b32:	81bb      	strh	r3, [r7, #12]
 8008b34:	89bb      	ldrh	r3, [r7, #12]
 8008b36:	f083 0310 	eor.w	r3, r3, #16
 8008b3a:	81bb      	strh	r3, [r7, #12]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	441a      	add	r2, r3
 8008b46:	89bb      	ldrh	r3, [r7, #12]
 8008b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	8013      	strh	r3, [r2, #0]
 8008b5c:	e01f      	b.n	8008b9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b74:	81fb      	strh	r3, [r7, #14]
 8008b76:	89fb      	ldrh	r3, [r7, #14]
 8008b78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b7c:	81fb      	strh	r3, [r7, #14]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	441a      	add	r2, r3
 8008b88:	89fb      	ldrh	r3, [r7, #14]
 8008b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	7b1b      	ldrb	r3, [r3, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f040 809d 	bne.w	8008cfa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d04c      	beq.n	8008c62 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	823b      	strh	r3, [r7, #16]
 8008bd6:	8a3b      	ldrh	r3, [r7, #16]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01b      	beq.n	8008c18 <USB_EPClearStall+0x6c>
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf6:	81fb      	strh	r3, [r7, #14]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	441a      	add	r2, r3
 8008c02:	89fb      	ldrh	r3, [r7, #14]
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	78db      	ldrb	r3, [r3, #3]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d06c      	beq.n	8008cfa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c36:	81bb      	strh	r3, [r7, #12]
 8008c38:	89bb      	ldrh	r3, [r7, #12]
 8008c3a:	f083 0320 	eor.w	r3, r3, #32
 8008c3e:	81bb      	strh	r3, [r7, #12]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	441a      	add	r2, r3
 8008c4a:	89bb      	ldrh	r3, [r7, #12]
 8008c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	8013      	strh	r3, [r2, #0]
 8008c60:	e04b      	b.n	8008cfa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	82fb      	strh	r3, [r7, #22]
 8008c70:	8afb      	ldrh	r3, [r7, #22]
 8008c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d01b      	beq.n	8008cb2 <USB_EPClearStall+0x106>
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c90:	82bb      	strh	r3, [r7, #20]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	441a      	add	r2, r3
 8008c9c:	8abb      	ldrh	r3, [r7, #20]
 8008c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc8:	827b      	strh	r3, [r7, #18]
 8008cca:	8a7b      	ldrh	r3, [r7, #18]
 8008ccc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cd0:	827b      	strh	r3, [r7, #18]
 8008cd2:	8a7b      	ldrh	r3, [r7, #18]
 8008cd4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008cd8:	827b      	strh	r3, [r7, #18]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	441a      	add	r2, r3
 8008ce4:	8a7b      	ldrh	r3, [r7, #18]
 8008ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d103      	bne.n	8008d22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2280      	movs	r2, #128	@ 0x80
 8008d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d58:	68fb      	ldr	r3, [r7, #12]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b08b      	sub	sp, #44	@ 0x2c
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	4611      	mov	r1, r2
 8008d72:	461a      	mov	r2, r3
 8008d74:	460b      	mov	r3, r1
 8008d76:	80fb      	strh	r3, [r7, #6]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d7c:	88bb      	ldrh	r3, [r7, #4]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	005a      	lsls	r2, r3, #1
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d9e:	e01e      	b.n	8008dde <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3301      	adds	r3, #1
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	b21a      	sxth	r2, r3
 8008db0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	b21b      	sxth	r3, r3
 8008db8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	8a7a      	ldrh	r2, [r7, #18]
 8008dbe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	3302      	adds	r3, #2
 8008dc4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	3302      	adds	r3, #2
 8008dca:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1dd      	bne.n	8008da0 <USB_WritePMA+0x3a>
  }
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	372c      	adds	r7, #44	@ 0x2c
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b08b      	sub	sp, #44	@ 0x2c
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	460b      	mov	r3, r1
 8008e02:	80fb      	strh	r3, [r7, #6]
 8008e04:	4613      	mov	r3, r2
 8008e06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e08:	88bb      	ldrh	r3, [r7, #4]
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	005a      	lsls	r2, r3, #1
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e2a:	e01b      	b.n	8008e64 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	3302      	adds	r3, #2
 8008e38:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	3301      	adds	r3, #1
 8008e46:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	3301      	adds	r3, #1
 8008e56:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	3b01      	subs	r3, #1
 8008e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e0      	bne.n	8008e2c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008e6a:	88bb      	ldrh	r3, [r7, #4]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	701a      	strb	r2, [r3, #0]
  }
}
 8008e86:	bf00      	nop
 8008e88:	372c      	adds	r7, #44	@ 0x2c
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7c1b      	ldrb	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d115      	bne.n	8008ed6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008eae:	2202      	movs	r2, #2
 8008eb0:	2181      	movs	r1, #129	@ 0x81
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fec9 	bl	800ac4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ebe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 febf 	bl	800ac4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008ed4:	e012      	b.n	8008efc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ed6:	2340      	movs	r3, #64	@ 0x40
 8008ed8:	2202      	movs	r2, #2
 8008eda:	2181      	movs	r1, #129	@ 0x81
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 feb4 	bl	800ac4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ee8:	2340      	movs	r3, #64	@ 0x40
 8008eea:	2202      	movs	r2, #2
 8008eec:	2101      	movs	r1, #1
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 feab 	bl	800ac4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008efc:	2308      	movs	r3, #8
 8008efe:	2203      	movs	r2, #3
 8008f00:	2182      	movs	r1, #130	@ 0x82
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 fea1 	bl	800ac4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f0e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008f12:	f001 ffc1 	bl	800ae98 <USBD_static_malloc>
 8008f16:	4602      	mov	r2, r0
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	73fb      	strb	r3, [r7, #15]
 8008f2c:	e026      	b.n	8008f7c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f34:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	7c1b      	ldrb	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f62:	2101      	movs	r1, #1
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 ff61 	bl	800ae2c <USBD_LL_PrepareReceive>
 8008f6a:	e007      	b.n	8008f7c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f72:	2340      	movs	r3, #64	@ 0x40
 8008f74:	2101      	movs	r1, #1
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 ff58 	bl	800ae2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f96:	2181      	movs	r1, #129	@ 0x81
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fe7c 	bl	800ac96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fe75 	bl	800ac96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008fb4:	2182      	movs	r1, #130	@ 0x82
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 fe6d 	bl	800ac96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00e      	beq.n	8008fea <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 ff69 	bl	800aeb4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009004:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800901a:	2b00      	cmp	r3, #0
 800901c:	d039      	beq.n	8009092 <USBD_CDC_Setup+0x9e>
 800901e:	2b20      	cmp	r3, #32
 8009020:	d17f      	bne.n	8009122 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	88db      	ldrh	r3, [r3, #6]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d029      	beq.n	800907e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	b25b      	sxtb	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	da11      	bge.n	8009058 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009040:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	88d2      	ldrh	r2, [r2, #6]
 8009046:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009048:	6939      	ldr	r1, [r7, #16]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	88db      	ldrh	r3, [r3, #6]
 800904e:	461a      	mov	r2, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 fa0f 	bl	800a474 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009056:	e06b      	b.n	8009130 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	785a      	ldrb	r2, [r3, #1]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	88db      	ldrh	r3, [r3, #6]
 8009066:	b2da      	uxtb	r2, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800906e:	6939      	ldr	r1, [r7, #16]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	88db      	ldrh	r3, [r3, #6]
 8009074:	461a      	mov	r2, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fa2a 	bl	800a4d0 <USBD_CtlPrepareRx>
      break;
 800907c:	e058      	b.n	8009130 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	7850      	ldrb	r0, [r2, #1]
 800908a:	2200      	movs	r2, #0
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	4798      	blx	r3
      break;
 8009090:	e04e      	b.n	8009130 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	785b      	ldrb	r3, [r3, #1]
 8009096:	2b0b      	cmp	r3, #11
 8009098:	d02e      	beq.n	80090f8 <USBD_CDC_Setup+0x104>
 800909a:	2b0b      	cmp	r3, #11
 800909c:	dc38      	bgt.n	8009110 <USBD_CDC_Setup+0x11c>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <USBD_CDC_Setup+0xb4>
 80090a2:	2b0a      	cmp	r3, #10
 80090a4:	d014      	beq.n	80090d0 <USBD_CDC_Setup+0xdc>
 80090a6:	e033      	b.n	8009110 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d107      	bne.n	80090c2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80090b2:	f107 030c 	add.w	r3, r7, #12
 80090b6:	2202      	movs	r2, #2
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 f9da 	bl	800a474 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090c0:	e02e      	b.n	8009120 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f96a 	bl	800a39e <USBD_CtlError>
            ret = USBD_FAIL;
 80090ca:	2302      	movs	r3, #2
 80090cc:	75fb      	strb	r3, [r7, #23]
          break;
 80090ce:	e027      	b.n	8009120 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d107      	bne.n	80090ea <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80090da:	f107 030f 	add.w	r3, r7, #15
 80090de:	2201      	movs	r2, #1
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 f9c6 	bl	800a474 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090e8:	e01a      	b.n	8009120 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 f956 	bl	800a39e <USBD_CtlError>
            ret = USBD_FAIL;
 80090f2:	2302      	movs	r3, #2
 80090f4:	75fb      	strb	r3, [r7, #23]
          break;
 80090f6:	e013      	b.n	8009120 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d00d      	beq.n	800911e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 f94a 	bl	800a39e <USBD_CtlError>
            ret = USBD_FAIL;
 800910a:	2302      	movs	r3, #2
 800910c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800910e:	e006      	b.n	800911e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 f943 	bl	800a39e <USBD_CtlError>
          ret = USBD_FAIL;
 8009118:	2302      	movs	r3, #2
 800911a:	75fb      	strb	r3, [r7, #23]
          break;
 800911c:	e000      	b.n	8009120 <USBD_CDC_Setup+0x12c>
          break;
 800911e:	bf00      	nop
      }
      break;
 8009120:	e006      	b.n	8009130 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 f93a 	bl	800a39e <USBD_CtlError>
      ret = USBD_FAIL;
 800912a:	2302      	movs	r3, #2
 800912c:	75fb      	strb	r3, [r7, #23]
      break;
 800912e:	bf00      	nop
  }

  return ret;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800914c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009154:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d03a      	beq.n	80091d6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	331c      	adds	r3, #28
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d029      	beq.n	80091ca <USBD_CDC_DataIn+0x90>
 8009176:	78fa      	ldrb	r2, [r7, #3]
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	331c      	adds	r3, #28
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	78f9      	ldrb	r1, [r7, #3]
 800918a:	68b8      	ldr	r0, [r7, #8]
 800918c:	460b      	mov	r3, r1
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	4403      	add	r3, r0
 8009196:	3320      	adds	r3, #32
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	fbb2 f1f3 	udiv	r1, r2, r3
 800919e:	fb01 f303 	mul.w	r3, r1, r3
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d110      	bne.n	80091ca <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	4613      	mov	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	331c      	adds	r3, #28
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091bc:	78f9      	ldrb	r1, [r7, #3]
 80091be:	2300      	movs	r3, #0
 80091c0:	2200      	movs	r2, #0
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fe0f 	bl	800ade6 <USBD_LL_Transmit>
 80091c8:	e003      	b.n	80091d2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	e000      	b.n	80091d8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80091d6:	2302      	movs	r3, #2
  }
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 fe3a 	bl	800ae72 <USBD_LL_GetRxDataSize>
 80091fe:	4602      	mov	r2, r0
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00d      	beq.n	800922c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009224:	4611      	mov	r1, r2
 8009226:	4798      	blx	r3

    return USBD_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	e000      	b.n	800922e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800922c:	2302      	movs	r3, #2
  }
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009244:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800924c:	2b00      	cmp	r3, #0
 800924e:	d014      	beq.n	800927a <USBD_CDC_EP0_RxReady+0x44>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009256:	2bff      	cmp	r3, #255	@ 0xff
 8009258:	d00f      	beq.n	800927a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009268:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009270:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	22ff      	movs	r2, #255	@ 0xff
 8009276:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2243      	movs	r2, #67	@ 0x43
 8009290:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009292:	4b03      	ldr	r3, [pc, #12]	@ (80092a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	20000094 	.word	0x20000094

080092a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2243      	movs	r2, #67	@ 0x43
 80092b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80092b2:	4b03      	ldr	r3, [pc, #12]	@ (80092c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	20000050 	.word	0x20000050

080092c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2243      	movs	r2, #67	@ 0x43
 80092d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80092d2:	4b03      	ldr	r3, [pc, #12]	@ (80092e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	200000d8 	.word	0x200000d8

080092e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	220a      	movs	r2, #10
 80092f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80092f2:	4b03      	ldr	r3, [pc, #12]	@ (8009300 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	2000000c 	.word	0x2000000c

08009304 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800930e:	2302      	movs	r3, #2
 8009310:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009332:	b480      	push	{r7}
 8009334:	b087      	sub	sp, #28
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	4613      	mov	r3, r2
 800933e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009346:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009350:	88fa      	ldrh	r2, [r7, #6]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009366:	b480      	push	{r7}
 8009368:	b085      	sub	sp, #20
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009376:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800939c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01c      	beq.n	80093e2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d115      	bne.n	80093de <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2181      	movs	r1, #129	@ 0x81
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fd06 	bl	800ade6 <USBD_LL_Transmit>

      return USBD_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	e002      	b.n	80093e4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80093e2:	2302      	movs	r3, #2
  }
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009402:	2b00      	cmp	r3, #0
 8009404:	d017      	beq.n	8009436 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	7c1b      	ldrb	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009418:	2101      	movs	r1, #1
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 fd06 	bl	800ae2c <USBD_LL_PrepareReceive>
 8009420:	e007      	b.n	8009432 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009428:	2340      	movs	r3, #64	@ 0x40
 800942a:	2101      	movs	r1, #1
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 fcfd 	bl	800ae2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	e000      	b.n	8009438 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009436:	2302      	movs	r3, #2
  }
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009454:	2302      	movs	r3, #2
 8009456:	e01a      	b.n	800948e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	79fa      	ldrb	r2, [r7, #7]
 8009484:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f001 fb6a 	bl	800ab60 <USBD_LL_Init>

  return USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009496:	b480      	push	{r7}
 8009498:	b085      	sub	sp, #20
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d006      	beq.n	80094b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
 80094b6:	e001      	b.n	80094bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80094b8:	2302      	movs	r3, #2
 80094ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 fb9e 	bl	800ac14 <USBD_LL_Start>

  return USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009504:	2302      	movs	r3, #2
 8009506:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00c      	beq.n	800952c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	78fa      	ldrb	r2, [r7, #3]
 800951c:	4611      	mov	r1, r2
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800952c:	7bfb      	ldrb	r3, [r7, #15]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	4611      	mov	r1, r2
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fedb 	bl	800a32a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009582:	461a      	mov	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	2b02      	cmp	r3, #2
 8009596:	d016      	beq.n	80095c6 <USBD_LL_SetupStage+0x6a>
 8009598:	2b02      	cmp	r3, #2
 800959a:	d81c      	bhi.n	80095d6 <USBD_LL_SetupStage+0x7a>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <USBD_LL_SetupStage+0x4a>
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d008      	beq.n	80095b6 <USBD_LL_SetupStage+0x5a>
 80095a4:	e017      	b.n	80095d6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f9ce 	bl	8009950 <USBD_StdDevReq>
      break;
 80095b4:	e01a      	b.n	80095ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa30 	bl	8009a24 <USBD_StdItfReq>
      break;
 80095c4:	e012      	b.n	80095ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fa70 	bl	8009ab4 <USBD_StdEPReq>
      break;
 80095d4:	e00a      	b.n	80095ec <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80095dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 fb75 	bl	800acd4 <USBD_LL_StallEP>
      break;
 80095ea:	bf00      	nop
  }

  return USBD_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b086      	sub	sp, #24
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	60f8      	str	r0, [r7, #12]
 80095fe:	460b      	mov	r3, r1
 8009600:	607a      	str	r2, [r7, #4]
 8009602:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009604:	7afb      	ldrb	r3, [r7, #11]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d14b      	bne.n	80096a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009610:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009618:	2b03      	cmp	r3, #3
 800961a:	d134      	bne.n	8009686 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	429a      	cmp	r2, r3
 8009626:	d919      	bls.n	800965c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	1ad2      	subs	r2, r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800963e:	429a      	cmp	r2, r3
 8009640:	d203      	bcs.n	800964a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009646:	b29b      	uxth	r3, r3
 8009648:	e002      	b.n	8009650 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800964e:	b29b      	uxth	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 ff59 	bl	800a50c <USBD_CtlContinueRx>
 800965a:	e038      	b.n	80096ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800966e:	2b03      	cmp	r3, #3
 8009670:	d105      	bne.n	800967e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 ff56 	bl	800a530 <USBD_CtlSendStatus>
 8009684:	e023      	b.n	80096ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800968c:	2b05      	cmp	r3, #5
 800968e:	d11e      	bne.n	80096ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009698:	2100      	movs	r1, #0
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f001 fb1a 	bl	800acd4 <USBD_LL_StallEP>
 80096a0:	e015      	b.n	80096ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00d      	beq.n	80096ca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d108      	bne.n	80096ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	7afa      	ldrb	r2, [r7, #11]
 80096c2:	4611      	mov	r1, r2
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	4798      	blx	r3
 80096c8:	e001      	b.n	80096ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096ca:	2302      	movs	r3, #2
 80096cc:	e000      	b.n	80096d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	460b      	mov	r3, r1
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d17f      	bne.n	80097ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3314      	adds	r3, #20
 80096f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d15c      	bne.n	80097b6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	429a      	cmp	r2, r3
 8009706:	d915      	bls.n	8009734 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	68da      	ldr	r2, [r3, #12]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	1ad2      	subs	r2, r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	b29b      	uxth	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 fec3 	bl	800a4ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009726:	2300      	movs	r3, #0
 8009728:	2200      	movs	r2, #0
 800972a:	2100      	movs	r1, #0
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f001 fb7d 	bl	800ae2c <USBD_LL_PrepareReceive>
 8009732:	e04e      	b.n	80097d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	6912      	ldr	r2, [r2, #16]
 800973c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009740:	fb01 f202 	mul.w	r2, r1, r2
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d11c      	bne.n	8009784 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009752:	429a      	cmp	r2, r3
 8009754:	d316      	bcc.n	8009784 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	689a      	ldr	r2, [r3, #8]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009760:	429a      	cmp	r2, r3
 8009762:	d20f      	bcs.n	8009784 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009764:	2200      	movs	r2, #0
 8009766:	2100      	movs	r1, #0
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 fe9f 	bl	800a4ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009776:	2300      	movs	r3, #0
 8009778:	2200      	movs	r2, #0
 800977a:	2100      	movs	r1, #0
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f001 fb55 	bl	800ae2c <USBD_LL_PrepareReceive>
 8009782:	e026      	b.n	80097d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00a      	beq.n	80097a6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009796:	2b03      	cmp	r3, #3
 8009798:	d105      	bne.n	80097a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80097a6:	2180      	movs	r1, #128	@ 0x80
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f001 fa93 	bl	800acd4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fed1 	bl	800a556 <USBD_CtlReceiveStatus>
 80097b4:	e00d      	b.n	80097d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80097bc:	2b04      	cmp	r3, #4
 80097be:	d004      	beq.n	80097ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d103      	bne.n	80097d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80097ca:	2180      	movs	r1, #128	@ 0x80
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f001 fa81 	bl	800acd4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d11d      	bne.n	8009818 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7ff fe80 	bl	80094e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80097ea:	e015      	b.n	8009818 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00d      	beq.n	8009814 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d108      	bne.n	8009814 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	7afa      	ldrb	r2, [r7, #11]
 800980c:	4611      	mov	r1, r2
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	4798      	blx	r3
 8009812:	e001      	b.n	8009818 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009814:	2302      	movs	r3, #2
 8009816:	e000      	b.n	800981a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800982a:	2340      	movs	r3, #64	@ 0x40
 800982c:	2200      	movs	r2, #0
 800982e:	2100      	movs	r1, #0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 fa0a 	bl	800ac4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2240      	movs	r2, #64	@ 0x40
 8009842:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009846:	2340      	movs	r3, #64	@ 0x40
 8009848:	2200      	movs	r2, #0
 800984a:	2180      	movs	r1, #128	@ 0x80
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f001 f9fc 	bl	800ac4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2240      	movs	r2, #64	@ 0x40
 800985c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6852      	ldr	r2, [r2, #4]
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	4611      	mov	r1, r2
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
  }

  return USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2204      	movs	r2, #4
 80098dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d105      	bne.n	800990c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009928:	2b03      	cmp	r3, #3
 800992a:	d10b      	bne.n	8009944 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d005      	beq.n	8009944 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009966:	2b40      	cmp	r3, #64	@ 0x40
 8009968:	d005      	beq.n	8009976 <USBD_StdDevReq+0x26>
 800996a:	2b40      	cmp	r3, #64	@ 0x40
 800996c:	d84f      	bhi.n	8009a0e <USBD_StdDevReq+0xbe>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <USBD_StdDevReq+0x36>
 8009972:	2b20      	cmp	r3, #32
 8009974:	d14b      	bne.n	8009a0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
      break;
 8009984:	e048      	b.n	8009a18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b09      	cmp	r3, #9
 800998c:	d839      	bhi.n	8009a02 <USBD_StdDevReq+0xb2>
 800998e:	a201      	add	r2, pc, #4	@ (adr r2, 8009994 <USBD_StdDevReq+0x44>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	080099e5 	.word	0x080099e5
 8009998:	080099f9 	.word	0x080099f9
 800999c:	08009a03 	.word	0x08009a03
 80099a0:	080099ef 	.word	0x080099ef
 80099a4:	08009a03 	.word	0x08009a03
 80099a8:	080099c7 	.word	0x080099c7
 80099ac:	080099bd 	.word	0x080099bd
 80099b0:	08009a03 	.word	0x08009a03
 80099b4:	080099db 	.word	0x080099db
 80099b8:	080099d1 	.word	0x080099d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f9dc 	bl	8009d7c <USBD_GetDescriptor>
          break;
 80099c4:	e022      	b.n	8009a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fb3f 	bl	800a04c <USBD_SetAddress>
          break;
 80099ce:	e01d      	b.n	8009a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fb7e 	bl	800a0d4 <USBD_SetConfig>
          break;
 80099d8:	e018      	b.n	8009a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fc07 	bl	800a1f0 <USBD_GetConfig>
          break;
 80099e2:	e013      	b.n	8009a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fc37 	bl	800a25a <USBD_GetStatus>
          break;
 80099ec:	e00e      	b.n	8009a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fc65 	bl	800a2c0 <USBD_SetFeature>
          break;
 80099f6:	e009      	b.n	8009a0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fc74 	bl	800a2e8 <USBD_ClrFeature>
          break;
 8009a00:	e004      	b.n	8009a0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fcca 	bl	800a39e <USBD_CtlError>
          break;
 8009a0a:	bf00      	nop
      }
      break;
 8009a0c:	e004      	b.n	8009a18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fcc4 	bl	800a39e <USBD_CtlError>
      break;
 8009a16:	bf00      	nop
  }

  return ret;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop

08009a24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a3a:	2b40      	cmp	r3, #64	@ 0x40
 8009a3c:	d005      	beq.n	8009a4a <USBD_StdItfReq+0x26>
 8009a3e:	2b40      	cmp	r3, #64	@ 0x40
 8009a40:	d82e      	bhi.n	8009aa0 <USBD_StdItfReq+0x7c>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <USBD_StdItfReq+0x26>
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d12a      	bne.n	8009aa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a50:	3b01      	subs	r3, #1
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d81d      	bhi.n	8009a92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	889b      	ldrh	r3, [r3, #4]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d813      	bhi.n	8009a88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	4798      	blx	r3
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	88db      	ldrh	r3, [r3, #6]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d110      	bne.n	8009a9c <USBD_StdItfReq+0x78>
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10d      	bne.n	8009a9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fd55 	bl	800a530 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a86:	e009      	b.n	8009a9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fc87 	bl	800a39e <USBD_CtlError>
          break;
 8009a90:	e004      	b.n	8009a9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc82 	bl	800a39e <USBD_CtlError>
          break;
 8009a9a:	e000      	b.n	8009a9e <USBD_StdItfReq+0x7a>
          break;
 8009a9c:	bf00      	nop
      }
      break;
 8009a9e:	e004      	b.n	8009aaa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fc7b 	bl	800a39e <USBD_CtlError>
      break;
 8009aa8:	bf00      	nop
  }

  return USBD_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	889b      	ldrh	r3, [r3, #4]
 8009ac6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ad0:	2b40      	cmp	r3, #64	@ 0x40
 8009ad2:	d007      	beq.n	8009ae4 <USBD_StdEPReq+0x30>
 8009ad4:	2b40      	cmp	r3, #64	@ 0x40
 8009ad6:	f200 8146 	bhi.w	8009d66 <USBD_StdEPReq+0x2b2>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <USBD_StdEPReq+0x40>
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	f040 8141 	bne.w	8009d66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	4798      	blx	r3
      break;
 8009af2:	e13d      	b.n	8009d70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009afc:	2b20      	cmp	r3, #32
 8009afe:	d10a      	bne.n	8009b16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	4798      	blx	r3
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	e12d      	b.n	8009d72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d007      	beq.n	8009b2e <USBD_StdEPReq+0x7a>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	f300 811b 	bgt.w	8009d5a <USBD_StdEPReq+0x2a6>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d072      	beq.n	8009c0e <USBD_StdEPReq+0x15a>
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d03a      	beq.n	8009ba2 <USBD_StdEPReq+0xee>
 8009b2c:	e115      	b.n	8009d5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d002      	beq.n	8009b3e <USBD_StdEPReq+0x8a>
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d015      	beq.n	8009b68 <USBD_StdEPReq+0xb4>
 8009b3c:	e02b      	b.n	8009b96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00c      	beq.n	8009b5e <USBD_StdEPReq+0xaa>
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	2b80      	cmp	r3, #128	@ 0x80
 8009b48:	d009      	beq.n	8009b5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 f8c0 	bl	800acd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b54:	2180      	movs	r1, #128	@ 0x80
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f001 f8bc 	bl	800acd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b5c:	e020      	b.n	8009ba0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fc1c 	bl	800a39e <USBD_CtlError>
              break;
 8009b66:	e01b      	b.n	8009ba0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	885b      	ldrh	r3, [r3, #2]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10e      	bne.n	8009b8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <USBD_StdEPReq+0xda>
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b80      	cmp	r3, #128	@ 0x80
 8009b7a:	d008      	beq.n	8009b8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	88db      	ldrh	r3, [r3, #6]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d104      	bne.n	8009b8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 f8a3 	bl	800acd4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fcce 	bl	800a530 <USBD_CtlSendStatus>

              break;
 8009b94:	e004      	b.n	8009ba0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc00 	bl	800a39e <USBD_CtlError>
              break;
 8009b9e:	bf00      	nop
          }
          break;
 8009ba0:	e0e0      	b.n	8009d64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d002      	beq.n	8009bb2 <USBD_StdEPReq+0xfe>
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d015      	beq.n	8009bdc <USBD_StdEPReq+0x128>
 8009bb0:	e026      	b.n	8009c00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00c      	beq.n	8009bd2 <USBD_StdEPReq+0x11e>
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	2b80      	cmp	r3, #128	@ 0x80
 8009bbc:	d009      	beq.n	8009bd2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 f886 	bl	800acd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009bc8:	2180      	movs	r1, #128	@ 0x80
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 f882 	bl	800acd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bd0:	e01c      	b.n	8009c0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fbe2 	bl	800a39e <USBD_CtlError>
              break;
 8009bda:	e017      	b.n	8009c0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	885b      	ldrh	r3, [r3, #2]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d112      	bne.n	8009c0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d004      	beq.n	8009bf8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 f88d 	bl	800ad12 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fc99 	bl	800a530 <USBD_CtlSendStatus>
              }
              break;
 8009bfe:	e004      	b.n	8009c0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fbcb 	bl	800a39e <USBD_CtlError>
              break;
 8009c08:	e000      	b.n	8009c0c <USBD_StdEPReq+0x158>
              break;
 8009c0a:	bf00      	nop
          }
          break;
 8009c0c:	e0aa      	b.n	8009d64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d002      	beq.n	8009c1e <USBD_StdEPReq+0x16a>
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d032      	beq.n	8009c82 <USBD_StdEPReq+0x1ce>
 8009c1c:	e097      	b.n	8009d4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d007      	beq.n	8009c34 <USBD_StdEPReq+0x180>
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2b80      	cmp	r3, #128	@ 0x80
 8009c28:	d004      	beq.n	8009c34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fbb6 	bl	800a39e <USBD_CtlError>
                break;
 8009c32:	e091      	b.n	8009d58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da0b      	bge.n	8009c54 <USBD_StdEPReq+0x1a0>
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	3310      	adds	r3, #16
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	4413      	add	r3, r2
 8009c50:	3304      	adds	r3, #4
 8009c52:	e00b      	b.n	8009c6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4413      	add	r3, r2
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2202      	movs	r2, #2
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fbfa 	bl	800a474 <USBD_CtlSendData>
              break;
 8009c80:	e06a      	b.n	8009d58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da11      	bge.n	8009cae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
 8009c8c:	f003 020f 	and.w	r2, r3, #15
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	440b      	add	r3, r1
 8009c9c:	3318      	adds	r3, #24
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d117      	bne.n	8009cd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fb79 	bl	800a39e <USBD_CtlError>
                  break;
 8009cac:	e054      	b.n	8009d58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	f003 020f 	and.w	r2, r3, #15
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	440b      	add	r3, r1
 8009cc0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fb66 	bl	800a39e <USBD_CtlError>
                  break;
 8009cd2:	e041      	b.n	8009d58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	da0b      	bge.n	8009cf4 <USBD_StdEPReq+0x240>
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	3310      	adds	r3, #16
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	4413      	add	r3, r2
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	e00b      	b.n	8009d0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	4413      	add	r3, r2
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <USBD_StdEPReq+0x266>
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b80      	cmp	r3, #128	@ 0x80
 8009d18:	d103      	bne.n	8009d22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	e00e      	b.n	8009d40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f001 f812 	bl	800ad50 <USBD_LL_IsStallEP>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e002      	b.n	8009d40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2202      	movs	r2, #2
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fb94 	bl	800a474 <USBD_CtlSendData>
              break;
 8009d4c:	e004      	b.n	8009d58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fb24 	bl	800a39e <USBD_CtlError>
              break;
 8009d56:	bf00      	nop
          }
          break;
 8009d58:	e004      	b.n	8009d64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fb1e 	bl	800a39e <USBD_CtlError>
          break;
 8009d62:	bf00      	nop
      }
      break;
 8009d64:	e004      	b.n	8009d70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fb18 	bl	800a39e <USBD_CtlError>
      break;
 8009d6e:	bf00      	nop
  }

  return ret;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	885b      	ldrh	r3, [r3, #2]
 8009d96:	0a1b      	lsrs	r3, r3, #8
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	2b06      	cmp	r3, #6
 8009d9e:	f200 8128 	bhi.w	8009ff2 <USBD_GetDescriptor+0x276>
 8009da2:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <USBD_GetDescriptor+0x2c>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009dc5 	.word	0x08009dc5
 8009dac:	08009ddd 	.word	0x08009ddd
 8009db0:	08009e1d 	.word	0x08009e1d
 8009db4:	08009ff3 	.word	0x08009ff3
 8009db8:	08009ff3 	.word	0x08009ff3
 8009dbc:	08009f93 	.word	0x08009f93
 8009dc0:	08009fbf 	.word	0x08009fbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	7c12      	ldrb	r2, [r2, #16]
 8009dd0:	f107 0108 	add.w	r1, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
      break;
 8009dda:	e112      	b.n	800a002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7c1b      	ldrb	r3, [r3, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10d      	bne.n	8009e00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dec:	f107 0208 	add.w	r2, r7, #8
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dfe:	e100      	b.n	800a002 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e08:	f107 0208 	add.w	r2, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3301      	adds	r3, #1
 8009e16:	2202      	movs	r2, #2
 8009e18:	701a      	strb	r2, [r3, #0]
      break;
 8009e1a:	e0f2      	b.n	800a002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	885b      	ldrh	r3, [r3, #2]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	f200 80ac 	bhi.w	8009f80 <USBD_GetDescriptor+0x204>
 8009e28:	a201      	add	r2, pc, #4	@ (adr r2, 8009e30 <USBD_GetDescriptor+0xb4>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e49 	.word	0x08009e49
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009eb1 	.word	0x08009eb1
 8009e3c:	08009ee5 	.word	0x08009ee5
 8009e40:	08009f19 	.word	0x08009f19
 8009e44:	08009f4d 	.word	0x08009f4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7c12      	ldrb	r2, [r2, #16]
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6a:	e091      	b.n	8009f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fa95 	bl	800a39e <USBD_CtlError>
            err++;
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	3301      	adds	r3, #1
 8009e78:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7a:	e089      	b.n	8009f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	7c12      	ldrb	r2, [r2, #16]
 8009e94:	f107 0108 	add.w	r1, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9e:	e077      	b.n	8009f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa7b 	bl	800a39e <USBD_CtlError>
            err++;
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	72fb      	strb	r3, [r7, #11]
          break;
 8009eae:	e06f      	b.n	8009f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	7c12      	ldrb	r2, [r2, #16]
 8009ec8:	f107 0108 	add.w	r1, r7, #8
 8009ecc:	4610      	mov	r0, r2
 8009ece:	4798      	blx	r3
 8009ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed2:	e05d      	b.n	8009f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fa61 	bl	800a39e <USBD_CtlError>
            err++;
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee2:	e055      	b.n	8009f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	7c12      	ldrb	r2, [r2, #16]
 8009efc:	f107 0108 	add.w	r1, r7, #8
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f06:	e043      	b.n	8009f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fa47 	bl	800a39e <USBD_CtlError>
            err++;
 8009f10:	7afb      	ldrb	r3, [r7, #11]
 8009f12:	3301      	adds	r3, #1
 8009f14:	72fb      	strb	r3, [r7, #11]
          break;
 8009f16:	e03b      	b.n	8009f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	7c12      	ldrb	r2, [r2, #16]
 8009f30:	f107 0108 	add.w	r1, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f3a:	e029      	b.n	8009f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa2d 	bl	800a39e <USBD_CtlError>
            err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
          break;
 8009f4a:	e021      	b.n	8009f90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	7c12      	ldrb	r2, [r2, #16]
 8009f64:	f107 0108 	add.w	r1, r7, #8
 8009f68:	4610      	mov	r0, r2
 8009f6a:	4798      	blx	r3
 8009f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f6e:	e00f      	b.n	8009f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa13 	bl	800a39e <USBD_CtlError>
            err++;
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f7e:	e007      	b.n	8009f90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa0b 	bl	800a39e <USBD_CtlError>
          err++;
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f8e:	e038      	b.n	800a002 <USBD_GetDescriptor+0x286>
 8009f90:	e037      	b.n	800a002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	7c1b      	ldrb	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d109      	bne.n	8009fae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa2:	f107 0208 	add.w	r2, r7, #8
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	4798      	blx	r3
 8009faa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fac:	e029      	b.n	800a002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9f4 	bl	800a39e <USBD_CtlError>
        err++;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbc:	e021      	b.n	800a002 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7c1b      	ldrb	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10d      	bne.n	8009fe2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fce:	f107 0208 	add.w	r2, r7, #8
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	4798      	blx	r3
 8009fd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	2207      	movs	r2, #7
 8009fde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fe0:	e00f      	b.n	800a002 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9da 	bl	800a39e <USBD_CtlError>
        err++;
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	3301      	adds	r3, #1
 8009fee:	72fb      	strb	r3, [r7, #11]
      break;
 8009ff0:	e007      	b.n	800a002 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f9d2 	bl	800a39e <USBD_CtlError>
      err++;
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	72fb      	strb	r3, [r7, #11]
      break;
 800a000:	bf00      	nop
  }

  if (err != 0U)
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d11c      	bne.n	800a042 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a008:	893b      	ldrh	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d011      	beq.n	800a032 <USBD_GetDescriptor+0x2b6>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	88db      	ldrh	r3, [r3, #6]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00d      	beq.n	800a032 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	88da      	ldrh	r2, [r3, #6]
 800a01a:	893b      	ldrh	r3, [r7, #8]
 800a01c:	4293      	cmp	r3, r2
 800a01e:	bf28      	it	cs
 800a020:	4613      	movcs	r3, r2
 800a022:	b29b      	uxth	r3, r3
 800a024:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a026:	893b      	ldrh	r3, [r7, #8]
 800a028:	461a      	mov	r2, r3
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fa21 	bl	800a474 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	88db      	ldrh	r3, [r3, #6]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d104      	bne.n	800a044 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fa78 	bl	800a530 <USBD_CtlSendStatus>
 800a040:	e000      	b.n	800a044 <USBD_GetDescriptor+0x2c8>
    return;
 800a042:	bf00      	nop
    }
  }
}
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop

0800a04c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	889b      	ldrh	r3, [r3, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d130      	bne.n	800a0c0 <USBD_SetAddress+0x74>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	88db      	ldrh	r3, [r3, #6]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d12c      	bne.n	800a0c0 <USBD_SetAddress+0x74>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	885b      	ldrh	r3, [r3, #2]
 800a06a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a06c:	d828      	bhi.n	800a0c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	885b      	ldrh	r3, [r3, #2]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a078:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a080:	2b03      	cmp	r3, #3
 800a082:	d104      	bne.n	800a08e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f989 	bl	800a39e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08c:	e01d      	b.n	800a0ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	7bfa      	ldrb	r2, [r7, #15]
 800a092:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a096:	7bfb      	ldrb	r3, [r7, #15]
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fe84 	bl	800ada8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fa45 	bl	800a530 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d004      	beq.n	800a0b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b4:	e009      	b.n	800a0ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0be:	e004      	b.n	800a0ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f96b 	bl	800a39e <USBD_CtlError>
  }
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	885b      	ldrh	r3, [r3, #2]
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	4b41      	ldr	r3, [pc, #260]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a0e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0e8:	4b40      	ldr	r3, [pc, #256]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d904      	bls.n	800a0fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f953 	bl	800a39e <USBD_CtlError>
 800a0f8:	e075      	b.n	800a1e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a100:	2b02      	cmp	r3, #2
 800a102:	d002      	beq.n	800a10a <USBD_SetConfig+0x36>
 800a104:	2b03      	cmp	r3, #3
 800a106:	d023      	beq.n	800a150 <USBD_SetConfig+0x7c>
 800a108:	e062      	b.n	800a1d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a10a:	4b38      	ldr	r3, [pc, #224]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01a      	beq.n	800a148 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a112:	4b36      	ldr	r3, [pc, #216]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2203      	movs	r2, #3
 800a120:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a124:	4b31      	ldr	r3, [pc, #196]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff f9e4 	bl	80094f8 <USBD_SetClassConfig>
 800a130:	4603      	mov	r3, r0
 800a132:	2b02      	cmp	r3, #2
 800a134:	d104      	bne.n	800a140 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f930 	bl	800a39e <USBD_CtlError>
            return;
 800a13e:	e052      	b.n	800a1e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f9f5 	bl	800a530 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a146:	e04e      	b.n	800a1e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f9f1 	bl	800a530 <USBD_CtlSendStatus>
        break;
 800a14e:	e04a      	b.n	800a1e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a150:	4b26      	ldr	r3, [pc, #152]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d112      	bne.n	800a17e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a160:	4b22      	ldr	r3, [pc, #136]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	461a      	mov	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a16a:	4b20      	ldr	r3, [pc, #128]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff f9e0 	bl	8009536 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f9da 	bl	800a530 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a17c:	e033      	b.n	800a1e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a17e:	4b1b      	ldr	r3, [pc, #108]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d01d      	beq.n	800a1c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff f9ce 	bl	8009536 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a19a:	4b14      	ldr	r3, [pc, #80]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1a4:	4b11      	ldr	r3, [pc, #68]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff f9a4 	bl	80094f8 <USBD_SetClassConfig>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d104      	bne.n	800a1c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f8f0 	bl	800a39e <USBD_CtlError>
            return;
 800a1be:	e012      	b.n	800a1e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f9b5 	bl	800a530 <USBD_CtlSendStatus>
        break;
 800a1c6:	e00e      	b.n	800a1e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f9b1 	bl	800a530 <USBD_CtlSendStatus>
        break;
 800a1ce:	e00a      	b.n	800a1e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f8e3 	bl	800a39e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1d8:	4b04      	ldr	r3, [pc, #16]	@ (800a1ec <USBD_SetConfig+0x118>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff f9a9 	bl	8009536 <USBD_ClrClassConfig>
        break;
 800a1e4:	bf00      	nop
    }
  }
}
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	200004d0 	.word	0x200004d0

0800a1f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	88db      	ldrh	r3, [r3, #6]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d004      	beq.n	800a20c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f8ca 	bl	800a39e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a20a:	e022      	b.n	800a252 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a212:	2b02      	cmp	r3, #2
 800a214:	dc02      	bgt.n	800a21c <USBD_GetConfig+0x2c>
 800a216:	2b00      	cmp	r3, #0
 800a218:	dc03      	bgt.n	800a222 <USBD_GetConfig+0x32>
 800a21a:	e015      	b.n	800a248 <USBD_GetConfig+0x58>
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d00b      	beq.n	800a238 <USBD_GetConfig+0x48>
 800a220:	e012      	b.n	800a248 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3308      	adds	r3, #8
 800a22c:	2201      	movs	r2, #1
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f91f 	bl	800a474 <USBD_CtlSendData>
        break;
 800a236:	e00c      	b.n	800a252 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3304      	adds	r3, #4
 800a23c:	2201      	movs	r2, #1
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f917 	bl	800a474 <USBD_CtlSendData>
        break;
 800a246:	e004      	b.n	800a252 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f8a7 	bl	800a39e <USBD_CtlError>
        break;
 800a250:	bf00      	nop
}
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a26a:	3b01      	subs	r3, #1
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d81e      	bhi.n	800a2ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	88db      	ldrh	r3, [r3, #6]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d004      	beq.n	800a282 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f88f 	bl	800a39e <USBD_CtlError>
        break;
 800a280:	e01a      	b.n	800a2b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d005      	beq.n	800a29e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f043 0202 	orr.w	r2, r3, #2
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f8e4 	bl	800a474 <USBD_CtlSendData>
      break;
 800a2ac:	e004      	b.n	800a2b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f874 	bl	800a39e <USBD_CtlError>
      break;
 800a2b6:	bf00      	nop
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	885b      	ldrh	r3, [r3, #2]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d106      	bne.n	800a2e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f928 	bl	800a530 <USBD_CtlSendStatus>
  }
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d80b      	bhi.n	800a316 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	885b      	ldrh	r3, [r3, #2]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d10c      	bne.n	800a320 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f90e 	bl	800a530 <USBD_CtlSendStatus>
      }
      break;
 800a314:	e004      	b.n	800a320 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f840 	bl	800a39e <USBD_CtlError>
      break;
 800a31e:	e000      	b.n	800a322 <USBD_ClrFeature+0x3a>
      break;
 800a320:	bf00      	nop
  }
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	785a      	ldrb	r2, [r3, #1]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	3302      	adds	r3, #2
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	3303      	adds	r3, #3
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	b29b      	uxth	r3, r3
 800a356:	4413      	add	r3, r2
 800a358:	b29a      	uxth	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	3304      	adds	r3, #4
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	3305      	adds	r3, #5
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	b29b      	uxth	r3, r3
 800a370:	4413      	add	r3, r2
 800a372:	b29a      	uxth	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	3306      	adds	r3, #6
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	3307      	adds	r3, #7
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	021b      	lsls	r3, r3, #8
 800a388:	b29b      	uxth	r3, r3
 800a38a:	4413      	add	r3, r2
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	80da      	strh	r2, [r3, #6]

}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3a8:	2180      	movs	r1, #128	@ 0x80
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fc92 	bl	800acd4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fc8e 	bl	800acd4 <USBD_LL_StallEP>
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d032      	beq.n	800a43c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f834 	bl	800a444 <USBD_GetLen>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	3301      	adds	r3, #1
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	75fa      	strb	r2, [r7, #23]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	75fa      	strb	r2, [r7, #23]
 800a402:	461a      	mov	r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	4413      	add	r3, r2
 800a408:	2203      	movs	r2, #3
 800a40a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a40c:	e012      	b.n	800a434 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	60fa      	str	r2, [r7, #12]
 800a414:	7dfa      	ldrb	r2, [r7, #23]
 800a416:	1c51      	adds	r1, r2, #1
 800a418:	75f9      	strb	r1, [r7, #23]
 800a41a:	4611      	mov	r1, r2
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	440a      	add	r2, r1
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	75fa      	strb	r2, [r7, #23]
 800a42a:	461a      	mov	r2, r3
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4413      	add	r3, r2
 800a430:	2200      	movs	r2, #0
 800a432:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e8      	bne.n	800a40e <USBD_GetString+0x4e>
    }
  }
}
 800a43c:	bf00      	nop
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a450:	e005      	b.n	800a45e <USBD_GetLen+0x1a>
  {
    len++;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	3301      	adds	r3, #1
 800a456:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3301      	adds	r3, #1
 800a45c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1f5      	bne.n	800a452 <USBD_GetLen+0xe>
  }

  return len;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2202      	movs	r2, #2
 800a486:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a48a:	88fa      	ldrh	r2, [r7, #6]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a490:	88fa      	ldrh	r2, [r7, #6]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a496:	88fb      	ldrh	r3, [r7, #6]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	2100      	movs	r1, #0
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fca2 	bl	800ade6 <USBD_LL_Transmit>

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ba:	88fb      	ldrh	r3, [r7, #6]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	2100      	movs	r1, #0
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 fc90 	bl	800ade6 <USBD_LL_Transmit>

  return USBD_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a4e6:	88fa      	ldrh	r2, [r7, #6]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4ee:	88fa      	ldrh	r2, [r7, #6]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4f6:	88fb      	ldrh	r3, [r7, #6]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 fc95 	bl	800ae2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	4613      	mov	r3, r2
 800a518:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	2100      	movs	r1, #0
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f000 fc83 	bl	800ae2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2204      	movs	r2, #4
 800a53c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	2100      	movs	r1, #0
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fc4d 	bl	800ade6 <USBD_LL_Transmit>

  return USBD_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2205      	movs	r2, #5
 800a562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a566:	2300      	movs	r3, #0
 800a568:	2200      	movs	r2, #0
 800a56a:	2100      	movs	r1, #0
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fc5d 	bl	800ae2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a580:	2200      	movs	r2, #0
 800a582:	4912      	ldr	r1, [pc, #72]	@ (800a5cc <MX_USB_DEVICE_Init+0x50>)
 800a584:	4812      	ldr	r0, [pc, #72]	@ (800a5d0 <MX_USB_DEVICE_Init+0x54>)
 800a586:	f7fe ff5b 	bl	8009440 <USBD_Init>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a590:	f7f6 fe7e 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a594:	490f      	ldr	r1, [pc, #60]	@ (800a5d4 <MX_USB_DEVICE_Init+0x58>)
 800a596:	480e      	ldr	r0, [pc, #56]	@ (800a5d0 <MX_USB_DEVICE_Init+0x54>)
 800a598:	f7fe ff7d 	bl	8009496 <USBD_RegisterClass>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5a2:	f7f6 fe75 	bl	8001290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5a6:	490c      	ldr	r1, [pc, #48]	@ (800a5d8 <MX_USB_DEVICE_Init+0x5c>)
 800a5a8:	4809      	ldr	r0, [pc, #36]	@ (800a5d0 <MX_USB_DEVICE_Init+0x54>)
 800a5aa:	f7fe feab 	bl	8009304 <USBD_CDC_RegisterInterface>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5b4:	f7f6 fe6c 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5b8:	4805      	ldr	r0, [pc, #20]	@ (800a5d0 <MX_USB_DEVICE_Init+0x54>)
 800a5ba:	f7fe ff86 	bl	80094ca <USBD_Start>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5c4:	f7f6 fe64 	bl	8001290 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5c8:	bf00      	nop
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	2000012c 	.word	0x2000012c
 800a5d0:	200004d4 	.word	0x200004d4
 800a5d4:	20000018 	.word	0x20000018
 800a5d8:	2000011c 	.word	0x2000011c

0800a5dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4905      	ldr	r1, [pc, #20]	@ (800a5f8 <CDC_Init_FS+0x1c>)
 800a5e4:	4805      	ldr	r0, [pc, #20]	@ (800a5fc <CDC_Init_FS+0x20>)
 800a5e6:	f7fe fea4 	bl	8009332 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5ea:	4905      	ldr	r1, [pc, #20]	@ (800a600 <CDC_Init_FS+0x24>)
 800a5ec:	4803      	ldr	r0, [pc, #12]	@ (800a5fc <CDC_Init_FS+0x20>)
 800a5ee:	f7fe feba 	bl	8009366 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20000b98 	.word	0x20000b98
 800a5fc:	200004d4 	.word	0x200004d4
 800a600:	20000798 	.word	0x20000798

0800a604 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a608:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	6039      	str	r1, [r7, #0]
 800a61e:	71fb      	strb	r3, [r7, #7]
 800a620:	4613      	mov	r3, r2
 800a622:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b23      	cmp	r3, #35	@ 0x23
 800a628:	d84a      	bhi.n	800a6c0 <CDC_Control_FS+0xac>
 800a62a:	a201      	add	r2, pc, #4	@ (adr r2, 800a630 <CDC_Control_FS+0x1c>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a6c1 	.word	0x0800a6c1
 800a634:	0800a6c1 	.word	0x0800a6c1
 800a638:	0800a6c1 	.word	0x0800a6c1
 800a63c:	0800a6c1 	.word	0x0800a6c1
 800a640:	0800a6c1 	.word	0x0800a6c1
 800a644:	0800a6c1 	.word	0x0800a6c1
 800a648:	0800a6c1 	.word	0x0800a6c1
 800a64c:	0800a6c1 	.word	0x0800a6c1
 800a650:	0800a6c1 	.word	0x0800a6c1
 800a654:	0800a6c1 	.word	0x0800a6c1
 800a658:	0800a6c1 	.word	0x0800a6c1
 800a65c:	0800a6c1 	.word	0x0800a6c1
 800a660:	0800a6c1 	.word	0x0800a6c1
 800a664:	0800a6c1 	.word	0x0800a6c1
 800a668:	0800a6c1 	.word	0x0800a6c1
 800a66c:	0800a6c1 	.word	0x0800a6c1
 800a670:	0800a6c1 	.word	0x0800a6c1
 800a674:	0800a6c1 	.word	0x0800a6c1
 800a678:	0800a6c1 	.word	0x0800a6c1
 800a67c:	0800a6c1 	.word	0x0800a6c1
 800a680:	0800a6c1 	.word	0x0800a6c1
 800a684:	0800a6c1 	.word	0x0800a6c1
 800a688:	0800a6c1 	.word	0x0800a6c1
 800a68c:	0800a6c1 	.word	0x0800a6c1
 800a690:	0800a6c1 	.word	0x0800a6c1
 800a694:	0800a6c1 	.word	0x0800a6c1
 800a698:	0800a6c1 	.word	0x0800a6c1
 800a69c:	0800a6c1 	.word	0x0800a6c1
 800a6a0:	0800a6c1 	.word	0x0800a6c1
 800a6a4:	0800a6c1 	.word	0x0800a6c1
 800a6a8:	0800a6c1 	.word	0x0800a6c1
 800a6ac:	0800a6c1 	.word	0x0800a6c1
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a6c1 	.word	0x0800a6c1
 800a6b8:	0800a6c1 	.word	0x0800a6c1
 800a6bc:	0800a6c1 	.word	0x0800a6c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6c0:	bf00      	nop
  }

  return (USBD_OK);
 800a6c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	480f      	ldr	r0, [pc, #60]	@ (800a71c <CDC_Receive_FS+0x4c>)
 800a6de:	f7fe fe42 	bl	8009366 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6e2:	480e      	ldr	r0, [pc, #56]	@ (800a71c <CDC_Receive_FS+0x4c>)
 800a6e4:	f7fe fe82 	bl	80093ec <USBD_CDC_ReceivePacket>

  memset (rxBuf, '\0', 64);  // clear the buffer
 800a6e8:	2240      	movs	r2, #64	@ 0x40
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	480c      	ldr	r0, [pc, #48]	@ (800a720 <CDC_Receive_FS+0x50>)
 800a6ee:	f001 fbe8 	bl	800bec2 <memset>
  uint8_t len = (uint8_t)*Len;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	73fb      	strb	r3, [r7, #15]
  memcpy(rxBuf, Buf, len);  // copy the data to the buffer
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4808      	ldr	r0, [pc, #32]	@ (800a720 <CDC_Receive_FS+0x50>)
 800a700:	f001 fc5f 	bl	800bfc2 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	461a      	mov	r2, r3
 800a708:	2100      	movs	r1, #0
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f001 fbd9 	bl	800bec2 <memset>

  return (USBD_OK);
 800a710:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	200004d4 	.word	0x200004d4
 800a720:	2000047c 	.word	0x2000047c

0800a724 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a734:	4b0d      	ldr	r3, [pc, #52]	@ (800a76c <CDC_Transmit_FS+0x48>)
 800a736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a73a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a746:	2301      	movs	r3, #1
 800a748:	e00b      	b.n	800a762 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a74a:	887b      	ldrh	r3, [r7, #2]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	4806      	ldr	r0, [pc, #24]	@ (800a76c <CDC_Transmit_FS+0x48>)
 800a752:	f7fe fdee 	bl	8009332 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a756:	4805      	ldr	r0, [pc, #20]	@ (800a76c <CDC_Transmit_FS+0x48>)
 800a758:	f7fe fe19 	bl	800938e <USBD_CDC_TransmitPacket>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	200004d4 	.word	0x200004d4

0800a770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	6039      	str	r1, [r7, #0]
 800a77a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2212      	movs	r2, #18
 800a780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a782:	4b03      	ldr	r3, [pc, #12]	@ (800a790 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	20000148 	.word	0x20000148

0800a794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2204      	movs	r2, #4
 800a7a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7a6:	4b03      	ldr	r3, [pc, #12]	@ (800a7b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	2000015c 	.word	0x2000015c

0800a7b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	6039      	str	r1, [r7, #0]
 800a7c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d105      	bne.n	800a7d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	4907      	ldr	r1, [pc, #28]	@ (800a7ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ce:	4808      	ldr	r0, [pc, #32]	@ (800a7f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7d0:	f7ff fdf6 	bl	800a3c0 <USBD_GetString>
 800a7d4:	e004      	b.n	800a7e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	4904      	ldr	r1, [pc, #16]	@ (800a7ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a7da:	4805      	ldr	r0, [pc, #20]	@ (800a7f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7dc:	f7ff fdf0 	bl	800a3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7e0:	4b02      	ldr	r3, [pc, #8]	@ (800a7ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000f98 	.word	0x20000f98
 800a7f0:	0800f6c8 	.word	0x0800f6c8

0800a7f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	4904      	ldr	r1, [pc, #16]	@ (800a814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a804:	4804      	ldr	r0, [pc, #16]	@ (800a818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a806:	f7ff fddb 	bl	800a3c0 <USBD_GetString>
  return USBD_StrDesc;
 800a80a:	4b02      	ldr	r3, [pc, #8]	@ (800a814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20000f98 	.word	0x20000f98
 800a818:	0800f6e0 	.word	0x0800f6e0

0800a81c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	6039      	str	r1, [r7, #0]
 800a826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	221a      	movs	r2, #26
 800a82c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a82e:	f000 f843 	bl	800a8b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a832:	4b02      	ldr	r3, [pc, #8]	@ (800a83c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000160 	.word	0x20000160

0800a840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d105      	bne.n	800a85e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	4907      	ldr	r1, [pc, #28]	@ (800a874 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a856:	4808      	ldr	r0, [pc, #32]	@ (800a878 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a858:	f7ff fdb2 	bl	800a3c0 <USBD_GetString>
 800a85c:	e004      	b.n	800a868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	4904      	ldr	r1, [pc, #16]	@ (800a874 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a862:	4805      	ldr	r0, [pc, #20]	@ (800a878 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a864:	f7ff fdac 	bl	800a3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a868:	4b02      	ldr	r3, [pc, #8]	@ (800a874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20000f98 	.word	0x20000f98
 800a878:	0800f6f4 	.word	0x0800f6f4

0800a87c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	@ (800a8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	@ (800a8b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a894:	f7ff fd94 	bl	800a3c0 <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	@ (800a8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	@ (800a8b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8a0:	f7ff fd8e 	bl	800a3c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	@ (800a8b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20000f98 	.word	0x20000f98
 800a8b4:	0800f700 	.word	0x0800f700

0800a8b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8be:	4b0f      	ldr	r3, [pc, #60]	@ (800a8fc <Get_SerialNum+0x44>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a900 <Get_SerialNum+0x48>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a904 <Get_SerialNum+0x4c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8de:	2208      	movs	r2, #8
 800a8e0:	4909      	ldr	r1, [pc, #36]	@ (800a908 <Get_SerialNum+0x50>)
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f814 	bl	800a910 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	4908      	ldr	r1, [pc, #32]	@ (800a90c <Get_SerialNum+0x54>)
 800a8ec:	68b8      	ldr	r0, [r7, #8]
 800a8ee:	f000 f80f 	bl	800a910 <IntToUnicode>
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	1ffff7ac 	.word	0x1ffff7ac
 800a900:	1ffff7b0 	.word	0x1ffff7b0
 800a904:	1ffff7b4 	.word	0x1ffff7b4
 800a908:	20000162 	.word	0x20000162
 800a90c:	20000172 	.word	0x20000172

0800a910 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4613      	mov	r3, r2
 800a91c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a922:	2300      	movs	r3, #0
 800a924:	75fb      	strb	r3, [r7, #23]
 800a926:	e027      	b.n	800a978 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	0f1b      	lsrs	r3, r3, #28
 800a92c:	2b09      	cmp	r3, #9
 800a92e:	d80b      	bhi.n	800a948 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	0f1b      	lsrs	r3, r3, #28
 800a934:	b2da      	uxtb	r2, r3
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	4619      	mov	r1, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	440b      	add	r3, r1
 800a940:	3230      	adds	r2, #48	@ 0x30
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	e00a      	b.n	800a95e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	0f1b      	lsrs	r3, r3, #28
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	4619      	mov	r1, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	440b      	add	r3, r1
 800a958:	3237      	adds	r2, #55	@ 0x37
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	011b      	lsls	r3, r3, #4
 800a962:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a964:	7dfb      	ldrb	r3, [r7, #23]
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	3301      	adds	r3, #1
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	4413      	add	r3, r2
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	3301      	adds	r3, #1
 800a976:	75fb      	strb	r3, [r7, #23]
 800a978:	7dfa      	ldrb	r2, [r7, #23]
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d3d3      	bcc.n	800a928 <IntToUnicode+0x18>
  }
}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08a      	sub	sp, #40	@ 0x28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	609a      	str	r2, [r3, #8]
 800a9a4:	60da      	str	r2, [r3, #12]
 800a9a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a1c      	ldr	r2, [pc, #112]	@ (800aa20 <HAL_PCD_MspInit+0x90>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d131      	bne.n	800aa16 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9b2:	4b1c      	ldr	r3, [pc, #112]	@ (800aa24 <HAL_PCD_MspInit+0x94>)
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	4a1b      	ldr	r2, [pc, #108]	@ (800aa24 <HAL_PCD_MspInit+0x94>)
 800a9b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9bc:	6153      	str	r3, [r2, #20]
 800a9be:	4b19      	ldr	r3, [pc, #100]	@ (800aa24 <HAL_PCD_MspInit+0x94>)
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9c6:	613b      	str	r3, [r7, #16]
 800a9c8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800a9ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a9ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800a9dc:	230e      	movs	r3, #14
 800a9de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9e0:	f107 0314 	add.w	r3, r7, #20
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a9ea:	f7f8 fac9 	bl	8002f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800aa24 <HAL_PCD_MspInit+0x94>)
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800aa24 <HAL_PCD_MspInit+0x94>)
 800a9f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a9f8:	61d3      	str	r3, [r2, #28]
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800aa24 <HAL_PCD_MspInit+0x94>)
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800aa06:	2200      	movs	r2, #0
 800aa08:	2100      	movs	r1, #0
 800aa0a:	2014      	movs	r0, #20
 800aa0c:	f7f8 f9a3 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800aa10:	2014      	movs	r0, #20
 800aa12:	f7f8 f9bc 	bl	8002d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa16:	bf00      	nop
 800aa18:	3728      	adds	r7, #40	@ 0x28
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	40005c00 	.word	0x40005c00
 800aa24:	40021000 	.word	0x40021000

0800aa28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7fe fd8c 	bl	800955c <USBD_LL_SetupStage>
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800aa5e:	78fa      	ldrb	r2, [r7, #3]
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	440b      	add	r3, r1
 800aa6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	4619      	mov	r1, r3
 800aa76:	f7fe fdbe 	bl	80095f6 <USBD_LL_DataOutStage>
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	440b      	add	r3, r1
 800aaa2:	3324      	adds	r3, #36	@ 0x24
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	78fb      	ldrb	r3, [r7, #3]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	f7fe fe15 	bl	80096d8 <USBD_LL_DataInStage>
}
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe ff28 	bl	800991a <USBD_LL_SOF>
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aada:	2301      	movs	r3, #1
 800aadc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	795b      	ldrb	r3, [r3, #5]
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d001      	beq.n	800aaea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aae6:	f7f6 fbd3 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800aaf0:	7bfa      	ldrb	r2, [r7, #15]
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe fed5 	bl	80098a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe fe8e 	bl	8009822 <USBD_LL_Reset>
}
 800ab06:	bf00      	nop
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fed0 	bl	80098c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7a5b      	ldrb	r3, [r3, #9]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab2c:	4b04      	ldr	r3, [pc, #16]	@ (800ab40 <HAL_PCD_SuspendCallback+0x30>)
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	4a03      	ldr	r2, [pc, #12]	@ (800ab40 <HAL_PCD_SuspendCallback+0x30>)
 800ab32:	f043 0306 	orr.w	r3, r3, #6
 800ab36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab38:	bf00      	nop
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	e000ed00 	.word	0xe000ed00

0800ab44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fe fecb 	bl	80098ee <USBD_LL_Resume>
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab68:	4a28      	ldr	r2, [pc, #160]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a26      	ldr	r2, [pc, #152]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab74:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab78:	4b24      	ldr	r3, [pc, #144]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab7a:	4a25      	ldr	r2, [pc, #148]	@ (800ac10 <USBD_LL_Init+0xb0>)
 800ab7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab7e:	4b23      	ldr	r3, [pc, #140]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab80:	2208      	movs	r2, #8
 800ab82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab84:	4b21      	ldr	r3, [pc, #132]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab86:	2202      	movs	r2, #2
 800ab88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab8a:	4b20      	ldr	r3, [pc, #128]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab90:	4b1e      	ldr	r3, [pc, #120]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab96:	4b1d      	ldr	r3, [pc, #116]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab9c:	481b      	ldr	r0, [pc, #108]	@ (800ac0c <USBD_LL_Init+0xac>)
 800ab9e:	f7f8 fccd 	bl	800353c <HAL_PCD_Init>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aba8:	f7f6 fb72 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abb2:	2318      	movs	r3, #24
 800abb4:	2200      	movs	r2, #0
 800abb6:	2100      	movs	r1, #0
 800abb8:	f7fa f946 	bl	8004e48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abc2:	2358      	movs	r3, #88	@ 0x58
 800abc4:	2200      	movs	r2, #0
 800abc6:	2180      	movs	r1, #128	@ 0x80
 800abc8:	f7fa f93e 	bl	8004e48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abd2:	23c0      	movs	r3, #192	@ 0xc0
 800abd4:	2200      	movs	r2, #0
 800abd6:	2181      	movs	r1, #129	@ 0x81
 800abd8:	f7fa f936 	bl	8004e48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abe2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800abe6:	2200      	movs	r2, #0
 800abe8:	2101      	movs	r1, #1
 800abea:	f7fa f92d 	bl	8004e48 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800abf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abf8:	2200      	movs	r2, #0
 800abfa:	2182      	movs	r1, #130	@ 0x82
 800abfc:	f7fa f924 	bl	8004e48 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20001198 	.word	0x20001198
 800ac10:	40005c00 	.word	0x40005c00

0800ac14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7f8 fd4d 	bl	80036ca <HAL_PCD_Start>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 f952 	bl	800aee0 <USBD_Get_USB_Status>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	4608      	mov	r0, r1
 800ac54:	4611      	mov	r1, r2
 800ac56:	461a      	mov	r2, r3
 800ac58:	4603      	mov	r3, r0
 800ac5a:	70fb      	strb	r3, [r7, #3]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70bb      	strb	r3, [r7, #2]
 800ac60:	4613      	mov	r3, r2
 800ac62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ac72:	78bb      	ldrb	r3, [r7, #2]
 800ac74:	883a      	ldrh	r2, [r7, #0]
 800ac76:	78f9      	ldrb	r1, [r7, #3]
 800ac78:	f7f8 fe45 	bl	8003906 <HAL_PCD_EP_Open>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 f92c 	bl	800aee0 <USBD_Get_USB_Status>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acb0:	78fa      	ldrb	r2, [r7, #3]
 800acb2:	4611      	mov	r1, r2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7f8 fe83 	bl	80039c0 <HAL_PCD_EP_Close>
 800acba:	4603      	mov	r3, r0
 800acbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 f90d 	bl	800aee0 <USBD_Get_USB_Status>
 800acc6:	4603      	mov	r3, r0
 800acc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acca:	7bbb      	ldrb	r3, [r7, #14]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	460b      	mov	r3, r1
 800acde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800acee:	78fa      	ldrb	r2, [r7, #3]
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7f8 ff2c 	bl	8003b50 <HAL_PCD_EP_SetStall>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 f8ee 	bl	800aee0 <USBD_Get_USB_Status>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad2c:	78fa      	ldrb	r2, [r7, #3]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7f8 ff5f 	bl	8003bf4 <HAL_PCD_EP_ClrStall>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 f8cf 	bl	800aee0 <USBD_Get_USB_Status>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da0b      	bge.n	800ad84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad72:	68f9      	ldr	r1, [r7, #12]
 800ad74:	4613      	mov	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3312      	adds	r3, #18
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	e00b      	b.n	800ad9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad8a:	68f9      	ldr	r1, [r7, #12]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	440b      	add	r3, r1
 800ad96:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ad9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800adc2:	78fa      	ldrb	r2, [r7, #3]
 800adc4:	4611      	mov	r1, r2
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7f8 fd79 	bl	80038be <HAL_PCD_SetAddress>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f884 	bl	800aee0 <USBD_Get_USB_Status>
 800add8:	4603      	mov	r3, r0
 800adda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800addc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b086      	sub	sp, #24
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	461a      	mov	r2, r3
 800adf2:	460b      	mov	r3, r1
 800adf4:	72fb      	strb	r3, [r7, #11]
 800adf6:	4613      	mov	r3, r2
 800adf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ae08:	893b      	ldrh	r3, [r7, #8]
 800ae0a:	7af9      	ldrb	r1, [r7, #11]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	f7f8 fe68 	bl	8003ae2 <HAL_PCD_EP_Transmit>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 f861 	bl	800aee0 <USBD_Get_USB_Status>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae22:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	607a      	str	r2, [r7, #4]
 800ae36:	461a      	mov	r2, r3
 800ae38:	460b      	mov	r3, r1
 800ae3a:	72fb      	strb	r3, [r7, #11]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ae4e:	893b      	ldrh	r3, [r7, #8]
 800ae50:	7af9      	ldrb	r1, [r7, #11]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	f7f8 fdfc 	bl	8003a50 <HAL_PCD_EP_Receive>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f83e 	bl	800aee0 <USBD_Get_USB_Status>
 800ae64:	4603      	mov	r3, r0
 800ae66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae68:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae84:	78fa      	ldrb	r2, [r7, #3]
 800ae86:	4611      	mov	r1, r2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7f8 fe12 	bl	8003ab2 <HAL_PCD_EP_GetRxCount>
 800ae8e:	4603      	mov	r3, r0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aea0:	4b03      	ldr	r3, [pc, #12]	@ (800aeb0 <USBD_static_malloc+0x18>)
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	2000146c 	.word	0x2000146c

0800aeb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]

}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d817      	bhi.n	800af24 <USBD_Get_USB_Status+0x44>
 800aef4:	a201      	add	r2, pc, #4	@ (adr r2, 800aefc <USBD_Get_USB_Status+0x1c>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af0d 	.word	0x0800af0d
 800af00:	0800af13 	.word	0x0800af13
 800af04:	0800af19 	.word	0x0800af19
 800af08:	0800af1f 	.word	0x0800af1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
    break;
 800af10:	e00b      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af12:	2302      	movs	r3, #2
 800af14:	73fb      	strb	r3, [r7, #15]
    break;
 800af16:	e008      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
    break;
 800af1c:	e005      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af1e:	2302      	movs	r3, #2
 800af20:	73fb      	strb	r3, [r7, #15]
    break;
 800af22:	e002      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af24:	2302      	movs	r3, #2
 800af26:	73fb      	strb	r3, [r7, #15]
    break;
 800af28:	bf00      	nop
  }
  return usb_status;
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <__cvt>:
 800af38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	ec57 6b10 	vmov	r6, r7, d0
 800af40:	2f00      	cmp	r7, #0
 800af42:	460c      	mov	r4, r1
 800af44:	4619      	mov	r1, r3
 800af46:	463b      	mov	r3, r7
 800af48:	bfbb      	ittet	lt
 800af4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800af4e:	461f      	movlt	r7, r3
 800af50:	2300      	movge	r3, #0
 800af52:	232d      	movlt	r3, #45	@ 0x2d
 800af54:	700b      	strb	r3, [r1, #0]
 800af56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800af5c:	4691      	mov	r9, r2
 800af5e:	f023 0820 	bic.w	r8, r3, #32
 800af62:	bfbc      	itt	lt
 800af64:	4632      	movlt	r2, r6
 800af66:	4616      	movlt	r6, r2
 800af68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af6c:	d005      	beq.n	800af7a <__cvt+0x42>
 800af6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af72:	d100      	bne.n	800af76 <__cvt+0x3e>
 800af74:	3401      	adds	r4, #1
 800af76:	2102      	movs	r1, #2
 800af78:	e000      	b.n	800af7c <__cvt+0x44>
 800af7a:	2103      	movs	r1, #3
 800af7c:	ab03      	add	r3, sp, #12
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	ab02      	add	r3, sp, #8
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	ec47 6b10 	vmov	d0, r6, r7
 800af88:	4653      	mov	r3, sl
 800af8a:	4622      	mov	r2, r4
 800af8c:	f001 f8b8 	bl	800c100 <_dtoa_r>
 800af90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af94:	4605      	mov	r5, r0
 800af96:	d119      	bne.n	800afcc <__cvt+0x94>
 800af98:	f019 0f01 	tst.w	r9, #1
 800af9c:	d00e      	beq.n	800afbc <__cvt+0x84>
 800af9e:	eb00 0904 	add.w	r9, r0, r4
 800afa2:	2200      	movs	r2, #0
 800afa4:	2300      	movs	r3, #0
 800afa6:	4630      	mov	r0, r6
 800afa8:	4639      	mov	r1, r7
 800afaa:	f7f5 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800afae:	b108      	cbz	r0, 800afb4 <__cvt+0x7c>
 800afb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800afb4:	2230      	movs	r2, #48	@ 0x30
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	454b      	cmp	r3, r9
 800afba:	d31e      	bcc.n	800affa <__cvt+0xc2>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afc0:	1b5b      	subs	r3, r3, r5
 800afc2:	4628      	mov	r0, r5
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	b004      	add	sp, #16
 800afc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afd0:	eb00 0904 	add.w	r9, r0, r4
 800afd4:	d1e5      	bne.n	800afa2 <__cvt+0x6a>
 800afd6:	7803      	ldrb	r3, [r0, #0]
 800afd8:	2b30      	cmp	r3, #48	@ 0x30
 800afda:	d10a      	bne.n	800aff2 <__cvt+0xba>
 800afdc:	2200      	movs	r2, #0
 800afde:	2300      	movs	r3, #0
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f7f5 fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 800afe8:	b918      	cbnz	r0, 800aff2 <__cvt+0xba>
 800afea:	f1c4 0401 	rsb	r4, r4, #1
 800afee:	f8ca 4000 	str.w	r4, [sl]
 800aff2:	f8da 3000 	ldr.w	r3, [sl]
 800aff6:	4499      	add	r9, r3
 800aff8:	e7d3      	b.n	800afa2 <__cvt+0x6a>
 800affa:	1c59      	adds	r1, r3, #1
 800affc:	9103      	str	r1, [sp, #12]
 800affe:	701a      	strb	r2, [r3, #0]
 800b000:	e7d9      	b.n	800afb6 <__cvt+0x7e>

0800b002 <__exponent>:
 800b002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b004:	2900      	cmp	r1, #0
 800b006:	bfba      	itte	lt
 800b008:	4249      	neglt	r1, r1
 800b00a:	232d      	movlt	r3, #45	@ 0x2d
 800b00c:	232b      	movge	r3, #43	@ 0x2b
 800b00e:	2909      	cmp	r1, #9
 800b010:	7002      	strb	r2, [r0, #0]
 800b012:	7043      	strb	r3, [r0, #1]
 800b014:	dd29      	ble.n	800b06a <__exponent+0x68>
 800b016:	f10d 0307 	add.w	r3, sp, #7
 800b01a:	461d      	mov	r5, r3
 800b01c:	270a      	movs	r7, #10
 800b01e:	461a      	mov	r2, r3
 800b020:	fbb1 f6f7 	udiv	r6, r1, r7
 800b024:	fb07 1416 	mls	r4, r7, r6, r1
 800b028:	3430      	adds	r4, #48	@ 0x30
 800b02a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b02e:	460c      	mov	r4, r1
 800b030:	2c63      	cmp	r4, #99	@ 0x63
 800b032:	f103 33ff 	add.w	r3, r3, #4294967295
 800b036:	4631      	mov	r1, r6
 800b038:	dcf1      	bgt.n	800b01e <__exponent+0x1c>
 800b03a:	3130      	adds	r1, #48	@ 0x30
 800b03c:	1e94      	subs	r4, r2, #2
 800b03e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b042:	1c41      	adds	r1, r0, #1
 800b044:	4623      	mov	r3, r4
 800b046:	42ab      	cmp	r3, r5
 800b048:	d30a      	bcc.n	800b060 <__exponent+0x5e>
 800b04a:	f10d 0309 	add.w	r3, sp, #9
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	42ac      	cmp	r4, r5
 800b052:	bf88      	it	hi
 800b054:	2300      	movhi	r3, #0
 800b056:	3302      	adds	r3, #2
 800b058:	4403      	add	r3, r0
 800b05a:	1a18      	subs	r0, r3, r0
 800b05c:	b003      	add	sp, #12
 800b05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b060:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b064:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b068:	e7ed      	b.n	800b046 <__exponent+0x44>
 800b06a:	2330      	movs	r3, #48	@ 0x30
 800b06c:	3130      	adds	r1, #48	@ 0x30
 800b06e:	7083      	strb	r3, [r0, #2]
 800b070:	70c1      	strb	r1, [r0, #3]
 800b072:	1d03      	adds	r3, r0, #4
 800b074:	e7f1      	b.n	800b05a <__exponent+0x58>
	...

0800b078 <_printf_float>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	b08d      	sub	sp, #52	@ 0x34
 800b07e:	460c      	mov	r4, r1
 800b080:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b084:	4616      	mov	r6, r2
 800b086:	461f      	mov	r7, r3
 800b088:	4605      	mov	r5, r0
 800b08a:	f000 ff23 	bl	800bed4 <_localeconv_r>
 800b08e:	6803      	ldr	r3, [r0, #0]
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	4618      	mov	r0, r3
 800b094:	f7f5 f8ec 	bl	8000270 <strlen>
 800b098:	2300      	movs	r3, #0
 800b09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b09c:	f8d8 3000 	ldr.w	r3, [r8]
 800b0a0:	9005      	str	r0, [sp, #20]
 800b0a2:	3307      	adds	r3, #7
 800b0a4:	f023 0307 	bic.w	r3, r3, #7
 800b0a8:	f103 0208 	add.w	r2, r3, #8
 800b0ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b0b0:	f8d4 b000 	ldr.w	fp, [r4]
 800b0b4:	f8c8 2000 	str.w	r2, [r8]
 800b0b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b0c0:	9307      	str	r3, [sp, #28]
 800b0c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b0c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b0ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0ce:	4b9c      	ldr	r3, [pc, #624]	@ (800b340 <_printf_float+0x2c8>)
 800b0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d4:	f7f5 fd2a 	bl	8000b2c <__aeabi_dcmpun>
 800b0d8:	bb70      	cbnz	r0, 800b138 <_printf_float+0xc0>
 800b0da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0de:	4b98      	ldr	r3, [pc, #608]	@ (800b340 <_printf_float+0x2c8>)
 800b0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e4:	f7f5 fd04 	bl	8000af0 <__aeabi_dcmple>
 800b0e8:	bb30      	cbnz	r0, 800b138 <_printf_float+0xc0>
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	f7f5 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800b0f6:	b110      	cbz	r0, 800b0fe <_printf_float+0x86>
 800b0f8:	232d      	movs	r3, #45	@ 0x2d
 800b0fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0fe:	4a91      	ldr	r2, [pc, #580]	@ (800b344 <_printf_float+0x2cc>)
 800b100:	4b91      	ldr	r3, [pc, #580]	@ (800b348 <_printf_float+0x2d0>)
 800b102:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b106:	bf94      	ite	ls
 800b108:	4690      	movls	r8, r2
 800b10a:	4698      	movhi	r8, r3
 800b10c:	2303      	movs	r3, #3
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	f02b 0304 	bic.w	r3, fp, #4
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	f04f 0900 	mov.w	r9, #0
 800b11a:	9700      	str	r7, [sp, #0]
 800b11c:	4633      	mov	r3, r6
 800b11e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b120:	4621      	mov	r1, r4
 800b122:	4628      	mov	r0, r5
 800b124:	f000 f9d2 	bl	800b4cc <_printf_common>
 800b128:	3001      	adds	r0, #1
 800b12a:	f040 808d 	bne.w	800b248 <_printf_float+0x1d0>
 800b12e:	f04f 30ff 	mov.w	r0, #4294967295
 800b132:	b00d      	add	sp, #52	@ 0x34
 800b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b138:	4642      	mov	r2, r8
 800b13a:	464b      	mov	r3, r9
 800b13c:	4640      	mov	r0, r8
 800b13e:	4649      	mov	r1, r9
 800b140:	f7f5 fcf4 	bl	8000b2c <__aeabi_dcmpun>
 800b144:	b140      	cbz	r0, 800b158 <_printf_float+0xe0>
 800b146:	464b      	mov	r3, r9
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bfbc      	itt	lt
 800b14c:	232d      	movlt	r3, #45	@ 0x2d
 800b14e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b152:	4a7e      	ldr	r2, [pc, #504]	@ (800b34c <_printf_float+0x2d4>)
 800b154:	4b7e      	ldr	r3, [pc, #504]	@ (800b350 <_printf_float+0x2d8>)
 800b156:	e7d4      	b.n	800b102 <_printf_float+0x8a>
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b15e:	9206      	str	r2, [sp, #24]
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	d13b      	bne.n	800b1dc <_printf_float+0x164>
 800b164:	2306      	movs	r3, #6
 800b166:	6063      	str	r3, [r4, #4]
 800b168:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b16c:	2300      	movs	r3, #0
 800b16e:	6022      	str	r2, [r4, #0]
 800b170:	9303      	str	r3, [sp, #12]
 800b172:	ab0a      	add	r3, sp, #40	@ 0x28
 800b174:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b178:	ab09      	add	r3, sp, #36	@ 0x24
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	6861      	ldr	r1, [r4, #4]
 800b17e:	ec49 8b10 	vmov	d0, r8, r9
 800b182:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b186:	4628      	mov	r0, r5
 800b188:	f7ff fed6 	bl	800af38 <__cvt>
 800b18c:	9b06      	ldr	r3, [sp, #24]
 800b18e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b190:	2b47      	cmp	r3, #71	@ 0x47
 800b192:	4680      	mov	r8, r0
 800b194:	d129      	bne.n	800b1ea <_printf_float+0x172>
 800b196:	1cc8      	adds	r0, r1, #3
 800b198:	db02      	blt.n	800b1a0 <_printf_float+0x128>
 800b19a:	6863      	ldr	r3, [r4, #4]
 800b19c:	4299      	cmp	r1, r3
 800b19e:	dd41      	ble.n	800b224 <_printf_float+0x1ac>
 800b1a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b1a8:	3901      	subs	r1, #1
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b1b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1b2:	f7ff ff26 	bl	800b002 <__exponent>
 800b1b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1b8:	1813      	adds	r3, r2, r0
 800b1ba:	2a01      	cmp	r2, #1
 800b1bc:	4681      	mov	r9, r0
 800b1be:	6123      	str	r3, [r4, #16]
 800b1c0:	dc02      	bgt.n	800b1c8 <_printf_float+0x150>
 800b1c2:	6822      	ldr	r2, [r4, #0]
 800b1c4:	07d2      	lsls	r2, r2, #31
 800b1c6:	d501      	bpl.n	800b1cc <_printf_float+0x154>
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	6123      	str	r3, [r4, #16]
 800b1cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0a2      	beq.n	800b11a <_printf_float+0xa2>
 800b1d4:	232d      	movs	r3, #45	@ 0x2d
 800b1d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1da:	e79e      	b.n	800b11a <_printf_float+0xa2>
 800b1dc:	9a06      	ldr	r2, [sp, #24]
 800b1de:	2a47      	cmp	r2, #71	@ 0x47
 800b1e0:	d1c2      	bne.n	800b168 <_printf_float+0xf0>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1c0      	bne.n	800b168 <_printf_float+0xf0>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e7bd      	b.n	800b166 <_printf_float+0xee>
 800b1ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1ee:	d9db      	bls.n	800b1a8 <_printf_float+0x130>
 800b1f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b1f4:	d118      	bne.n	800b228 <_printf_float+0x1b0>
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	6863      	ldr	r3, [r4, #4]
 800b1fa:	dd0b      	ble.n	800b214 <_printf_float+0x19c>
 800b1fc:	6121      	str	r1, [r4, #16]
 800b1fe:	b913      	cbnz	r3, 800b206 <_printf_float+0x18e>
 800b200:	6822      	ldr	r2, [r4, #0]
 800b202:	07d0      	lsls	r0, r2, #31
 800b204:	d502      	bpl.n	800b20c <_printf_float+0x194>
 800b206:	3301      	adds	r3, #1
 800b208:	440b      	add	r3, r1
 800b20a:	6123      	str	r3, [r4, #16]
 800b20c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b20e:	f04f 0900 	mov.w	r9, #0
 800b212:	e7db      	b.n	800b1cc <_printf_float+0x154>
 800b214:	b913      	cbnz	r3, 800b21c <_printf_float+0x1a4>
 800b216:	6822      	ldr	r2, [r4, #0]
 800b218:	07d2      	lsls	r2, r2, #31
 800b21a:	d501      	bpl.n	800b220 <_printf_float+0x1a8>
 800b21c:	3302      	adds	r3, #2
 800b21e:	e7f4      	b.n	800b20a <_printf_float+0x192>
 800b220:	2301      	movs	r3, #1
 800b222:	e7f2      	b.n	800b20a <_printf_float+0x192>
 800b224:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b22a:	4299      	cmp	r1, r3
 800b22c:	db05      	blt.n	800b23a <_printf_float+0x1c2>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	6121      	str	r1, [r4, #16]
 800b232:	07d8      	lsls	r0, r3, #31
 800b234:	d5ea      	bpl.n	800b20c <_printf_float+0x194>
 800b236:	1c4b      	adds	r3, r1, #1
 800b238:	e7e7      	b.n	800b20a <_printf_float+0x192>
 800b23a:	2900      	cmp	r1, #0
 800b23c:	bfd4      	ite	le
 800b23e:	f1c1 0202 	rsble	r2, r1, #2
 800b242:	2201      	movgt	r2, #1
 800b244:	4413      	add	r3, r2
 800b246:	e7e0      	b.n	800b20a <_printf_float+0x192>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	055a      	lsls	r2, r3, #21
 800b24c:	d407      	bmi.n	800b25e <_printf_float+0x1e6>
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	4642      	mov	r2, r8
 800b252:	4631      	mov	r1, r6
 800b254:	4628      	mov	r0, r5
 800b256:	47b8      	blx	r7
 800b258:	3001      	adds	r0, #1
 800b25a:	d12b      	bne.n	800b2b4 <_printf_float+0x23c>
 800b25c:	e767      	b.n	800b12e <_printf_float+0xb6>
 800b25e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b262:	f240 80dd 	bls.w	800b420 <_printf_float+0x3a8>
 800b266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b26a:	2200      	movs	r2, #0
 800b26c:	2300      	movs	r3, #0
 800b26e:	f7f5 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b272:	2800      	cmp	r0, #0
 800b274:	d033      	beq.n	800b2de <_printf_float+0x266>
 800b276:	4a37      	ldr	r2, [pc, #220]	@ (800b354 <_printf_float+0x2dc>)
 800b278:	2301      	movs	r3, #1
 800b27a:	4631      	mov	r1, r6
 800b27c:	4628      	mov	r0, r5
 800b27e:	47b8      	blx	r7
 800b280:	3001      	adds	r0, #1
 800b282:	f43f af54 	beq.w	800b12e <_printf_float+0xb6>
 800b286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b28a:	4543      	cmp	r3, r8
 800b28c:	db02      	blt.n	800b294 <_printf_float+0x21c>
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	07d8      	lsls	r0, r3, #31
 800b292:	d50f      	bpl.n	800b2b4 <_printf_float+0x23c>
 800b294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b298:	4631      	mov	r1, r6
 800b29a:	4628      	mov	r0, r5
 800b29c:	47b8      	blx	r7
 800b29e:	3001      	adds	r0, #1
 800b2a0:	f43f af45 	beq.w	800b12e <_printf_float+0xb6>
 800b2a4:	f04f 0900 	mov.w	r9, #0
 800b2a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2ac:	f104 0a1a 	add.w	sl, r4, #26
 800b2b0:	45c8      	cmp	r8, r9
 800b2b2:	dc09      	bgt.n	800b2c8 <_printf_float+0x250>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	079b      	lsls	r3, r3, #30
 800b2b8:	f100 8103 	bmi.w	800b4c2 <_printf_float+0x44a>
 800b2bc:	68e0      	ldr	r0, [r4, #12]
 800b2be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2c0:	4298      	cmp	r0, r3
 800b2c2:	bfb8      	it	lt
 800b2c4:	4618      	movlt	r0, r3
 800b2c6:	e734      	b.n	800b132 <_printf_float+0xba>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	4652      	mov	r2, sl
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	47b8      	blx	r7
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	f43f af2b 	beq.w	800b12e <_printf_float+0xb6>
 800b2d8:	f109 0901 	add.w	r9, r9, #1
 800b2dc:	e7e8      	b.n	800b2b0 <_printf_float+0x238>
 800b2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dc39      	bgt.n	800b358 <_printf_float+0x2e0>
 800b2e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b354 <_printf_float+0x2dc>)
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	47b8      	blx	r7
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	f43f af1d 	beq.w	800b12e <_printf_float+0xb6>
 800b2f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b2f8:	ea59 0303 	orrs.w	r3, r9, r3
 800b2fc:	d102      	bne.n	800b304 <_printf_float+0x28c>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	07d9      	lsls	r1, r3, #31
 800b302:	d5d7      	bpl.n	800b2b4 <_printf_float+0x23c>
 800b304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b308:	4631      	mov	r1, r6
 800b30a:	4628      	mov	r0, r5
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	f43f af0d 	beq.w	800b12e <_printf_float+0xb6>
 800b314:	f04f 0a00 	mov.w	sl, #0
 800b318:	f104 0b1a 	add.w	fp, r4, #26
 800b31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b31e:	425b      	negs	r3, r3
 800b320:	4553      	cmp	r3, sl
 800b322:	dc01      	bgt.n	800b328 <_printf_float+0x2b0>
 800b324:	464b      	mov	r3, r9
 800b326:	e793      	b.n	800b250 <_printf_float+0x1d8>
 800b328:	2301      	movs	r3, #1
 800b32a:	465a      	mov	r2, fp
 800b32c:	4631      	mov	r1, r6
 800b32e:	4628      	mov	r0, r5
 800b330:	47b8      	blx	r7
 800b332:	3001      	adds	r0, #1
 800b334:	f43f aefb 	beq.w	800b12e <_printf_float+0xb6>
 800b338:	f10a 0a01 	add.w	sl, sl, #1
 800b33c:	e7ee      	b.n	800b31c <_printf_float+0x2a4>
 800b33e:	bf00      	nop
 800b340:	7fefffff 	.word	0x7fefffff
 800b344:	0800f740 	.word	0x0800f740
 800b348:	0800f744 	.word	0x0800f744
 800b34c:	0800f748 	.word	0x0800f748
 800b350:	0800f74c 	.word	0x0800f74c
 800b354:	0800f750 	.word	0x0800f750
 800b358:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b35a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b35e:	4553      	cmp	r3, sl
 800b360:	bfa8      	it	ge
 800b362:	4653      	movge	r3, sl
 800b364:	2b00      	cmp	r3, #0
 800b366:	4699      	mov	r9, r3
 800b368:	dc36      	bgt.n	800b3d8 <_printf_float+0x360>
 800b36a:	f04f 0b00 	mov.w	fp, #0
 800b36e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b372:	f104 021a 	add.w	r2, r4, #26
 800b376:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b378:	9306      	str	r3, [sp, #24]
 800b37a:	eba3 0309 	sub.w	r3, r3, r9
 800b37e:	455b      	cmp	r3, fp
 800b380:	dc31      	bgt.n	800b3e6 <_printf_float+0x36e>
 800b382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b384:	459a      	cmp	sl, r3
 800b386:	dc3a      	bgt.n	800b3fe <_printf_float+0x386>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	07da      	lsls	r2, r3, #31
 800b38c:	d437      	bmi.n	800b3fe <_printf_float+0x386>
 800b38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b390:	ebaa 0903 	sub.w	r9, sl, r3
 800b394:	9b06      	ldr	r3, [sp, #24]
 800b396:	ebaa 0303 	sub.w	r3, sl, r3
 800b39a:	4599      	cmp	r9, r3
 800b39c:	bfa8      	it	ge
 800b39e:	4699      	movge	r9, r3
 800b3a0:	f1b9 0f00 	cmp.w	r9, #0
 800b3a4:	dc33      	bgt.n	800b40e <_printf_float+0x396>
 800b3a6:	f04f 0800 	mov.w	r8, #0
 800b3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ae:	f104 0b1a 	add.w	fp, r4, #26
 800b3b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3b4:	ebaa 0303 	sub.w	r3, sl, r3
 800b3b8:	eba3 0309 	sub.w	r3, r3, r9
 800b3bc:	4543      	cmp	r3, r8
 800b3be:	f77f af79 	ble.w	800b2b4 <_printf_float+0x23c>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	465a      	mov	r2, fp
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	47b8      	blx	r7
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	f43f aeae 	beq.w	800b12e <_printf_float+0xb6>
 800b3d2:	f108 0801 	add.w	r8, r8, #1
 800b3d6:	e7ec      	b.n	800b3b2 <_printf_float+0x33a>
 800b3d8:	4642      	mov	r2, r8
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d1c2      	bne.n	800b36a <_printf_float+0x2f2>
 800b3e4:	e6a3      	b.n	800b12e <_printf_float+0xb6>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	9206      	str	r2, [sp, #24]
 800b3ee:	47b8      	blx	r7
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f43f ae9c 	beq.w	800b12e <_printf_float+0xb6>
 800b3f6:	9a06      	ldr	r2, [sp, #24]
 800b3f8:	f10b 0b01 	add.w	fp, fp, #1
 800b3fc:	e7bb      	b.n	800b376 <_printf_float+0x2fe>
 800b3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	d1c0      	bne.n	800b38e <_printf_float+0x316>
 800b40c:	e68f      	b.n	800b12e <_printf_float+0xb6>
 800b40e:	9a06      	ldr	r2, [sp, #24]
 800b410:	464b      	mov	r3, r9
 800b412:	4442      	add	r2, r8
 800b414:	4631      	mov	r1, r6
 800b416:	4628      	mov	r0, r5
 800b418:	47b8      	blx	r7
 800b41a:	3001      	adds	r0, #1
 800b41c:	d1c3      	bne.n	800b3a6 <_printf_float+0x32e>
 800b41e:	e686      	b.n	800b12e <_printf_float+0xb6>
 800b420:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b424:	f1ba 0f01 	cmp.w	sl, #1
 800b428:	dc01      	bgt.n	800b42e <_printf_float+0x3b6>
 800b42a:	07db      	lsls	r3, r3, #31
 800b42c:	d536      	bpl.n	800b49c <_printf_float+0x424>
 800b42e:	2301      	movs	r3, #1
 800b430:	4642      	mov	r2, r8
 800b432:	4631      	mov	r1, r6
 800b434:	4628      	mov	r0, r5
 800b436:	47b8      	blx	r7
 800b438:	3001      	adds	r0, #1
 800b43a:	f43f ae78 	beq.w	800b12e <_printf_float+0xb6>
 800b43e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b442:	4631      	mov	r1, r6
 800b444:	4628      	mov	r0, r5
 800b446:	47b8      	blx	r7
 800b448:	3001      	adds	r0, #1
 800b44a:	f43f ae70 	beq.w	800b12e <_printf_float+0xb6>
 800b44e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b452:	2200      	movs	r2, #0
 800b454:	2300      	movs	r3, #0
 800b456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b45a:	f7f5 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800b45e:	b9c0      	cbnz	r0, 800b492 <_printf_float+0x41a>
 800b460:	4653      	mov	r3, sl
 800b462:	f108 0201 	add.w	r2, r8, #1
 800b466:	4631      	mov	r1, r6
 800b468:	4628      	mov	r0, r5
 800b46a:	47b8      	blx	r7
 800b46c:	3001      	adds	r0, #1
 800b46e:	d10c      	bne.n	800b48a <_printf_float+0x412>
 800b470:	e65d      	b.n	800b12e <_printf_float+0xb6>
 800b472:	2301      	movs	r3, #1
 800b474:	465a      	mov	r2, fp
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	f43f ae56 	beq.w	800b12e <_printf_float+0xb6>
 800b482:	f108 0801 	add.w	r8, r8, #1
 800b486:	45d0      	cmp	r8, sl
 800b488:	dbf3      	blt.n	800b472 <_printf_float+0x3fa>
 800b48a:	464b      	mov	r3, r9
 800b48c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b490:	e6df      	b.n	800b252 <_printf_float+0x1da>
 800b492:	f04f 0800 	mov.w	r8, #0
 800b496:	f104 0b1a 	add.w	fp, r4, #26
 800b49a:	e7f4      	b.n	800b486 <_printf_float+0x40e>
 800b49c:	2301      	movs	r3, #1
 800b49e:	4642      	mov	r2, r8
 800b4a0:	e7e1      	b.n	800b466 <_printf_float+0x3ee>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	464a      	mov	r2, r9
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	47b8      	blx	r7
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	f43f ae3e 	beq.w	800b12e <_printf_float+0xb6>
 800b4b2:	f108 0801 	add.w	r8, r8, #1
 800b4b6:	68e3      	ldr	r3, [r4, #12]
 800b4b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4ba:	1a5b      	subs	r3, r3, r1
 800b4bc:	4543      	cmp	r3, r8
 800b4be:	dcf0      	bgt.n	800b4a2 <_printf_float+0x42a>
 800b4c0:	e6fc      	b.n	800b2bc <_printf_float+0x244>
 800b4c2:	f04f 0800 	mov.w	r8, #0
 800b4c6:	f104 0919 	add.w	r9, r4, #25
 800b4ca:	e7f4      	b.n	800b4b6 <_printf_float+0x43e>

0800b4cc <_printf_common>:
 800b4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d0:	4616      	mov	r6, r2
 800b4d2:	4698      	mov	r8, r3
 800b4d4:	688a      	ldr	r2, [r1, #8]
 800b4d6:	690b      	ldr	r3, [r1, #16]
 800b4d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	bfb8      	it	lt
 800b4e0:	4613      	movlt	r3, r2
 800b4e2:	6033      	str	r3, [r6, #0]
 800b4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4e8:	4607      	mov	r7, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	b10a      	cbz	r2, 800b4f2 <_printf_common+0x26>
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	6033      	str	r3, [r6, #0]
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	0699      	lsls	r1, r3, #26
 800b4f6:	bf42      	ittt	mi
 800b4f8:	6833      	ldrmi	r3, [r6, #0]
 800b4fa:	3302      	addmi	r3, #2
 800b4fc:	6033      	strmi	r3, [r6, #0]
 800b4fe:	6825      	ldr	r5, [r4, #0]
 800b500:	f015 0506 	ands.w	r5, r5, #6
 800b504:	d106      	bne.n	800b514 <_printf_common+0x48>
 800b506:	f104 0a19 	add.w	sl, r4, #25
 800b50a:	68e3      	ldr	r3, [r4, #12]
 800b50c:	6832      	ldr	r2, [r6, #0]
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	42ab      	cmp	r3, r5
 800b512:	dc26      	bgt.n	800b562 <_printf_common+0x96>
 800b514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b518:	6822      	ldr	r2, [r4, #0]
 800b51a:	3b00      	subs	r3, #0
 800b51c:	bf18      	it	ne
 800b51e:	2301      	movne	r3, #1
 800b520:	0692      	lsls	r2, r2, #26
 800b522:	d42b      	bmi.n	800b57c <_printf_common+0xb0>
 800b524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b528:	4641      	mov	r1, r8
 800b52a:	4638      	mov	r0, r7
 800b52c:	47c8      	blx	r9
 800b52e:	3001      	adds	r0, #1
 800b530:	d01e      	beq.n	800b570 <_printf_common+0xa4>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	6922      	ldr	r2, [r4, #16]
 800b536:	f003 0306 	and.w	r3, r3, #6
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	bf02      	ittt	eq
 800b53e:	68e5      	ldreq	r5, [r4, #12]
 800b540:	6833      	ldreq	r3, [r6, #0]
 800b542:	1aed      	subeq	r5, r5, r3
 800b544:	68a3      	ldr	r3, [r4, #8]
 800b546:	bf0c      	ite	eq
 800b548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b54c:	2500      	movne	r5, #0
 800b54e:	4293      	cmp	r3, r2
 800b550:	bfc4      	itt	gt
 800b552:	1a9b      	subgt	r3, r3, r2
 800b554:	18ed      	addgt	r5, r5, r3
 800b556:	2600      	movs	r6, #0
 800b558:	341a      	adds	r4, #26
 800b55a:	42b5      	cmp	r5, r6
 800b55c:	d11a      	bne.n	800b594 <_printf_common+0xc8>
 800b55e:	2000      	movs	r0, #0
 800b560:	e008      	b.n	800b574 <_printf_common+0xa8>
 800b562:	2301      	movs	r3, #1
 800b564:	4652      	mov	r2, sl
 800b566:	4641      	mov	r1, r8
 800b568:	4638      	mov	r0, r7
 800b56a:	47c8      	blx	r9
 800b56c:	3001      	adds	r0, #1
 800b56e:	d103      	bne.n	800b578 <_printf_common+0xac>
 800b570:	f04f 30ff 	mov.w	r0, #4294967295
 800b574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b578:	3501      	adds	r5, #1
 800b57a:	e7c6      	b.n	800b50a <_printf_common+0x3e>
 800b57c:	18e1      	adds	r1, r4, r3
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	2030      	movs	r0, #48	@ 0x30
 800b582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b586:	4422      	add	r2, r4
 800b588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b58c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b590:	3302      	adds	r3, #2
 800b592:	e7c7      	b.n	800b524 <_printf_common+0x58>
 800b594:	2301      	movs	r3, #1
 800b596:	4622      	mov	r2, r4
 800b598:	4641      	mov	r1, r8
 800b59a:	4638      	mov	r0, r7
 800b59c:	47c8      	blx	r9
 800b59e:	3001      	adds	r0, #1
 800b5a0:	d0e6      	beq.n	800b570 <_printf_common+0xa4>
 800b5a2:	3601      	adds	r6, #1
 800b5a4:	e7d9      	b.n	800b55a <_printf_common+0x8e>
	...

0800b5a8 <_printf_i>:
 800b5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ac:	7e0f      	ldrb	r7, [r1, #24]
 800b5ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5b0:	2f78      	cmp	r7, #120	@ 0x78
 800b5b2:	4691      	mov	r9, r2
 800b5b4:	4680      	mov	r8, r0
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	469a      	mov	sl, r3
 800b5ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5be:	d807      	bhi.n	800b5d0 <_printf_i+0x28>
 800b5c0:	2f62      	cmp	r7, #98	@ 0x62
 800b5c2:	d80a      	bhi.n	800b5da <_printf_i+0x32>
 800b5c4:	2f00      	cmp	r7, #0
 800b5c6:	f000 80d2 	beq.w	800b76e <_printf_i+0x1c6>
 800b5ca:	2f58      	cmp	r7, #88	@ 0x58
 800b5cc:	f000 80b9 	beq.w	800b742 <_printf_i+0x19a>
 800b5d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5d8:	e03a      	b.n	800b650 <_printf_i+0xa8>
 800b5da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5de:	2b15      	cmp	r3, #21
 800b5e0:	d8f6      	bhi.n	800b5d0 <_printf_i+0x28>
 800b5e2:	a101      	add	r1, pc, #4	@ (adr r1, 800b5e8 <_printf_i+0x40>)
 800b5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5e8:	0800b641 	.word	0x0800b641
 800b5ec:	0800b655 	.word	0x0800b655
 800b5f0:	0800b5d1 	.word	0x0800b5d1
 800b5f4:	0800b5d1 	.word	0x0800b5d1
 800b5f8:	0800b5d1 	.word	0x0800b5d1
 800b5fc:	0800b5d1 	.word	0x0800b5d1
 800b600:	0800b655 	.word	0x0800b655
 800b604:	0800b5d1 	.word	0x0800b5d1
 800b608:	0800b5d1 	.word	0x0800b5d1
 800b60c:	0800b5d1 	.word	0x0800b5d1
 800b610:	0800b5d1 	.word	0x0800b5d1
 800b614:	0800b755 	.word	0x0800b755
 800b618:	0800b67f 	.word	0x0800b67f
 800b61c:	0800b70f 	.word	0x0800b70f
 800b620:	0800b5d1 	.word	0x0800b5d1
 800b624:	0800b5d1 	.word	0x0800b5d1
 800b628:	0800b777 	.word	0x0800b777
 800b62c:	0800b5d1 	.word	0x0800b5d1
 800b630:	0800b67f 	.word	0x0800b67f
 800b634:	0800b5d1 	.word	0x0800b5d1
 800b638:	0800b5d1 	.word	0x0800b5d1
 800b63c:	0800b717 	.word	0x0800b717
 800b640:	6833      	ldr	r3, [r6, #0]
 800b642:	1d1a      	adds	r2, r3, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6032      	str	r2, [r6, #0]
 800b648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b64c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b650:	2301      	movs	r3, #1
 800b652:	e09d      	b.n	800b790 <_printf_i+0x1e8>
 800b654:	6833      	ldr	r3, [r6, #0]
 800b656:	6820      	ldr	r0, [r4, #0]
 800b658:	1d19      	adds	r1, r3, #4
 800b65a:	6031      	str	r1, [r6, #0]
 800b65c:	0606      	lsls	r6, r0, #24
 800b65e:	d501      	bpl.n	800b664 <_printf_i+0xbc>
 800b660:	681d      	ldr	r5, [r3, #0]
 800b662:	e003      	b.n	800b66c <_printf_i+0xc4>
 800b664:	0645      	lsls	r5, r0, #25
 800b666:	d5fb      	bpl.n	800b660 <_printf_i+0xb8>
 800b668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	da03      	bge.n	800b678 <_printf_i+0xd0>
 800b670:	232d      	movs	r3, #45	@ 0x2d
 800b672:	426d      	negs	r5, r5
 800b674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b678:	4859      	ldr	r0, [pc, #356]	@ (800b7e0 <_printf_i+0x238>)
 800b67a:	230a      	movs	r3, #10
 800b67c:	e011      	b.n	800b6a2 <_printf_i+0xfa>
 800b67e:	6821      	ldr	r1, [r4, #0]
 800b680:	6833      	ldr	r3, [r6, #0]
 800b682:	0608      	lsls	r0, r1, #24
 800b684:	f853 5b04 	ldr.w	r5, [r3], #4
 800b688:	d402      	bmi.n	800b690 <_printf_i+0xe8>
 800b68a:	0649      	lsls	r1, r1, #25
 800b68c:	bf48      	it	mi
 800b68e:	b2ad      	uxthmi	r5, r5
 800b690:	2f6f      	cmp	r7, #111	@ 0x6f
 800b692:	4853      	ldr	r0, [pc, #332]	@ (800b7e0 <_printf_i+0x238>)
 800b694:	6033      	str	r3, [r6, #0]
 800b696:	bf14      	ite	ne
 800b698:	230a      	movne	r3, #10
 800b69a:	2308      	moveq	r3, #8
 800b69c:	2100      	movs	r1, #0
 800b69e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6a2:	6866      	ldr	r6, [r4, #4]
 800b6a4:	60a6      	str	r6, [r4, #8]
 800b6a6:	2e00      	cmp	r6, #0
 800b6a8:	bfa2      	ittt	ge
 800b6aa:	6821      	ldrge	r1, [r4, #0]
 800b6ac:	f021 0104 	bicge.w	r1, r1, #4
 800b6b0:	6021      	strge	r1, [r4, #0]
 800b6b2:	b90d      	cbnz	r5, 800b6b8 <_printf_i+0x110>
 800b6b4:	2e00      	cmp	r6, #0
 800b6b6:	d04b      	beq.n	800b750 <_printf_i+0x1a8>
 800b6b8:	4616      	mov	r6, r2
 800b6ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6be:	fb03 5711 	mls	r7, r3, r1, r5
 800b6c2:	5dc7      	ldrb	r7, [r0, r7]
 800b6c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6c8:	462f      	mov	r7, r5
 800b6ca:	42bb      	cmp	r3, r7
 800b6cc:	460d      	mov	r5, r1
 800b6ce:	d9f4      	bls.n	800b6ba <_printf_i+0x112>
 800b6d0:	2b08      	cmp	r3, #8
 800b6d2:	d10b      	bne.n	800b6ec <_printf_i+0x144>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	07df      	lsls	r7, r3, #31
 800b6d8:	d508      	bpl.n	800b6ec <_printf_i+0x144>
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	6861      	ldr	r1, [r4, #4]
 800b6de:	4299      	cmp	r1, r3
 800b6e0:	bfde      	ittt	le
 800b6e2:	2330      	movle	r3, #48	@ 0x30
 800b6e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6ec:	1b92      	subs	r2, r2, r6
 800b6ee:	6122      	str	r2, [r4, #16]
 800b6f0:	f8cd a000 	str.w	sl, [sp]
 800b6f4:	464b      	mov	r3, r9
 800b6f6:	aa03      	add	r2, sp, #12
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	f7ff fee6 	bl	800b4cc <_printf_common>
 800b700:	3001      	adds	r0, #1
 800b702:	d14a      	bne.n	800b79a <_printf_i+0x1f2>
 800b704:	f04f 30ff 	mov.w	r0, #4294967295
 800b708:	b004      	add	sp, #16
 800b70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	f043 0320 	orr.w	r3, r3, #32
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	4833      	ldr	r0, [pc, #204]	@ (800b7e4 <_printf_i+0x23c>)
 800b718:	2778      	movs	r7, #120	@ 0x78
 800b71a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	6831      	ldr	r1, [r6, #0]
 800b722:	061f      	lsls	r7, r3, #24
 800b724:	f851 5b04 	ldr.w	r5, [r1], #4
 800b728:	d402      	bmi.n	800b730 <_printf_i+0x188>
 800b72a:	065f      	lsls	r7, r3, #25
 800b72c:	bf48      	it	mi
 800b72e:	b2ad      	uxthmi	r5, r5
 800b730:	6031      	str	r1, [r6, #0]
 800b732:	07d9      	lsls	r1, r3, #31
 800b734:	bf44      	itt	mi
 800b736:	f043 0320 	orrmi.w	r3, r3, #32
 800b73a:	6023      	strmi	r3, [r4, #0]
 800b73c:	b11d      	cbz	r5, 800b746 <_printf_i+0x19e>
 800b73e:	2310      	movs	r3, #16
 800b740:	e7ac      	b.n	800b69c <_printf_i+0xf4>
 800b742:	4827      	ldr	r0, [pc, #156]	@ (800b7e0 <_printf_i+0x238>)
 800b744:	e7e9      	b.n	800b71a <_printf_i+0x172>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	f023 0320 	bic.w	r3, r3, #32
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	e7f6      	b.n	800b73e <_printf_i+0x196>
 800b750:	4616      	mov	r6, r2
 800b752:	e7bd      	b.n	800b6d0 <_printf_i+0x128>
 800b754:	6833      	ldr	r3, [r6, #0]
 800b756:	6825      	ldr	r5, [r4, #0]
 800b758:	6961      	ldr	r1, [r4, #20]
 800b75a:	1d18      	adds	r0, r3, #4
 800b75c:	6030      	str	r0, [r6, #0]
 800b75e:	062e      	lsls	r6, r5, #24
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	d501      	bpl.n	800b768 <_printf_i+0x1c0>
 800b764:	6019      	str	r1, [r3, #0]
 800b766:	e002      	b.n	800b76e <_printf_i+0x1c6>
 800b768:	0668      	lsls	r0, r5, #25
 800b76a:	d5fb      	bpl.n	800b764 <_printf_i+0x1bc>
 800b76c:	8019      	strh	r1, [r3, #0]
 800b76e:	2300      	movs	r3, #0
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	4616      	mov	r6, r2
 800b774:	e7bc      	b.n	800b6f0 <_printf_i+0x148>
 800b776:	6833      	ldr	r3, [r6, #0]
 800b778:	1d1a      	adds	r2, r3, #4
 800b77a:	6032      	str	r2, [r6, #0]
 800b77c:	681e      	ldr	r6, [r3, #0]
 800b77e:	6862      	ldr	r2, [r4, #4]
 800b780:	2100      	movs	r1, #0
 800b782:	4630      	mov	r0, r6
 800b784:	f7f4 fd24 	bl	80001d0 <memchr>
 800b788:	b108      	cbz	r0, 800b78e <_printf_i+0x1e6>
 800b78a:	1b80      	subs	r0, r0, r6
 800b78c:	6060      	str	r0, [r4, #4]
 800b78e:	6863      	ldr	r3, [r4, #4]
 800b790:	6123      	str	r3, [r4, #16]
 800b792:	2300      	movs	r3, #0
 800b794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b798:	e7aa      	b.n	800b6f0 <_printf_i+0x148>
 800b79a:	6923      	ldr	r3, [r4, #16]
 800b79c:	4632      	mov	r2, r6
 800b79e:	4649      	mov	r1, r9
 800b7a0:	4640      	mov	r0, r8
 800b7a2:	47d0      	blx	sl
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	d0ad      	beq.n	800b704 <_printf_i+0x15c>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	079b      	lsls	r3, r3, #30
 800b7ac:	d413      	bmi.n	800b7d6 <_printf_i+0x22e>
 800b7ae:	68e0      	ldr	r0, [r4, #12]
 800b7b0:	9b03      	ldr	r3, [sp, #12]
 800b7b2:	4298      	cmp	r0, r3
 800b7b4:	bfb8      	it	lt
 800b7b6:	4618      	movlt	r0, r3
 800b7b8:	e7a6      	b.n	800b708 <_printf_i+0x160>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	4632      	mov	r2, r6
 800b7be:	4649      	mov	r1, r9
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	47d0      	blx	sl
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d09d      	beq.n	800b704 <_printf_i+0x15c>
 800b7c8:	3501      	adds	r5, #1
 800b7ca:	68e3      	ldr	r3, [r4, #12]
 800b7cc:	9903      	ldr	r1, [sp, #12]
 800b7ce:	1a5b      	subs	r3, r3, r1
 800b7d0:	42ab      	cmp	r3, r5
 800b7d2:	dcf2      	bgt.n	800b7ba <_printf_i+0x212>
 800b7d4:	e7eb      	b.n	800b7ae <_printf_i+0x206>
 800b7d6:	2500      	movs	r5, #0
 800b7d8:	f104 0619 	add.w	r6, r4, #25
 800b7dc:	e7f5      	b.n	800b7ca <_printf_i+0x222>
 800b7de:	bf00      	nop
 800b7e0:	0800f752 	.word	0x0800f752
 800b7e4:	0800f763 	.word	0x0800f763

0800b7e8 <_scanf_float>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	b087      	sub	sp, #28
 800b7ee:	4617      	mov	r7, r2
 800b7f0:	9303      	str	r3, [sp, #12]
 800b7f2:	688b      	ldr	r3, [r1, #8]
 800b7f4:	1e5a      	subs	r2, r3, #1
 800b7f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b7fa:	bf81      	itttt	hi
 800b7fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b800:	eb03 0b05 	addhi.w	fp, r3, r5
 800b804:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b808:	608b      	strhi	r3, [r1, #8]
 800b80a:	680b      	ldr	r3, [r1, #0]
 800b80c:	460a      	mov	r2, r1
 800b80e:	f04f 0500 	mov.w	r5, #0
 800b812:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b816:	f842 3b1c 	str.w	r3, [r2], #28
 800b81a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b81e:	4680      	mov	r8, r0
 800b820:	460c      	mov	r4, r1
 800b822:	bf98      	it	ls
 800b824:	f04f 0b00 	movls.w	fp, #0
 800b828:	9201      	str	r2, [sp, #4]
 800b82a:	4616      	mov	r6, r2
 800b82c:	46aa      	mov	sl, r5
 800b82e:	46a9      	mov	r9, r5
 800b830:	9502      	str	r5, [sp, #8]
 800b832:	68a2      	ldr	r2, [r4, #8]
 800b834:	b152      	cbz	r2, 800b84c <_scanf_float+0x64>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b83c:	d864      	bhi.n	800b908 <_scanf_float+0x120>
 800b83e:	2b40      	cmp	r3, #64	@ 0x40
 800b840:	d83c      	bhi.n	800b8bc <_scanf_float+0xd4>
 800b842:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b846:	b2c8      	uxtb	r0, r1
 800b848:	280e      	cmp	r0, #14
 800b84a:	d93a      	bls.n	800b8c2 <_scanf_float+0xda>
 800b84c:	f1b9 0f00 	cmp.w	r9, #0
 800b850:	d003      	beq.n	800b85a <_scanf_float+0x72>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b85e:	f1ba 0f01 	cmp.w	sl, #1
 800b862:	f200 8117 	bhi.w	800ba94 <_scanf_float+0x2ac>
 800b866:	9b01      	ldr	r3, [sp, #4]
 800b868:	429e      	cmp	r6, r3
 800b86a:	f200 8108 	bhi.w	800ba7e <_scanf_float+0x296>
 800b86e:	2001      	movs	r0, #1
 800b870:	b007      	add	sp, #28
 800b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b876:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b87a:	2a0d      	cmp	r2, #13
 800b87c:	d8e6      	bhi.n	800b84c <_scanf_float+0x64>
 800b87e:	a101      	add	r1, pc, #4	@ (adr r1, 800b884 <_scanf_float+0x9c>)
 800b880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b884:	0800b9cb 	.word	0x0800b9cb
 800b888:	0800b84d 	.word	0x0800b84d
 800b88c:	0800b84d 	.word	0x0800b84d
 800b890:	0800b84d 	.word	0x0800b84d
 800b894:	0800ba2b 	.word	0x0800ba2b
 800b898:	0800ba03 	.word	0x0800ba03
 800b89c:	0800b84d 	.word	0x0800b84d
 800b8a0:	0800b84d 	.word	0x0800b84d
 800b8a4:	0800b9d9 	.word	0x0800b9d9
 800b8a8:	0800b84d 	.word	0x0800b84d
 800b8ac:	0800b84d 	.word	0x0800b84d
 800b8b0:	0800b84d 	.word	0x0800b84d
 800b8b4:	0800b84d 	.word	0x0800b84d
 800b8b8:	0800b991 	.word	0x0800b991
 800b8bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b8c0:	e7db      	b.n	800b87a <_scanf_float+0x92>
 800b8c2:	290e      	cmp	r1, #14
 800b8c4:	d8c2      	bhi.n	800b84c <_scanf_float+0x64>
 800b8c6:	a001      	add	r0, pc, #4	@ (adr r0, 800b8cc <_scanf_float+0xe4>)
 800b8c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b8cc:	0800b981 	.word	0x0800b981
 800b8d0:	0800b84d 	.word	0x0800b84d
 800b8d4:	0800b981 	.word	0x0800b981
 800b8d8:	0800ba17 	.word	0x0800ba17
 800b8dc:	0800b84d 	.word	0x0800b84d
 800b8e0:	0800b929 	.word	0x0800b929
 800b8e4:	0800b967 	.word	0x0800b967
 800b8e8:	0800b967 	.word	0x0800b967
 800b8ec:	0800b967 	.word	0x0800b967
 800b8f0:	0800b967 	.word	0x0800b967
 800b8f4:	0800b967 	.word	0x0800b967
 800b8f8:	0800b967 	.word	0x0800b967
 800b8fc:	0800b967 	.word	0x0800b967
 800b900:	0800b967 	.word	0x0800b967
 800b904:	0800b967 	.word	0x0800b967
 800b908:	2b6e      	cmp	r3, #110	@ 0x6e
 800b90a:	d809      	bhi.n	800b920 <_scanf_float+0x138>
 800b90c:	2b60      	cmp	r3, #96	@ 0x60
 800b90e:	d8b2      	bhi.n	800b876 <_scanf_float+0x8e>
 800b910:	2b54      	cmp	r3, #84	@ 0x54
 800b912:	d07b      	beq.n	800ba0c <_scanf_float+0x224>
 800b914:	2b59      	cmp	r3, #89	@ 0x59
 800b916:	d199      	bne.n	800b84c <_scanf_float+0x64>
 800b918:	2d07      	cmp	r5, #7
 800b91a:	d197      	bne.n	800b84c <_scanf_float+0x64>
 800b91c:	2508      	movs	r5, #8
 800b91e:	e02c      	b.n	800b97a <_scanf_float+0x192>
 800b920:	2b74      	cmp	r3, #116	@ 0x74
 800b922:	d073      	beq.n	800ba0c <_scanf_float+0x224>
 800b924:	2b79      	cmp	r3, #121	@ 0x79
 800b926:	e7f6      	b.n	800b916 <_scanf_float+0x12e>
 800b928:	6821      	ldr	r1, [r4, #0]
 800b92a:	05c8      	lsls	r0, r1, #23
 800b92c:	d51b      	bpl.n	800b966 <_scanf_float+0x17e>
 800b92e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b932:	6021      	str	r1, [r4, #0]
 800b934:	f109 0901 	add.w	r9, r9, #1
 800b938:	f1bb 0f00 	cmp.w	fp, #0
 800b93c:	d003      	beq.n	800b946 <_scanf_float+0x15e>
 800b93e:	3201      	adds	r2, #1
 800b940:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b944:	60a2      	str	r2, [r4, #8]
 800b946:	68a3      	ldr	r3, [r4, #8]
 800b948:	3b01      	subs	r3, #1
 800b94a:	60a3      	str	r3, [r4, #8]
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	3301      	adds	r3, #1
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	3b01      	subs	r3, #1
 800b956:	2b00      	cmp	r3, #0
 800b958:	607b      	str	r3, [r7, #4]
 800b95a:	f340 8087 	ble.w	800ba6c <_scanf_float+0x284>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	3301      	adds	r3, #1
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	e765      	b.n	800b832 <_scanf_float+0x4a>
 800b966:	eb1a 0105 	adds.w	r1, sl, r5
 800b96a:	f47f af6f 	bne.w	800b84c <_scanf_float+0x64>
 800b96e:	6822      	ldr	r2, [r4, #0]
 800b970:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b974:	6022      	str	r2, [r4, #0]
 800b976:	460d      	mov	r5, r1
 800b978:	468a      	mov	sl, r1
 800b97a:	f806 3b01 	strb.w	r3, [r6], #1
 800b97e:	e7e2      	b.n	800b946 <_scanf_float+0x15e>
 800b980:	6822      	ldr	r2, [r4, #0]
 800b982:	0610      	lsls	r0, r2, #24
 800b984:	f57f af62 	bpl.w	800b84c <_scanf_float+0x64>
 800b988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	e7f4      	b.n	800b97a <_scanf_float+0x192>
 800b990:	f1ba 0f00 	cmp.w	sl, #0
 800b994:	d10e      	bne.n	800b9b4 <_scanf_float+0x1cc>
 800b996:	f1b9 0f00 	cmp.w	r9, #0
 800b99a:	d10e      	bne.n	800b9ba <_scanf_float+0x1d2>
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b9a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b9a6:	d108      	bne.n	800b9ba <_scanf_float+0x1d2>
 800b9a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b9ac:	6022      	str	r2, [r4, #0]
 800b9ae:	f04f 0a01 	mov.w	sl, #1
 800b9b2:	e7e2      	b.n	800b97a <_scanf_float+0x192>
 800b9b4:	f1ba 0f02 	cmp.w	sl, #2
 800b9b8:	d055      	beq.n	800ba66 <_scanf_float+0x27e>
 800b9ba:	2d01      	cmp	r5, #1
 800b9bc:	d002      	beq.n	800b9c4 <_scanf_float+0x1dc>
 800b9be:	2d04      	cmp	r5, #4
 800b9c0:	f47f af44 	bne.w	800b84c <_scanf_float+0x64>
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	b2ed      	uxtb	r5, r5
 800b9c8:	e7d7      	b.n	800b97a <_scanf_float+0x192>
 800b9ca:	f1ba 0f01 	cmp.w	sl, #1
 800b9ce:	f47f af3d 	bne.w	800b84c <_scanf_float+0x64>
 800b9d2:	f04f 0a02 	mov.w	sl, #2
 800b9d6:	e7d0      	b.n	800b97a <_scanf_float+0x192>
 800b9d8:	b97d      	cbnz	r5, 800b9fa <_scanf_float+0x212>
 800b9da:	f1b9 0f00 	cmp.w	r9, #0
 800b9de:	f47f af38 	bne.w	800b852 <_scanf_float+0x6a>
 800b9e2:	6822      	ldr	r2, [r4, #0]
 800b9e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b9e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b9ec:	f040 8108 	bne.w	800bc00 <_scanf_float+0x418>
 800b9f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b9f4:	6022      	str	r2, [r4, #0]
 800b9f6:	2501      	movs	r5, #1
 800b9f8:	e7bf      	b.n	800b97a <_scanf_float+0x192>
 800b9fa:	2d03      	cmp	r5, #3
 800b9fc:	d0e2      	beq.n	800b9c4 <_scanf_float+0x1dc>
 800b9fe:	2d05      	cmp	r5, #5
 800ba00:	e7de      	b.n	800b9c0 <_scanf_float+0x1d8>
 800ba02:	2d02      	cmp	r5, #2
 800ba04:	f47f af22 	bne.w	800b84c <_scanf_float+0x64>
 800ba08:	2503      	movs	r5, #3
 800ba0a:	e7b6      	b.n	800b97a <_scanf_float+0x192>
 800ba0c:	2d06      	cmp	r5, #6
 800ba0e:	f47f af1d 	bne.w	800b84c <_scanf_float+0x64>
 800ba12:	2507      	movs	r5, #7
 800ba14:	e7b1      	b.n	800b97a <_scanf_float+0x192>
 800ba16:	6822      	ldr	r2, [r4, #0]
 800ba18:	0591      	lsls	r1, r2, #22
 800ba1a:	f57f af17 	bpl.w	800b84c <_scanf_float+0x64>
 800ba1e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ba22:	6022      	str	r2, [r4, #0]
 800ba24:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba28:	e7a7      	b.n	800b97a <_scanf_float+0x192>
 800ba2a:	6822      	ldr	r2, [r4, #0]
 800ba2c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ba30:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ba34:	d006      	beq.n	800ba44 <_scanf_float+0x25c>
 800ba36:	0550      	lsls	r0, r2, #21
 800ba38:	f57f af08 	bpl.w	800b84c <_scanf_float+0x64>
 800ba3c:	f1b9 0f00 	cmp.w	r9, #0
 800ba40:	f000 80de 	beq.w	800bc00 <_scanf_float+0x418>
 800ba44:	0591      	lsls	r1, r2, #22
 800ba46:	bf58      	it	pl
 800ba48:	9902      	ldrpl	r1, [sp, #8]
 800ba4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba4e:	bf58      	it	pl
 800ba50:	eba9 0101 	subpl.w	r1, r9, r1
 800ba54:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ba58:	bf58      	it	pl
 800ba5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ba5e:	6022      	str	r2, [r4, #0]
 800ba60:	f04f 0900 	mov.w	r9, #0
 800ba64:	e789      	b.n	800b97a <_scanf_float+0x192>
 800ba66:	f04f 0a03 	mov.w	sl, #3
 800ba6a:	e786      	b.n	800b97a <_scanf_float+0x192>
 800ba6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ba70:	4639      	mov	r1, r7
 800ba72:	4640      	mov	r0, r8
 800ba74:	4798      	blx	r3
 800ba76:	2800      	cmp	r0, #0
 800ba78:	f43f aedb 	beq.w	800b832 <_scanf_float+0x4a>
 800ba7c:	e6e6      	b.n	800b84c <_scanf_float+0x64>
 800ba7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba86:	463a      	mov	r2, r7
 800ba88:	4640      	mov	r0, r8
 800ba8a:	4798      	blx	r3
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	6123      	str	r3, [r4, #16]
 800ba92:	e6e8      	b.n	800b866 <_scanf_float+0x7e>
 800ba94:	1e6b      	subs	r3, r5, #1
 800ba96:	2b06      	cmp	r3, #6
 800ba98:	d824      	bhi.n	800bae4 <_scanf_float+0x2fc>
 800ba9a:	2d02      	cmp	r5, #2
 800ba9c:	d836      	bhi.n	800bb0c <_scanf_float+0x324>
 800ba9e:	9b01      	ldr	r3, [sp, #4]
 800baa0:	429e      	cmp	r6, r3
 800baa2:	f67f aee4 	bls.w	800b86e <_scanf_float+0x86>
 800baa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800baaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800baae:	463a      	mov	r2, r7
 800bab0:	4640      	mov	r0, r8
 800bab2:	4798      	blx	r3
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	6123      	str	r3, [r4, #16]
 800baba:	e7f0      	b.n	800ba9e <_scanf_float+0x2b6>
 800babc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bac0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bac4:	463a      	mov	r2, r7
 800bac6:	4640      	mov	r0, r8
 800bac8:	4798      	blx	r3
 800baca:	6923      	ldr	r3, [r4, #16]
 800bacc:	3b01      	subs	r3, #1
 800bace:	6123      	str	r3, [r4, #16]
 800bad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bad4:	fa5f fa8a 	uxtb.w	sl, sl
 800bad8:	f1ba 0f02 	cmp.w	sl, #2
 800badc:	d1ee      	bne.n	800babc <_scanf_float+0x2d4>
 800bade:	3d03      	subs	r5, #3
 800bae0:	b2ed      	uxtb	r5, r5
 800bae2:	1b76      	subs	r6, r6, r5
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	05da      	lsls	r2, r3, #23
 800bae8:	d530      	bpl.n	800bb4c <_scanf_float+0x364>
 800baea:	055b      	lsls	r3, r3, #21
 800baec:	d511      	bpl.n	800bb12 <_scanf_float+0x32a>
 800baee:	9b01      	ldr	r3, [sp, #4]
 800baf0:	429e      	cmp	r6, r3
 800baf2:	f67f aebc 	bls.w	800b86e <_scanf_float+0x86>
 800baf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bafa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bafe:	463a      	mov	r2, r7
 800bb00:	4640      	mov	r0, r8
 800bb02:	4798      	blx	r3
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	3b01      	subs	r3, #1
 800bb08:	6123      	str	r3, [r4, #16]
 800bb0a:	e7f0      	b.n	800baee <_scanf_float+0x306>
 800bb0c:	46aa      	mov	sl, r5
 800bb0e:	46b3      	mov	fp, r6
 800bb10:	e7de      	b.n	800bad0 <_scanf_float+0x2e8>
 800bb12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb16:	6923      	ldr	r3, [r4, #16]
 800bb18:	2965      	cmp	r1, #101	@ 0x65
 800bb1a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb1e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bb22:	6123      	str	r3, [r4, #16]
 800bb24:	d00c      	beq.n	800bb40 <_scanf_float+0x358>
 800bb26:	2945      	cmp	r1, #69	@ 0x45
 800bb28:	d00a      	beq.n	800bb40 <_scanf_float+0x358>
 800bb2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb2e:	463a      	mov	r2, r7
 800bb30:	4640      	mov	r0, r8
 800bb32:	4798      	blx	r3
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	1eb5      	subs	r5, r6, #2
 800bb3e:	6123      	str	r3, [r4, #16]
 800bb40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb44:	463a      	mov	r2, r7
 800bb46:	4640      	mov	r0, r8
 800bb48:	4798      	blx	r3
 800bb4a:	462e      	mov	r6, r5
 800bb4c:	6822      	ldr	r2, [r4, #0]
 800bb4e:	f012 0210 	ands.w	r2, r2, #16
 800bb52:	d001      	beq.n	800bb58 <_scanf_float+0x370>
 800bb54:	2000      	movs	r0, #0
 800bb56:	e68b      	b.n	800b870 <_scanf_float+0x88>
 800bb58:	7032      	strb	r2, [r6, #0]
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bb60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb64:	d11c      	bne.n	800bba0 <_scanf_float+0x3b8>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	454b      	cmp	r3, r9
 800bb6a:	eba3 0209 	sub.w	r2, r3, r9
 800bb6e:	d123      	bne.n	800bbb8 <_scanf_float+0x3d0>
 800bb70:	9901      	ldr	r1, [sp, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	4640      	mov	r0, r8
 800bb76:	f002 fc3b 	bl	800e3f0 <_strtod_r>
 800bb7a:	9b03      	ldr	r3, [sp, #12]
 800bb7c:	6821      	ldr	r1, [r4, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f011 0f02 	tst.w	r1, #2
 800bb84:	ec57 6b10 	vmov	r6, r7, d0
 800bb88:	f103 0204 	add.w	r2, r3, #4
 800bb8c:	d01f      	beq.n	800bbce <_scanf_float+0x3e6>
 800bb8e:	9903      	ldr	r1, [sp, #12]
 800bb90:	600a      	str	r2, [r1, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	e9c3 6700 	strd	r6, r7, [r3]
 800bb98:	68e3      	ldr	r3, [r4, #12]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60e3      	str	r3, [r4, #12]
 800bb9e:	e7d9      	b.n	800bb54 <_scanf_float+0x36c>
 800bba0:	9b04      	ldr	r3, [sp, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0e4      	beq.n	800bb70 <_scanf_float+0x388>
 800bba6:	9905      	ldr	r1, [sp, #20]
 800bba8:	230a      	movs	r3, #10
 800bbaa:	3101      	adds	r1, #1
 800bbac:	4640      	mov	r0, r8
 800bbae:	f002 fc9f 	bl	800e4f0 <_strtol_r>
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	9e05      	ldr	r6, [sp, #20]
 800bbb6:	1ac2      	subs	r2, r0, r3
 800bbb8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bbbc:	429e      	cmp	r6, r3
 800bbbe:	bf28      	it	cs
 800bbc0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bbc4:	4910      	ldr	r1, [pc, #64]	@ (800bc08 <_scanf_float+0x420>)
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f000 f918 	bl	800bdfc <siprintf>
 800bbcc:	e7d0      	b.n	800bb70 <_scanf_float+0x388>
 800bbce:	f011 0f04 	tst.w	r1, #4
 800bbd2:	9903      	ldr	r1, [sp, #12]
 800bbd4:	600a      	str	r2, [r1, #0]
 800bbd6:	d1dc      	bne.n	800bb92 <_scanf_float+0x3aa>
 800bbd8:	681d      	ldr	r5, [r3, #0]
 800bbda:	4632      	mov	r2, r6
 800bbdc:	463b      	mov	r3, r7
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 ffa3 	bl	8000b2c <__aeabi_dcmpun>
 800bbe6:	b128      	cbz	r0, 800bbf4 <_scanf_float+0x40c>
 800bbe8:	4808      	ldr	r0, [pc, #32]	@ (800bc0c <_scanf_float+0x424>)
 800bbea:	f000 f9f9 	bl	800bfe0 <nanf>
 800bbee:	ed85 0a00 	vstr	s0, [r5]
 800bbf2:	e7d1      	b.n	800bb98 <_scanf_float+0x3b0>
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 fff6 	bl	8000be8 <__aeabi_d2f>
 800bbfc:	6028      	str	r0, [r5, #0]
 800bbfe:	e7cb      	b.n	800bb98 <_scanf_float+0x3b0>
 800bc00:	f04f 0900 	mov.w	r9, #0
 800bc04:	e629      	b.n	800b85a <_scanf_float+0x72>
 800bc06:	bf00      	nop
 800bc08:	0800f774 	.word	0x0800f774
 800bc0c:	0800fb0d 	.word	0x0800fb0d

0800bc10 <std>:
 800bc10:	2300      	movs	r3, #0
 800bc12:	b510      	push	{r4, lr}
 800bc14:	4604      	mov	r4, r0
 800bc16:	e9c0 3300 	strd	r3, r3, [r0]
 800bc1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc1e:	6083      	str	r3, [r0, #8]
 800bc20:	8181      	strh	r1, [r0, #12]
 800bc22:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc24:	81c2      	strh	r2, [r0, #14]
 800bc26:	6183      	str	r3, [r0, #24]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	305c      	adds	r0, #92	@ 0x5c
 800bc2e:	f000 f948 	bl	800bec2 <memset>
 800bc32:	4b0d      	ldr	r3, [pc, #52]	@ (800bc68 <std+0x58>)
 800bc34:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc36:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <std+0x5c>)
 800bc38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc70 <std+0x60>)
 800bc3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <std+0x64>)
 800bc40:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc42:	4b0d      	ldr	r3, [pc, #52]	@ (800bc78 <std+0x68>)
 800bc44:	6224      	str	r4, [r4, #32]
 800bc46:	429c      	cmp	r4, r3
 800bc48:	d006      	beq.n	800bc58 <std+0x48>
 800bc4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bc4e:	4294      	cmp	r4, r2
 800bc50:	d002      	beq.n	800bc58 <std+0x48>
 800bc52:	33d0      	adds	r3, #208	@ 0xd0
 800bc54:	429c      	cmp	r4, r3
 800bc56:	d105      	bne.n	800bc64 <std+0x54>
 800bc58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc60:	f000 b9ac 	b.w	800bfbc <__retarget_lock_init_recursive>
 800bc64:	bd10      	pop	{r4, pc}
 800bc66:	bf00      	nop
 800bc68:	0800be3d 	.word	0x0800be3d
 800bc6c:	0800be5f 	.word	0x0800be5f
 800bc70:	0800be97 	.word	0x0800be97
 800bc74:	0800bebb 	.word	0x0800bebb
 800bc78:	2000168c 	.word	0x2000168c

0800bc7c <stdio_exit_handler>:
 800bc7c:	4a02      	ldr	r2, [pc, #8]	@ (800bc88 <stdio_exit_handler+0xc>)
 800bc7e:	4903      	ldr	r1, [pc, #12]	@ (800bc8c <stdio_exit_handler+0x10>)
 800bc80:	4803      	ldr	r0, [pc, #12]	@ (800bc90 <stdio_exit_handler+0x14>)
 800bc82:	f000 b869 	b.w	800bd58 <_fwalk_sglue>
 800bc86:	bf00      	nop
 800bc88:	2000017c 	.word	0x2000017c
 800bc8c:	0800e8ad 	.word	0x0800e8ad
 800bc90:	2000018c 	.word	0x2000018c

0800bc94 <cleanup_stdio>:
 800bc94:	6841      	ldr	r1, [r0, #4]
 800bc96:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc8 <cleanup_stdio+0x34>)
 800bc98:	4299      	cmp	r1, r3
 800bc9a:	b510      	push	{r4, lr}
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	d001      	beq.n	800bca4 <cleanup_stdio+0x10>
 800bca0:	f002 fe04 	bl	800e8ac <_fflush_r>
 800bca4:	68a1      	ldr	r1, [r4, #8]
 800bca6:	4b09      	ldr	r3, [pc, #36]	@ (800bccc <cleanup_stdio+0x38>)
 800bca8:	4299      	cmp	r1, r3
 800bcaa:	d002      	beq.n	800bcb2 <cleanup_stdio+0x1e>
 800bcac:	4620      	mov	r0, r4
 800bcae:	f002 fdfd 	bl	800e8ac <_fflush_r>
 800bcb2:	68e1      	ldr	r1, [r4, #12]
 800bcb4:	4b06      	ldr	r3, [pc, #24]	@ (800bcd0 <cleanup_stdio+0x3c>)
 800bcb6:	4299      	cmp	r1, r3
 800bcb8:	d004      	beq.n	800bcc4 <cleanup_stdio+0x30>
 800bcba:	4620      	mov	r0, r4
 800bcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc0:	f002 bdf4 	b.w	800e8ac <_fflush_r>
 800bcc4:	bd10      	pop	{r4, pc}
 800bcc6:	bf00      	nop
 800bcc8:	2000168c 	.word	0x2000168c
 800bccc:	200016f4 	.word	0x200016f4
 800bcd0:	2000175c 	.word	0x2000175c

0800bcd4 <global_stdio_init.part.0>:
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd04 <global_stdio_init.part.0+0x30>)
 800bcd8:	4c0b      	ldr	r4, [pc, #44]	@ (800bd08 <global_stdio_init.part.0+0x34>)
 800bcda:	4a0c      	ldr	r2, [pc, #48]	@ (800bd0c <global_stdio_init.part.0+0x38>)
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	4620      	mov	r0, r4
 800bce0:	2200      	movs	r2, #0
 800bce2:	2104      	movs	r1, #4
 800bce4:	f7ff ff94 	bl	800bc10 <std>
 800bce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bcec:	2201      	movs	r2, #1
 800bcee:	2109      	movs	r1, #9
 800bcf0:	f7ff ff8e 	bl	800bc10 <std>
 800bcf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bcf8:	2202      	movs	r2, #2
 800bcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcfe:	2112      	movs	r1, #18
 800bd00:	f7ff bf86 	b.w	800bc10 <std>
 800bd04:	200017c4 	.word	0x200017c4
 800bd08:	2000168c 	.word	0x2000168c
 800bd0c:	0800bc7d 	.word	0x0800bc7d

0800bd10 <__sfp_lock_acquire>:
 800bd10:	4801      	ldr	r0, [pc, #4]	@ (800bd18 <__sfp_lock_acquire+0x8>)
 800bd12:	f000 b954 	b.w	800bfbe <__retarget_lock_acquire_recursive>
 800bd16:	bf00      	nop
 800bd18:	200017cd 	.word	0x200017cd

0800bd1c <__sfp_lock_release>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	@ (800bd24 <__sfp_lock_release+0x8>)
 800bd1e:	f000 b94f 	b.w	800bfc0 <__retarget_lock_release_recursive>
 800bd22:	bf00      	nop
 800bd24:	200017cd 	.word	0x200017cd

0800bd28 <__sinit>:
 800bd28:	b510      	push	{r4, lr}
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	f7ff fff0 	bl	800bd10 <__sfp_lock_acquire>
 800bd30:	6a23      	ldr	r3, [r4, #32]
 800bd32:	b11b      	cbz	r3, 800bd3c <__sinit+0x14>
 800bd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd38:	f7ff bff0 	b.w	800bd1c <__sfp_lock_release>
 800bd3c:	4b04      	ldr	r3, [pc, #16]	@ (800bd50 <__sinit+0x28>)
 800bd3e:	6223      	str	r3, [r4, #32]
 800bd40:	4b04      	ldr	r3, [pc, #16]	@ (800bd54 <__sinit+0x2c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1f5      	bne.n	800bd34 <__sinit+0xc>
 800bd48:	f7ff ffc4 	bl	800bcd4 <global_stdio_init.part.0>
 800bd4c:	e7f2      	b.n	800bd34 <__sinit+0xc>
 800bd4e:	bf00      	nop
 800bd50:	0800bc95 	.word	0x0800bc95
 800bd54:	200017c4 	.word	0x200017c4

0800bd58 <_fwalk_sglue>:
 800bd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5c:	4607      	mov	r7, r0
 800bd5e:	4688      	mov	r8, r1
 800bd60:	4614      	mov	r4, r2
 800bd62:	2600      	movs	r6, #0
 800bd64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd68:	f1b9 0901 	subs.w	r9, r9, #1
 800bd6c:	d505      	bpl.n	800bd7a <_fwalk_sglue+0x22>
 800bd6e:	6824      	ldr	r4, [r4, #0]
 800bd70:	2c00      	cmp	r4, #0
 800bd72:	d1f7      	bne.n	800bd64 <_fwalk_sglue+0xc>
 800bd74:	4630      	mov	r0, r6
 800bd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd7a:	89ab      	ldrh	r3, [r5, #12]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d907      	bls.n	800bd90 <_fwalk_sglue+0x38>
 800bd80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd84:	3301      	adds	r3, #1
 800bd86:	d003      	beq.n	800bd90 <_fwalk_sglue+0x38>
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	47c0      	blx	r8
 800bd8e:	4306      	orrs	r6, r0
 800bd90:	3568      	adds	r5, #104	@ 0x68
 800bd92:	e7e9      	b.n	800bd68 <_fwalk_sglue+0x10>

0800bd94 <sniprintf>:
 800bd94:	b40c      	push	{r2, r3}
 800bd96:	b530      	push	{r4, r5, lr}
 800bd98:	4b17      	ldr	r3, [pc, #92]	@ (800bdf8 <sniprintf+0x64>)
 800bd9a:	1e0c      	subs	r4, r1, #0
 800bd9c:	681d      	ldr	r5, [r3, #0]
 800bd9e:	b09d      	sub	sp, #116	@ 0x74
 800bda0:	da08      	bge.n	800bdb4 <sniprintf+0x20>
 800bda2:	238b      	movs	r3, #139	@ 0x8b
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdaa:	b01d      	add	sp, #116	@ 0x74
 800bdac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdb0:	b002      	add	sp, #8
 800bdb2:	4770      	bx	lr
 800bdb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bdb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bdbc:	bf14      	ite	ne
 800bdbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bdc2:	4623      	moveq	r3, r4
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	9307      	str	r3, [sp, #28]
 800bdc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bdcc:	9002      	str	r0, [sp, #8]
 800bdce:	9006      	str	r0, [sp, #24]
 800bdd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bdd4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bdd6:	ab21      	add	r3, sp, #132	@ 0x84
 800bdd8:	a902      	add	r1, sp, #8
 800bdda:	4628      	mov	r0, r5
 800bddc:	9301      	str	r3, [sp, #4]
 800bdde:	f002 fbe5 	bl	800e5ac <_svfiprintf_r>
 800bde2:	1c43      	adds	r3, r0, #1
 800bde4:	bfbc      	itt	lt
 800bde6:	238b      	movlt	r3, #139	@ 0x8b
 800bde8:	602b      	strlt	r3, [r5, #0]
 800bdea:	2c00      	cmp	r4, #0
 800bdec:	d0dd      	beq.n	800bdaa <sniprintf+0x16>
 800bdee:	9b02      	ldr	r3, [sp, #8]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
 800bdf4:	e7d9      	b.n	800bdaa <sniprintf+0x16>
 800bdf6:	bf00      	nop
 800bdf8:	20000188 	.word	0x20000188

0800bdfc <siprintf>:
 800bdfc:	b40e      	push	{r1, r2, r3}
 800bdfe:	b500      	push	{lr}
 800be00:	b09c      	sub	sp, #112	@ 0x70
 800be02:	ab1d      	add	r3, sp, #116	@ 0x74
 800be04:	9002      	str	r0, [sp, #8]
 800be06:	9006      	str	r0, [sp, #24]
 800be08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be0c:	4809      	ldr	r0, [pc, #36]	@ (800be34 <siprintf+0x38>)
 800be0e:	9107      	str	r1, [sp, #28]
 800be10:	9104      	str	r1, [sp, #16]
 800be12:	4909      	ldr	r1, [pc, #36]	@ (800be38 <siprintf+0x3c>)
 800be14:	f853 2b04 	ldr.w	r2, [r3], #4
 800be18:	9105      	str	r1, [sp, #20]
 800be1a:	6800      	ldr	r0, [r0, #0]
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	a902      	add	r1, sp, #8
 800be20:	f002 fbc4 	bl	800e5ac <_svfiprintf_r>
 800be24:	9b02      	ldr	r3, [sp, #8]
 800be26:	2200      	movs	r2, #0
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	b01c      	add	sp, #112	@ 0x70
 800be2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be30:	b003      	add	sp, #12
 800be32:	4770      	bx	lr
 800be34:	20000188 	.word	0x20000188
 800be38:	ffff0208 	.word	0xffff0208

0800be3c <__sread>:
 800be3c:	b510      	push	{r4, lr}
 800be3e:	460c      	mov	r4, r1
 800be40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be44:	f000 f86c 	bl	800bf20 <_read_r>
 800be48:	2800      	cmp	r0, #0
 800be4a:	bfab      	itete	ge
 800be4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be4e:	89a3      	ldrhlt	r3, [r4, #12]
 800be50:	181b      	addge	r3, r3, r0
 800be52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be56:	bfac      	ite	ge
 800be58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be5a:	81a3      	strhlt	r3, [r4, #12]
 800be5c:	bd10      	pop	{r4, pc}

0800be5e <__swrite>:
 800be5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be62:	461f      	mov	r7, r3
 800be64:	898b      	ldrh	r3, [r1, #12]
 800be66:	05db      	lsls	r3, r3, #23
 800be68:	4605      	mov	r5, r0
 800be6a:	460c      	mov	r4, r1
 800be6c:	4616      	mov	r6, r2
 800be6e:	d505      	bpl.n	800be7c <__swrite+0x1e>
 800be70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be74:	2302      	movs	r3, #2
 800be76:	2200      	movs	r2, #0
 800be78:	f000 f840 	bl	800befc <_lseek_r>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be86:	81a3      	strh	r3, [r4, #12]
 800be88:	4632      	mov	r2, r6
 800be8a:	463b      	mov	r3, r7
 800be8c:	4628      	mov	r0, r5
 800be8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be92:	f000 b857 	b.w	800bf44 <_write_r>

0800be96 <__sseek>:
 800be96:	b510      	push	{r4, lr}
 800be98:	460c      	mov	r4, r1
 800be9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be9e:	f000 f82d 	bl	800befc <_lseek_r>
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	bf15      	itete	ne
 800bea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800beaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800beae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800beb2:	81a3      	strheq	r3, [r4, #12]
 800beb4:	bf18      	it	ne
 800beb6:	81a3      	strhne	r3, [r4, #12]
 800beb8:	bd10      	pop	{r4, pc}

0800beba <__sclose>:
 800beba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bebe:	f000 b80d 	b.w	800bedc <_close_r>

0800bec2 <memset>:
 800bec2:	4402      	add	r2, r0
 800bec4:	4603      	mov	r3, r0
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d100      	bne.n	800becc <memset+0xa>
 800beca:	4770      	bx	lr
 800becc:	f803 1b01 	strb.w	r1, [r3], #1
 800bed0:	e7f9      	b.n	800bec6 <memset+0x4>
	...

0800bed4 <_localeconv_r>:
 800bed4:	4800      	ldr	r0, [pc, #0]	@ (800bed8 <_localeconv_r+0x4>)
 800bed6:	4770      	bx	lr
 800bed8:	200002c8 	.word	0x200002c8

0800bedc <_close_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d06      	ldr	r5, [pc, #24]	@ (800bef8 <_close_r+0x1c>)
 800bee0:	2300      	movs	r3, #0
 800bee2:	4604      	mov	r4, r0
 800bee4:	4608      	mov	r0, r1
 800bee6:	602b      	str	r3, [r5, #0]
 800bee8:	f7f5 fb92 	bl	8001610 <_close>
 800beec:	1c43      	adds	r3, r0, #1
 800beee:	d102      	bne.n	800bef6 <_close_r+0x1a>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	b103      	cbz	r3, 800bef6 <_close_r+0x1a>
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	bd38      	pop	{r3, r4, r5, pc}
 800bef8:	200017c8 	.word	0x200017c8

0800befc <_lseek_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d07      	ldr	r5, [pc, #28]	@ (800bf1c <_lseek_r+0x20>)
 800bf00:	4604      	mov	r4, r0
 800bf02:	4608      	mov	r0, r1
 800bf04:	4611      	mov	r1, r2
 800bf06:	2200      	movs	r2, #0
 800bf08:	602a      	str	r2, [r5, #0]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f7f5 fba7 	bl	800165e <_lseek>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d102      	bne.n	800bf1a <_lseek_r+0x1e>
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	b103      	cbz	r3, 800bf1a <_lseek_r+0x1e>
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	200017c8 	.word	0x200017c8

0800bf20 <_read_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4d07      	ldr	r5, [pc, #28]	@ (800bf40 <_read_r+0x20>)
 800bf24:	4604      	mov	r4, r0
 800bf26:	4608      	mov	r0, r1
 800bf28:	4611      	mov	r1, r2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	602a      	str	r2, [r5, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f7f5 fb35 	bl	800159e <_read>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_read_r+0x1e>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_read_r+0x1e>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	200017c8 	.word	0x200017c8

0800bf44 <_write_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d07      	ldr	r5, [pc, #28]	@ (800bf64 <_write_r+0x20>)
 800bf48:	4604      	mov	r4, r0
 800bf4a:	4608      	mov	r0, r1
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	2200      	movs	r2, #0
 800bf50:	602a      	str	r2, [r5, #0]
 800bf52:	461a      	mov	r2, r3
 800bf54:	f7f5 fb40 	bl	80015d8 <_write>
 800bf58:	1c43      	adds	r3, r0, #1
 800bf5a:	d102      	bne.n	800bf62 <_write_r+0x1e>
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	b103      	cbz	r3, 800bf62 <_write_r+0x1e>
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
 800bf64:	200017c8 	.word	0x200017c8

0800bf68 <__errno>:
 800bf68:	4b01      	ldr	r3, [pc, #4]	@ (800bf70 <__errno+0x8>)
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	20000188 	.word	0x20000188

0800bf74 <__libc_init_array>:
 800bf74:	b570      	push	{r4, r5, r6, lr}
 800bf76:	4d0d      	ldr	r5, [pc, #52]	@ (800bfac <__libc_init_array+0x38>)
 800bf78:	4c0d      	ldr	r4, [pc, #52]	@ (800bfb0 <__libc_init_array+0x3c>)
 800bf7a:	1b64      	subs	r4, r4, r5
 800bf7c:	10a4      	asrs	r4, r4, #2
 800bf7e:	2600      	movs	r6, #0
 800bf80:	42a6      	cmp	r6, r4
 800bf82:	d109      	bne.n	800bf98 <__libc_init_array+0x24>
 800bf84:	4d0b      	ldr	r5, [pc, #44]	@ (800bfb4 <__libc_init_array+0x40>)
 800bf86:	4c0c      	ldr	r4, [pc, #48]	@ (800bfb8 <__libc_init_array+0x44>)
 800bf88:	f003 fb74 	bl	800f674 <_init>
 800bf8c:	1b64      	subs	r4, r4, r5
 800bf8e:	10a4      	asrs	r4, r4, #2
 800bf90:	2600      	movs	r6, #0
 800bf92:	42a6      	cmp	r6, r4
 800bf94:	d105      	bne.n	800bfa2 <__libc_init_array+0x2e>
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf9c:	4798      	blx	r3
 800bf9e:	3601      	adds	r6, #1
 800bfa0:	e7ee      	b.n	800bf80 <__libc_init_array+0xc>
 800bfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa6:	4798      	blx	r3
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	e7f2      	b.n	800bf92 <__libc_init_array+0x1e>
 800bfac:	0800fb78 	.word	0x0800fb78
 800bfb0:	0800fb78 	.word	0x0800fb78
 800bfb4:	0800fb78 	.word	0x0800fb78
 800bfb8:	0800fb7c 	.word	0x0800fb7c

0800bfbc <__retarget_lock_init_recursive>:
 800bfbc:	4770      	bx	lr

0800bfbe <__retarget_lock_acquire_recursive>:
 800bfbe:	4770      	bx	lr

0800bfc0 <__retarget_lock_release_recursive>:
 800bfc0:	4770      	bx	lr

0800bfc2 <memcpy>:
 800bfc2:	440a      	add	r2, r1
 800bfc4:	4291      	cmp	r1, r2
 800bfc6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfca:	d100      	bne.n	800bfce <memcpy+0xc>
 800bfcc:	4770      	bx	lr
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfd8:	4291      	cmp	r1, r2
 800bfda:	d1f9      	bne.n	800bfd0 <memcpy+0xe>
 800bfdc:	bd10      	pop	{r4, pc}
	...

0800bfe0 <nanf>:
 800bfe0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bfe8 <nanf+0x8>
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	7fc00000 	.word	0x7fc00000

0800bfec <quorem>:
 800bfec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff0:	6903      	ldr	r3, [r0, #16]
 800bff2:	690c      	ldr	r4, [r1, #16]
 800bff4:	42a3      	cmp	r3, r4
 800bff6:	4607      	mov	r7, r0
 800bff8:	db7e      	blt.n	800c0f8 <quorem+0x10c>
 800bffa:	3c01      	subs	r4, #1
 800bffc:	f101 0814 	add.w	r8, r1, #20
 800c000:	00a3      	lsls	r3, r4, #2
 800c002:	f100 0514 	add.w	r5, r0, #20
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c016:	3301      	adds	r3, #1
 800c018:	429a      	cmp	r2, r3
 800c01a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c01e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c022:	d32e      	bcc.n	800c082 <quorem+0x96>
 800c024:	f04f 0a00 	mov.w	sl, #0
 800c028:	46c4      	mov	ip, r8
 800c02a:	46ae      	mov	lr, r5
 800c02c:	46d3      	mov	fp, sl
 800c02e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c032:	b298      	uxth	r0, r3
 800c034:	fb06 a000 	mla	r0, r6, r0, sl
 800c038:	0c02      	lsrs	r2, r0, #16
 800c03a:	0c1b      	lsrs	r3, r3, #16
 800c03c:	fb06 2303 	mla	r3, r6, r3, r2
 800c040:	f8de 2000 	ldr.w	r2, [lr]
 800c044:	b280      	uxth	r0, r0
 800c046:	b292      	uxth	r2, r2
 800c048:	1a12      	subs	r2, r2, r0
 800c04a:	445a      	add	r2, fp
 800c04c:	f8de 0000 	ldr.w	r0, [lr]
 800c050:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c054:	b29b      	uxth	r3, r3
 800c056:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c05a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c05e:	b292      	uxth	r2, r2
 800c060:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c064:	45e1      	cmp	r9, ip
 800c066:	f84e 2b04 	str.w	r2, [lr], #4
 800c06a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c06e:	d2de      	bcs.n	800c02e <quorem+0x42>
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	58eb      	ldr	r3, [r5, r3]
 800c074:	b92b      	cbnz	r3, 800c082 <quorem+0x96>
 800c076:	9b01      	ldr	r3, [sp, #4]
 800c078:	3b04      	subs	r3, #4
 800c07a:	429d      	cmp	r5, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	d32f      	bcc.n	800c0e0 <quorem+0xf4>
 800c080:	613c      	str	r4, [r7, #16]
 800c082:	4638      	mov	r0, r7
 800c084:	f001 f9c4 	bl	800d410 <__mcmp>
 800c088:	2800      	cmp	r0, #0
 800c08a:	db25      	blt.n	800c0d8 <quorem+0xec>
 800c08c:	4629      	mov	r1, r5
 800c08e:	2000      	movs	r0, #0
 800c090:	f858 2b04 	ldr.w	r2, [r8], #4
 800c094:	f8d1 c000 	ldr.w	ip, [r1]
 800c098:	fa1f fe82 	uxth.w	lr, r2
 800c09c:	fa1f f38c 	uxth.w	r3, ip
 800c0a0:	eba3 030e 	sub.w	r3, r3, lr
 800c0a4:	4403      	add	r3, r0
 800c0a6:	0c12      	lsrs	r2, r2, #16
 800c0a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0b6:	45c1      	cmp	r9, r8
 800c0b8:	f841 3b04 	str.w	r3, [r1], #4
 800c0bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0c0:	d2e6      	bcs.n	800c090 <quorem+0xa4>
 800c0c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0ca:	b922      	cbnz	r2, 800c0d6 <quorem+0xea>
 800c0cc:	3b04      	subs	r3, #4
 800c0ce:	429d      	cmp	r5, r3
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	d30b      	bcc.n	800c0ec <quorem+0x100>
 800c0d4:	613c      	str	r4, [r7, #16]
 800c0d6:	3601      	adds	r6, #1
 800c0d8:	4630      	mov	r0, r6
 800c0da:	b003      	add	sp, #12
 800c0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e0:	6812      	ldr	r2, [r2, #0]
 800c0e2:	3b04      	subs	r3, #4
 800c0e4:	2a00      	cmp	r2, #0
 800c0e6:	d1cb      	bne.n	800c080 <quorem+0x94>
 800c0e8:	3c01      	subs	r4, #1
 800c0ea:	e7c6      	b.n	800c07a <quorem+0x8e>
 800c0ec:	6812      	ldr	r2, [r2, #0]
 800c0ee:	3b04      	subs	r3, #4
 800c0f0:	2a00      	cmp	r2, #0
 800c0f2:	d1ef      	bne.n	800c0d4 <quorem+0xe8>
 800c0f4:	3c01      	subs	r4, #1
 800c0f6:	e7ea      	b.n	800c0ce <quorem+0xe2>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e7ee      	b.n	800c0da <quorem+0xee>
 800c0fc:	0000      	movs	r0, r0
	...

0800c100 <_dtoa_r>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	69c7      	ldr	r7, [r0, #28]
 800c106:	b099      	sub	sp, #100	@ 0x64
 800c108:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c10c:	ec55 4b10 	vmov	r4, r5, d0
 800c110:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c112:	9109      	str	r1, [sp, #36]	@ 0x24
 800c114:	4683      	mov	fp, r0
 800c116:	920e      	str	r2, [sp, #56]	@ 0x38
 800c118:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c11a:	b97f      	cbnz	r7, 800c13c <_dtoa_r+0x3c>
 800c11c:	2010      	movs	r0, #16
 800c11e:	f000 fdfd 	bl	800cd1c <malloc>
 800c122:	4602      	mov	r2, r0
 800c124:	f8cb 001c 	str.w	r0, [fp, #28]
 800c128:	b920      	cbnz	r0, 800c134 <_dtoa_r+0x34>
 800c12a:	4ba7      	ldr	r3, [pc, #668]	@ (800c3c8 <_dtoa_r+0x2c8>)
 800c12c:	21ef      	movs	r1, #239	@ 0xef
 800c12e:	48a7      	ldr	r0, [pc, #668]	@ (800c3cc <_dtoa_r+0x2cc>)
 800c130:	f002 fc2a 	bl	800e988 <__assert_func>
 800c134:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c138:	6007      	str	r7, [r0, #0]
 800c13a:	60c7      	str	r7, [r0, #12]
 800c13c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c140:	6819      	ldr	r1, [r3, #0]
 800c142:	b159      	cbz	r1, 800c15c <_dtoa_r+0x5c>
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	604a      	str	r2, [r1, #4]
 800c148:	2301      	movs	r3, #1
 800c14a:	4093      	lsls	r3, r2
 800c14c:	608b      	str	r3, [r1, #8]
 800c14e:	4658      	mov	r0, fp
 800c150:	f000 feda 	bl	800cf08 <_Bfree>
 800c154:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	1e2b      	subs	r3, r5, #0
 800c15e:	bfb9      	ittee	lt
 800c160:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c164:	9303      	strlt	r3, [sp, #12]
 800c166:	2300      	movge	r3, #0
 800c168:	6033      	strge	r3, [r6, #0]
 800c16a:	9f03      	ldr	r7, [sp, #12]
 800c16c:	4b98      	ldr	r3, [pc, #608]	@ (800c3d0 <_dtoa_r+0x2d0>)
 800c16e:	bfbc      	itt	lt
 800c170:	2201      	movlt	r2, #1
 800c172:	6032      	strlt	r2, [r6, #0]
 800c174:	43bb      	bics	r3, r7
 800c176:	d112      	bne.n	800c19e <_dtoa_r+0x9e>
 800c178:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c17a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c17e:	6013      	str	r3, [r2, #0]
 800c180:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c184:	4323      	orrs	r3, r4
 800c186:	f000 854d 	beq.w	800cc24 <_dtoa_r+0xb24>
 800c18a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c18c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c3e4 <_dtoa_r+0x2e4>
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 854f 	beq.w	800cc34 <_dtoa_r+0xb34>
 800c196:	f10a 0303 	add.w	r3, sl, #3
 800c19a:	f000 bd49 	b.w	800cc30 <_dtoa_r+0xb30>
 800c19e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	ec51 0b17 	vmov	r0, r1, d7
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c1ae:	f7f4 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1b2:	4680      	mov	r8, r0
 800c1b4:	b158      	cbz	r0, 800c1ce <_dtoa_r+0xce>
 800c1b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1be:	b113      	cbz	r3, 800c1c6 <_dtoa_r+0xc6>
 800c1c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c1c2:	4b84      	ldr	r3, [pc, #528]	@ (800c3d4 <_dtoa_r+0x2d4>)
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c3e8 <_dtoa_r+0x2e8>
 800c1ca:	f000 bd33 	b.w	800cc34 <_dtoa_r+0xb34>
 800c1ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c1d2:	aa16      	add	r2, sp, #88	@ 0x58
 800c1d4:	a917      	add	r1, sp, #92	@ 0x5c
 800c1d6:	4658      	mov	r0, fp
 800c1d8:	f001 fa3a 	bl	800d650 <__d2b>
 800c1dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c1e0:	4681      	mov	r9, r0
 800c1e2:	2e00      	cmp	r6, #0
 800c1e4:	d077      	beq.n	800c2d6 <_dtoa_r+0x1d6>
 800c1e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c1ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c1f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c1fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c200:	4619      	mov	r1, r3
 800c202:	2200      	movs	r2, #0
 800c204:	4b74      	ldr	r3, [pc, #464]	@ (800c3d8 <_dtoa_r+0x2d8>)
 800c206:	f7f4 f83f 	bl	8000288 <__aeabi_dsub>
 800c20a:	a369      	add	r3, pc, #420	@ (adr r3, 800c3b0 <_dtoa_r+0x2b0>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 f9f2 	bl	80005f8 <__aeabi_dmul>
 800c214:	a368      	add	r3, pc, #416	@ (adr r3, 800c3b8 <_dtoa_r+0x2b8>)
 800c216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21a:	f7f4 f837 	bl	800028c <__adddf3>
 800c21e:	4604      	mov	r4, r0
 800c220:	4630      	mov	r0, r6
 800c222:	460d      	mov	r5, r1
 800c224:	f7f4 f97e 	bl	8000524 <__aeabi_i2d>
 800c228:	a365      	add	r3, pc, #404	@ (adr r3, 800c3c0 <_dtoa_r+0x2c0>)
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	f7f4 f9e3 	bl	80005f8 <__aeabi_dmul>
 800c232:	4602      	mov	r2, r0
 800c234:	460b      	mov	r3, r1
 800c236:	4620      	mov	r0, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f7f4 f827 	bl	800028c <__adddf3>
 800c23e:	4604      	mov	r4, r0
 800c240:	460d      	mov	r5, r1
 800c242:	f7f4 fc89 	bl	8000b58 <__aeabi_d2iz>
 800c246:	2200      	movs	r2, #0
 800c248:	4607      	mov	r7, r0
 800c24a:	2300      	movs	r3, #0
 800c24c:	4620      	mov	r0, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f4 fc44 	bl	8000adc <__aeabi_dcmplt>
 800c254:	b140      	cbz	r0, 800c268 <_dtoa_r+0x168>
 800c256:	4638      	mov	r0, r7
 800c258:	f7f4 f964 	bl	8000524 <__aeabi_i2d>
 800c25c:	4622      	mov	r2, r4
 800c25e:	462b      	mov	r3, r5
 800c260:	f7f4 fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 800c264:	b900      	cbnz	r0, 800c268 <_dtoa_r+0x168>
 800c266:	3f01      	subs	r7, #1
 800c268:	2f16      	cmp	r7, #22
 800c26a:	d851      	bhi.n	800c310 <_dtoa_r+0x210>
 800c26c:	4b5b      	ldr	r3, [pc, #364]	@ (800c3dc <_dtoa_r+0x2dc>)
 800c26e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c27a:	f7f4 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800c27e:	2800      	cmp	r0, #0
 800c280:	d048      	beq.n	800c314 <_dtoa_r+0x214>
 800c282:	3f01      	subs	r7, #1
 800c284:	2300      	movs	r3, #0
 800c286:	9312      	str	r3, [sp, #72]	@ 0x48
 800c288:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c28a:	1b9b      	subs	r3, r3, r6
 800c28c:	1e5a      	subs	r2, r3, #1
 800c28e:	bf44      	itt	mi
 800c290:	f1c3 0801 	rsbmi	r8, r3, #1
 800c294:	2300      	movmi	r3, #0
 800c296:	9208      	str	r2, [sp, #32]
 800c298:	bf54      	ite	pl
 800c29a:	f04f 0800 	movpl.w	r8, #0
 800c29e:	9308      	strmi	r3, [sp, #32]
 800c2a0:	2f00      	cmp	r7, #0
 800c2a2:	db39      	blt.n	800c318 <_dtoa_r+0x218>
 800c2a4:	9b08      	ldr	r3, [sp, #32]
 800c2a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c2a8:	443b      	add	r3, r7
 800c2aa:	9308      	str	r3, [sp, #32]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	d864      	bhi.n	800c380 <_dtoa_r+0x280>
 800c2b6:	2b05      	cmp	r3, #5
 800c2b8:	bfc4      	itt	gt
 800c2ba:	3b04      	subgt	r3, #4
 800c2bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c0:	f1a3 0302 	sub.w	r3, r3, #2
 800c2c4:	bfcc      	ite	gt
 800c2c6:	2400      	movgt	r4, #0
 800c2c8:	2401      	movle	r4, #1
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d863      	bhi.n	800c396 <_dtoa_r+0x296>
 800c2ce:	e8df f003 	tbb	[pc, r3]
 800c2d2:	372a      	.short	0x372a
 800c2d4:	5535      	.short	0x5535
 800c2d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c2da:	441e      	add	r6, r3
 800c2dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c2e0:	2b20      	cmp	r3, #32
 800c2e2:	bfc1      	itttt	gt
 800c2e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c2e8:	409f      	lslgt	r7, r3
 800c2ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c2ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c2f2:	bfd6      	itet	le
 800c2f4:	f1c3 0320 	rsble	r3, r3, #32
 800c2f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c2fc:	fa04 f003 	lslle.w	r0, r4, r3
 800c300:	f7f4 f900 	bl	8000504 <__aeabi_ui2d>
 800c304:	2201      	movs	r2, #1
 800c306:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c30a:	3e01      	subs	r6, #1
 800c30c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c30e:	e777      	b.n	800c200 <_dtoa_r+0x100>
 800c310:	2301      	movs	r3, #1
 800c312:	e7b8      	b.n	800c286 <_dtoa_r+0x186>
 800c314:	9012      	str	r0, [sp, #72]	@ 0x48
 800c316:	e7b7      	b.n	800c288 <_dtoa_r+0x188>
 800c318:	427b      	negs	r3, r7
 800c31a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c31c:	2300      	movs	r3, #0
 800c31e:	eba8 0807 	sub.w	r8, r8, r7
 800c322:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c324:	e7c4      	b.n	800c2b0 <_dtoa_r+0x1b0>
 800c326:	2300      	movs	r3, #0
 800c328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c32a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dc35      	bgt.n	800c39c <_dtoa_r+0x29c>
 800c330:	2301      	movs	r3, #1
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	9307      	str	r3, [sp, #28]
 800c336:	461a      	mov	r2, r3
 800c338:	920e      	str	r2, [sp, #56]	@ 0x38
 800c33a:	e00b      	b.n	800c354 <_dtoa_r+0x254>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e7f3      	b.n	800c328 <_dtoa_r+0x228>
 800c340:	2300      	movs	r3, #0
 800c342:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c346:	18fb      	adds	r3, r7, r3
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	3301      	adds	r3, #1
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	bfb8      	it	lt
 800c352:	2301      	movlt	r3, #1
 800c354:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c358:	2100      	movs	r1, #0
 800c35a:	2204      	movs	r2, #4
 800c35c:	f102 0514 	add.w	r5, r2, #20
 800c360:	429d      	cmp	r5, r3
 800c362:	d91f      	bls.n	800c3a4 <_dtoa_r+0x2a4>
 800c364:	6041      	str	r1, [r0, #4]
 800c366:	4658      	mov	r0, fp
 800c368:	f000 fd8e 	bl	800ce88 <_Balloc>
 800c36c:	4682      	mov	sl, r0
 800c36e:	2800      	cmp	r0, #0
 800c370:	d13c      	bne.n	800c3ec <_dtoa_r+0x2ec>
 800c372:	4b1b      	ldr	r3, [pc, #108]	@ (800c3e0 <_dtoa_r+0x2e0>)
 800c374:	4602      	mov	r2, r0
 800c376:	f240 11af 	movw	r1, #431	@ 0x1af
 800c37a:	e6d8      	b.n	800c12e <_dtoa_r+0x2e>
 800c37c:	2301      	movs	r3, #1
 800c37e:	e7e0      	b.n	800c342 <_dtoa_r+0x242>
 800c380:	2401      	movs	r4, #1
 800c382:	2300      	movs	r3, #0
 800c384:	9309      	str	r3, [sp, #36]	@ 0x24
 800c386:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c388:	f04f 33ff 	mov.w	r3, #4294967295
 800c38c:	9300      	str	r3, [sp, #0]
 800c38e:	9307      	str	r3, [sp, #28]
 800c390:	2200      	movs	r2, #0
 800c392:	2312      	movs	r3, #18
 800c394:	e7d0      	b.n	800c338 <_dtoa_r+0x238>
 800c396:	2301      	movs	r3, #1
 800c398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c39a:	e7f5      	b.n	800c388 <_dtoa_r+0x288>
 800c39c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	9307      	str	r3, [sp, #28]
 800c3a2:	e7d7      	b.n	800c354 <_dtoa_r+0x254>
 800c3a4:	3101      	adds	r1, #1
 800c3a6:	0052      	lsls	r2, r2, #1
 800c3a8:	e7d8      	b.n	800c35c <_dtoa_r+0x25c>
 800c3aa:	bf00      	nop
 800c3ac:	f3af 8000 	nop.w
 800c3b0:	636f4361 	.word	0x636f4361
 800c3b4:	3fd287a7 	.word	0x3fd287a7
 800c3b8:	8b60c8b3 	.word	0x8b60c8b3
 800c3bc:	3fc68a28 	.word	0x3fc68a28
 800c3c0:	509f79fb 	.word	0x509f79fb
 800c3c4:	3fd34413 	.word	0x3fd34413
 800c3c8:	0800f786 	.word	0x0800f786
 800c3cc:	0800f79d 	.word	0x0800f79d
 800c3d0:	7ff00000 	.word	0x7ff00000
 800c3d4:	0800f751 	.word	0x0800f751
 800c3d8:	3ff80000 	.word	0x3ff80000
 800c3dc:	0800f898 	.word	0x0800f898
 800c3e0:	0800f7f5 	.word	0x0800f7f5
 800c3e4:	0800f782 	.word	0x0800f782
 800c3e8:	0800f750 	.word	0x0800f750
 800c3ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3f0:	6018      	str	r0, [r3, #0]
 800c3f2:	9b07      	ldr	r3, [sp, #28]
 800c3f4:	2b0e      	cmp	r3, #14
 800c3f6:	f200 80a4 	bhi.w	800c542 <_dtoa_r+0x442>
 800c3fa:	2c00      	cmp	r4, #0
 800c3fc:	f000 80a1 	beq.w	800c542 <_dtoa_r+0x442>
 800c400:	2f00      	cmp	r7, #0
 800c402:	dd33      	ble.n	800c46c <_dtoa_r+0x36c>
 800c404:	4bad      	ldr	r3, [pc, #692]	@ (800c6bc <_dtoa_r+0x5bc>)
 800c406:	f007 020f 	and.w	r2, r7, #15
 800c40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c40e:	ed93 7b00 	vldr	d7, [r3]
 800c412:	05f8      	lsls	r0, r7, #23
 800c414:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c418:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c41c:	d516      	bpl.n	800c44c <_dtoa_r+0x34c>
 800c41e:	4ba8      	ldr	r3, [pc, #672]	@ (800c6c0 <_dtoa_r+0x5c0>)
 800c420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c428:	f7f4 fa10 	bl	800084c <__aeabi_ddiv>
 800c42c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c430:	f004 040f 	and.w	r4, r4, #15
 800c434:	2603      	movs	r6, #3
 800c436:	4da2      	ldr	r5, [pc, #648]	@ (800c6c0 <_dtoa_r+0x5c0>)
 800c438:	b954      	cbnz	r4, 800c450 <_dtoa_r+0x350>
 800c43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c442:	f7f4 fa03 	bl	800084c <__aeabi_ddiv>
 800c446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c44a:	e028      	b.n	800c49e <_dtoa_r+0x39e>
 800c44c:	2602      	movs	r6, #2
 800c44e:	e7f2      	b.n	800c436 <_dtoa_r+0x336>
 800c450:	07e1      	lsls	r1, r4, #31
 800c452:	d508      	bpl.n	800c466 <_dtoa_r+0x366>
 800c454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c45c:	f7f4 f8cc 	bl	80005f8 <__aeabi_dmul>
 800c460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c464:	3601      	adds	r6, #1
 800c466:	1064      	asrs	r4, r4, #1
 800c468:	3508      	adds	r5, #8
 800c46a:	e7e5      	b.n	800c438 <_dtoa_r+0x338>
 800c46c:	f000 80d2 	beq.w	800c614 <_dtoa_r+0x514>
 800c470:	427c      	negs	r4, r7
 800c472:	4b92      	ldr	r3, [pc, #584]	@ (800c6bc <_dtoa_r+0x5bc>)
 800c474:	4d92      	ldr	r5, [pc, #584]	@ (800c6c0 <_dtoa_r+0x5c0>)
 800c476:	f004 020f 	and.w	r2, r4, #15
 800c47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c486:	f7f4 f8b7 	bl	80005f8 <__aeabi_dmul>
 800c48a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c48e:	1124      	asrs	r4, r4, #4
 800c490:	2300      	movs	r3, #0
 800c492:	2602      	movs	r6, #2
 800c494:	2c00      	cmp	r4, #0
 800c496:	f040 80b2 	bne.w	800c5fe <_dtoa_r+0x4fe>
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1d3      	bne.n	800c446 <_dtoa_r+0x346>
 800c49e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c4a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 80b7 	beq.w	800c618 <_dtoa_r+0x518>
 800c4aa:	4b86      	ldr	r3, [pc, #536]	@ (800c6c4 <_dtoa_r+0x5c4>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f4 fb13 	bl	8000adc <__aeabi_dcmplt>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f000 80ae 	beq.w	800c618 <_dtoa_r+0x518>
 800c4bc:	9b07      	ldr	r3, [sp, #28]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f000 80aa 	beq.w	800c618 <_dtoa_r+0x518>
 800c4c4:	9b00      	ldr	r3, [sp, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	dd37      	ble.n	800c53a <_dtoa_r+0x43a>
 800c4ca:	1e7b      	subs	r3, r7, #1
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	4b7d      	ldr	r3, [pc, #500]	@ (800c6c8 <_dtoa_r+0x5c8>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f7f4 f88f 	bl	80005f8 <__aeabi_dmul>
 800c4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4de:	9c00      	ldr	r4, [sp, #0]
 800c4e0:	3601      	adds	r6, #1
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f7f4 f81e 	bl	8000524 <__aeabi_i2d>
 800c4e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	4b76      	ldr	r3, [pc, #472]	@ (800c6cc <_dtoa_r+0x5cc>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f7f3 feca 	bl	800028c <__adddf3>
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c4fe:	2c00      	cmp	r4, #0
 800c500:	f040 808d 	bne.w	800c61e <_dtoa_r+0x51e>
 800c504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c508:	4b71      	ldr	r3, [pc, #452]	@ (800c6d0 <_dtoa_r+0x5d0>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	f7f3 febc 	bl	8000288 <__aeabi_dsub>
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c518:	462a      	mov	r2, r5
 800c51a:	4633      	mov	r3, r6
 800c51c:	f7f4 fafc 	bl	8000b18 <__aeabi_dcmpgt>
 800c520:	2800      	cmp	r0, #0
 800c522:	f040 828b 	bne.w	800ca3c <_dtoa_r+0x93c>
 800c526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c52a:	462a      	mov	r2, r5
 800c52c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c530:	f7f4 fad4 	bl	8000adc <__aeabi_dcmplt>
 800c534:	2800      	cmp	r0, #0
 800c536:	f040 8128 	bne.w	800c78a <_dtoa_r+0x68a>
 800c53a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c53e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c542:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c544:	2b00      	cmp	r3, #0
 800c546:	f2c0 815a 	blt.w	800c7fe <_dtoa_r+0x6fe>
 800c54a:	2f0e      	cmp	r7, #14
 800c54c:	f300 8157 	bgt.w	800c7fe <_dtoa_r+0x6fe>
 800c550:	4b5a      	ldr	r3, [pc, #360]	@ (800c6bc <_dtoa_r+0x5bc>)
 800c552:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c556:	ed93 7b00 	vldr	d7, [r3]
 800c55a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	ed8d 7b00 	vstr	d7, [sp]
 800c562:	da03      	bge.n	800c56c <_dtoa_r+0x46c>
 800c564:	9b07      	ldr	r3, [sp, #28]
 800c566:	2b00      	cmp	r3, #0
 800c568:	f340 8101 	ble.w	800c76e <_dtoa_r+0x66e>
 800c56c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c570:	4656      	mov	r6, sl
 800c572:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c576:	4620      	mov	r0, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	f7f4 f967 	bl	800084c <__aeabi_ddiv>
 800c57e:	f7f4 faeb 	bl	8000b58 <__aeabi_d2iz>
 800c582:	4680      	mov	r8, r0
 800c584:	f7f3 ffce 	bl	8000524 <__aeabi_i2d>
 800c588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c58c:	f7f4 f834 	bl	80005f8 <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c59c:	f7f3 fe74 	bl	8000288 <__aeabi_dsub>
 800c5a0:	f806 4b01 	strb.w	r4, [r6], #1
 800c5a4:	9d07      	ldr	r5, [sp, #28]
 800c5a6:	eba6 040a 	sub.w	r4, r6, sl
 800c5aa:	42a5      	cmp	r5, r4
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	f040 8117 	bne.w	800c7e2 <_dtoa_r+0x6e2>
 800c5b4:	f7f3 fe6a 	bl	800028c <__adddf3>
 800c5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5bc:	4604      	mov	r4, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	f7f4 faaa 	bl	8000b18 <__aeabi_dcmpgt>
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	f040 80f9 	bne.w	800c7bc <_dtoa_r+0x6bc>
 800c5ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	f7f4 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5d6:	b118      	cbz	r0, 800c5e0 <_dtoa_r+0x4e0>
 800c5d8:	f018 0f01 	tst.w	r8, #1
 800c5dc:	f040 80ee 	bne.w	800c7bc <_dtoa_r+0x6bc>
 800c5e0:	4649      	mov	r1, r9
 800c5e2:	4658      	mov	r0, fp
 800c5e4:	f000 fc90 	bl	800cf08 <_Bfree>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	7033      	strb	r3, [r6, #0]
 800c5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c5ee:	3701      	adds	r7, #1
 800c5f0:	601f      	str	r7, [r3, #0]
 800c5f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 831d 	beq.w	800cc34 <_dtoa_r+0xb34>
 800c5fa:	601e      	str	r6, [r3, #0]
 800c5fc:	e31a      	b.n	800cc34 <_dtoa_r+0xb34>
 800c5fe:	07e2      	lsls	r2, r4, #31
 800c600:	d505      	bpl.n	800c60e <_dtoa_r+0x50e>
 800c602:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	3601      	adds	r6, #1
 800c60c:	2301      	movs	r3, #1
 800c60e:	1064      	asrs	r4, r4, #1
 800c610:	3508      	adds	r5, #8
 800c612:	e73f      	b.n	800c494 <_dtoa_r+0x394>
 800c614:	2602      	movs	r6, #2
 800c616:	e742      	b.n	800c49e <_dtoa_r+0x39e>
 800c618:	9c07      	ldr	r4, [sp, #28]
 800c61a:	9704      	str	r7, [sp, #16]
 800c61c:	e761      	b.n	800c4e2 <_dtoa_r+0x3e2>
 800c61e:	4b27      	ldr	r3, [pc, #156]	@ (800c6bc <_dtoa_r+0x5bc>)
 800c620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c622:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c626:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c62a:	4454      	add	r4, sl
 800c62c:	2900      	cmp	r1, #0
 800c62e:	d053      	beq.n	800c6d8 <_dtoa_r+0x5d8>
 800c630:	4928      	ldr	r1, [pc, #160]	@ (800c6d4 <_dtoa_r+0x5d4>)
 800c632:	2000      	movs	r0, #0
 800c634:	f7f4 f90a 	bl	800084c <__aeabi_ddiv>
 800c638:	4633      	mov	r3, r6
 800c63a:	462a      	mov	r2, r5
 800c63c:	f7f3 fe24 	bl	8000288 <__aeabi_dsub>
 800c640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c644:	4656      	mov	r6, sl
 800c646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c64a:	f7f4 fa85 	bl	8000b58 <__aeabi_d2iz>
 800c64e:	4605      	mov	r5, r0
 800c650:	f7f3 ff68 	bl	8000524 <__aeabi_i2d>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c65c:	f7f3 fe14 	bl	8000288 <__aeabi_dsub>
 800c660:	3530      	adds	r5, #48	@ 0x30
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c66a:	f806 5b01 	strb.w	r5, [r6], #1
 800c66e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c672:	f7f4 fa33 	bl	8000adc <__aeabi_dcmplt>
 800c676:	2800      	cmp	r0, #0
 800c678:	d171      	bne.n	800c75e <_dtoa_r+0x65e>
 800c67a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c67e:	4911      	ldr	r1, [pc, #68]	@ (800c6c4 <_dtoa_r+0x5c4>)
 800c680:	2000      	movs	r0, #0
 800c682:	f7f3 fe01 	bl	8000288 <__aeabi_dsub>
 800c686:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c68a:	f7f4 fa27 	bl	8000adc <__aeabi_dcmplt>
 800c68e:	2800      	cmp	r0, #0
 800c690:	f040 8095 	bne.w	800c7be <_dtoa_r+0x6be>
 800c694:	42a6      	cmp	r6, r4
 800c696:	f43f af50 	beq.w	800c53a <_dtoa_r+0x43a>
 800c69a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c69e:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c8 <_dtoa_r+0x5c8>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	4b08      	ldr	r3, [pc, #32]	@ (800c6c8 <_dtoa_r+0x5c8>)
 800c6a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b2:	f7f3 ffa1 	bl	80005f8 <__aeabi_dmul>
 800c6b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ba:	e7c4      	b.n	800c646 <_dtoa_r+0x546>
 800c6bc:	0800f898 	.word	0x0800f898
 800c6c0:	0800f870 	.word	0x0800f870
 800c6c4:	3ff00000 	.word	0x3ff00000
 800c6c8:	40240000 	.word	0x40240000
 800c6cc:	401c0000 	.word	0x401c0000
 800c6d0:	40140000 	.word	0x40140000
 800c6d4:	3fe00000 	.word	0x3fe00000
 800c6d8:	4631      	mov	r1, r6
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f7f3 ff8c 	bl	80005f8 <__aeabi_dmul>
 800c6e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c6e6:	4656      	mov	r6, sl
 800c6e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ec:	f7f4 fa34 	bl	8000b58 <__aeabi_d2iz>
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	f7f3 ff17 	bl	8000524 <__aeabi_i2d>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6fe:	f7f3 fdc3 	bl	8000288 <__aeabi_dsub>
 800c702:	3530      	adds	r5, #48	@ 0x30
 800c704:	f806 5b01 	strb.w	r5, [r6], #1
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	42a6      	cmp	r6, r4
 800c70e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c712:	f04f 0200 	mov.w	r2, #0
 800c716:	d124      	bne.n	800c762 <_dtoa_r+0x662>
 800c718:	4bac      	ldr	r3, [pc, #688]	@ (800c9cc <_dtoa_r+0x8cc>)
 800c71a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c71e:	f7f3 fdb5 	bl	800028c <__adddf3>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c72a:	f7f4 f9f5 	bl	8000b18 <__aeabi_dcmpgt>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d145      	bne.n	800c7be <_dtoa_r+0x6be>
 800c732:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c736:	49a5      	ldr	r1, [pc, #660]	@ (800c9cc <_dtoa_r+0x8cc>)
 800c738:	2000      	movs	r0, #0
 800c73a:	f7f3 fda5 	bl	8000288 <__aeabi_dsub>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c746:	f7f4 f9c9 	bl	8000adc <__aeabi_dcmplt>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	f43f aef5 	beq.w	800c53a <_dtoa_r+0x43a>
 800c750:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c752:	1e73      	subs	r3, r6, #1
 800c754:	9315      	str	r3, [sp, #84]	@ 0x54
 800c756:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c75a:	2b30      	cmp	r3, #48	@ 0x30
 800c75c:	d0f8      	beq.n	800c750 <_dtoa_r+0x650>
 800c75e:	9f04      	ldr	r7, [sp, #16]
 800c760:	e73e      	b.n	800c5e0 <_dtoa_r+0x4e0>
 800c762:	4b9b      	ldr	r3, [pc, #620]	@ (800c9d0 <_dtoa_r+0x8d0>)
 800c764:	f7f3 ff48 	bl	80005f8 <__aeabi_dmul>
 800c768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c76c:	e7bc      	b.n	800c6e8 <_dtoa_r+0x5e8>
 800c76e:	d10c      	bne.n	800c78a <_dtoa_r+0x68a>
 800c770:	4b98      	ldr	r3, [pc, #608]	@ (800c9d4 <_dtoa_r+0x8d4>)
 800c772:	2200      	movs	r2, #0
 800c774:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c778:	f7f3 ff3e 	bl	80005f8 <__aeabi_dmul>
 800c77c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c780:	f7f4 f9c0 	bl	8000b04 <__aeabi_dcmpge>
 800c784:	2800      	cmp	r0, #0
 800c786:	f000 8157 	beq.w	800ca38 <_dtoa_r+0x938>
 800c78a:	2400      	movs	r4, #0
 800c78c:	4625      	mov	r5, r4
 800c78e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c790:	43db      	mvns	r3, r3
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	4656      	mov	r6, sl
 800c796:	2700      	movs	r7, #0
 800c798:	4621      	mov	r1, r4
 800c79a:	4658      	mov	r0, fp
 800c79c:	f000 fbb4 	bl	800cf08 <_Bfree>
 800c7a0:	2d00      	cmp	r5, #0
 800c7a2:	d0dc      	beq.n	800c75e <_dtoa_r+0x65e>
 800c7a4:	b12f      	cbz	r7, 800c7b2 <_dtoa_r+0x6b2>
 800c7a6:	42af      	cmp	r7, r5
 800c7a8:	d003      	beq.n	800c7b2 <_dtoa_r+0x6b2>
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	4658      	mov	r0, fp
 800c7ae:	f000 fbab 	bl	800cf08 <_Bfree>
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	4658      	mov	r0, fp
 800c7b6:	f000 fba7 	bl	800cf08 <_Bfree>
 800c7ba:	e7d0      	b.n	800c75e <_dtoa_r+0x65e>
 800c7bc:	9704      	str	r7, [sp, #16]
 800c7be:	4633      	mov	r3, r6
 800c7c0:	461e      	mov	r6, r3
 800c7c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7c6:	2a39      	cmp	r2, #57	@ 0x39
 800c7c8:	d107      	bne.n	800c7da <_dtoa_r+0x6da>
 800c7ca:	459a      	cmp	sl, r3
 800c7cc:	d1f8      	bne.n	800c7c0 <_dtoa_r+0x6c0>
 800c7ce:	9a04      	ldr	r2, [sp, #16]
 800c7d0:	3201      	adds	r2, #1
 800c7d2:	9204      	str	r2, [sp, #16]
 800c7d4:	2230      	movs	r2, #48	@ 0x30
 800c7d6:	f88a 2000 	strb.w	r2, [sl]
 800c7da:	781a      	ldrb	r2, [r3, #0]
 800c7dc:	3201      	adds	r2, #1
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	e7bd      	b.n	800c75e <_dtoa_r+0x65e>
 800c7e2:	4b7b      	ldr	r3, [pc, #492]	@ (800c9d0 <_dtoa_r+0x8d0>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f7f3 ff07 	bl	80005f8 <__aeabi_dmul>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	f7f4 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	f43f aebb 	beq.w	800c572 <_dtoa_r+0x472>
 800c7fc:	e6f0      	b.n	800c5e0 <_dtoa_r+0x4e0>
 800c7fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c800:	2a00      	cmp	r2, #0
 800c802:	f000 80db 	beq.w	800c9bc <_dtoa_r+0x8bc>
 800c806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c808:	2a01      	cmp	r2, #1
 800c80a:	f300 80bf 	bgt.w	800c98c <_dtoa_r+0x88c>
 800c80e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c810:	2a00      	cmp	r2, #0
 800c812:	f000 80b7 	beq.w	800c984 <_dtoa_r+0x884>
 800c816:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c81a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c81c:	4646      	mov	r6, r8
 800c81e:	9a08      	ldr	r2, [sp, #32]
 800c820:	2101      	movs	r1, #1
 800c822:	441a      	add	r2, r3
 800c824:	4658      	mov	r0, fp
 800c826:	4498      	add	r8, r3
 800c828:	9208      	str	r2, [sp, #32]
 800c82a:	f000 fc6b 	bl	800d104 <__i2b>
 800c82e:	4605      	mov	r5, r0
 800c830:	b15e      	cbz	r6, 800c84a <_dtoa_r+0x74a>
 800c832:	9b08      	ldr	r3, [sp, #32]
 800c834:	2b00      	cmp	r3, #0
 800c836:	dd08      	ble.n	800c84a <_dtoa_r+0x74a>
 800c838:	42b3      	cmp	r3, r6
 800c83a:	9a08      	ldr	r2, [sp, #32]
 800c83c:	bfa8      	it	ge
 800c83e:	4633      	movge	r3, r6
 800c840:	eba8 0803 	sub.w	r8, r8, r3
 800c844:	1af6      	subs	r6, r6, r3
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	9308      	str	r3, [sp, #32]
 800c84a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c84c:	b1f3      	cbz	r3, 800c88c <_dtoa_r+0x78c>
 800c84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 80b7 	beq.w	800c9c4 <_dtoa_r+0x8c4>
 800c856:	b18c      	cbz	r4, 800c87c <_dtoa_r+0x77c>
 800c858:	4629      	mov	r1, r5
 800c85a:	4622      	mov	r2, r4
 800c85c:	4658      	mov	r0, fp
 800c85e:	f000 fd11 	bl	800d284 <__pow5mult>
 800c862:	464a      	mov	r2, r9
 800c864:	4601      	mov	r1, r0
 800c866:	4605      	mov	r5, r0
 800c868:	4658      	mov	r0, fp
 800c86a:	f000 fc61 	bl	800d130 <__multiply>
 800c86e:	4649      	mov	r1, r9
 800c870:	9004      	str	r0, [sp, #16]
 800c872:	4658      	mov	r0, fp
 800c874:	f000 fb48 	bl	800cf08 <_Bfree>
 800c878:	9b04      	ldr	r3, [sp, #16]
 800c87a:	4699      	mov	r9, r3
 800c87c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c87e:	1b1a      	subs	r2, r3, r4
 800c880:	d004      	beq.n	800c88c <_dtoa_r+0x78c>
 800c882:	4649      	mov	r1, r9
 800c884:	4658      	mov	r0, fp
 800c886:	f000 fcfd 	bl	800d284 <__pow5mult>
 800c88a:	4681      	mov	r9, r0
 800c88c:	2101      	movs	r1, #1
 800c88e:	4658      	mov	r0, fp
 800c890:	f000 fc38 	bl	800d104 <__i2b>
 800c894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c896:	4604      	mov	r4, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 81cf 	beq.w	800cc3c <_dtoa_r+0xb3c>
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4601      	mov	r1, r0
 800c8a2:	4658      	mov	r0, fp
 800c8a4:	f000 fcee 	bl	800d284 <__pow5mult>
 800c8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	f300 8095 	bgt.w	800c9dc <_dtoa_r+0x8dc>
 800c8b2:	9b02      	ldr	r3, [sp, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f040 8087 	bne.w	800c9c8 <_dtoa_r+0x8c8>
 800c8ba:	9b03      	ldr	r3, [sp, #12]
 800c8bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f040 8089 	bne.w	800c9d8 <_dtoa_r+0x8d8>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8cc:	0d1b      	lsrs	r3, r3, #20
 800c8ce:	051b      	lsls	r3, r3, #20
 800c8d0:	b12b      	cbz	r3, 800c8de <_dtoa_r+0x7de>
 800c8d2:	9b08      	ldr	r3, [sp, #32]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	9308      	str	r3, [sp, #32]
 800c8d8:	f108 0801 	add.w	r8, r8, #1
 800c8dc:	2301      	movs	r3, #1
 800c8de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 81b0 	beq.w	800cc48 <_dtoa_r+0xb48>
 800c8e8:	6923      	ldr	r3, [r4, #16]
 800c8ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8ee:	6918      	ldr	r0, [r3, #16]
 800c8f0:	f000 fbbc 	bl	800d06c <__hi0bits>
 800c8f4:	f1c0 0020 	rsb	r0, r0, #32
 800c8f8:	9b08      	ldr	r3, [sp, #32]
 800c8fa:	4418      	add	r0, r3
 800c8fc:	f010 001f 	ands.w	r0, r0, #31
 800c900:	d077      	beq.n	800c9f2 <_dtoa_r+0x8f2>
 800c902:	f1c0 0320 	rsb	r3, r0, #32
 800c906:	2b04      	cmp	r3, #4
 800c908:	dd6b      	ble.n	800c9e2 <_dtoa_r+0x8e2>
 800c90a:	9b08      	ldr	r3, [sp, #32]
 800c90c:	f1c0 001c 	rsb	r0, r0, #28
 800c910:	4403      	add	r3, r0
 800c912:	4480      	add	r8, r0
 800c914:	4406      	add	r6, r0
 800c916:	9308      	str	r3, [sp, #32]
 800c918:	f1b8 0f00 	cmp.w	r8, #0
 800c91c:	dd05      	ble.n	800c92a <_dtoa_r+0x82a>
 800c91e:	4649      	mov	r1, r9
 800c920:	4642      	mov	r2, r8
 800c922:	4658      	mov	r0, fp
 800c924:	f000 fd08 	bl	800d338 <__lshift>
 800c928:	4681      	mov	r9, r0
 800c92a:	9b08      	ldr	r3, [sp, #32]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dd05      	ble.n	800c93c <_dtoa_r+0x83c>
 800c930:	4621      	mov	r1, r4
 800c932:	461a      	mov	r2, r3
 800c934:	4658      	mov	r0, fp
 800c936:	f000 fcff 	bl	800d338 <__lshift>
 800c93a:	4604      	mov	r4, r0
 800c93c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d059      	beq.n	800c9f6 <_dtoa_r+0x8f6>
 800c942:	4621      	mov	r1, r4
 800c944:	4648      	mov	r0, r9
 800c946:	f000 fd63 	bl	800d410 <__mcmp>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	da53      	bge.n	800c9f6 <_dtoa_r+0x8f6>
 800c94e:	1e7b      	subs	r3, r7, #1
 800c950:	9304      	str	r3, [sp, #16]
 800c952:	4649      	mov	r1, r9
 800c954:	2300      	movs	r3, #0
 800c956:	220a      	movs	r2, #10
 800c958:	4658      	mov	r0, fp
 800c95a:	f000 faf7 	bl	800cf4c <__multadd>
 800c95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c960:	4681      	mov	r9, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	f000 8172 	beq.w	800cc4c <_dtoa_r+0xb4c>
 800c968:	2300      	movs	r3, #0
 800c96a:	4629      	mov	r1, r5
 800c96c:	220a      	movs	r2, #10
 800c96e:	4658      	mov	r0, fp
 800c970:	f000 faec 	bl	800cf4c <__multadd>
 800c974:	9b00      	ldr	r3, [sp, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	4605      	mov	r5, r0
 800c97a:	dc67      	bgt.n	800ca4c <_dtoa_r+0x94c>
 800c97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97e:	2b02      	cmp	r3, #2
 800c980:	dc41      	bgt.n	800ca06 <_dtoa_r+0x906>
 800c982:	e063      	b.n	800ca4c <_dtoa_r+0x94c>
 800c984:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c986:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c98a:	e746      	b.n	800c81a <_dtoa_r+0x71a>
 800c98c:	9b07      	ldr	r3, [sp, #28]
 800c98e:	1e5c      	subs	r4, r3, #1
 800c990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c992:	42a3      	cmp	r3, r4
 800c994:	bfbf      	itttt	lt
 800c996:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c998:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c99a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c99c:	1ae3      	sublt	r3, r4, r3
 800c99e:	bfb4      	ite	lt
 800c9a0:	18d2      	addlt	r2, r2, r3
 800c9a2:	1b1c      	subge	r4, r3, r4
 800c9a4:	9b07      	ldr	r3, [sp, #28]
 800c9a6:	bfbc      	itt	lt
 800c9a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c9aa:	2400      	movlt	r4, #0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	bfb5      	itete	lt
 800c9b0:	eba8 0603 	sublt.w	r6, r8, r3
 800c9b4:	9b07      	ldrge	r3, [sp, #28]
 800c9b6:	2300      	movlt	r3, #0
 800c9b8:	4646      	movge	r6, r8
 800c9ba:	e730      	b.n	800c81e <_dtoa_r+0x71e>
 800c9bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c9be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c9c0:	4646      	mov	r6, r8
 800c9c2:	e735      	b.n	800c830 <_dtoa_r+0x730>
 800c9c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9c6:	e75c      	b.n	800c882 <_dtoa_r+0x782>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e788      	b.n	800c8de <_dtoa_r+0x7de>
 800c9cc:	3fe00000 	.word	0x3fe00000
 800c9d0:	40240000 	.word	0x40240000
 800c9d4:	40140000 	.word	0x40140000
 800c9d8:	9b02      	ldr	r3, [sp, #8]
 800c9da:	e780      	b.n	800c8de <_dtoa_r+0x7de>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9e0:	e782      	b.n	800c8e8 <_dtoa_r+0x7e8>
 800c9e2:	d099      	beq.n	800c918 <_dtoa_r+0x818>
 800c9e4:	9a08      	ldr	r2, [sp, #32]
 800c9e6:	331c      	adds	r3, #28
 800c9e8:	441a      	add	r2, r3
 800c9ea:	4498      	add	r8, r3
 800c9ec:	441e      	add	r6, r3
 800c9ee:	9208      	str	r2, [sp, #32]
 800c9f0:	e792      	b.n	800c918 <_dtoa_r+0x818>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	e7f6      	b.n	800c9e4 <_dtoa_r+0x8e4>
 800c9f6:	9b07      	ldr	r3, [sp, #28]
 800c9f8:	9704      	str	r7, [sp, #16]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	dc20      	bgt.n	800ca40 <_dtoa_r+0x940>
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	dd1e      	ble.n	800ca44 <_dtoa_r+0x944>
 800ca06:	9b00      	ldr	r3, [sp, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f47f aec0 	bne.w	800c78e <_dtoa_r+0x68e>
 800ca0e:	4621      	mov	r1, r4
 800ca10:	2205      	movs	r2, #5
 800ca12:	4658      	mov	r0, fp
 800ca14:	f000 fa9a 	bl	800cf4c <__multadd>
 800ca18:	4601      	mov	r1, r0
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	4648      	mov	r0, r9
 800ca1e:	f000 fcf7 	bl	800d410 <__mcmp>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	f77f aeb3 	ble.w	800c78e <_dtoa_r+0x68e>
 800ca28:	4656      	mov	r6, sl
 800ca2a:	2331      	movs	r3, #49	@ 0x31
 800ca2c:	f806 3b01 	strb.w	r3, [r6], #1
 800ca30:	9b04      	ldr	r3, [sp, #16]
 800ca32:	3301      	adds	r3, #1
 800ca34:	9304      	str	r3, [sp, #16]
 800ca36:	e6ae      	b.n	800c796 <_dtoa_r+0x696>
 800ca38:	9c07      	ldr	r4, [sp, #28]
 800ca3a:	9704      	str	r7, [sp, #16]
 800ca3c:	4625      	mov	r5, r4
 800ca3e:	e7f3      	b.n	800ca28 <_dtoa_r+0x928>
 800ca40:	9b07      	ldr	r3, [sp, #28]
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f000 8104 	beq.w	800cc54 <_dtoa_r+0xb54>
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	dd05      	ble.n	800ca5c <_dtoa_r+0x95c>
 800ca50:	4629      	mov	r1, r5
 800ca52:	4632      	mov	r2, r6
 800ca54:	4658      	mov	r0, fp
 800ca56:	f000 fc6f 	bl	800d338 <__lshift>
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d05a      	beq.n	800cb18 <_dtoa_r+0xa18>
 800ca62:	6869      	ldr	r1, [r5, #4]
 800ca64:	4658      	mov	r0, fp
 800ca66:	f000 fa0f 	bl	800ce88 <_Balloc>
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	b928      	cbnz	r0, 800ca7a <_dtoa_r+0x97a>
 800ca6e:	4b84      	ldr	r3, [pc, #528]	@ (800cc80 <_dtoa_r+0xb80>)
 800ca70:	4602      	mov	r2, r0
 800ca72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca76:	f7ff bb5a 	b.w	800c12e <_dtoa_r+0x2e>
 800ca7a:	692a      	ldr	r2, [r5, #16]
 800ca7c:	3202      	adds	r2, #2
 800ca7e:	0092      	lsls	r2, r2, #2
 800ca80:	f105 010c 	add.w	r1, r5, #12
 800ca84:	300c      	adds	r0, #12
 800ca86:	f7ff fa9c 	bl	800bfc2 <memcpy>
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4658      	mov	r0, fp
 800ca90:	f000 fc52 	bl	800d338 <__lshift>
 800ca94:	f10a 0301 	add.w	r3, sl, #1
 800ca98:	9307      	str	r3, [sp, #28]
 800ca9a:	9b00      	ldr	r3, [sp, #0]
 800ca9c:	4453      	add	r3, sl
 800ca9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caa0:	9b02      	ldr	r3, [sp, #8]
 800caa2:	f003 0301 	and.w	r3, r3, #1
 800caa6:	462f      	mov	r7, r5
 800caa8:	930a      	str	r3, [sp, #40]	@ 0x28
 800caaa:	4605      	mov	r5, r0
 800caac:	9b07      	ldr	r3, [sp, #28]
 800caae:	4621      	mov	r1, r4
 800cab0:	3b01      	subs	r3, #1
 800cab2:	4648      	mov	r0, r9
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	f7ff fa99 	bl	800bfec <quorem>
 800caba:	4639      	mov	r1, r7
 800cabc:	9002      	str	r0, [sp, #8]
 800cabe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cac2:	4648      	mov	r0, r9
 800cac4:	f000 fca4 	bl	800d410 <__mcmp>
 800cac8:	462a      	mov	r2, r5
 800caca:	9008      	str	r0, [sp, #32]
 800cacc:	4621      	mov	r1, r4
 800cace:	4658      	mov	r0, fp
 800cad0:	f000 fcba 	bl	800d448 <__mdiff>
 800cad4:	68c2      	ldr	r2, [r0, #12]
 800cad6:	4606      	mov	r6, r0
 800cad8:	bb02      	cbnz	r2, 800cb1c <_dtoa_r+0xa1c>
 800cada:	4601      	mov	r1, r0
 800cadc:	4648      	mov	r0, r9
 800cade:	f000 fc97 	bl	800d410 <__mcmp>
 800cae2:	4602      	mov	r2, r0
 800cae4:	4631      	mov	r1, r6
 800cae6:	4658      	mov	r0, fp
 800cae8:	920e      	str	r2, [sp, #56]	@ 0x38
 800caea:	f000 fa0d 	bl	800cf08 <_Bfree>
 800caee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800caf2:	9e07      	ldr	r6, [sp, #28]
 800caf4:	ea43 0102 	orr.w	r1, r3, r2
 800caf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cafa:	4319      	orrs	r1, r3
 800cafc:	d110      	bne.n	800cb20 <_dtoa_r+0xa20>
 800cafe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb02:	d029      	beq.n	800cb58 <_dtoa_r+0xa58>
 800cb04:	9b08      	ldr	r3, [sp, #32]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	dd02      	ble.n	800cb10 <_dtoa_r+0xa10>
 800cb0a:	9b02      	ldr	r3, [sp, #8]
 800cb0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cb10:	9b00      	ldr	r3, [sp, #0]
 800cb12:	f883 8000 	strb.w	r8, [r3]
 800cb16:	e63f      	b.n	800c798 <_dtoa_r+0x698>
 800cb18:	4628      	mov	r0, r5
 800cb1a:	e7bb      	b.n	800ca94 <_dtoa_r+0x994>
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	e7e1      	b.n	800cae4 <_dtoa_r+0x9e4>
 800cb20:	9b08      	ldr	r3, [sp, #32]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	db04      	blt.n	800cb30 <_dtoa_r+0xa30>
 800cb26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb28:	430b      	orrs	r3, r1
 800cb2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb2c:	430b      	orrs	r3, r1
 800cb2e:	d120      	bne.n	800cb72 <_dtoa_r+0xa72>
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	dded      	ble.n	800cb10 <_dtoa_r+0xa10>
 800cb34:	4649      	mov	r1, r9
 800cb36:	2201      	movs	r2, #1
 800cb38:	4658      	mov	r0, fp
 800cb3a:	f000 fbfd 	bl	800d338 <__lshift>
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4681      	mov	r9, r0
 800cb42:	f000 fc65 	bl	800d410 <__mcmp>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	dc03      	bgt.n	800cb52 <_dtoa_r+0xa52>
 800cb4a:	d1e1      	bne.n	800cb10 <_dtoa_r+0xa10>
 800cb4c:	f018 0f01 	tst.w	r8, #1
 800cb50:	d0de      	beq.n	800cb10 <_dtoa_r+0xa10>
 800cb52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb56:	d1d8      	bne.n	800cb0a <_dtoa_r+0xa0a>
 800cb58:	9a00      	ldr	r2, [sp, #0]
 800cb5a:	2339      	movs	r3, #57	@ 0x39
 800cb5c:	7013      	strb	r3, [r2, #0]
 800cb5e:	4633      	mov	r3, r6
 800cb60:	461e      	mov	r6, r3
 800cb62:	3b01      	subs	r3, #1
 800cb64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb68:	2a39      	cmp	r2, #57	@ 0x39
 800cb6a:	d052      	beq.n	800cc12 <_dtoa_r+0xb12>
 800cb6c:	3201      	adds	r2, #1
 800cb6e:	701a      	strb	r2, [r3, #0]
 800cb70:	e612      	b.n	800c798 <_dtoa_r+0x698>
 800cb72:	2a00      	cmp	r2, #0
 800cb74:	dd07      	ble.n	800cb86 <_dtoa_r+0xa86>
 800cb76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb7a:	d0ed      	beq.n	800cb58 <_dtoa_r+0xa58>
 800cb7c:	9a00      	ldr	r2, [sp, #0]
 800cb7e:	f108 0301 	add.w	r3, r8, #1
 800cb82:	7013      	strb	r3, [r2, #0]
 800cb84:	e608      	b.n	800c798 <_dtoa_r+0x698>
 800cb86:	9b07      	ldr	r3, [sp, #28]
 800cb88:	9a07      	ldr	r2, [sp, #28]
 800cb8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cb8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d028      	beq.n	800cbe6 <_dtoa_r+0xae6>
 800cb94:	4649      	mov	r1, r9
 800cb96:	2300      	movs	r3, #0
 800cb98:	220a      	movs	r2, #10
 800cb9a:	4658      	mov	r0, fp
 800cb9c:	f000 f9d6 	bl	800cf4c <__multadd>
 800cba0:	42af      	cmp	r7, r5
 800cba2:	4681      	mov	r9, r0
 800cba4:	f04f 0300 	mov.w	r3, #0
 800cba8:	f04f 020a 	mov.w	r2, #10
 800cbac:	4639      	mov	r1, r7
 800cbae:	4658      	mov	r0, fp
 800cbb0:	d107      	bne.n	800cbc2 <_dtoa_r+0xac2>
 800cbb2:	f000 f9cb 	bl	800cf4c <__multadd>
 800cbb6:	4607      	mov	r7, r0
 800cbb8:	4605      	mov	r5, r0
 800cbba:	9b07      	ldr	r3, [sp, #28]
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	9307      	str	r3, [sp, #28]
 800cbc0:	e774      	b.n	800caac <_dtoa_r+0x9ac>
 800cbc2:	f000 f9c3 	bl	800cf4c <__multadd>
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4607      	mov	r7, r0
 800cbca:	2300      	movs	r3, #0
 800cbcc:	220a      	movs	r2, #10
 800cbce:	4658      	mov	r0, fp
 800cbd0:	f000 f9bc 	bl	800cf4c <__multadd>
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	e7f0      	b.n	800cbba <_dtoa_r+0xaba>
 800cbd8:	9b00      	ldr	r3, [sp, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	bfcc      	ite	gt
 800cbde:	461e      	movgt	r6, r3
 800cbe0:	2601      	movle	r6, #1
 800cbe2:	4456      	add	r6, sl
 800cbe4:	2700      	movs	r7, #0
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	2201      	movs	r2, #1
 800cbea:	4658      	mov	r0, fp
 800cbec:	f000 fba4 	bl	800d338 <__lshift>
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4681      	mov	r9, r0
 800cbf4:	f000 fc0c 	bl	800d410 <__mcmp>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	dcb0      	bgt.n	800cb5e <_dtoa_r+0xa5e>
 800cbfc:	d102      	bne.n	800cc04 <_dtoa_r+0xb04>
 800cbfe:	f018 0f01 	tst.w	r8, #1
 800cc02:	d1ac      	bne.n	800cb5e <_dtoa_r+0xa5e>
 800cc04:	4633      	mov	r3, r6
 800cc06:	461e      	mov	r6, r3
 800cc08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc0c:	2a30      	cmp	r2, #48	@ 0x30
 800cc0e:	d0fa      	beq.n	800cc06 <_dtoa_r+0xb06>
 800cc10:	e5c2      	b.n	800c798 <_dtoa_r+0x698>
 800cc12:	459a      	cmp	sl, r3
 800cc14:	d1a4      	bne.n	800cb60 <_dtoa_r+0xa60>
 800cc16:	9b04      	ldr	r3, [sp, #16]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	9304      	str	r3, [sp, #16]
 800cc1c:	2331      	movs	r3, #49	@ 0x31
 800cc1e:	f88a 3000 	strb.w	r3, [sl]
 800cc22:	e5b9      	b.n	800c798 <_dtoa_r+0x698>
 800cc24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cc84 <_dtoa_r+0xb84>
 800cc2a:	b11b      	cbz	r3, 800cc34 <_dtoa_r+0xb34>
 800cc2c:	f10a 0308 	add.w	r3, sl, #8
 800cc30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	4650      	mov	r0, sl
 800cc36:	b019      	add	sp, #100	@ 0x64
 800cc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	f77f ae37 	ble.w	800c8b2 <_dtoa_r+0x7b2>
 800cc44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc46:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc48:	2001      	movs	r0, #1
 800cc4a:	e655      	b.n	800c8f8 <_dtoa_r+0x7f8>
 800cc4c:	9b00      	ldr	r3, [sp, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f77f aed6 	ble.w	800ca00 <_dtoa_r+0x900>
 800cc54:	4656      	mov	r6, sl
 800cc56:	4621      	mov	r1, r4
 800cc58:	4648      	mov	r0, r9
 800cc5a:	f7ff f9c7 	bl	800bfec <quorem>
 800cc5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc62:	f806 8b01 	strb.w	r8, [r6], #1
 800cc66:	9b00      	ldr	r3, [sp, #0]
 800cc68:	eba6 020a 	sub.w	r2, r6, sl
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	ddb3      	ble.n	800cbd8 <_dtoa_r+0xad8>
 800cc70:	4649      	mov	r1, r9
 800cc72:	2300      	movs	r3, #0
 800cc74:	220a      	movs	r2, #10
 800cc76:	4658      	mov	r0, fp
 800cc78:	f000 f968 	bl	800cf4c <__multadd>
 800cc7c:	4681      	mov	r9, r0
 800cc7e:	e7ea      	b.n	800cc56 <_dtoa_r+0xb56>
 800cc80:	0800f7f5 	.word	0x0800f7f5
 800cc84:	0800f779 	.word	0x0800f779

0800cc88 <_free_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	2900      	cmp	r1, #0
 800cc8e:	d041      	beq.n	800cd14 <_free_r+0x8c>
 800cc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc94:	1f0c      	subs	r4, r1, #4
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	bfb8      	it	lt
 800cc9a:	18e4      	addlt	r4, r4, r3
 800cc9c:	f000 f8e8 	bl	800ce70 <__malloc_lock>
 800cca0:	4a1d      	ldr	r2, [pc, #116]	@ (800cd18 <_free_r+0x90>)
 800cca2:	6813      	ldr	r3, [r2, #0]
 800cca4:	b933      	cbnz	r3, 800ccb4 <_free_r+0x2c>
 800cca6:	6063      	str	r3, [r4, #4]
 800cca8:	6014      	str	r4, [r2, #0]
 800ccaa:	4628      	mov	r0, r5
 800ccac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccb0:	f000 b8e4 	b.w	800ce7c <__malloc_unlock>
 800ccb4:	42a3      	cmp	r3, r4
 800ccb6:	d908      	bls.n	800ccca <_free_r+0x42>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	1821      	adds	r1, r4, r0
 800ccbc:	428b      	cmp	r3, r1
 800ccbe:	bf01      	itttt	eq
 800ccc0:	6819      	ldreq	r1, [r3, #0]
 800ccc2:	685b      	ldreq	r3, [r3, #4]
 800ccc4:	1809      	addeq	r1, r1, r0
 800ccc6:	6021      	streq	r1, [r4, #0]
 800ccc8:	e7ed      	b.n	800cca6 <_free_r+0x1e>
 800ccca:	461a      	mov	r2, r3
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	b10b      	cbz	r3, 800ccd4 <_free_r+0x4c>
 800ccd0:	42a3      	cmp	r3, r4
 800ccd2:	d9fa      	bls.n	800ccca <_free_r+0x42>
 800ccd4:	6811      	ldr	r1, [r2, #0]
 800ccd6:	1850      	adds	r0, r2, r1
 800ccd8:	42a0      	cmp	r0, r4
 800ccda:	d10b      	bne.n	800ccf4 <_free_r+0x6c>
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	4401      	add	r1, r0
 800cce0:	1850      	adds	r0, r2, r1
 800cce2:	4283      	cmp	r3, r0
 800cce4:	6011      	str	r1, [r2, #0]
 800cce6:	d1e0      	bne.n	800ccaa <_free_r+0x22>
 800cce8:	6818      	ldr	r0, [r3, #0]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	6053      	str	r3, [r2, #4]
 800ccee:	4408      	add	r0, r1
 800ccf0:	6010      	str	r0, [r2, #0]
 800ccf2:	e7da      	b.n	800ccaa <_free_r+0x22>
 800ccf4:	d902      	bls.n	800ccfc <_free_r+0x74>
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	e7d6      	b.n	800ccaa <_free_r+0x22>
 800ccfc:	6820      	ldr	r0, [r4, #0]
 800ccfe:	1821      	adds	r1, r4, r0
 800cd00:	428b      	cmp	r3, r1
 800cd02:	bf04      	itt	eq
 800cd04:	6819      	ldreq	r1, [r3, #0]
 800cd06:	685b      	ldreq	r3, [r3, #4]
 800cd08:	6063      	str	r3, [r4, #4]
 800cd0a:	bf04      	itt	eq
 800cd0c:	1809      	addeq	r1, r1, r0
 800cd0e:	6021      	streq	r1, [r4, #0]
 800cd10:	6054      	str	r4, [r2, #4]
 800cd12:	e7ca      	b.n	800ccaa <_free_r+0x22>
 800cd14:	bd38      	pop	{r3, r4, r5, pc}
 800cd16:	bf00      	nop
 800cd18:	200017d4 	.word	0x200017d4

0800cd1c <malloc>:
 800cd1c:	4b02      	ldr	r3, [pc, #8]	@ (800cd28 <malloc+0xc>)
 800cd1e:	4601      	mov	r1, r0
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	f000 b825 	b.w	800cd70 <_malloc_r>
 800cd26:	bf00      	nop
 800cd28:	20000188 	.word	0x20000188

0800cd2c <sbrk_aligned>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	4e0f      	ldr	r6, [pc, #60]	@ (800cd6c <sbrk_aligned+0x40>)
 800cd30:	460c      	mov	r4, r1
 800cd32:	6831      	ldr	r1, [r6, #0]
 800cd34:	4605      	mov	r5, r0
 800cd36:	b911      	cbnz	r1, 800cd3e <sbrk_aligned+0x12>
 800cd38:	f001 fe0c 	bl	800e954 <_sbrk_r>
 800cd3c:	6030      	str	r0, [r6, #0]
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4628      	mov	r0, r5
 800cd42:	f001 fe07 	bl	800e954 <_sbrk_r>
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	d103      	bne.n	800cd52 <sbrk_aligned+0x26>
 800cd4a:	f04f 34ff 	mov.w	r4, #4294967295
 800cd4e:	4620      	mov	r0, r4
 800cd50:	bd70      	pop	{r4, r5, r6, pc}
 800cd52:	1cc4      	adds	r4, r0, #3
 800cd54:	f024 0403 	bic.w	r4, r4, #3
 800cd58:	42a0      	cmp	r0, r4
 800cd5a:	d0f8      	beq.n	800cd4e <sbrk_aligned+0x22>
 800cd5c:	1a21      	subs	r1, r4, r0
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f001 fdf8 	bl	800e954 <_sbrk_r>
 800cd64:	3001      	adds	r0, #1
 800cd66:	d1f2      	bne.n	800cd4e <sbrk_aligned+0x22>
 800cd68:	e7ef      	b.n	800cd4a <sbrk_aligned+0x1e>
 800cd6a:	bf00      	nop
 800cd6c:	200017d0 	.word	0x200017d0

0800cd70 <_malloc_r>:
 800cd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd74:	1ccd      	adds	r5, r1, #3
 800cd76:	f025 0503 	bic.w	r5, r5, #3
 800cd7a:	3508      	adds	r5, #8
 800cd7c:	2d0c      	cmp	r5, #12
 800cd7e:	bf38      	it	cc
 800cd80:	250c      	movcc	r5, #12
 800cd82:	2d00      	cmp	r5, #0
 800cd84:	4606      	mov	r6, r0
 800cd86:	db01      	blt.n	800cd8c <_malloc_r+0x1c>
 800cd88:	42a9      	cmp	r1, r5
 800cd8a:	d904      	bls.n	800cd96 <_malloc_r+0x26>
 800cd8c:	230c      	movs	r3, #12
 800cd8e:	6033      	str	r3, [r6, #0]
 800cd90:	2000      	movs	r0, #0
 800cd92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce6c <_malloc_r+0xfc>
 800cd9a:	f000 f869 	bl	800ce70 <__malloc_lock>
 800cd9e:	f8d8 3000 	ldr.w	r3, [r8]
 800cda2:	461c      	mov	r4, r3
 800cda4:	bb44      	cbnz	r4, 800cdf8 <_malloc_r+0x88>
 800cda6:	4629      	mov	r1, r5
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f7ff ffbf 	bl	800cd2c <sbrk_aligned>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	d158      	bne.n	800ce66 <_malloc_r+0xf6>
 800cdb4:	f8d8 4000 	ldr.w	r4, [r8]
 800cdb8:	4627      	mov	r7, r4
 800cdba:	2f00      	cmp	r7, #0
 800cdbc:	d143      	bne.n	800ce46 <_malloc_r+0xd6>
 800cdbe:	2c00      	cmp	r4, #0
 800cdc0:	d04b      	beq.n	800ce5a <_malloc_r+0xea>
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	eb04 0903 	add.w	r9, r4, r3
 800cdcc:	f001 fdc2 	bl	800e954 <_sbrk_r>
 800cdd0:	4581      	cmp	r9, r0
 800cdd2:	d142      	bne.n	800ce5a <_malloc_r+0xea>
 800cdd4:	6821      	ldr	r1, [r4, #0]
 800cdd6:	1a6d      	subs	r5, r5, r1
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7ff ffa6 	bl	800cd2c <sbrk_aligned>
 800cde0:	3001      	adds	r0, #1
 800cde2:	d03a      	beq.n	800ce5a <_malloc_r+0xea>
 800cde4:	6823      	ldr	r3, [r4, #0]
 800cde6:	442b      	add	r3, r5
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	f8d8 3000 	ldr.w	r3, [r8]
 800cdee:	685a      	ldr	r2, [r3, #4]
 800cdf0:	bb62      	cbnz	r2, 800ce4c <_malloc_r+0xdc>
 800cdf2:	f8c8 7000 	str.w	r7, [r8]
 800cdf6:	e00f      	b.n	800ce18 <_malloc_r+0xa8>
 800cdf8:	6822      	ldr	r2, [r4, #0]
 800cdfa:	1b52      	subs	r2, r2, r5
 800cdfc:	d420      	bmi.n	800ce40 <_malloc_r+0xd0>
 800cdfe:	2a0b      	cmp	r2, #11
 800ce00:	d917      	bls.n	800ce32 <_malloc_r+0xc2>
 800ce02:	1961      	adds	r1, r4, r5
 800ce04:	42a3      	cmp	r3, r4
 800ce06:	6025      	str	r5, [r4, #0]
 800ce08:	bf18      	it	ne
 800ce0a:	6059      	strne	r1, [r3, #4]
 800ce0c:	6863      	ldr	r3, [r4, #4]
 800ce0e:	bf08      	it	eq
 800ce10:	f8c8 1000 	streq.w	r1, [r8]
 800ce14:	5162      	str	r2, [r4, r5]
 800ce16:	604b      	str	r3, [r1, #4]
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 f82f 	bl	800ce7c <__malloc_unlock>
 800ce1e:	f104 000b 	add.w	r0, r4, #11
 800ce22:	1d23      	adds	r3, r4, #4
 800ce24:	f020 0007 	bic.w	r0, r0, #7
 800ce28:	1ac2      	subs	r2, r0, r3
 800ce2a:	bf1c      	itt	ne
 800ce2c:	1a1b      	subne	r3, r3, r0
 800ce2e:	50a3      	strne	r3, [r4, r2]
 800ce30:	e7af      	b.n	800cd92 <_malloc_r+0x22>
 800ce32:	6862      	ldr	r2, [r4, #4]
 800ce34:	42a3      	cmp	r3, r4
 800ce36:	bf0c      	ite	eq
 800ce38:	f8c8 2000 	streq.w	r2, [r8]
 800ce3c:	605a      	strne	r2, [r3, #4]
 800ce3e:	e7eb      	b.n	800ce18 <_malloc_r+0xa8>
 800ce40:	4623      	mov	r3, r4
 800ce42:	6864      	ldr	r4, [r4, #4]
 800ce44:	e7ae      	b.n	800cda4 <_malloc_r+0x34>
 800ce46:	463c      	mov	r4, r7
 800ce48:	687f      	ldr	r7, [r7, #4]
 800ce4a:	e7b6      	b.n	800cdba <_malloc_r+0x4a>
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	42a3      	cmp	r3, r4
 800ce52:	d1fb      	bne.n	800ce4c <_malloc_r+0xdc>
 800ce54:	2300      	movs	r3, #0
 800ce56:	6053      	str	r3, [r2, #4]
 800ce58:	e7de      	b.n	800ce18 <_malloc_r+0xa8>
 800ce5a:	230c      	movs	r3, #12
 800ce5c:	6033      	str	r3, [r6, #0]
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f000 f80c 	bl	800ce7c <__malloc_unlock>
 800ce64:	e794      	b.n	800cd90 <_malloc_r+0x20>
 800ce66:	6005      	str	r5, [r0, #0]
 800ce68:	e7d6      	b.n	800ce18 <_malloc_r+0xa8>
 800ce6a:	bf00      	nop
 800ce6c:	200017d4 	.word	0x200017d4

0800ce70 <__malloc_lock>:
 800ce70:	4801      	ldr	r0, [pc, #4]	@ (800ce78 <__malloc_lock+0x8>)
 800ce72:	f7ff b8a4 	b.w	800bfbe <__retarget_lock_acquire_recursive>
 800ce76:	bf00      	nop
 800ce78:	200017cc 	.word	0x200017cc

0800ce7c <__malloc_unlock>:
 800ce7c:	4801      	ldr	r0, [pc, #4]	@ (800ce84 <__malloc_unlock+0x8>)
 800ce7e:	f7ff b89f 	b.w	800bfc0 <__retarget_lock_release_recursive>
 800ce82:	bf00      	nop
 800ce84:	200017cc 	.word	0x200017cc

0800ce88 <_Balloc>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	69c6      	ldr	r6, [r0, #28]
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	460d      	mov	r5, r1
 800ce90:	b976      	cbnz	r6, 800ceb0 <_Balloc+0x28>
 800ce92:	2010      	movs	r0, #16
 800ce94:	f7ff ff42 	bl	800cd1c <malloc>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	61e0      	str	r0, [r4, #28]
 800ce9c:	b920      	cbnz	r0, 800cea8 <_Balloc+0x20>
 800ce9e:	4b18      	ldr	r3, [pc, #96]	@ (800cf00 <_Balloc+0x78>)
 800cea0:	4818      	ldr	r0, [pc, #96]	@ (800cf04 <_Balloc+0x7c>)
 800cea2:	216b      	movs	r1, #107	@ 0x6b
 800cea4:	f001 fd70 	bl	800e988 <__assert_func>
 800cea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ceac:	6006      	str	r6, [r0, #0]
 800ceae:	60c6      	str	r6, [r0, #12]
 800ceb0:	69e6      	ldr	r6, [r4, #28]
 800ceb2:	68f3      	ldr	r3, [r6, #12]
 800ceb4:	b183      	cbz	r3, 800ced8 <_Balloc+0x50>
 800ceb6:	69e3      	ldr	r3, [r4, #28]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cebe:	b9b8      	cbnz	r0, 800cef0 <_Balloc+0x68>
 800cec0:	2101      	movs	r1, #1
 800cec2:	fa01 f605 	lsl.w	r6, r1, r5
 800cec6:	1d72      	adds	r2, r6, #5
 800cec8:	0092      	lsls	r2, r2, #2
 800ceca:	4620      	mov	r0, r4
 800cecc:	f001 fd7a 	bl	800e9c4 <_calloc_r>
 800ced0:	b160      	cbz	r0, 800ceec <_Balloc+0x64>
 800ced2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ced6:	e00e      	b.n	800cef6 <_Balloc+0x6e>
 800ced8:	2221      	movs	r2, #33	@ 0x21
 800ceda:	2104      	movs	r1, #4
 800cedc:	4620      	mov	r0, r4
 800cede:	f001 fd71 	bl	800e9c4 <_calloc_r>
 800cee2:	69e3      	ldr	r3, [r4, #28]
 800cee4:	60f0      	str	r0, [r6, #12]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1e4      	bne.n	800ceb6 <_Balloc+0x2e>
 800ceec:	2000      	movs	r0, #0
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	6802      	ldr	r2, [r0, #0]
 800cef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cef6:	2300      	movs	r3, #0
 800cef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cefc:	e7f7      	b.n	800ceee <_Balloc+0x66>
 800cefe:	bf00      	nop
 800cf00:	0800f786 	.word	0x0800f786
 800cf04:	0800f806 	.word	0x0800f806

0800cf08 <_Bfree>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	69c6      	ldr	r6, [r0, #28]
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	460c      	mov	r4, r1
 800cf10:	b976      	cbnz	r6, 800cf30 <_Bfree+0x28>
 800cf12:	2010      	movs	r0, #16
 800cf14:	f7ff ff02 	bl	800cd1c <malloc>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	61e8      	str	r0, [r5, #28]
 800cf1c:	b920      	cbnz	r0, 800cf28 <_Bfree+0x20>
 800cf1e:	4b09      	ldr	r3, [pc, #36]	@ (800cf44 <_Bfree+0x3c>)
 800cf20:	4809      	ldr	r0, [pc, #36]	@ (800cf48 <_Bfree+0x40>)
 800cf22:	218f      	movs	r1, #143	@ 0x8f
 800cf24:	f001 fd30 	bl	800e988 <__assert_func>
 800cf28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf2c:	6006      	str	r6, [r0, #0]
 800cf2e:	60c6      	str	r6, [r0, #12]
 800cf30:	b13c      	cbz	r4, 800cf42 <_Bfree+0x3a>
 800cf32:	69eb      	ldr	r3, [r5, #28]
 800cf34:	6862      	ldr	r2, [r4, #4]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf3c:	6021      	str	r1, [r4, #0]
 800cf3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	0800f786 	.word	0x0800f786
 800cf48:	0800f806 	.word	0x0800f806

0800cf4c <__multadd>:
 800cf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf50:	690d      	ldr	r5, [r1, #16]
 800cf52:	4607      	mov	r7, r0
 800cf54:	460c      	mov	r4, r1
 800cf56:	461e      	mov	r6, r3
 800cf58:	f101 0c14 	add.w	ip, r1, #20
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	f8dc 3000 	ldr.w	r3, [ip]
 800cf62:	b299      	uxth	r1, r3
 800cf64:	fb02 6101 	mla	r1, r2, r1, r6
 800cf68:	0c1e      	lsrs	r6, r3, #16
 800cf6a:	0c0b      	lsrs	r3, r1, #16
 800cf6c:	fb02 3306 	mla	r3, r2, r6, r3
 800cf70:	b289      	uxth	r1, r1
 800cf72:	3001      	adds	r0, #1
 800cf74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf78:	4285      	cmp	r5, r0
 800cf7a:	f84c 1b04 	str.w	r1, [ip], #4
 800cf7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf82:	dcec      	bgt.n	800cf5e <__multadd+0x12>
 800cf84:	b30e      	cbz	r6, 800cfca <__multadd+0x7e>
 800cf86:	68a3      	ldr	r3, [r4, #8]
 800cf88:	42ab      	cmp	r3, r5
 800cf8a:	dc19      	bgt.n	800cfc0 <__multadd+0x74>
 800cf8c:	6861      	ldr	r1, [r4, #4]
 800cf8e:	4638      	mov	r0, r7
 800cf90:	3101      	adds	r1, #1
 800cf92:	f7ff ff79 	bl	800ce88 <_Balloc>
 800cf96:	4680      	mov	r8, r0
 800cf98:	b928      	cbnz	r0, 800cfa6 <__multadd+0x5a>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd0 <__multadd+0x84>)
 800cf9e:	480d      	ldr	r0, [pc, #52]	@ (800cfd4 <__multadd+0x88>)
 800cfa0:	21ba      	movs	r1, #186	@ 0xba
 800cfa2:	f001 fcf1 	bl	800e988 <__assert_func>
 800cfa6:	6922      	ldr	r2, [r4, #16]
 800cfa8:	3202      	adds	r2, #2
 800cfaa:	f104 010c 	add.w	r1, r4, #12
 800cfae:	0092      	lsls	r2, r2, #2
 800cfb0:	300c      	adds	r0, #12
 800cfb2:	f7ff f806 	bl	800bfc2 <memcpy>
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7ff ffa5 	bl	800cf08 <_Bfree>
 800cfbe:	4644      	mov	r4, r8
 800cfc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	615e      	str	r6, [r3, #20]
 800cfc8:	6125      	str	r5, [r4, #16]
 800cfca:	4620      	mov	r0, r4
 800cfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd0:	0800f7f5 	.word	0x0800f7f5
 800cfd4:	0800f806 	.word	0x0800f806

0800cfd8 <__s2b>:
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	460c      	mov	r4, r1
 800cfde:	4615      	mov	r5, r2
 800cfe0:	461f      	mov	r7, r3
 800cfe2:	2209      	movs	r2, #9
 800cfe4:	3308      	adds	r3, #8
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfec:	2100      	movs	r1, #0
 800cfee:	2201      	movs	r2, #1
 800cff0:	429a      	cmp	r2, r3
 800cff2:	db09      	blt.n	800d008 <__s2b+0x30>
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7ff ff47 	bl	800ce88 <_Balloc>
 800cffa:	b940      	cbnz	r0, 800d00e <__s2b+0x36>
 800cffc:	4602      	mov	r2, r0
 800cffe:	4b19      	ldr	r3, [pc, #100]	@ (800d064 <__s2b+0x8c>)
 800d000:	4819      	ldr	r0, [pc, #100]	@ (800d068 <__s2b+0x90>)
 800d002:	21d3      	movs	r1, #211	@ 0xd3
 800d004:	f001 fcc0 	bl	800e988 <__assert_func>
 800d008:	0052      	lsls	r2, r2, #1
 800d00a:	3101      	adds	r1, #1
 800d00c:	e7f0      	b.n	800cff0 <__s2b+0x18>
 800d00e:	9b08      	ldr	r3, [sp, #32]
 800d010:	6143      	str	r3, [r0, #20]
 800d012:	2d09      	cmp	r5, #9
 800d014:	f04f 0301 	mov.w	r3, #1
 800d018:	6103      	str	r3, [r0, #16]
 800d01a:	dd16      	ble.n	800d04a <__s2b+0x72>
 800d01c:	f104 0909 	add.w	r9, r4, #9
 800d020:	46c8      	mov	r8, r9
 800d022:	442c      	add	r4, r5
 800d024:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d028:	4601      	mov	r1, r0
 800d02a:	3b30      	subs	r3, #48	@ 0x30
 800d02c:	220a      	movs	r2, #10
 800d02e:	4630      	mov	r0, r6
 800d030:	f7ff ff8c 	bl	800cf4c <__multadd>
 800d034:	45a0      	cmp	r8, r4
 800d036:	d1f5      	bne.n	800d024 <__s2b+0x4c>
 800d038:	f1a5 0408 	sub.w	r4, r5, #8
 800d03c:	444c      	add	r4, r9
 800d03e:	1b2d      	subs	r5, r5, r4
 800d040:	1963      	adds	r3, r4, r5
 800d042:	42bb      	cmp	r3, r7
 800d044:	db04      	blt.n	800d050 <__s2b+0x78>
 800d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04a:	340a      	adds	r4, #10
 800d04c:	2509      	movs	r5, #9
 800d04e:	e7f6      	b.n	800d03e <__s2b+0x66>
 800d050:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d054:	4601      	mov	r1, r0
 800d056:	3b30      	subs	r3, #48	@ 0x30
 800d058:	220a      	movs	r2, #10
 800d05a:	4630      	mov	r0, r6
 800d05c:	f7ff ff76 	bl	800cf4c <__multadd>
 800d060:	e7ee      	b.n	800d040 <__s2b+0x68>
 800d062:	bf00      	nop
 800d064:	0800f7f5 	.word	0x0800f7f5
 800d068:	0800f806 	.word	0x0800f806

0800d06c <__hi0bits>:
 800d06c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d070:	4603      	mov	r3, r0
 800d072:	bf36      	itet	cc
 800d074:	0403      	lslcc	r3, r0, #16
 800d076:	2000      	movcs	r0, #0
 800d078:	2010      	movcc	r0, #16
 800d07a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d07e:	bf3c      	itt	cc
 800d080:	021b      	lslcc	r3, r3, #8
 800d082:	3008      	addcc	r0, #8
 800d084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d088:	bf3c      	itt	cc
 800d08a:	011b      	lslcc	r3, r3, #4
 800d08c:	3004      	addcc	r0, #4
 800d08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d092:	bf3c      	itt	cc
 800d094:	009b      	lslcc	r3, r3, #2
 800d096:	3002      	addcc	r0, #2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	db05      	blt.n	800d0a8 <__hi0bits+0x3c>
 800d09c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d0a0:	f100 0001 	add.w	r0, r0, #1
 800d0a4:	bf08      	it	eq
 800d0a6:	2020      	moveq	r0, #32
 800d0a8:	4770      	bx	lr

0800d0aa <__lo0bits>:
 800d0aa:	6803      	ldr	r3, [r0, #0]
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	f013 0007 	ands.w	r0, r3, #7
 800d0b2:	d00b      	beq.n	800d0cc <__lo0bits+0x22>
 800d0b4:	07d9      	lsls	r1, r3, #31
 800d0b6:	d421      	bmi.n	800d0fc <__lo0bits+0x52>
 800d0b8:	0798      	lsls	r0, r3, #30
 800d0ba:	bf49      	itett	mi
 800d0bc:	085b      	lsrmi	r3, r3, #1
 800d0be:	089b      	lsrpl	r3, r3, #2
 800d0c0:	2001      	movmi	r0, #1
 800d0c2:	6013      	strmi	r3, [r2, #0]
 800d0c4:	bf5c      	itt	pl
 800d0c6:	6013      	strpl	r3, [r2, #0]
 800d0c8:	2002      	movpl	r0, #2
 800d0ca:	4770      	bx	lr
 800d0cc:	b299      	uxth	r1, r3
 800d0ce:	b909      	cbnz	r1, 800d0d4 <__lo0bits+0x2a>
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	2010      	movs	r0, #16
 800d0d4:	b2d9      	uxtb	r1, r3
 800d0d6:	b909      	cbnz	r1, 800d0dc <__lo0bits+0x32>
 800d0d8:	3008      	adds	r0, #8
 800d0da:	0a1b      	lsrs	r3, r3, #8
 800d0dc:	0719      	lsls	r1, r3, #28
 800d0de:	bf04      	itt	eq
 800d0e0:	091b      	lsreq	r3, r3, #4
 800d0e2:	3004      	addeq	r0, #4
 800d0e4:	0799      	lsls	r1, r3, #30
 800d0e6:	bf04      	itt	eq
 800d0e8:	089b      	lsreq	r3, r3, #2
 800d0ea:	3002      	addeq	r0, #2
 800d0ec:	07d9      	lsls	r1, r3, #31
 800d0ee:	d403      	bmi.n	800d0f8 <__lo0bits+0x4e>
 800d0f0:	085b      	lsrs	r3, r3, #1
 800d0f2:	f100 0001 	add.w	r0, r0, #1
 800d0f6:	d003      	beq.n	800d100 <__lo0bits+0x56>
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	4770      	bx	lr
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	4770      	bx	lr
 800d100:	2020      	movs	r0, #32
 800d102:	4770      	bx	lr

0800d104 <__i2b>:
 800d104:	b510      	push	{r4, lr}
 800d106:	460c      	mov	r4, r1
 800d108:	2101      	movs	r1, #1
 800d10a:	f7ff febd 	bl	800ce88 <_Balloc>
 800d10e:	4602      	mov	r2, r0
 800d110:	b928      	cbnz	r0, 800d11e <__i2b+0x1a>
 800d112:	4b05      	ldr	r3, [pc, #20]	@ (800d128 <__i2b+0x24>)
 800d114:	4805      	ldr	r0, [pc, #20]	@ (800d12c <__i2b+0x28>)
 800d116:	f240 1145 	movw	r1, #325	@ 0x145
 800d11a:	f001 fc35 	bl	800e988 <__assert_func>
 800d11e:	2301      	movs	r3, #1
 800d120:	6144      	str	r4, [r0, #20]
 800d122:	6103      	str	r3, [r0, #16]
 800d124:	bd10      	pop	{r4, pc}
 800d126:	bf00      	nop
 800d128:	0800f7f5 	.word	0x0800f7f5
 800d12c:	0800f806 	.word	0x0800f806

0800d130 <__multiply>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	4614      	mov	r4, r2
 800d136:	690a      	ldr	r2, [r1, #16]
 800d138:	6923      	ldr	r3, [r4, #16]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	bfa8      	it	ge
 800d13e:	4623      	movge	r3, r4
 800d140:	460f      	mov	r7, r1
 800d142:	bfa4      	itt	ge
 800d144:	460c      	movge	r4, r1
 800d146:	461f      	movge	r7, r3
 800d148:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d14c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d150:	68a3      	ldr	r3, [r4, #8]
 800d152:	6861      	ldr	r1, [r4, #4]
 800d154:	eb0a 0609 	add.w	r6, sl, r9
 800d158:	42b3      	cmp	r3, r6
 800d15a:	b085      	sub	sp, #20
 800d15c:	bfb8      	it	lt
 800d15e:	3101      	addlt	r1, #1
 800d160:	f7ff fe92 	bl	800ce88 <_Balloc>
 800d164:	b930      	cbnz	r0, 800d174 <__multiply+0x44>
 800d166:	4602      	mov	r2, r0
 800d168:	4b44      	ldr	r3, [pc, #272]	@ (800d27c <__multiply+0x14c>)
 800d16a:	4845      	ldr	r0, [pc, #276]	@ (800d280 <__multiply+0x150>)
 800d16c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d170:	f001 fc0a 	bl	800e988 <__assert_func>
 800d174:	f100 0514 	add.w	r5, r0, #20
 800d178:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d17c:	462b      	mov	r3, r5
 800d17e:	2200      	movs	r2, #0
 800d180:	4543      	cmp	r3, r8
 800d182:	d321      	bcc.n	800d1c8 <__multiply+0x98>
 800d184:	f107 0114 	add.w	r1, r7, #20
 800d188:	f104 0214 	add.w	r2, r4, #20
 800d18c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d190:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d194:	9302      	str	r3, [sp, #8]
 800d196:	1b13      	subs	r3, r2, r4
 800d198:	3b15      	subs	r3, #21
 800d19a:	f023 0303 	bic.w	r3, r3, #3
 800d19e:	3304      	adds	r3, #4
 800d1a0:	f104 0715 	add.w	r7, r4, #21
 800d1a4:	42ba      	cmp	r2, r7
 800d1a6:	bf38      	it	cc
 800d1a8:	2304      	movcc	r3, #4
 800d1aa:	9301      	str	r3, [sp, #4]
 800d1ac:	9b02      	ldr	r3, [sp, #8]
 800d1ae:	9103      	str	r1, [sp, #12]
 800d1b0:	428b      	cmp	r3, r1
 800d1b2:	d80c      	bhi.n	800d1ce <__multiply+0x9e>
 800d1b4:	2e00      	cmp	r6, #0
 800d1b6:	dd03      	ble.n	800d1c0 <__multiply+0x90>
 800d1b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d05b      	beq.n	800d278 <__multiply+0x148>
 800d1c0:	6106      	str	r6, [r0, #16]
 800d1c2:	b005      	add	sp, #20
 800d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c8:	f843 2b04 	str.w	r2, [r3], #4
 800d1cc:	e7d8      	b.n	800d180 <__multiply+0x50>
 800d1ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1d2:	f1ba 0f00 	cmp.w	sl, #0
 800d1d6:	d024      	beq.n	800d222 <__multiply+0xf2>
 800d1d8:	f104 0e14 	add.w	lr, r4, #20
 800d1dc:	46a9      	mov	r9, r5
 800d1de:	f04f 0c00 	mov.w	ip, #0
 800d1e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1e6:	f8d9 3000 	ldr.w	r3, [r9]
 800d1ea:	fa1f fb87 	uxth.w	fp, r7
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d1f8:	f8d9 7000 	ldr.w	r7, [r9]
 800d1fc:	4463      	add	r3, ip
 800d1fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d202:	fb0a c70b 	mla	r7, sl, fp, ip
 800d206:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d210:	4572      	cmp	r2, lr
 800d212:	f849 3b04 	str.w	r3, [r9], #4
 800d216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d21a:	d8e2      	bhi.n	800d1e2 <__multiply+0xb2>
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	f845 c003 	str.w	ip, [r5, r3]
 800d222:	9b03      	ldr	r3, [sp, #12]
 800d224:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d228:	3104      	adds	r1, #4
 800d22a:	f1b9 0f00 	cmp.w	r9, #0
 800d22e:	d021      	beq.n	800d274 <__multiply+0x144>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	f104 0c14 	add.w	ip, r4, #20
 800d236:	46ae      	mov	lr, r5
 800d238:	f04f 0a00 	mov.w	sl, #0
 800d23c:	f8bc b000 	ldrh.w	fp, [ip]
 800d240:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d244:	fb09 770b 	mla	r7, r9, fp, r7
 800d248:	4457      	add	r7, sl
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d250:	f84e 3b04 	str.w	r3, [lr], #4
 800d254:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d25c:	f8be 3000 	ldrh.w	r3, [lr]
 800d260:	fb09 330a 	mla	r3, r9, sl, r3
 800d264:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d268:	4562      	cmp	r2, ip
 800d26a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d26e:	d8e5      	bhi.n	800d23c <__multiply+0x10c>
 800d270:	9f01      	ldr	r7, [sp, #4]
 800d272:	51eb      	str	r3, [r5, r7]
 800d274:	3504      	adds	r5, #4
 800d276:	e799      	b.n	800d1ac <__multiply+0x7c>
 800d278:	3e01      	subs	r6, #1
 800d27a:	e79b      	b.n	800d1b4 <__multiply+0x84>
 800d27c:	0800f7f5 	.word	0x0800f7f5
 800d280:	0800f806 	.word	0x0800f806

0800d284 <__pow5mult>:
 800d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d288:	4615      	mov	r5, r2
 800d28a:	f012 0203 	ands.w	r2, r2, #3
 800d28e:	4607      	mov	r7, r0
 800d290:	460e      	mov	r6, r1
 800d292:	d007      	beq.n	800d2a4 <__pow5mult+0x20>
 800d294:	4c25      	ldr	r4, [pc, #148]	@ (800d32c <__pow5mult+0xa8>)
 800d296:	3a01      	subs	r2, #1
 800d298:	2300      	movs	r3, #0
 800d29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d29e:	f7ff fe55 	bl	800cf4c <__multadd>
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	10ad      	asrs	r5, r5, #2
 800d2a6:	d03d      	beq.n	800d324 <__pow5mult+0xa0>
 800d2a8:	69fc      	ldr	r4, [r7, #28]
 800d2aa:	b97c      	cbnz	r4, 800d2cc <__pow5mult+0x48>
 800d2ac:	2010      	movs	r0, #16
 800d2ae:	f7ff fd35 	bl	800cd1c <malloc>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	61f8      	str	r0, [r7, #28]
 800d2b6:	b928      	cbnz	r0, 800d2c4 <__pow5mult+0x40>
 800d2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d330 <__pow5mult+0xac>)
 800d2ba:	481e      	ldr	r0, [pc, #120]	@ (800d334 <__pow5mult+0xb0>)
 800d2bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2c0:	f001 fb62 	bl	800e988 <__assert_func>
 800d2c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2c8:	6004      	str	r4, [r0, #0]
 800d2ca:	60c4      	str	r4, [r0, #12]
 800d2cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2d4:	b94c      	cbnz	r4, 800d2ea <__pow5mult+0x66>
 800d2d6:	f240 2171 	movw	r1, #625	@ 0x271
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f7ff ff12 	bl	800d104 <__i2b>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	f04f 0900 	mov.w	r9, #0
 800d2ee:	07eb      	lsls	r3, r5, #31
 800d2f0:	d50a      	bpl.n	800d308 <__pow5mult+0x84>
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	f7ff ff1a 	bl	800d130 <__multiply>
 800d2fc:	4631      	mov	r1, r6
 800d2fe:	4680      	mov	r8, r0
 800d300:	4638      	mov	r0, r7
 800d302:	f7ff fe01 	bl	800cf08 <_Bfree>
 800d306:	4646      	mov	r6, r8
 800d308:	106d      	asrs	r5, r5, #1
 800d30a:	d00b      	beq.n	800d324 <__pow5mult+0xa0>
 800d30c:	6820      	ldr	r0, [r4, #0]
 800d30e:	b938      	cbnz	r0, 800d320 <__pow5mult+0x9c>
 800d310:	4622      	mov	r2, r4
 800d312:	4621      	mov	r1, r4
 800d314:	4638      	mov	r0, r7
 800d316:	f7ff ff0b 	bl	800d130 <__multiply>
 800d31a:	6020      	str	r0, [r4, #0]
 800d31c:	f8c0 9000 	str.w	r9, [r0]
 800d320:	4604      	mov	r4, r0
 800d322:	e7e4      	b.n	800d2ee <__pow5mult+0x6a>
 800d324:	4630      	mov	r0, r6
 800d326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32a:	bf00      	nop
 800d32c:	0800f860 	.word	0x0800f860
 800d330:	0800f786 	.word	0x0800f786
 800d334:	0800f806 	.word	0x0800f806

0800d338 <__lshift>:
 800d338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d33c:	460c      	mov	r4, r1
 800d33e:	6849      	ldr	r1, [r1, #4]
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d346:	68a3      	ldr	r3, [r4, #8]
 800d348:	4607      	mov	r7, r0
 800d34a:	4691      	mov	r9, r2
 800d34c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d350:	f108 0601 	add.w	r6, r8, #1
 800d354:	42b3      	cmp	r3, r6
 800d356:	db0b      	blt.n	800d370 <__lshift+0x38>
 800d358:	4638      	mov	r0, r7
 800d35a:	f7ff fd95 	bl	800ce88 <_Balloc>
 800d35e:	4605      	mov	r5, r0
 800d360:	b948      	cbnz	r0, 800d376 <__lshift+0x3e>
 800d362:	4602      	mov	r2, r0
 800d364:	4b28      	ldr	r3, [pc, #160]	@ (800d408 <__lshift+0xd0>)
 800d366:	4829      	ldr	r0, [pc, #164]	@ (800d40c <__lshift+0xd4>)
 800d368:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d36c:	f001 fb0c 	bl	800e988 <__assert_func>
 800d370:	3101      	adds	r1, #1
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	e7ee      	b.n	800d354 <__lshift+0x1c>
 800d376:	2300      	movs	r3, #0
 800d378:	f100 0114 	add.w	r1, r0, #20
 800d37c:	f100 0210 	add.w	r2, r0, #16
 800d380:	4618      	mov	r0, r3
 800d382:	4553      	cmp	r3, sl
 800d384:	db33      	blt.n	800d3ee <__lshift+0xb6>
 800d386:	6920      	ldr	r0, [r4, #16]
 800d388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d38c:	f104 0314 	add.w	r3, r4, #20
 800d390:	f019 091f 	ands.w	r9, r9, #31
 800d394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d39c:	d02b      	beq.n	800d3f6 <__lshift+0xbe>
 800d39e:	f1c9 0e20 	rsb	lr, r9, #32
 800d3a2:	468a      	mov	sl, r1
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	6818      	ldr	r0, [r3, #0]
 800d3a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d3ac:	4310      	orrs	r0, r2
 800d3ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b6:	459c      	cmp	ip, r3
 800d3b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3bc:	d8f3      	bhi.n	800d3a6 <__lshift+0x6e>
 800d3be:	ebac 0304 	sub.w	r3, ip, r4
 800d3c2:	3b15      	subs	r3, #21
 800d3c4:	f023 0303 	bic.w	r3, r3, #3
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	f104 0015 	add.w	r0, r4, #21
 800d3ce:	4584      	cmp	ip, r0
 800d3d0:	bf38      	it	cc
 800d3d2:	2304      	movcc	r3, #4
 800d3d4:	50ca      	str	r2, [r1, r3]
 800d3d6:	b10a      	cbz	r2, 800d3dc <__lshift+0xa4>
 800d3d8:	f108 0602 	add.w	r6, r8, #2
 800d3dc:	3e01      	subs	r6, #1
 800d3de:	4638      	mov	r0, r7
 800d3e0:	612e      	str	r6, [r5, #16]
 800d3e2:	4621      	mov	r1, r4
 800d3e4:	f7ff fd90 	bl	800cf08 <_Bfree>
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	e7c5      	b.n	800d382 <__lshift+0x4a>
 800d3f6:	3904      	subs	r1, #4
 800d3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d400:	459c      	cmp	ip, r3
 800d402:	d8f9      	bhi.n	800d3f8 <__lshift+0xc0>
 800d404:	e7ea      	b.n	800d3dc <__lshift+0xa4>
 800d406:	bf00      	nop
 800d408:	0800f7f5 	.word	0x0800f7f5
 800d40c:	0800f806 	.word	0x0800f806

0800d410 <__mcmp>:
 800d410:	690a      	ldr	r2, [r1, #16]
 800d412:	4603      	mov	r3, r0
 800d414:	6900      	ldr	r0, [r0, #16]
 800d416:	1a80      	subs	r0, r0, r2
 800d418:	b530      	push	{r4, r5, lr}
 800d41a:	d10e      	bne.n	800d43a <__mcmp+0x2a>
 800d41c:	3314      	adds	r3, #20
 800d41e:	3114      	adds	r1, #20
 800d420:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d424:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d428:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d42c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d430:	4295      	cmp	r5, r2
 800d432:	d003      	beq.n	800d43c <__mcmp+0x2c>
 800d434:	d205      	bcs.n	800d442 <__mcmp+0x32>
 800d436:	f04f 30ff 	mov.w	r0, #4294967295
 800d43a:	bd30      	pop	{r4, r5, pc}
 800d43c:	42a3      	cmp	r3, r4
 800d43e:	d3f3      	bcc.n	800d428 <__mcmp+0x18>
 800d440:	e7fb      	b.n	800d43a <__mcmp+0x2a>
 800d442:	2001      	movs	r0, #1
 800d444:	e7f9      	b.n	800d43a <__mcmp+0x2a>
	...

0800d448 <__mdiff>:
 800d448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	4689      	mov	r9, r1
 800d44e:	4606      	mov	r6, r0
 800d450:	4611      	mov	r1, r2
 800d452:	4648      	mov	r0, r9
 800d454:	4614      	mov	r4, r2
 800d456:	f7ff ffdb 	bl	800d410 <__mcmp>
 800d45a:	1e05      	subs	r5, r0, #0
 800d45c:	d112      	bne.n	800d484 <__mdiff+0x3c>
 800d45e:	4629      	mov	r1, r5
 800d460:	4630      	mov	r0, r6
 800d462:	f7ff fd11 	bl	800ce88 <_Balloc>
 800d466:	4602      	mov	r2, r0
 800d468:	b928      	cbnz	r0, 800d476 <__mdiff+0x2e>
 800d46a:	4b3f      	ldr	r3, [pc, #252]	@ (800d568 <__mdiff+0x120>)
 800d46c:	f240 2137 	movw	r1, #567	@ 0x237
 800d470:	483e      	ldr	r0, [pc, #248]	@ (800d56c <__mdiff+0x124>)
 800d472:	f001 fa89 	bl	800e988 <__assert_func>
 800d476:	2301      	movs	r3, #1
 800d478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d47c:	4610      	mov	r0, r2
 800d47e:	b003      	add	sp, #12
 800d480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d484:	bfbc      	itt	lt
 800d486:	464b      	movlt	r3, r9
 800d488:	46a1      	movlt	r9, r4
 800d48a:	4630      	mov	r0, r6
 800d48c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d490:	bfba      	itte	lt
 800d492:	461c      	movlt	r4, r3
 800d494:	2501      	movlt	r5, #1
 800d496:	2500      	movge	r5, #0
 800d498:	f7ff fcf6 	bl	800ce88 <_Balloc>
 800d49c:	4602      	mov	r2, r0
 800d49e:	b918      	cbnz	r0, 800d4a8 <__mdiff+0x60>
 800d4a0:	4b31      	ldr	r3, [pc, #196]	@ (800d568 <__mdiff+0x120>)
 800d4a2:	f240 2145 	movw	r1, #581	@ 0x245
 800d4a6:	e7e3      	b.n	800d470 <__mdiff+0x28>
 800d4a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d4ac:	6926      	ldr	r6, [r4, #16]
 800d4ae:	60c5      	str	r5, [r0, #12]
 800d4b0:	f109 0310 	add.w	r3, r9, #16
 800d4b4:	f109 0514 	add.w	r5, r9, #20
 800d4b8:	f104 0e14 	add.w	lr, r4, #20
 800d4bc:	f100 0b14 	add.w	fp, r0, #20
 800d4c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	46d9      	mov	r9, fp
 800d4cc:	f04f 0c00 	mov.w	ip, #0
 800d4d0:	9b01      	ldr	r3, [sp, #4]
 800d4d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	fa1f f38a 	uxth.w	r3, sl
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	b283      	uxth	r3, r0
 800d4e4:	1acb      	subs	r3, r1, r3
 800d4e6:	0c00      	lsrs	r0, r0, #16
 800d4e8:	4463      	add	r3, ip
 800d4ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4f8:	4576      	cmp	r6, lr
 800d4fa:	f849 3b04 	str.w	r3, [r9], #4
 800d4fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d502:	d8e5      	bhi.n	800d4d0 <__mdiff+0x88>
 800d504:	1b33      	subs	r3, r6, r4
 800d506:	3b15      	subs	r3, #21
 800d508:	f023 0303 	bic.w	r3, r3, #3
 800d50c:	3415      	adds	r4, #21
 800d50e:	3304      	adds	r3, #4
 800d510:	42a6      	cmp	r6, r4
 800d512:	bf38      	it	cc
 800d514:	2304      	movcc	r3, #4
 800d516:	441d      	add	r5, r3
 800d518:	445b      	add	r3, fp
 800d51a:	461e      	mov	r6, r3
 800d51c:	462c      	mov	r4, r5
 800d51e:	4544      	cmp	r4, r8
 800d520:	d30e      	bcc.n	800d540 <__mdiff+0xf8>
 800d522:	f108 0103 	add.w	r1, r8, #3
 800d526:	1b49      	subs	r1, r1, r5
 800d528:	f021 0103 	bic.w	r1, r1, #3
 800d52c:	3d03      	subs	r5, #3
 800d52e:	45a8      	cmp	r8, r5
 800d530:	bf38      	it	cc
 800d532:	2100      	movcc	r1, #0
 800d534:	440b      	add	r3, r1
 800d536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d53a:	b191      	cbz	r1, 800d562 <__mdiff+0x11a>
 800d53c:	6117      	str	r7, [r2, #16]
 800d53e:	e79d      	b.n	800d47c <__mdiff+0x34>
 800d540:	f854 1b04 	ldr.w	r1, [r4], #4
 800d544:	46e6      	mov	lr, ip
 800d546:	0c08      	lsrs	r0, r1, #16
 800d548:	fa1c fc81 	uxtah	ip, ip, r1
 800d54c:	4471      	add	r1, lr
 800d54e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d552:	b289      	uxth	r1, r1
 800d554:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d558:	f846 1b04 	str.w	r1, [r6], #4
 800d55c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d560:	e7dd      	b.n	800d51e <__mdiff+0xd6>
 800d562:	3f01      	subs	r7, #1
 800d564:	e7e7      	b.n	800d536 <__mdiff+0xee>
 800d566:	bf00      	nop
 800d568:	0800f7f5 	.word	0x0800f7f5
 800d56c:	0800f806 	.word	0x0800f806

0800d570 <__ulp>:
 800d570:	b082      	sub	sp, #8
 800d572:	ed8d 0b00 	vstr	d0, [sp]
 800d576:	9a01      	ldr	r2, [sp, #4]
 800d578:	4b0f      	ldr	r3, [pc, #60]	@ (800d5b8 <__ulp+0x48>)
 800d57a:	4013      	ands	r3, r2
 800d57c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d580:	2b00      	cmp	r3, #0
 800d582:	dc08      	bgt.n	800d596 <__ulp+0x26>
 800d584:	425b      	negs	r3, r3
 800d586:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d58a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d58e:	da04      	bge.n	800d59a <__ulp+0x2a>
 800d590:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d594:	4113      	asrs	r3, r2
 800d596:	2200      	movs	r2, #0
 800d598:	e008      	b.n	800d5ac <__ulp+0x3c>
 800d59a:	f1a2 0314 	sub.w	r3, r2, #20
 800d59e:	2b1e      	cmp	r3, #30
 800d5a0:	bfda      	itte	le
 800d5a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d5a6:	40da      	lsrle	r2, r3
 800d5a8:	2201      	movgt	r2, #1
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	ec41 0b10 	vmov	d0, r0, r1
 800d5b4:	b002      	add	sp, #8
 800d5b6:	4770      	bx	lr
 800d5b8:	7ff00000 	.word	0x7ff00000

0800d5bc <__b2d>:
 800d5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c0:	6906      	ldr	r6, [r0, #16]
 800d5c2:	f100 0814 	add.w	r8, r0, #20
 800d5c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d5ca:	1f37      	subs	r7, r6, #4
 800d5cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	f7ff fd4b 	bl	800d06c <__hi0bits>
 800d5d6:	f1c0 0320 	rsb	r3, r0, #32
 800d5da:	280a      	cmp	r0, #10
 800d5dc:	600b      	str	r3, [r1, #0]
 800d5de:	491b      	ldr	r1, [pc, #108]	@ (800d64c <__b2d+0x90>)
 800d5e0:	dc15      	bgt.n	800d60e <__b2d+0x52>
 800d5e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d5e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d5ea:	45b8      	cmp	r8, r7
 800d5ec:	ea43 0501 	orr.w	r5, r3, r1
 800d5f0:	bf34      	ite	cc
 800d5f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5f6:	2300      	movcs	r3, #0
 800d5f8:	3015      	adds	r0, #21
 800d5fa:	fa02 f000 	lsl.w	r0, r2, r0
 800d5fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800d602:	4303      	orrs	r3, r0
 800d604:	461c      	mov	r4, r3
 800d606:	ec45 4b10 	vmov	d0, r4, r5
 800d60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60e:	45b8      	cmp	r8, r7
 800d610:	bf3a      	itte	cc
 800d612:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d616:	f1a6 0708 	subcc.w	r7, r6, #8
 800d61a:	2300      	movcs	r3, #0
 800d61c:	380b      	subs	r0, #11
 800d61e:	d012      	beq.n	800d646 <__b2d+0x8a>
 800d620:	f1c0 0120 	rsb	r1, r0, #32
 800d624:	fa23 f401 	lsr.w	r4, r3, r1
 800d628:	4082      	lsls	r2, r0
 800d62a:	4322      	orrs	r2, r4
 800d62c:	4547      	cmp	r7, r8
 800d62e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d632:	bf8c      	ite	hi
 800d634:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d638:	2200      	movls	r2, #0
 800d63a:	4083      	lsls	r3, r0
 800d63c:	40ca      	lsrs	r2, r1
 800d63e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d642:	4313      	orrs	r3, r2
 800d644:	e7de      	b.n	800d604 <__b2d+0x48>
 800d646:	ea42 0501 	orr.w	r5, r2, r1
 800d64a:	e7db      	b.n	800d604 <__b2d+0x48>
 800d64c:	3ff00000 	.word	0x3ff00000

0800d650 <__d2b>:
 800d650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d654:	460f      	mov	r7, r1
 800d656:	2101      	movs	r1, #1
 800d658:	ec59 8b10 	vmov	r8, r9, d0
 800d65c:	4616      	mov	r6, r2
 800d65e:	f7ff fc13 	bl	800ce88 <_Balloc>
 800d662:	4604      	mov	r4, r0
 800d664:	b930      	cbnz	r0, 800d674 <__d2b+0x24>
 800d666:	4602      	mov	r2, r0
 800d668:	4b23      	ldr	r3, [pc, #140]	@ (800d6f8 <__d2b+0xa8>)
 800d66a:	4824      	ldr	r0, [pc, #144]	@ (800d6fc <__d2b+0xac>)
 800d66c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d670:	f001 f98a 	bl	800e988 <__assert_func>
 800d674:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d67c:	b10d      	cbz	r5, 800d682 <__d2b+0x32>
 800d67e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d682:	9301      	str	r3, [sp, #4]
 800d684:	f1b8 0300 	subs.w	r3, r8, #0
 800d688:	d023      	beq.n	800d6d2 <__d2b+0x82>
 800d68a:	4668      	mov	r0, sp
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	f7ff fd0c 	bl	800d0aa <__lo0bits>
 800d692:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d696:	b1d0      	cbz	r0, 800d6ce <__d2b+0x7e>
 800d698:	f1c0 0320 	rsb	r3, r0, #32
 800d69c:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	40c2      	lsrs	r2, r0
 800d6a4:	6163      	str	r3, [r4, #20]
 800d6a6:	9201      	str	r2, [sp, #4]
 800d6a8:	9b01      	ldr	r3, [sp, #4]
 800d6aa:	61a3      	str	r3, [r4, #24]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bf0c      	ite	eq
 800d6b0:	2201      	moveq	r2, #1
 800d6b2:	2202      	movne	r2, #2
 800d6b4:	6122      	str	r2, [r4, #16]
 800d6b6:	b1a5      	cbz	r5, 800d6e2 <__d2b+0x92>
 800d6b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6bc:	4405      	add	r5, r0
 800d6be:	603d      	str	r5, [r7, #0]
 800d6c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6c4:	6030      	str	r0, [r6, #0]
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	b003      	add	sp, #12
 800d6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6ce:	6161      	str	r1, [r4, #20]
 800d6d0:	e7ea      	b.n	800d6a8 <__d2b+0x58>
 800d6d2:	a801      	add	r0, sp, #4
 800d6d4:	f7ff fce9 	bl	800d0aa <__lo0bits>
 800d6d8:	9b01      	ldr	r3, [sp, #4]
 800d6da:	6163      	str	r3, [r4, #20]
 800d6dc:	3020      	adds	r0, #32
 800d6de:	2201      	movs	r2, #1
 800d6e0:	e7e8      	b.n	800d6b4 <__d2b+0x64>
 800d6e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d6ea:	6038      	str	r0, [r7, #0]
 800d6ec:	6918      	ldr	r0, [r3, #16]
 800d6ee:	f7ff fcbd 	bl	800d06c <__hi0bits>
 800d6f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6f6:	e7e5      	b.n	800d6c4 <__d2b+0x74>
 800d6f8:	0800f7f5 	.word	0x0800f7f5
 800d6fc:	0800f806 	.word	0x0800f806

0800d700 <__ratio>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	b085      	sub	sp, #20
 800d706:	e9cd 1000 	strd	r1, r0, [sp]
 800d70a:	a902      	add	r1, sp, #8
 800d70c:	f7ff ff56 	bl	800d5bc <__b2d>
 800d710:	9800      	ldr	r0, [sp, #0]
 800d712:	a903      	add	r1, sp, #12
 800d714:	ec55 4b10 	vmov	r4, r5, d0
 800d718:	f7ff ff50 	bl	800d5bc <__b2d>
 800d71c:	9b01      	ldr	r3, [sp, #4]
 800d71e:	6919      	ldr	r1, [r3, #16]
 800d720:	9b00      	ldr	r3, [sp, #0]
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	1ac9      	subs	r1, r1, r3
 800d726:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d72a:	1a9b      	subs	r3, r3, r2
 800d72c:	ec5b ab10 	vmov	sl, fp, d0
 800d730:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d734:	2b00      	cmp	r3, #0
 800d736:	bfce      	itee	gt
 800d738:	462a      	movgt	r2, r5
 800d73a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d73e:	465a      	movle	r2, fp
 800d740:	462f      	mov	r7, r5
 800d742:	46d9      	mov	r9, fp
 800d744:	bfcc      	ite	gt
 800d746:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d74a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d74e:	464b      	mov	r3, r9
 800d750:	4652      	mov	r2, sl
 800d752:	4620      	mov	r0, r4
 800d754:	4639      	mov	r1, r7
 800d756:	f7f3 f879 	bl	800084c <__aeabi_ddiv>
 800d75a:	ec41 0b10 	vmov	d0, r0, r1
 800d75e:	b005      	add	sp, #20
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d764 <__copybits>:
 800d764:	3901      	subs	r1, #1
 800d766:	b570      	push	{r4, r5, r6, lr}
 800d768:	1149      	asrs	r1, r1, #5
 800d76a:	6914      	ldr	r4, [r2, #16]
 800d76c:	3101      	adds	r1, #1
 800d76e:	f102 0314 	add.w	r3, r2, #20
 800d772:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d77a:	1f05      	subs	r5, r0, #4
 800d77c:	42a3      	cmp	r3, r4
 800d77e:	d30c      	bcc.n	800d79a <__copybits+0x36>
 800d780:	1aa3      	subs	r3, r4, r2
 800d782:	3b11      	subs	r3, #17
 800d784:	f023 0303 	bic.w	r3, r3, #3
 800d788:	3211      	adds	r2, #17
 800d78a:	42a2      	cmp	r2, r4
 800d78c:	bf88      	it	hi
 800d78e:	2300      	movhi	r3, #0
 800d790:	4418      	add	r0, r3
 800d792:	2300      	movs	r3, #0
 800d794:	4288      	cmp	r0, r1
 800d796:	d305      	bcc.n	800d7a4 <__copybits+0x40>
 800d798:	bd70      	pop	{r4, r5, r6, pc}
 800d79a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d79e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d7a2:	e7eb      	b.n	800d77c <__copybits+0x18>
 800d7a4:	f840 3b04 	str.w	r3, [r0], #4
 800d7a8:	e7f4      	b.n	800d794 <__copybits+0x30>

0800d7aa <__any_on>:
 800d7aa:	f100 0214 	add.w	r2, r0, #20
 800d7ae:	6900      	ldr	r0, [r0, #16]
 800d7b0:	114b      	asrs	r3, r1, #5
 800d7b2:	4298      	cmp	r0, r3
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	db11      	blt.n	800d7dc <__any_on+0x32>
 800d7b8:	dd0a      	ble.n	800d7d0 <__any_on+0x26>
 800d7ba:	f011 011f 	ands.w	r1, r1, #31
 800d7be:	d007      	beq.n	800d7d0 <__any_on+0x26>
 800d7c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7c4:	fa24 f001 	lsr.w	r0, r4, r1
 800d7c8:	fa00 f101 	lsl.w	r1, r0, r1
 800d7cc:	428c      	cmp	r4, r1
 800d7ce:	d10b      	bne.n	800d7e8 <__any_on+0x3e>
 800d7d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d803      	bhi.n	800d7e0 <__any_on+0x36>
 800d7d8:	2000      	movs	r0, #0
 800d7da:	bd10      	pop	{r4, pc}
 800d7dc:	4603      	mov	r3, r0
 800d7de:	e7f7      	b.n	800d7d0 <__any_on+0x26>
 800d7e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7e4:	2900      	cmp	r1, #0
 800d7e6:	d0f5      	beq.n	800d7d4 <__any_on+0x2a>
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	e7f6      	b.n	800d7da <__any_on+0x30>

0800d7ec <sulp>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	460d      	mov	r5, r1
 800d7f2:	ec45 4b10 	vmov	d0, r4, r5
 800d7f6:	4616      	mov	r6, r2
 800d7f8:	f7ff feba 	bl	800d570 <__ulp>
 800d7fc:	ec51 0b10 	vmov	r0, r1, d0
 800d800:	b17e      	cbz	r6, 800d822 <sulp+0x36>
 800d802:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d806:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	dd09      	ble.n	800d822 <sulp+0x36>
 800d80e:	051b      	lsls	r3, r3, #20
 800d810:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d814:	2400      	movs	r4, #0
 800d816:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d81a:	4622      	mov	r2, r4
 800d81c:	462b      	mov	r3, r5
 800d81e:	f7f2 feeb 	bl	80005f8 <__aeabi_dmul>
 800d822:	ec41 0b10 	vmov	d0, r0, r1
 800d826:	bd70      	pop	{r4, r5, r6, pc}

0800d828 <_strtod_l>:
 800d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	b09f      	sub	sp, #124	@ 0x7c
 800d82e:	460c      	mov	r4, r1
 800d830:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d832:	2200      	movs	r2, #0
 800d834:	921a      	str	r2, [sp, #104]	@ 0x68
 800d836:	9005      	str	r0, [sp, #20]
 800d838:	f04f 0a00 	mov.w	sl, #0
 800d83c:	f04f 0b00 	mov.w	fp, #0
 800d840:	460a      	mov	r2, r1
 800d842:	9219      	str	r2, [sp, #100]	@ 0x64
 800d844:	7811      	ldrb	r1, [r2, #0]
 800d846:	292b      	cmp	r1, #43	@ 0x2b
 800d848:	d04a      	beq.n	800d8e0 <_strtod_l+0xb8>
 800d84a:	d838      	bhi.n	800d8be <_strtod_l+0x96>
 800d84c:	290d      	cmp	r1, #13
 800d84e:	d832      	bhi.n	800d8b6 <_strtod_l+0x8e>
 800d850:	2908      	cmp	r1, #8
 800d852:	d832      	bhi.n	800d8ba <_strtod_l+0x92>
 800d854:	2900      	cmp	r1, #0
 800d856:	d03b      	beq.n	800d8d0 <_strtod_l+0xa8>
 800d858:	2200      	movs	r2, #0
 800d85a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d85c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d85e:	782a      	ldrb	r2, [r5, #0]
 800d860:	2a30      	cmp	r2, #48	@ 0x30
 800d862:	f040 80b3 	bne.w	800d9cc <_strtod_l+0x1a4>
 800d866:	786a      	ldrb	r2, [r5, #1]
 800d868:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d86c:	2a58      	cmp	r2, #88	@ 0x58
 800d86e:	d16e      	bne.n	800d94e <_strtod_l+0x126>
 800d870:	9302      	str	r3, [sp, #8]
 800d872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d874:	9301      	str	r3, [sp, #4]
 800d876:	ab1a      	add	r3, sp, #104	@ 0x68
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	4a8e      	ldr	r2, [pc, #568]	@ (800dab4 <_strtod_l+0x28c>)
 800d87c:	9805      	ldr	r0, [sp, #20]
 800d87e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d880:	a919      	add	r1, sp, #100	@ 0x64
 800d882:	f001 f91b 	bl	800eabc <__gethex>
 800d886:	f010 060f 	ands.w	r6, r0, #15
 800d88a:	4604      	mov	r4, r0
 800d88c:	d005      	beq.n	800d89a <_strtod_l+0x72>
 800d88e:	2e06      	cmp	r6, #6
 800d890:	d128      	bne.n	800d8e4 <_strtod_l+0xbc>
 800d892:	3501      	adds	r5, #1
 800d894:	2300      	movs	r3, #0
 800d896:	9519      	str	r5, [sp, #100]	@ 0x64
 800d898:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d89a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f040 858e 	bne.w	800e3be <_strtod_l+0xb96>
 800d8a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8a4:	b1cb      	cbz	r3, 800d8da <_strtod_l+0xb2>
 800d8a6:	4652      	mov	r2, sl
 800d8a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d8ac:	ec43 2b10 	vmov	d0, r2, r3
 800d8b0:	b01f      	add	sp, #124	@ 0x7c
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	2920      	cmp	r1, #32
 800d8b8:	d1ce      	bne.n	800d858 <_strtod_l+0x30>
 800d8ba:	3201      	adds	r2, #1
 800d8bc:	e7c1      	b.n	800d842 <_strtod_l+0x1a>
 800d8be:	292d      	cmp	r1, #45	@ 0x2d
 800d8c0:	d1ca      	bne.n	800d858 <_strtod_l+0x30>
 800d8c2:	2101      	movs	r1, #1
 800d8c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d8c6:	1c51      	adds	r1, r2, #1
 800d8c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8ca:	7852      	ldrb	r2, [r2, #1]
 800d8cc:	2a00      	cmp	r2, #0
 800d8ce:	d1c5      	bne.n	800d85c <_strtod_l+0x34>
 800d8d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f040 8570 	bne.w	800e3ba <_strtod_l+0xb92>
 800d8da:	4652      	mov	r2, sl
 800d8dc:	465b      	mov	r3, fp
 800d8de:	e7e5      	b.n	800d8ac <_strtod_l+0x84>
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	e7ef      	b.n	800d8c4 <_strtod_l+0x9c>
 800d8e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d8e6:	b13a      	cbz	r2, 800d8f8 <_strtod_l+0xd0>
 800d8e8:	2135      	movs	r1, #53	@ 0x35
 800d8ea:	a81c      	add	r0, sp, #112	@ 0x70
 800d8ec:	f7ff ff3a 	bl	800d764 <__copybits>
 800d8f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8f2:	9805      	ldr	r0, [sp, #20]
 800d8f4:	f7ff fb08 	bl	800cf08 <_Bfree>
 800d8f8:	3e01      	subs	r6, #1
 800d8fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d8fc:	2e04      	cmp	r6, #4
 800d8fe:	d806      	bhi.n	800d90e <_strtod_l+0xe6>
 800d900:	e8df f006 	tbb	[pc, r6]
 800d904:	201d0314 	.word	0x201d0314
 800d908:	14          	.byte	0x14
 800d909:	00          	.byte	0x00
 800d90a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d90e:	05e1      	lsls	r1, r4, #23
 800d910:	bf48      	it	mi
 800d912:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d916:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d91a:	0d1b      	lsrs	r3, r3, #20
 800d91c:	051b      	lsls	r3, r3, #20
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1bb      	bne.n	800d89a <_strtod_l+0x72>
 800d922:	f7fe fb21 	bl	800bf68 <__errno>
 800d926:	2322      	movs	r3, #34	@ 0x22
 800d928:	6003      	str	r3, [r0, #0]
 800d92a:	e7b6      	b.n	800d89a <_strtod_l+0x72>
 800d92c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d930:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d934:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d938:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d93c:	e7e7      	b.n	800d90e <_strtod_l+0xe6>
 800d93e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dabc <_strtod_l+0x294>
 800d942:	e7e4      	b.n	800d90e <_strtod_l+0xe6>
 800d944:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d948:	f04f 3aff 	mov.w	sl, #4294967295
 800d94c:	e7df      	b.n	800d90e <_strtod_l+0xe6>
 800d94e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d950:	1c5a      	adds	r2, r3, #1
 800d952:	9219      	str	r2, [sp, #100]	@ 0x64
 800d954:	785b      	ldrb	r3, [r3, #1]
 800d956:	2b30      	cmp	r3, #48	@ 0x30
 800d958:	d0f9      	beq.n	800d94e <_strtod_l+0x126>
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d09d      	beq.n	800d89a <_strtod_l+0x72>
 800d95e:	2301      	movs	r3, #1
 800d960:	9309      	str	r3, [sp, #36]	@ 0x24
 800d962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d964:	930c      	str	r3, [sp, #48]	@ 0x30
 800d966:	2300      	movs	r3, #0
 800d968:	9308      	str	r3, [sp, #32]
 800d96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d96c:	461f      	mov	r7, r3
 800d96e:	220a      	movs	r2, #10
 800d970:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d972:	7805      	ldrb	r5, [r0, #0]
 800d974:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d978:	b2d9      	uxtb	r1, r3
 800d97a:	2909      	cmp	r1, #9
 800d97c:	d928      	bls.n	800d9d0 <_strtod_l+0x1a8>
 800d97e:	494e      	ldr	r1, [pc, #312]	@ (800dab8 <_strtod_l+0x290>)
 800d980:	2201      	movs	r2, #1
 800d982:	f000 ffd5 	bl	800e930 <strncmp>
 800d986:	2800      	cmp	r0, #0
 800d988:	d032      	beq.n	800d9f0 <_strtod_l+0x1c8>
 800d98a:	2000      	movs	r0, #0
 800d98c:	462a      	mov	r2, r5
 800d98e:	4681      	mov	r9, r0
 800d990:	463d      	mov	r5, r7
 800d992:	4603      	mov	r3, r0
 800d994:	2a65      	cmp	r2, #101	@ 0x65
 800d996:	d001      	beq.n	800d99c <_strtod_l+0x174>
 800d998:	2a45      	cmp	r2, #69	@ 0x45
 800d99a:	d114      	bne.n	800d9c6 <_strtod_l+0x19e>
 800d99c:	b91d      	cbnz	r5, 800d9a6 <_strtod_l+0x17e>
 800d99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9a0:	4302      	orrs	r2, r0
 800d9a2:	d095      	beq.n	800d8d0 <_strtod_l+0xa8>
 800d9a4:	2500      	movs	r5, #0
 800d9a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d9a8:	1c62      	adds	r2, r4, #1
 800d9aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9ac:	7862      	ldrb	r2, [r4, #1]
 800d9ae:	2a2b      	cmp	r2, #43	@ 0x2b
 800d9b0:	d077      	beq.n	800daa2 <_strtod_l+0x27a>
 800d9b2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d9b4:	d07b      	beq.n	800daae <_strtod_l+0x286>
 800d9b6:	f04f 0c00 	mov.w	ip, #0
 800d9ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d9be:	2909      	cmp	r1, #9
 800d9c0:	f240 8082 	bls.w	800dac8 <_strtod_l+0x2a0>
 800d9c4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9c6:	f04f 0800 	mov.w	r8, #0
 800d9ca:	e0a2      	b.n	800db12 <_strtod_l+0x2ea>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	e7c7      	b.n	800d960 <_strtod_l+0x138>
 800d9d0:	2f08      	cmp	r7, #8
 800d9d2:	bfd5      	itete	le
 800d9d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d9d6:	9908      	ldrgt	r1, [sp, #32]
 800d9d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d9e0:	f100 0001 	add.w	r0, r0, #1
 800d9e4:	bfd4      	ite	le
 800d9e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d9e8:	9308      	strgt	r3, [sp, #32]
 800d9ea:	3701      	adds	r7, #1
 800d9ec:	9019      	str	r0, [sp, #100]	@ 0x64
 800d9ee:	e7bf      	b.n	800d970 <_strtod_l+0x148>
 800d9f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9f6:	785a      	ldrb	r2, [r3, #1]
 800d9f8:	b37f      	cbz	r7, 800da5a <_strtod_l+0x232>
 800d9fa:	4681      	mov	r9, r0
 800d9fc:	463d      	mov	r5, r7
 800d9fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800da02:	2b09      	cmp	r3, #9
 800da04:	d912      	bls.n	800da2c <_strtod_l+0x204>
 800da06:	2301      	movs	r3, #1
 800da08:	e7c4      	b.n	800d994 <_strtod_l+0x16c>
 800da0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da0c:	1c5a      	adds	r2, r3, #1
 800da0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800da10:	785a      	ldrb	r2, [r3, #1]
 800da12:	3001      	adds	r0, #1
 800da14:	2a30      	cmp	r2, #48	@ 0x30
 800da16:	d0f8      	beq.n	800da0a <_strtod_l+0x1e2>
 800da18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800da1c:	2b08      	cmp	r3, #8
 800da1e:	f200 84d3 	bhi.w	800e3c8 <_strtod_l+0xba0>
 800da22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da24:	930c      	str	r3, [sp, #48]	@ 0x30
 800da26:	4681      	mov	r9, r0
 800da28:	2000      	movs	r0, #0
 800da2a:	4605      	mov	r5, r0
 800da2c:	3a30      	subs	r2, #48	@ 0x30
 800da2e:	f100 0301 	add.w	r3, r0, #1
 800da32:	d02a      	beq.n	800da8a <_strtod_l+0x262>
 800da34:	4499      	add	r9, r3
 800da36:	eb00 0c05 	add.w	ip, r0, r5
 800da3a:	462b      	mov	r3, r5
 800da3c:	210a      	movs	r1, #10
 800da3e:	4563      	cmp	r3, ip
 800da40:	d10d      	bne.n	800da5e <_strtod_l+0x236>
 800da42:	1c69      	adds	r1, r5, #1
 800da44:	4401      	add	r1, r0
 800da46:	4428      	add	r0, r5
 800da48:	2808      	cmp	r0, #8
 800da4a:	dc16      	bgt.n	800da7a <_strtod_l+0x252>
 800da4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800da4e:	230a      	movs	r3, #10
 800da50:	fb03 2300 	mla	r3, r3, r0, r2
 800da54:	930a      	str	r3, [sp, #40]	@ 0x28
 800da56:	2300      	movs	r3, #0
 800da58:	e018      	b.n	800da8c <_strtod_l+0x264>
 800da5a:	4638      	mov	r0, r7
 800da5c:	e7da      	b.n	800da14 <_strtod_l+0x1ec>
 800da5e:	2b08      	cmp	r3, #8
 800da60:	f103 0301 	add.w	r3, r3, #1
 800da64:	dc03      	bgt.n	800da6e <_strtod_l+0x246>
 800da66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800da68:	434e      	muls	r6, r1
 800da6a:	960a      	str	r6, [sp, #40]	@ 0x28
 800da6c:	e7e7      	b.n	800da3e <_strtod_l+0x216>
 800da6e:	2b10      	cmp	r3, #16
 800da70:	bfde      	ittt	le
 800da72:	9e08      	ldrle	r6, [sp, #32]
 800da74:	434e      	mulle	r6, r1
 800da76:	9608      	strle	r6, [sp, #32]
 800da78:	e7e1      	b.n	800da3e <_strtod_l+0x216>
 800da7a:	280f      	cmp	r0, #15
 800da7c:	dceb      	bgt.n	800da56 <_strtod_l+0x22e>
 800da7e:	9808      	ldr	r0, [sp, #32]
 800da80:	230a      	movs	r3, #10
 800da82:	fb03 2300 	mla	r3, r3, r0, r2
 800da86:	9308      	str	r3, [sp, #32]
 800da88:	e7e5      	b.n	800da56 <_strtod_l+0x22e>
 800da8a:	4629      	mov	r1, r5
 800da8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da8e:	1c50      	adds	r0, r2, #1
 800da90:	9019      	str	r0, [sp, #100]	@ 0x64
 800da92:	7852      	ldrb	r2, [r2, #1]
 800da94:	4618      	mov	r0, r3
 800da96:	460d      	mov	r5, r1
 800da98:	e7b1      	b.n	800d9fe <_strtod_l+0x1d6>
 800da9a:	f04f 0900 	mov.w	r9, #0
 800da9e:	2301      	movs	r3, #1
 800daa0:	e77d      	b.n	800d99e <_strtod_l+0x176>
 800daa2:	f04f 0c00 	mov.w	ip, #0
 800daa6:	1ca2      	adds	r2, r4, #2
 800daa8:	9219      	str	r2, [sp, #100]	@ 0x64
 800daaa:	78a2      	ldrb	r2, [r4, #2]
 800daac:	e785      	b.n	800d9ba <_strtod_l+0x192>
 800daae:	f04f 0c01 	mov.w	ip, #1
 800dab2:	e7f8      	b.n	800daa6 <_strtod_l+0x27e>
 800dab4:	0800f978 	.word	0x0800f978
 800dab8:	0800f960 	.word	0x0800f960
 800dabc:	7ff00000 	.word	0x7ff00000
 800dac0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dac2:	1c51      	adds	r1, r2, #1
 800dac4:	9119      	str	r1, [sp, #100]	@ 0x64
 800dac6:	7852      	ldrb	r2, [r2, #1]
 800dac8:	2a30      	cmp	r2, #48	@ 0x30
 800daca:	d0f9      	beq.n	800dac0 <_strtod_l+0x298>
 800dacc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dad0:	2908      	cmp	r1, #8
 800dad2:	f63f af78 	bhi.w	800d9c6 <_strtod_l+0x19e>
 800dad6:	3a30      	subs	r2, #48	@ 0x30
 800dad8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dadc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dade:	f04f 080a 	mov.w	r8, #10
 800dae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dae4:	1c56      	adds	r6, r2, #1
 800dae6:	9619      	str	r6, [sp, #100]	@ 0x64
 800dae8:	7852      	ldrb	r2, [r2, #1]
 800daea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800daee:	f1be 0f09 	cmp.w	lr, #9
 800daf2:	d939      	bls.n	800db68 <_strtod_l+0x340>
 800daf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800daf6:	1a76      	subs	r6, r6, r1
 800daf8:	2e08      	cmp	r6, #8
 800dafa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dafe:	dc03      	bgt.n	800db08 <_strtod_l+0x2e0>
 800db00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db02:	4588      	cmp	r8, r1
 800db04:	bfa8      	it	ge
 800db06:	4688      	movge	r8, r1
 800db08:	f1bc 0f00 	cmp.w	ip, #0
 800db0c:	d001      	beq.n	800db12 <_strtod_l+0x2ea>
 800db0e:	f1c8 0800 	rsb	r8, r8, #0
 800db12:	2d00      	cmp	r5, #0
 800db14:	d14e      	bne.n	800dbb4 <_strtod_l+0x38c>
 800db16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db18:	4308      	orrs	r0, r1
 800db1a:	f47f aebe 	bne.w	800d89a <_strtod_l+0x72>
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f47f aed6 	bne.w	800d8d0 <_strtod_l+0xa8>
 800db24:	2a69      	cmp	r2, #105	@ 0x69
 800db26:	d028      	beq.n	800db7a <_strtod_l+0x352>
 800db28:	dc25      	bgt.n	800db76 <_strtod_l+0x34e>
 800db2a:	2a49      	cmp	r2, #73	@ 0x49
 800db2c:	d025      	beq.n	800db7a <_strtod_l+0x352>
 800db2e:	2a4e      	cmp	r2, #78	@ 0x4e
 800db30:	f47f aece 	bne.w	800d8d0 <_strtod_l+0xa8>
 800db34:	499b      	ldr	r1, [pc, #620]	@ (800dda4 <_strtod_l+0x57c>)
 800db36:	a819      	add	r0, sp, #100	@ 0x64
 800db38:	f001 f9e2 	bl	800ef00 <__match>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	f43f aec7 	beq.w	800d8d0 <_strtod_l+0xa8>
 800db42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b28      	cmp	r3, #40	@ 0x28
 800db48:	d12e      	bne.n	800dba8 <_strtod_l+0x380>
 800db4a:	4997      	ldr	r1, [pc, #604]	@ (800dda8 <_strtod_l+0x580>)
 800db4c:	aa1c      	add	r2, sp, #112	@ 0x70
 800db4e:	a819      	add	r0, sp, #100	@ 0x64
 800db50:	f001 f9ea 	bl	800ef28 <__hexnan>
 800db54:	2805      	cmp	r0, #5
 800db56:	d127      	bne.n	800dba8 <_strtod_l+0x380>
 800db58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800db5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800db62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800db66:	e698      	b.n	800d89a <_strtod_l+0x72>
 800db68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db6a:	fb08 2101 	mla	r1, r8, r1, r2
 800db6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db72:	920e      	str	r2, [sp, #56]	@ 0x38
 800db74:	e7b5      	b.n	800dae2 <_strtod_l+0x2ba>
 800db76:	2a6e      	cmp	r2, #110	@ 0x6e
 800db78:	e7da      	b.n	800db30 <_strtod_l+0x308>
 800db7a:	498c      	ldr	r1, [pc, #560]	@ (800ddac <_strtod_l+0x584>)
 800db7c:	a819      	add	r0, sp, #100	@ 0x64
 800db7e:	f001 f9bf 	bl	800ef00 <__match>
 800db82:	2800      	cmp	r0, #0
 800db84:	f43f aea4 	beq.w	800d8d0 <_strtod_l+0xa8>
 800db88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db8a:	4989      	ldr	r1, [pc, #548]	@ (800ddb0 <_strtod_l+0x588>)
 800db8c:	3b01      	subs	r3, #1
 800db8e:	a819      	add	r0, sp, #100	@ 0x64
 800db90:	9319      	str	r3, [sp, #100]	@ 0x64
 800db92:	f001 f9b5 	bl	800ef00 <__match>
 800db96:	b910      	cbnz	r0, 800db9e <_strtod_l+0x376>
 800db98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db9a:	3301      	adds	r3, #1
 800db9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800db9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ddc0 <_strtod_l+0x598>
 800dba2:	f04f 0a00 	mov.w	sl, #0
 800dba6:	e678      	b.n	800d89a <_strtod_l+0x72>
 800dba8:	4882      	ldr	r0, [pc, #520]	@ (800ddb4 <_strtod_l+0x58c>)
 800dbaa:	f000 fee5 	bl	800e978 <nan>
 800dbae:	ec5b ab10 	vmov	sl, fp, d0
 800dbb2:	e672      	b.n	800d89a <_strtod_l+0x72>
 800dbb4:	eba8 0309 	sub.w	r3, r8, r9
 800dbb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbbc:	2f00      	cmp	r7, #0
 800dbbe:	bf08      	it	eq
 800dbc0:	462f      	moveq	r7, r5
 800dbc2:	2d10      	cmp	r5, #16
 800dbc4:	462c      	mov	r4, r5
 800dbc6:	bfa8      	it	ge
 800dbc8:	2410      	movge	r4, #16
 800dbca:	f7f2 fc9b 	bl	8000504 <__aeabi_ui2d>
 800dbce:	2d09      	cmp	r5, #9
 800dbd0:	4682      	mov	sl, r0
 800dbd2:	468b      	mov	fp, r1
 800dbd4:	dc13      	bgt.n	800dbfe <_strtod_l+0x3d6>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f43f ae5e 	beq.w	800d89a <_strtod_l+0x72>
 800dbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe0:	dd78      	ble.n	800dcd4 <_strtod_l+0x4ac>
 800dbe2:	2b16      	cmp	r3, #22
 800dbe4:	dc5f      	bgt.n	800dca6 <_strtod_l+0x47e>
 800dbe6:	4974      	ldr	r1, [pc, #464]	@ (800ddb8 <_strtod_l+0x590>)
 800dbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbf0:	4652      	mov	r2, sl
 800dbf2:	465b      	mov	r3, fp
 800dbf4:	f7f2 fd00 	bl	80005f8 <__aeabi_dmul>
 800dbf8:	4682      	mov	sl, r0
 800dbfa:	468b      	mov	fp, r1
 800dbfc:	e64d      	b.n	800d89a <_strtod_l+0x72>
 800dbfe:	4b6e      	ldr	r3, [pc, #440]	@ (800ddb8 <_strtod_l+0x590>)
 800dc00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dc08:	f7f2 fcf6 	bl	80005f8 <__aeabi_dmul>
 800dc0c:	4682      	mov	sl, r0
 800dc0e:	9808      	ldr	r0, [sp, #32]
 800dc10:	468b      	mov	fp, r1
 800dc12:	f7f2 fc77 	bl	8000504 <__aeabi_ui2d>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	4650      	mov	r0, sl
 800dc1c:	4659      	mov	r1, fp
 800dc1e:	f7f2 fb35 	bl	800028c <__adddf3>
 800dc22:	2d0f      	cmp	r5, #15
 800dc24:	4682      	mov	sl, r0
 800dc26:	468b      	mov	fp, r1
 800dc28:	ddd5      	ble.n	800dbd6 <_strtod_l+0x3ae>
 800dc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc2c:	1b2c      	subs	r4, r5, r4
 800dc2e:	441c      	add	r4, r3
 800dc30:	2c00      	cmp	r4, #0
 800dc32:	f340 8096 	ble.w	800dd62 <_strtod_l+0x53a>
 800dc36:	f014 030f 	ands.w	r3, r4, #15
 800dc3a:	d00a      	beq.n	800dc52 <_strtod_l+0x42a>
 800dc3c:	495e      	ldr	r1, [pc, #376]	@ (800ddb8 <_strtod_l+0x590>)
 800dc3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc42:	4652      	mov	r2, sl
 800dc44:	465b      	mov	r3, fp
 800dc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc4a:	f7f2 fcd5 	bl	80005f8 <__aeabi_dmul>
 800dc4e:	4682      	mov	sl, r0
 800dc50:	468b      	mov	fp, r1
 800dc52:	f034 040f 	bics.w	r4, r4, #15
 800dc56:	d073      	beq.n	800dd40 <_strtod_l+0x518>
 800dc58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dc5c:	dd48      	ble.n	800dcf0 <_strtod_l+0x4c8>
 800dc5e:	2400      	movs	r4, #0
 800dc60:	46a0      	mov	r8, r4
 800dc62:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc64:	46a1      	mov	r9, r4
 800dc66:	9a05      	ldr	r2, [sp, #20]
 800dc68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ddc0 <_strtod_l+0x598>
 800dc6c:	2322      	movs	r3, #34	@ 0x22
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	f04f 0a00 	mov.w	sl, #0
 800dc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f43f ae0f 	beq.w	800d89a <_strtod_l+0x72>
 800dc7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc7e:	9805      	ldr	r0, [sp, #20]
 800dc80:	f7ff f942 	bl	800cf08 <_Bfree>
 800dc84:	9805      	ldr	r0, [sp, #20]
 800dc86:	4649      	mov	r1, r9
 800dc88:	f7ff f93e 	bl	800cf08 <_Bfree>
 800dc8c:	9805      	ldr	r0, [sp, #20]
 800dc8e:	4641      	mov	r1, r8
 800dc90:	f7ff f93a 	bl	800cf08 <_Bfree>
 800dc94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc96:	9805      	ldr	r0, [sp, #20]
 800dc98:	f7ff f936 	bl	800cf08 <_Bfree>
 800dc9c:	9805      	ldr	r0, [sp, #20]
 800dc9e:	4621      	mov	r1, r4
 800dca0:	f7ff f932 	bl	800cf08 <_Bfree>
 800dca4:	e5f9      	b.n	800d89a <_strtod_l+0x72>
 800dca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dca8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dcac:	4293      	cmp	r3, r2
 800dcae:	dbbc      	blt.n	800dc2a <_strtod_l+0x402>
 800dcb0:	4c41      	ldr	r4, [pc, #260]	@ (800ddb8 <_strtod_l+0x590>)
 800dcb2:	f1c5 050f 	rsb	r5, r5, #15
 800dcb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dcba:	4652      	mov	r2, sl
 800dcbc:	465b      	mov	r3, fp
 800dcbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc2:	f7f2 fc99 	bl	80005f8 <__aeabi_dmul>
 800dcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc8:	1b5d      	subs	r5, r3, r5
 800dcca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dcce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dcd2:	e78f      	b.n	800dbf4 <_strtod_l+0x3cc>
 800dcd4:	3316      	adds	r3, #22
 800dcd6:	dba8      	blt.n	800dc2a <_strtod_l+0x402>
 800dcd8:	4b37      	ldr	r3, [pc, #220]	@ (800ddb8 <_strtod_l+0x590>)
 800dcda:	eba9 0808 	sub.w	r8, r9, r8
 800dcde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dce2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dce6:	4650      	mov	r0, sl
 800dce8:	4659      	mov	r1, fp
 800dcea:	f7f2 fdaf 	bl	800084c <__aeabi_ddiv>
 800dcee:	e783      	b.n	800dbf8 <_strtod_l+0x3d0>
 800dcf0:	4b32      	ldr	r3, [pc, #200]	@ (800ddbc <_strtod_l+0x594>)
 800dcf2:	9308      	str	r3, [sp, #32]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	1124      	asrs	r4, r4, #4
 800dcf8:	4650      	mov	r0, sl
 800dcfa:	4659      	mov	r1, fp
 800dcfc:	461e      	mov	r6, r3
 800dcfe:	2c01      	cmp	r4, #1
 800dd00:	dc21      	bgt.n	800dd46 <_strtod_l+0x51e>
 800dd02:	b10b      	cbz	r3, 800dd08 <_strtod_l+0x4e0>
 800dd04:	4682      	mov	sl, r0
 800dd06:	468b      	mov	fp, r1
 800dd08:	492c      	ldr	r1, [pc, #176]	@ (800ddbc <_strtod_l+0x594>)
 800dd0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dd12:	4652      	mov	r2, sl
 800dd14:	465b      	mov	r3, fp
 800dd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd1a:	f7f2 fc6d 	bl	80005f8 <__aeabi_dmul>
 800dd1e:	4b28      	ldr	r3, [pc, #160]	@ (800ddc0 <_strtod_l+0x598>)
 800dd20:	460a      	mov	r2, r1
 800dd22:	400b      	ands	r3, r1
 800dd24:	4927      	ldr	r1, [pc, #156]	@ (800ddc4 <_strtod_l+0x59c>)
 800dd26:	428b      	cmp	r3, r1
 800dd28:	4682      	mov	sl, r0
 800dd2a:	d898      	bhi.n	800dc5e <_strtod_l+0x436>
 800dd2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dd30:	428b      	cmp	r3, r1
 800dd32:	bf86      	itte	hi
 800dd34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ddc8 <_strtod_l+0x5a0>
 800dd38:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dd40:	2300      	movs	r3, #0
 800dd42:	9308      	str	r3, [sp, #32]
 800dd44:	e07a      	b.n	800de3c <_strtod_l+0x614>
 800dd46:	07e2      	lsls	r2, r4, #31
 800dd48:	d505      	bpl.n	800dd56 <_strtod_l+0x52e>
 800dd4a:	9b08      	ldr	r3, [sp, #32]
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 fc52 	bl	80005f8 <__aeabi_dmul>
 800dd54:	2301      	movs	r3, #1
 800dd56:	9a08      	ldr	r2, [sp, #32]
 800dd58:	3208      	adds	r2, #8
 800dd5a:	3601      	adds	r6, #1
 800dd5c:	1064      	asrs	r4, r4, #1
 800dd5e:	9208      	str	r2, [sp, #32]
 800dd60:	e7cd      	b.n	800dcfe <_strtod_l+0x4d6>
 800dd62:	d0ed      	beq.n	800dd40 <_strtod_l+0x518>
 800dd64:	4264      	negs	r4, r4
 800dd66:	f014 020f 	ands.w	r2, r4, #15
 800dd6a:	d00a      	beq.n	800dd82 <_strtod_l+0x55a>
 800dd6c:	4b12      	ldr	r3, [pc, #72]	@ (800ddb8 <_strtod_l+0x590>)
 800dd6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd72:	4650      	mov	r0, sl
 800dd74:	4659      	mov	r1, fp
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7a:	f7f2 fd67 	bl	800084c <__aeabi_ddiv>
 800dd7e:	4682      	mov	sl, r0
 800dd80:	468b      	mov	fp, r1
 800dd82:	1124      	asrs	r4, r4, #4
 800dd84:	d0dc      	beq.n	800dd40 <_strtod_l+0x518>
 800dd86:	2c1f      	cmp	r4, #31
 800dd88:	dd20      	ble.n	800ddcc <_strtod_l+0x5a4>
 800dd8a:	2400      	movs	r4, #0
 800dd8c:	46a0      	mov	r8, r4
 800dd8e:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd90:	46a1      	mov	r9, r4
 800dd92:	9a05      	ldr	r2, [sp, #20]
 800dd94:	2322      	movs	r3, #34	@ 0x22
 800dd96:	f04f 0a00 	mov.w	sl, #0
 800dd9a:	f04f 0b00 	mov.w	fp, #0
 800dd9e:	6013      	str	r3, [r2, #0]
 800dda0:	e768      	b.n	800dc74 <_strtod_l+0x44c>
 800dda2:	bf00      	nop
 800dda4:	0800f74d 	.word	0x0800f74d
 800dda8:	0800f964 	.word	0x0800f964
 800ddac:	0800f745 	.word	0x0800f745
 800ddb0:	0800f77c 	.word	0x0800f77c
 800ddb4:	0800fb0d 	.word	0x0800fb0d
 800ddb8:	0800f898 	.word	0x0800f898
 800ddbc:	0800f870 	.word	0x0800f870
 800ddc0:	7ff00000 	.word	0x7ff00000
 800ddc4:	7ca00000 	.word	0x7ca00000
 800ddc8:	7fefffff 	.word	0x7fefffff
 800ddcc:	f014 0310 	ands.w	r3, r4, #16
 800ddd0:	bf18      	it	ne
 800ddd2:	236a      	movne	r3, #106	@ 0x6a
 800ddd4:	4ea9      	ldr	r6, [pc, #676]	@ (800e07c <_strtod_l+0x854>)
 800ddd6:	9308      	str	r3, [sp, #32]
 800ddd8:	4650      	mov	r0, sl
 800ddda:	4659      	mov	r1, fp
 800dddc:	2300      	movs	r3, #0
 800ddde:	07e2      	lsls	r2, r4, #31
 800dde0:	d504      	bpl.n	800ddec <_strtod_l+0x5c4>
 800dde2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dde6:	f7f2 fc07 	bl	80005f8 <__aeabi_dmul>
 800ddea:	2301      	movs	r3, #1
 800ddec:	1064      	asrs	r4, r4, #1
 800ddee:	f106 0608 	add.w	r6, r6, #8
 800ddf2:	d1f4      	bne.n	800ddde <_strtod_l+0x5b6>
 800ddf4:	b10b      	cbz	r3, 800ddfa <_strtod_l+0x5d2>
 800ddf6:	4682      	mov	sl, r0
 800ddf8:	468b      	mov	fp, r1
 800ddfa:	9b08      	ldr	r3, [sp, #32]
 800ddfc:	b1b3      	cbz	r3, 800de2c <_strtod_l+0x604>
 800ddfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800de02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800de06:	2b00      	cmp	r3, #0
 800de08:	4659      	mov	r1, fp
 800de0a:	dd0f      	ble.n	800de2c <_strtod_l+0x604>
 800de0c:	2b1f      	cmp	r3, #31
 800de0e:	dd55      	ble.n	800debc <_strtod_l+0x694>
 800de10:	2b34      	cmp	r3, #52	@ 0x34
 800de12:	bfde      	ittt	le
 800de14:	f04f 33ff 	movle.w	r3, #4294967295
 800de18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800de1c:	4093      	lslle	r3, r2
 800de1e:	f04f 0a00 	mov.w	sl, #0
 800de22:	bfcc      	ite	gt
 800de24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de28:	ea03 0b01 	andle.w	fp, r3, r1
 800de2c:	2200      	movs	r2, #0
 800de2e:	2300      	movs	r3, #0
 800de30:	4650      	mov	r0, sl
 800de32:	4659      	mov	r1, fp
 800de34:	f7f2 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d1a6      	bne.n	800dd8a <_strtod_l+0x562>
 800de3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800de42:	9805      	ldr	r0, [sp, #20]
 800de44:	462b      	mov	r3, r5
 800de46:	463a      	mov	r2, r7
 800de48:	f7ff f8c6 	bl	800cfd8 <__s2b>
 800de4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800de4e:	2800      	cmp	r0, #0
 800de50:	f43f af05 	beq.w	800dc5e <_strtod_l+0x436>
 800de54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de56:	2a00      	cmp	r2, #0
 800de58:	eba9 0308 	sub.w	r3, r9, r8
 800de5c:	bfa8      	it	ge
 800de5e:	2300      	movge	r3, #0
 800de60:	9312      	str	r3, [sp, #72]	@ 0x48
 800de62:	2400      	movs	r4, #0
 800de64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de68:	9316      	str	r3, [sp, #88]	@ 0x58
 800de6a:	46a0      	mov	r8, r4
 800de6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de6e:	9805      	ldr	r0, [sp, #20]
 800de70:	6859      	ldr	r1, [r3, #4]
 800de72:	f7ff f809 	bl	800ce88 <_Balloc>
 800de76:	4681      	mov	r9, r0
 800de78:	2800      	cmp	r0, #0
 800de7a:	f43f aef4 	beq.w	800dc66 <_strtod_l+0x43e>
 800de7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de80:	691a      	ldr	r2, [r3, #16]
 800de82:	3202      	adds	r2, #2
 800de84:	f103 010c 	add.w	r1, r3, #12
 800de88:	0092      	lsls	r2, r2, #2
 800de8a:	300c      	adds	r0, #12
 800de8c:	f7fe f899 	bl	800bfc2 <memcpy>
 800de90:	ec4b ab10 	vmov	d0, sl, fp
 800de94:	9805      	ldr	r0, [sp, #20]
 800de96:	aa1c      	add	r2, sp, #112	@ 0x70
 800de98:	a91b      	add	r1, sp, #108	@ 0x6c
 800de9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800de9e:	f7ff fbd7 	bl	800d650 <__d2b>
 800dea2:	901a      	str	r0, [sp, #104]	@ 0x68
 800dea4:	2800      	cmp	r0, #0
 800dea6:	f43f aede 	beq.w	800dc66 <_strtod_l+0x43e>
 800deaa:	9805      	ldr	r0, [sp, #20]
 800deac:	2101      	movs	r1, #1
 800deae:	f7ff f929 	bl	800d104 <__i2b>
 800deb2:	4680      	mov	r8, r0
 800deb4:	b948      	cbnz	r0, 800deca <_strtod_l+0x6a2>
 800deb6:	f04f 0800 	mov.w	r8, #0
 800deba:	e6d4      	b.n	800dc66 <_strtod_l+0x43e>
 800debc:	f04f 32ff 	mov.w	r2, #4294967295
 800dec0:	fa02 f303 	lsl.w	r3, r2, r3
 800dec4:	ea03 0a0a 	and.w	sl, r3, sl
 800dec8:	e7b0      	b.n	800de2c <_strtod_l+0x604>
 800deca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800decc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dece:	2d00      	cmp	r5, #0
 800ded0:	bfab      	itete	ge
 800ded2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ded4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ded6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ded8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800deda:	bfac      	ite	ge
 800dedc:	18ef      	addge	r7, r5, r3
 800dede:	1b5e      	sublt	r6, r3, r5
 800dee0:	9b08      	ldr	r3, [sp, #32]
 800dee2:	1aed      	subs	r5, r5, r3
 800dee4:	4415      	add	r5, r2
 800dee6:	4b66      	ldr	r3, [pc, #408]	@ (800e080 <_strtod_l+0x858>)
 800dee8:	3d01      	subs	r5, #1
 800deea:	429d      	cmp	r5, r3
 800deec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800def0:	da50      	bge.n	800df94 <_strtod_l+0x76c>
 800def2:	1b5b      	subs	r3, r3, r5
 800def4:	2b1f      	cmp	r3, #31
 800def6:	eba2 0203 	sub.w	r2, r2, r3
 800defa:	f04f 0101 	mov.w	r1, #1
 800defe:	dc3d      	bgt.n	800df7c <_strtod_l+0x754>
 800df00:	fa01 f303 	lsl.w	r3, r1, r3
 800df04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df06:	2300      	movs	r3, #0
 800df08:	9310      	str	r3, [sp, #64]	@ 0x40
 800df0a:	18bd      	adds	r5, r7, r2
 800df0c:	9b08      	ldr	r3, [sp, #32]
 800df0e:	42af      	cmp	r7, r5
 800df10:	4416      	add	r6, r2
 800df12:	441e      	add	r6, r3
 800df14:	463b      	mov	r3, r7
 800df16:	bfa8      	it	ge
 800df18:	462b      	movge	r3, r5
 800df1a:	42b3      	cmp	r3, r6
 800df1c:	bfa8      	it	ge
 800df1e:	4633      	movge	r3, r6
 800df20:	2b00      	cmp	r3, #0
 800df22:	bfc2      	ittt	gt
 800df24:	1aed      	subgt	r5, r5, r3
 800df26:	1af6      	subgt	r6, r6, r3
 800df28:	1aff      	subgt	r7, r7, r3
 800df2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	dd16      	ble.n	800df5e <_strtod_l+0x736>
 800df30:	4641      	mov	r1, r8
 800df32:	9805      	ldr	r0, [sp, #20]
 800df34:	461a      	mov	r2, r3
 800df36:	f7ff f9a5 	bl	800d284 <__pow5mult>
 800df3a:	4680      	mov	r8, r0
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d0ba      	beq.n	800deb6 <_strtod_l+0x68e>
 800df40:	4601      	mov	r1, r0
 800df42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df44:	9805      	ldr	r0, [sp, #20]
 800df46:	f7ff f8f3 	bl	800d130 <__multiply>
 800df4a:	900e      	str	r0, [sp, #56]	@ 0x38
 800df4c:	2800      	cmp	r0, #0
 800df4e:	f43f ae8a 	beq.w	800dc66 <_strtod_l+0x43e>
 800df52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df54:	9805      	ldr	r0, [sp, #20]
 800df56:	f7fe ffd7 	bl	800cf08 <_Bfree>
 800df5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800df5e:	2d00      	cmp	r5, #0
 800df60:	dc1d      	bgt.n	800df9e <_strtod_l+0x776>
 800df62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df64:	2b00      	cmp	r3, #0
 800df66:	dd23      	ble.n	800dfb0 <_strtod_l+0x788>
 800df68:	4649      	mov	r1, r9
 800df6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df6c:	9805      	ldr	r0, [sp, #20]
 800df6e:	f7ff f989 	bl	800d284 <__pow5mult>
 800df72:	4681      	mov	r9, r0
 800df74:	b9e0      	cbnz	r0, 800dfb0 <_strtod_l+0x788>
 800df76:	f04f 0900 	mov.w	r9, #0
 800df7a:	e674      	b.n	800dc66 <_strtod_l+0x43e>
 800df7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800df88:	35e2      	adds	r5, #226	@ 0xe2
 800df8a:	fa01 f305 	lsl.w	r3, r1, r5
 800df8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800df90:	9113      	str	r1, [sp, #76]	@ 0x4c
 800df92:	e7ba      	b.n	800df0a <_strtod_l+0x6e2>
 800df94:	2300      	movs	r3, #0
 800df96:	9310      	str	r3, [sp, #64]	@ 0x40
 800df98:	2301      	movs	r3, #1
 800df9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df9c:	e7b5      	b.n	800df0a <_strtod_l+0x6e2>
 800df9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfa0:	9805      	ldr	r0, [sp, #20]
 800dfa2:	462a      	mov	r2, r5
 800dfa4:	f7ff f9c8 	bl	800d338 <__lshift>
 800dfa8:	901a      	str	r0, [sp, #104]	@ 0x68
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d1d9      	bne.n	800df62 <_strtod_l+0x73a>
 800dfae:	e65a      	b.n	800dc66 <_strtod_l+0x43e>
 800dfb0:	2e00      	cmp	r6, #0
 800dfb2:	dd07      	ble.n	800dfc4 <_strtod_l+0x79c>
 800dfb4:	4649      	mov	r1, r9
 800dfb6:	9805      	ldr	r0, [sp, #20]
 800dfb8:	4632      	mov	r2, r6
 800dfba:	f7ff f9bd 	bl	800d338 <__lshift>
 800dfbe:	4681      	mov	r9, r0
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d0d8      	beq.n	800df76 <_strtod_l+0x74e>
 800dfc4:	2f00      	cmp	r7, #0
 800dfc6:	dd08      	ble.n	800dfda <_strtod_l+0x7b2>
 800dfc8:	4641      	mov	r1, r8
 800dfca:	9805      	ldr	r0, [sp, #20]
 800dfcc:	463a      	mov	r2, r7
 800dfce:	f7ff f9b3 	bl	800d338 <__lshift>
 800dfd2:	4680      	mov	r8, r0
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	f43f ae46 	beq.w	800dc66 <_strtod_l+0x43e>
 800dfda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfdc:	9805      	ldr	r0, [sp, #20]
 800dfde:	464a      	mov	r2, r9
 800dfe0:	f7ff fa32 	bl	800d448 <__mdiff>
 800dfe4:	4604      	mov	r4, r0
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	f43f ae3d 	beq.w	800dc66 <_strtod_l+0x43e>
 800dfec:	68c3      	ldr	r3, [r0, #12]
 800dfee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dff0:	2300      	movs	r3, #0
 800dff2:	60c3      	str	r3, [r0, #12]
 800dff4:	4641      	mov	r1, r8
 800dff6:	f7ff fa0b 	bl	800d410 <__mcmp>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	da46      	bge.n	800e08c <_strtod_l+0x864>
 800dffe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e000:	ea53 030a 	orrs.w	r3, r3, sl
 800e004:	d16c      	bne.n	800e0e0 <_strtod_l+0x8b8>
 800e006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d168      	bne.n	800e0e0 <_strtod_l+0x8b8>
 800e00e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e012:	0d1b      	lsrs	r3, r3, #20
 800e014:	051b      	lsls	r3, r3, #20
 800e016:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e01a:	d961      	bls.n	800e0e0 <_strtod_l+0x8b8>
 800e01c:	6963      	ldr	r3, [r4, #20]
 800e01e:	b913      	cbnz	r3, 800e026 <_strtod_l+0x7fe>
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	2b01      	cmp	r3, #1
 800e024:	dd5c      	ble.n	800e0e0 <_strtod_l+0x8b8>
 800e026:	4621      	mov	r1, r4
 800e028:	2201      	movs	r2, #1
 800e02a:	9805      	ldr	r0, [sp, #20]
 800e02c:	f7ff f984 	bl	800d338 <__lshift>
 800e030:	4641      	mov	r1, r8
 800e032:	4604      	mov	r4, r0
 800e034:	f7ff f9ec 	bl	800d410 <__mcmp>
 800e038:	2800      	cmp	r0, #0
 800e03a:	dd51      	ble.n	800e0e0 <_strtod_l+0x8b8>
 800e03c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e040:	9a08      	ldr	r2, [sp, #32]
 800e042:	0d1b      	lsrs	r3, r3, #20
 800e044:	051b      	lsls	r3, r3, #20
 800e046:	2a00      	cmp	r2, #0
 800e048:	d06b      	beq.n	800e122 <_strtod_l+0x8fa>
 800e04a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e04e:	d868      	bhi.n	800e122 <_strtod_l+0x8fa>
 800e050:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e054:	f67f ae9d 	bls.w	800dd92 <_strtod_l+0x56a>
 800e058:	4b0a      	ldr	r3, [pc, #40]	@ (800e084 <_strtod_l+0x85c>)
 800e05a:	4650      	mov	r0, sl
 800e05c:	4659      	mov	r1, fp
 800e05e:	2200      	movs	r2, #0
 800e060:	f7f2 faca 	bl	80005f8 <__aeabi_dmul>
 800e064:	4b08      	ldr	r3, [pc, #32]	@ (800e088 <_strtod_l+0x860>)
 800e066:	400b      	ands	r3, r1
 800e068:	4682      	mov	sl, r0
 800e06a:	468b      	mov	fp, r1
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f47f ae05 	bne.w	800dc7c <_strtod_l+0x454>
 800e072:	9a05      	ldr	r2, [sp, #20]
 800e074:	2322      	movs	r3, #34	@ 0x22
 800e076:	6013      	str	r3, [r2, #0]
 800e078:	e600      	b.n	800dc7c <_strtod_l+0x454>
 800e07a:	bf00      	nop
 800e07c:	0800f990 	.word	0x0800f990
 800e080:	fffffc02 	.word	0xfffffc02
 800e084:	39500000 	.word	0x39500000
 800e088:	7ff00000 	.word	0x7ff00000
 800e08c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e090:	d165      	bne.n	800e15e <_strtod_l+0x936>
 800e092:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e098:	b35a      	cbz	r2, 800e0f2 <_strtod_l+0x8ca>
 800e09a:	4a9f      	ldr	r2, [pc, #636]	@ (800e318 <_strtod_l+0xaf0>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d12b      	bne.n	800e0f8 <_strtod_l+0x8d0>
 800e0a0:	9b08      	ldr	r3, [sp, #32]
 800e0a2:	4651      	mov	r1, sl
 800e0a4:	b303      	cbz	r3, 800e0e8 <_strtod_l+0x8c0>
 800e0a6:	4b9d      	ldr	r3, [pc, #628]	@ (800e31c <_strtod_l+0xaf4>)
 800e0a8:	465a      	mov	r2, fp
 800e0aa:	4013      	ands	r3, r2
 800e0ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b4:	d81b      	bhi.n	800e0ee <_strtod_l+0x8c6>
 800e0b6:	0d1b      	lsrs	r3, r3, #20
 800e0b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c0:	4299      	cmp	r1, r3
 800e0c2:	d119      	bne.n	800e0f8 <_strtod_l+0x8d0>
 800e0c4:	4b96      	ldr	r3, [pc, #600]	@ (800e320 <_strtod_l+0xaf8>)
 800e0c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d102      	bne.n	800e0d2 <_strtod_l+0x8aa>
 800e0cc:	3101      	adds	r1, #1
 800e0ce:	f43f adca 	beq.w	800dc66 <_strtod_l+0x43e>
 800e0d2:	4b92      	ldr	r3, [pc, #584]	@ (800e31c <_strtod_l+0xaf4>)
 800e0d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0d6:	401a      	ands	r2, r3
 800e0d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e0dc:	f04f 0a00 	mov.w	sl, #0
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1b8      	bne.n	800e058 <_strtod_l+0x830>
 800e0e6:	e5c9      	b.n	800dc7c <_strtod_l+0x454>
 800e0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ec:	e7e8      	b.n	800e0c0 <_strtod_l+0x898>
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	e7e6      	b.n	800e0c0 <_strtod_l+0x898>
 800e0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800e0f6:	d0a1      	beq.n	800e03c <_strtod_l+0x814>
 800e0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0fa:	b1db      	cbz	r3, 800e134 <_strtod_l+0x90c>
 800e0fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0fe:	4213      	tst	r3, r2
 800e100:	d0ee      	beq.n	800e0e0 <_strtod_l+0x8b8>
 800e102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e104:	9a08      	ldr	r2, [sp, #32]
 800e106:	4650      	mov	r0, sl
 800e108:	4659      	mov	r1, fp
 800e10a:	b1bb      	cbz	r3, 800e13c <_strtod_l+0x914>
 800e10c:	f7ff fb6e 	bl	800d7ec <sulp>
 800e110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e114:	ec53 2b10 	vmov	r2, r3, d0
 800e118:	f7f2 f8b8 	bl	800028c <__adddf3>
 800e11c:	4682      	mov	sl, r0
 800e11e:	468b      	mov	fp, r1
 800e120:	e7de      	b.n	800e0e0 <_strtod_l+0x8b8>
 800e122:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e126:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e12a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e12e:	f04f 3aff 	mov.w	sl, #4294967295
 800e132:	e7d5      	b.n	800e0e0 <_strtod_l+0x8b8>
 800e134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e136:	ea13 0f0a 	tst.w	r3, sl
 800e13a:	e7e1      	b.n	800e100 <_strtod_l+0x8d8>
 800e13c:	f7ff fb56 	bl	800d7ec <sulp>
 800e140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e144:	ec53 2b10 	vmov	r2, r3, d0
 800e148:	f7f2 f89e 	bl	8000288 <__aeabi_dsub>
 800e14c:	2200      	movs	r2, #0
 800e14e:	2300      	movs	r3, #0
 800e150:	4682      	mov	sl, r0
 800e152:	468b      	mov	fp, r1
 800e154:	f7f2 fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d0c1      	beq.n	800e0e0 <_strtod_l+0x8b8>
 800e15c:	e619      	b.n	800dd92 <_strtod_l+0x56a>
 800e15e:	4641      	mov	r1, r8
 800e160:	4620      	mov	r0, r4
 800e162:	f7ff facd 	bl	800d700 <__ratio>
 800e166:	ec57 6b10 	vmov	r6, r7, d0
 800e16a:	2200      	movs	r2, #0
 800e16c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e170:	4630      	mov	r0, r6
 800e172:	4639      	mov	r1, r7
 800e174:	f7f2 fcbc 	bl	8000af0 <__aeabi_dcmple>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d06f      	beq.n	800e25c <_strtod_l+0xa34>
 800e17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d17a      	bne.n	800e278 <_strtod_l+0xa50>
 800e182:	f1ba 0f00 	cmp.w	sl, #0
 800e186:	d158      	bne.n	800e23a <_strtod_l+0xa12>
 800e188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e18a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d15a      	bne.n	800e248 <_strtod_l+0xa20>
 800e192:	4b64      	ldr	r3, [pc, #400]	@ (800e324 <_strtod_l+0xafc>)
 800e194:	2200      	movs	r2, #0
 800e196:	4630      	mov	r0, r6
 800e198:	4639      	mov	r1, r7
 800e19a:	f7f2 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d159      	bne.n	800e256 <_strtod_l+0xa2e>
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	4639      	mov	r1, r7
 800e1a6:	4b60      	ldr	r3, [pc, #384]	@ (800e328 <_strtod_l+0xb00>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f7f2 fa25 	bl	80005f8 <__aeabi_dmul>
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	460f      	mov	r7, r1
 800e1b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e1b6:	9606      	str	r6, [sp, #24]
 800e1b8:	9307      	str	r3, [sp, #28]
 800e1ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1be:	4d57      	ldr	r5, [pc, #348]	@ (800e31c <_strtod_l+0xaf4>)
 800e1c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1c6:	401d      	ands	r5, r3
 800e1c8:	4b58      	ldr	r3, [pc, #352]	@ (800e32c <_strtod_l+0xb04>)
 800e1ca:	429d      	cmp	r5, r3
 800e1cc:	f040 80b2 	bne.w	800e334 <_strtod_l+0xb0c>
 800e1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e1d6:	ec4b ab10 	vmov	d0, sl, fp
 800e1da:	f7ff f9c9 	bl	800d570 <__ulp>
 800e1de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1e2:	ec51 0b10 	vmov	r0, r1, d0
 800e1e6:	f7f2 fa07 	bl	80005f8 <__aeabi_dmul>
 800e1ea:	4652      	mov	r2, sl
 800e1ec:	465b      	mov	r3, fp
 800e1ee:	f7f2 f84d 	bl	800028c <__adddf3>
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4949      	ldr	r1, [pc, #292]	@ (800e31c <_strtod_l+0xaf4>)
 800e1f6:	4a4e      	ldr	r2, [pc, #312]	@ (800e330 <_strtod_l+0xb08>)
 800e1f8:	4019      	ands	r1, r3
 800e1fa:	4291      	cmp	r1, r2
 800e1fc:	4682      	mov	sl, r0
 800e1fe:	d942      	bls.n	800e286 <_strtod_l+0xa5e>
 800e200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e202:	4b47      	ldr	r3, [pc, #284]	@ (800e320 <_strtod_l+0xaf8>)
 800e204:	429a      	cmp	r2, r3
 800e206:	d103      	bne.n	800e210 <_strtod_l+0x9e8>
 800e208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e20a:	3301      	adds	r3, #1
 800e20c:	f43f ad2b 	beq.w	800dc66 <_strtod_l+0x43e>
 800e210:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e320 <_strtod_l+0xaf8>
 800e214:	f04f 3aff 	mov.w	sl, #4294967295
 800e218:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e21a:	9805      	ldr	r0, [sp, #20]
 800e21c:	f7fe fe74 	bl	800cf08 <_Bfree>
 800e220:	9805      	ldr	r0, [sp, #20]
 800e222:	4649      	mov	r1, r9
 800e224:	f7fe fe70 	bl	800cf08 <_Bfree>
 800e228:	9805      	ldr	r0, [sp, #20]
 800e22a:	4641      	mov	r1, r8
 800e22c:	f7fe fe6c 	bl	800cf08 <_Bfree>
 800e230:	9805      	ldr	r0, [sp, #20]
 800e232:	4621      	mov	r1, r4
 800e234:	f7fe fe68 	bl	800cf08 <_Bfree>
 800e238:	e618      	b.n	800de6c <_strtod_l+0x644>
 800e23a:	f1ba 0f01 	cmp.w	sl, #1
 800e23e:	d103      	bne.n	800e248 <_strtod_l+0xa20>
 800e240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e242:	2b00      	cmp	r3, #0
 800e244:	f43f ada5 	beq.w	800dd92 <_strtod_l+0x56a>
 800e248:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e2f8 <_strtod_l+0xad0>
 800e24c:	4f35      	ldr	r7, [pc, #212]	@ (800e324 <_strtod_l+0xafc>)
 800e24e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e252:	2600      	movs	r6, #0
 800e254:	e7b1      	b.n	800e1ba <_strtod_l+0x992>
 800e256:	4f34      	ldr	r7, [pc, #208]	@ (800e328 <_strtod_l+0xb00>)
 800e258:	2600      	movs	r6, #0
 800e25a:	e7aa      	b.n	800e1b2 <_strtod_l+0x98a>
 800e25c:	4b32      	ldr	r3, [pc, #200]	@ (800e328 <_strtod_l+0xb00>)
 800e25e:	4630      	mov	r0, r6
 800e260:	4639      	mov	r1, r7
 800e262:	2200      	movs	r2, #0
 800e264:	f7f2 f9c8 	bl	80005f8 <__aeabi_dmul>
 800e268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e26a:	4606      	mov	r6, r0
 800e26c:	460f      	mov	r7, r1
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d09f      	beq.n	800e1b2 <_strtod_l+0x98a>
 800e272:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e276:	e7a0      	b.n	800e1ba <_strtod_l+0x992>
 800e278:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e300 <_strtod_l+0xad8>
 800e27c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e280:	ec57 6b17 	vmov	r6, r7, d7
 800e284:	e799      	b.n	800e1ba <_strtod_l+0x992>
 800e286:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e28a:	9b08      	ldr	r3, [sp, #32]
 800e28c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e290:	2b00      	cmp	r3, #0
 800e292:	d1c1      	bne.n	800e218 <_strtod_l+0x9f0>
 800e294:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e298:	0d1b      	lsrs	r3, r3, #20
 800e29a:	051b      	lsls	r3, r3, #20
 800e29c:	429d      	cmp	r5, r3
 800e29e:	d1bb      	bne.n	800e218 <_strtod_l+0x9f0>
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	f7f2 fcf0 	bl	8000c88 <__aeabi_d2lz>
 800e2a8:	f7f2 f978 	bl	800059c <__aeabi_l2d>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	4639      	mov	r1, r7
 800e2b4:	f7f1 ffe8 	bl	8000288 <__aeabi_dsub>
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e2c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2c6:	ea46 060a 	orr.w	r6, r6, sl
 800e2ca:	431e      	orrs	r6, r3
 800e2cc:	d06f      	beq.n	800e3ae <_strtod_l+0xb86>
 800e2ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800e308 <_strtod_l+0xae0>)
 800e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d4:	f7f2 fc02 	bl	8000adc <__aeabi_dcmplt>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	f47f accf 	bne.w	800dc7c <_strtod_l+0x454>
 800e2de:	a30c      	add	r3, pc, #48	@ (adr r3, 800e310 <_strtod_l+0xae8>)
 800e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2e8:	f7f2 fc16 	bl	8000b18 <__aeabi_dcmpgt>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d093      	beq.n	800e218 <_strtod_l+0x9f0>
 800e2f0:	e4c4      	b.n	800dc7c <_strtod_l+0x454>
 800e2f2:	bf00      	nop
 800e2f4:	f3af 8000 	nop.w
 800e2f8:	00000000 	.word	0x00000000
 800e2fc:	bff00000 	.word	0xbff00000
 800e300:	00000000 	.word	0x00000000
 800e304:	3ff00000 	.word	0x3ff00000
 800e308:	94a03595 	.word	0x94a03595
 800e30c:	3fdfffff 	.word	0x3fdfffff
 800e310:	35afe535 	.word	0x35afe535
 800e314:	3fe00000 	.word	0x3fe00000
 800e318:	000fffff 	.word	0x000fffff
 800e31c:	7ff00000 	.word	0x7ff00000
 800e320:	7fefffff 	.word	0x7fefffff
 800e324:	3ff00000 	.word	0x3ff00000
 800e328:	3fe00000 	.word	0x3fe00000
 800e32c:	7fe00000 	.word	0x7fe00000
 800e330:	7c9fffff 	.word	0x7c9fffff
 800e334:	9b08      	ldr	r3, [sp, #32]
 800e336:	b323      	cbz	r3, 800e382 <_strtod_l+0xb5a>
 800e338:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e33c:	d821      	bhi.n	800e382 <_strtod_l+0xb5a>
 800e33e:	a328      	add	r3, pc, #160	@ (adr r3, 800e3e0 <_strtod_l+0xbb8>)
 800e340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e344:	4630      	mov	r0, r6
 800e346:	4639      	mov	r1, r7
 800e348:	f7f2 fbd2 	bl	8000af0 <__aeabi_dcmple>
 800e34c:	b1a0      	cbz	r0, 800e378 <_strtod_l+0xb50>
 800e34e:	4639      	mov	r1, r7
 800e350:	4630      	mov	r0, r6
 800e352:	f7f2 fc29 	bl	8000ba8 <__aeabi_d2uiz>
 800e356:	2801      	cmp	r0, #1
 800e358:	bf38      	it	cc
 800e35a:	2001      	movcc	r0, #1
 800e35c:	f7f2 f8d2 	bl	8000504 <__aeabi_ui2d>
 800e360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e362:	4606      	mov	r6, r0
 800e364:	460f      	mov	r7, r1
 800e366:	b9fb      	cbnz	r3, 800e3a8 <_strtod_l+0xb80>
 800e368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e36c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e36e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e370:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e374:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e378:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e37a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e37e:	1b5b      	subs	r3, r3, r5
 800e380:	9311      	str	r3, [sp, #68]	@ 0x44
 800e382:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e386:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e38a:	f7ff f8f1 	bl	800d570 <__ulp>
 800e38e:	4650      	mov	r0, sl
 800e390:	ec53 2b10 	vmov	r2, r3, d0
 800e394:	4659      	mov	r1, fp
 800e396:	f7f2 f92f 	bl	80005f8 <__aeabi_dmul>
 800e39a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e39e:	f7f1 ff75 	bl	800028c <__adddf3>
 800e3a2:	4682      	mov	sl, r0
 800e3a4:	468b      	mov	fp, r1
 800e3a6:	e770      	b.n	800e28a <_strtod_l+0xa62>
 800e3a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e3ac:	e7e0      	b.n	800e370 <_strtod_l+0xb48>
 800e3ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800e3e8 <_strtod_l+0xbc0>)
 800e3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b4:	f7f2 fb92 	bl	8000adc <__aeabi_dcmplt>
 800e3b8:	e798      	b.n	800e2ec <_strtod_l+0xac4>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3c2:	6013      	str	r3, [r2, #0]
 800e3c4:	f7ff ba6d 	b.w	800d8a2 <_strtod_l+0x7a>
 800e3c8:	2a65      	cmp	r2, #101	@ 0x65
 800e3ca:	f43f ab66 	beq.w	800da9a <_strtod_l+0x272>
 800e3ce:	2a45      	cmp	r2, #69	@ 0x45
 800e3d0:	f43f ab63 	beq.w	800da9a <_strtod_l+0x272>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	f7ff bb9e 	b.w	800db16 <_strtod_l+0x2ee>
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	ffc00000 	.word	0xffc00000
 800e3e4:	41dfffff 	.word	0x41dfffff
 800e3e8:	94a03595 	.word	0x94a03595
 800e3ec:	3fcfffff 	.word	0x3fcfffff

0800e3f0 <_strtod_r>:
 800e3f0:	4b01      	ldr	r3, [pc, #4]	@ (800e3f8 <_strtod_r+0x8>)
 800e3f2:	f7ff ba19 	b.w	800d828 <_strtod_l>
 800e3f6:	bf00      	nop
 800e3f8:	200001d8 	.word	0x200001d8

0800e3fc <_strtol_l.constprop.0>:
 800e3fc:	2b24      	cmp	r3, #36	@ 0x24
 800e3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e402:	4686      	mov	lr, r0
 800e404:	4690      	mov	r8, r2
 800e406:	d801      	bhi.n	800e40c <_strtol_l.constprop.0+0x10>
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d106      	bne.n	800e41a <_strtol_l.constprop.0+0x1e>
 800e40c:	f7fd fdac 	bl	800bf68 <__errno>
 800e410:	2316      	movs	r3, #22
 800e412:	6003      	str	r3, [r0, #0]
 800e414:	2000      	movs	r0, #0
 800e416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41a:	4834      	ldr	r0, [pc, #208]	@ (800e4ec <_strtol_l.constprop.0+0xf0>)
 800e41c:	460d      	mov	r5, r1
 800e41e:	462a      	mov	r2, r5
 800e420:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e424:	5d06      	ldrb	r6, [r0, r4]
 800e426:	f016 0608 	ands.w	r6, r6, #8
 800e42a:	d1f8      	bne.n	800e41e <_strtol_l.constprop.0+0x22>
 800e42c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e42e:	d12d      	bne.n	800e48c <_strtol_l.constprop.0+0x90>
 800e430:	782c      	ldrb	r4, [r5, #0]
 800e432:	2601      	movs	r6, #1
 800e434:	1c95      	adds	r5, r2, #2
 800e436:	f033 0210 	bics.w	r2, r3, #16
 800e43a:	d109      	bne.n	800e450 <_strtol_l.constprop.0+0x54>
 800e43c:	2c30      	cmp	r4, #48	@ 0x30
 800e43e:	d12a      	bne.n	800e496 <_strtol_l.constprop.0+0x9a>
 800e440:	782a      	ldrb	r2, [r5, #0]
 800e442:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e446:	2a58      	cmp	r2, #88	@ 0x58
 800e448:	d125      	bne.n	800e496 <_strtol_l.constprop.0+0x9a>
 800e44a:	786c      	ldrb	r4, [r5, #1]
 800e44c:	2310      	movs	r3, #16
 800e44e:	3502      	adds	r5, #2
 800e450:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e454:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e458:	2200      	movs	r2, #0
 800e45a:	fbbc f9f3 	udiv	r9, ip, r3
 800e45e:	4610      	mov	r0, r2
 800e460:	fb03 ca19 	mls	sl, r3, r9, ip
 800e464:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e468:	2f09      	cmp	r7, #9
 800e46a:	d81b      	bhi.n	800e4a4 <_strtol_l.constprop.0+0xa8>
 800e46c:	463c      	mov	r4, r7
 800e46e:	42a3      	cmp	r3, r4
 800e470:	dd27      	ble.n	800e4c2 <_strtol_l.constprop.0+0xc6>
 800e472:	1c57      	adds	r7, r2, #1
 800e474:	d007      	beq.n	800e486 <_strtol_l.constprop.0+0x8a>
 800e476:	4581      	cmp	r9, r0
 800e478:	d320      	bcc.n	800e4bc <_strtol_l.constprop.0+0xc0>
 800e47a:	d101      	bne.n	800e480 <_strtol_l.constprop.0+0x84>
 800e47c:	45a2      	cmp	sl, r4
 800e47e:	db1d      	blt.n	800e4bc <_strtol_l.constprop.0+0xc0>
 800e480:	fb00 4003 	mla	r0, r0, r3, r4
 800e484:	2201      	movs	r2, #1
 800e486:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e48a:	e7eb      	b.n	800e464 <_strtol_l.constprop.0+0x68>
 800e48c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e48e:	bf04      	itt	eq
 800e490:	782c      	ldrbeq	r4, [r5, #0]
 800e492:	1c95      	addeq	r5, r2, #2
 800e494:	e7cf      	b.n	800e436 <_strtol_l.constprop.0+0x3a>
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1da      	bne.n	800e450 <_strtol_l.constprop.0+0x54>
 800e49a:	2c30      	cmp	r4, #48	@ 0x30
 800e49c:	bf0c      	ite	eq
 800e49e:	2308      	moveq	r3, #8
 800e4a0:	230a      	movne	r3, #10
 800e4a2:	e7d5      	b.n	800e450 <_strtol_l.constprop.0+0x54>
 800e4a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4a8:	2f19      	cmp	r7, #25
 800e4aa:	d801      	bhi.n	800e4b0 <_strtol_l.constprop.0+0xb4>
 800e4ac:	3c37      	subs	r4, #55	@ 0x37
 800e4ae:	e7de      	b.n	800e46e <_strtol_l.constprop.0+0x72>
 800e4b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4b4:	2f19      	cmp	r7, #25
 800e4b6:	d804      	bhi.n	800e4c2 <_strtol_l.constprop.0+0xc6>
 800e4b8:	3c57      	subs	r4, #87	@ 0x57
 800e4ba:	e7d8      	b.n	800e46e <_strtol_l.constprop.0+0x72>
 800e4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c0:	e7e1      	b.n	800e486 <_strtol_l.constprop.0+0x8a>
 800e4c2:	1c53      	adds	r3, r2, #1
 800e4c4:	d108      	bne.n	800e4d8 <_strtol_l.constprop.0+0xdc>
 800e4c6:	2322      	movs	r3, #34	@ 0x22
 800e4c8:	f8ce 3000 	str.w	r3, [lr]
 800e4cc:	4660      	mov	r0, ip
 800e4ce:	f1b8 0f00 	cmp.w	r8, #0
 800e4d2:	d0a0      	beq.n	800e416 <_strtol_l.constprop.0+0x1a>
 800e4d4:	1e69      	subs	r1, r5, #1
 800e4d6:	e006      	b.n	800e4e6 <_strtol_l.constprop.0+0xea>
 800e4d8:	b106      	cbz	r6, 800e4dc <_strtol_l.constprop.0+0xe0>
 800e4da:	4240      	negs	r0, r0
 800e4dc:	f1b8 0f00 	cmp.w	r8, #0
 800e4e0:	d099      	beq.n	800e416 <_strtol_l.constprop.0+0x1a>
 800e4e2:	2a00      	cmp	r2, #0
 800e4e4:	d1f6      	bne.n	800e4d4 <_strtol_l.constprop.0+0xd8>
 800e4e6:	f8c8 1000 	str.w	r1, [r8]
 800e4ea:	e794      	b.n	800e416 <_strtol_l.constprop.0+0x1a>
 800e4ec:	0800f9b9 	.word	0x0800f9b9

0800e4f0 <_strtol_r>:
 800e4f0:	f7ff bf84 	b.w	800e3fc <_strtol_l.constprop.0>

0800e4f4 <__ssputs_r>:
 800e4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f8:	688e      	ldr	r6, [r1, #8]
 800e4fa:	461f      	mov	r7, r3
 800e4fc:	42be      	cmp	r6, r7
 800e4fe:	680b      	ldr	r3, [r1, #0]
 800e500:	4682      	mov	sl, r0
 800e502:	460c      	mov	r4, r1
 800e504:	4690      	mov	r8, r2
 800e506:	d82d      	bhi.n	800e564 <__ssputs_r+0x70>
 800e508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e50c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e510:	d026      	beq.n	800e560 <__ssputs_r+0x6c>
 800e512:	6965      	ldr	r5, [r4, #20]
 800e514:	6909      	ldr	r1, [r1, #16]
 800e516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e51a:	eba3 0901 	sub.w	r9, r3, r1
 800e51e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e522:	1c7b      	adds	r3, r7, #1
 800e524:	444b      	add	r3, r9
 800e526:	106d      	asrs	r5, r5, #1
 800e528:	429d      	cmp	r5, r3
 800e52a:	bf38      	it	cc
 800e52c:	461d      	movcc	r5, r3
 800e52e:	0553      	lsls	r3, r2, #21
 800e530:	d527      	bpl.n	800e582 <__ssputs_r+0x8e>
 800e532:	4629      	mov	r1, r5
 800e534:	f7fe fc1c 	bl	800cd70 <_malloc_r>
 800e538:	4606      	mov	r6, r0
 800e53a:	b360      	cbz	r0, 800e596 <__ssputs_r+0xa2>
 800e53c:	6921      	ldr	r1, [r4, #16]
 800e53e:	464a      	mov	r2, r9
 800e540:	f7fd fd3f 	bl	800bfc2 <memcpy>
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e54e:	81a3      	strh	r3, [r4, #12]
 800e550:	6126      	str	r6, [r4, #16]
 800e552:	6165      	str	r5, [r4, #20]
 800e554:	444e      	add	r6, r9
 800e556:	eba5 0509 	sub.w	r5, r5, r9
 800e55a:	6026      	str	r6, [r4, #0]
 800e55c:	60a5      	str	r5, [r4, #8]
 800e55e:	463e      	mov	r6, r7
 800e560:	42be      	cmp	r6, r7
 800e562:	d900      	bls.n	800e566 <__ssputs_r+0x72>
 800e564:	463e      	mov	r6, r7
 800e566:	6820      	ldr	r0, [r4, #0]
 800e568:	4632      	mov	r2, r6
 800e56a:	4641      	mov	r1, r8
 800e56c:	f000 f9c6 	bl	800e8fc <memmove>
 800e570:	68a3      	ldr	r3, [r4, #8]
 800e572:	1b9b      	subs	r3, r3, r6
 800e574:	60a3      	str	r3, [r4, #8]
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	4433      	add	r3, r6
 800e57a:	6023      	str	r3, [r4, #0]
 800e57c:	2000      	movs	r0, #0
 800e57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e582:	462a      	mov	r2, r5
 800e584:	f000 fd7d 	bl	800f082 <_realloc_r>
 800e588:	4606      	mov	r6, r0
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d1e0      	bne.n	800e550 <__ssputs_r+0x5c>
 800e58e:	6921      	ldr	r1, [r4, #16]
 800e590:	4650      	mov	r0, sl
 800e592:	f7fe fb79 	bl	800cc88 <_free_r>
 800e596:	230c      	movs	r3, #12
 800e598:	f8ca 3000 	str.w	r3, [sl]
 800e59c:	89a3      	ldrh	r3, [r4, #12]
 800e59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5a2:	81a3      	strh	r3, [r4, #12]
 800e5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a8:	e7e9      	b.n	800e57e <__ssputs_r+0x8a>
	...

0800e5ac <_svfiprintf_r>:
 800e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b0:	4698      	mov	r8, r3
 800e5b2:	898b      	ldrh	r3, [r1, #12]
 800e5b4:	061b      	lsls	r3, r3, #24
 800e5b6:	b09d      	sub	sp, #116	@ 0x74
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	460d      	mov	r5, r1
 800e5bc:	4614      	mov	r4, r2
 800e5be:	d510      	bpl.n	800e5e2 <_svfiprintf_r+0x36>
 800e5c0:	690b      	ldr	r3, [r1, #16]
 800e5c2:	b973      	cbnz	r3, 800e5e2 <_svfiprintf_r+0x36>
 800e5c4:	2140      	movs	r1, #64	@ 0x40
 800e5c6:	f7fe fbd3 	bl	800cd70 <_malloc_r>
 800e5ca:	6028      	str	r0, [r5, #0]
 800e5cc:	6128      	str	r0, [r5, #16]
 800e5ce:	b930      	cbnz	r0, 800e5de <_svfiprintf_r+0x32>
 800e5d0:	230c      	movs	r3, #12
 800e5d2:	603b      	str	r3, [r7, #0]
 800e5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d8:	b01d      	add	sp, #116	@ 0x74
 800e5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5de:	2340      	movs	r3, #64	@ 0x40
 800e5e0:	616b      	str	r3, [r5, #20]
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5e6:	2320      	movs	r3, #32
 800e5e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5f0:	2330      	movs	r3, #48	@ 0x30
 800e5f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e790 <_svfiprintf_r+0x1e4>
 800e5f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5fa:	f04f 0901 	mov.w	r9, #1
 800e5fe:	4623      	mov	r3, r4
 800e600:	469a      	mov	sl, r3
 800e602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e606:	b10a      	cbz	r2, 800e60c <_svfiprintf_r+0x60>
 800e608:	2a25      	cmp	r2, #37	@ 0x25
 800e60a:	d1f9      	bne.n	800e600 <_svfiprintf_r+0x54>
 800e60c:	ebba 0b04 	subs.w	fp, sl, r4
 800e610:	d00b      	beq.n	800e62a <_svfiprintf_r+0x7e>
 800e612:	465b      	mov	r3, fp
 800e614:	4622      	mov	r2, r4
 800e616:	4629      	mov	r1, r5
 800e618:	4638      	mov	r0, r7
 800e61a:	f7ff ff6b 	bl	800e4f4 <__ssputs_r>
 800e61e:	3001      	adds	r0, #1
 800e620:	f000 80a7 	beq.w	800e772 <_svfiprintf_r+0x1c6>
 800e624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e626:	445a      	add	r2, fp
 800e628:	9209      	str	r2, [sp, #36]	@ 0x24
 800e62a:	f89a 3000 	ldrb.w	r3, [sl]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 809f 	beq.w	800e772 <_svfiprintf_r+0x1c6>
 800e634:	2300      	movs	r3, #0
 800e636:	f04f 32ff 	mov.w	r2, #4294967295
 800e63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e63e:	f10a 0a01 	add.w	sl, sl, #1
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	9307      	str	r3, [sp, #28]
 800e646:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e64a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e64c:	4654      	mov	r4, sl
 800e64e:	2205      	movs	r2, #5
 800e650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e654:	484e      	ldr	r0, [pc, #312]	@ (800e790 <_svfiprintf_r+0x1e4>)
 800e656:	f7f1 fdbb 	bl	80001d0 <memchr>
 800e65a:	9a04      	ldr	r2, [sp, #16]
 800e65c:	b9d8      	cbnz	r0, 800e696 <_svfiprintf_r+0xea>
 800e65e:	06d0      	lsls	r0, r2, #27
 800e660:	bf44      	itt	mi
 800e662:	2320      	movmi	r3, #32
 800e664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e668:	0711      	lsls	r1, r2, #28
 800e66a:	bf44      	itt	mi
 800e66c:	232b      	movmi	r3, #43	@ 0x2b
 800e66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e672:	f89a 3000 	ldrb.w	r3, [sl]
 800e676:	2b2a      	cmp	r3, #42	@ 0x2a
 800e678:	d015      	beq.n	800e6a6 <_svfiprintf_r+0xfa>
 800e67a:	9a07      	ldr	r2, [sp, #28]
 800e67c:	4654      	mov	r4, sl
 800e67e:	2000      	movs	r0, #0
 800e680:	f04f 0c0a 	mov.w	ip, #10
 800e684:	4621      	mov	r1, r4
 800e686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e68a:	3b30      	subs	r3, #48	@ 0x30
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	d94b      	bls.n	800e728 <_svfiprintf_r+0x17c>
 800e690:	b1b0      	cbz	r0, 800e6c0 <_svfiprintf_r+0x114>
 800e692:	9207      	str	r2, [sp, #28]
 800e694:	e014      	b.n	800e6c0 <_svfiprintf_r+0x114>
 800e696:	eba0 0308 	sub.w	r3, r0, r8
 800e69a:	fa09 f303 	lsl.w	r3, r9, r3
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	9304      	str	r3, [sp, #16]
 800e6a2:	46a2      	mov	sl, r4
 800e6a4:	e7d2      	b.n	800e64c <_svfiprintf_r+0xa0>
 800e6a6:	9b03      	ldr	r3, [sp, #12]
 800e6a8:	1d19      	adds	r1, r3, #4
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	9103      	str	r1, [sp, #12]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bfbb      	ittet	lt
 800e6b2:	425b      	neglt	r3, r3
 800e6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b8:	9307      	strge	r3, [sp, #28]
 800e6ba:	9307      	strlt	r3, [sp, #28]
 800e6bc:	bfb8      	it	lt
 800e6be:	9204      	strlt	r2, [sp, #16]
 800e6c0:	7823      	ldrb	r3, [r4, #0]
 800e6c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6c4:	d10a      	bne.n	800e6dc <_svfiprintf_r+0x130>
 800e6c6:	7863      	ldrb	r3, [r4, #1]
 800e6c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6ca:	d132      	bne.n	800e732 <_svfiprintf_r+0x186>
 800e6cc:	9b03      	ldr	r3, [sp, #12]
 800e6ce:	1d1a      	adds	r2, r3, #4
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	9203      	str	r2, [sp, #12]
 800e6d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6d8:	3402      	adds	r4, #2
 800e6da:	9305      	str	r3, [sp, #20]
 800e6dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e7a0 <_svfiprintf_r+0x1f4>
 800e6e0:	7821      	ldrb	r1, [r4, #0]
 800e6e2:	2203      	movs	r2, #3
 800e6e4:	4650      	mov	r0, sl
 800e6e6:	f7f1 fd73 	bl	80001d0 <memchr>
 800e6ea:	b138      	cbz	r0, 800e6fc <_svfiprintf_r+0x150>
 800e6ec:	9b04      	ldr	r3, [sp, #16]
 800e6ee:	eba0 000a 	sub.w	r0, r0, sl
 800e6f2:	2240      	movs	r2, #64	@ 0x40
 800e6f4:	4082      	lsls	r2, r0
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	3401      	adds	r4, #1
 800e6fa:	9304      	str	r3, [sp, #16]
 800e6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e700:	4824      	ldr	r0, [pc, #144]	@ (800e794 <_svfiprintf_r+0x1e8>)
 800e702:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e706:	2206      	movs	r2, #6
 800e708:	f7f1 fd62 	bl	80001d0 <memchr>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d036      	beq.n	800e77e <_svfiprintf_r+0x1d2>
 800e710:	4b21      	ldr	r3, [pc, #132]	@ (800e798 <_svfiprintf_r+0x1ec>)
 800e712:	bb1b      	cbnz	r3, 800e75c <_svfiprintf_r+0x1b0>
 800e714:	9b03      	ldr	r3, [sp, #12]
 800e716:	3307      	adds	r3, #7
 800e718:	f023 0307 	bic.w	r3, r3, #7
 800e71c:	3308      	adds	r3, #8
 800e71e:	9303      	str	r3, [sp, #12]
 800e720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e722:	4433      	add	r3, r6
 800e724:	9309      	str	r3, [sp, #36]	@ 0x24
 800e726:	e76a      	b.n	800e5fe <_svfiprintf_r+0x52>
 800e728:	fb0c 3202 	mla	r2, ip, r2, r3
 800e72c:	460c      	mov	r4, r1
 800e72e:	2001      	movs	r0, #1
 800e730:	e7a8      	b.n	800e684 <_svfiprintf_r+0xd8>
 800e732:	2300      	movs	r3, #0
 800e734:	3401      	adds	r4, #1
 800e736:	9305      	str	r3, [sp, #20]
 800e738:	4619      	mov	r1, r3
 800e73a:	f04f 0c0a 	mov.w	ip, #10
 800e73e:	4620      	mov	r0, r4
 800e740:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e744:	3a30      	subs	r2, #48	@ 0x30
 800e746:	2a09      	cmp	r2, #9
 800e748:	d903      	bls.n	800e752 <_svfiprintf_r+0x1a6>
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d0c6      	beq.n	800e6dc <_svfiprintf_r+0x130>
 800e74e:	9105      	str	r1, [sp, #20]
 800e750:	e7c4      	b.n	800e6dc <_svfiprintf_r+0x130>
 800e752:	fb0c 2101 	mla	r1, ip, r1, r2
 800e756:	4604      	mov	r4, r0
 800e758:	2301      	movs	r3, #1
 800e75a:	e7f0      	b.n	800e73e <_svfiprintf_r+0x192>
 800e75c:	ab03      	add	r3, sp, #12
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	462a      	mov	r2, r5
 800e762:	4b0e      	ldr	r3, [pc, #56]	@ (800e79c <_svfiprintf_r+0x1f0>)
 800e764:	a904      	add	r1, sp, #16
 800e766:	4638      	mov	r0, r7
 800e768:	f7fc fc86 	bl	800b078 <_printf_float>
 800e76c:	1c42      	adds	r2, r0, #1
 800e76e:	4606      	mov	r6, r0
 800e770:	d1d6      	bne.n	800e720 <_svfiprintf_r+0x174>
 800e772:	89ab      	ldrh	r3, [r5, #12]
 800e774:	065b      	lsls	r3, r3, #25
 800e776:	f53f af2d 	bmi.w	800e5d4 <_svfiprintf_r+0x28>
 800e77a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e77c:	e72c      	b.n	800e5d8 <_svfiprintf_r+0x2c>
 800e77e:	ab03      	add	r3, sp, #12
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	462a      	mov	r2, r5
 800e784:	4b05      	ldr	r3, [pc, #20]	@ (800e79c <_svfiprintf_r+0x1f0>)
 800e786:	a904      	add	r1, sp, #16
 800e788:	4638      	mov	r0, r7
 800e78a:	f7fc ff0d 	bl	800b5a8 <_printf_i>
 800e78e:	e7ed      	b.n	800e76c <_svfiprintf_r+0x1c0>
 800e790:	0800fab9 	.word	0x0800fab9
 800e794:	0800fac3 	.word	0x0800fac3
 800e798:	0800b079 	.word	0x0800b079
 800e79c:	0800e4f5 	.word	0x0800e4f5
 800e7a0:	0800fabf 	.word	0x0800fabf

0800e7a4 <__sflush_r>:
 800e7a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ac:	0716      	lsls	r6, r2, #28
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	460c      	mov	r4, r1
 800e7b2:	d454      	bmi.n	800e85e <__sflush_r+0xba>
 800e7b4:	684b      	ldr	r3, [r1, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	dc02      	bgt.n	800e7c0 <__sflush_r+0x1c>
 800e7ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	dd48      	ble.n	800e852 <__sflush_r+0xae>
 800e7c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7c2:	2e00      	cmp	r6, #0
 800e7c4:	d045      	beq.n	800e852 <__sflush_r+0xae>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e7cc:	682f      	ldr	r7, [r5, #0]
 800e7ce:	6a21      	ldr	r1, [r4, #32]
 800e7d0:	602b      	str	r3, [r5, #0]
 800e7d2:	d030      	beq.n	800e836 <__sflush_r+0x92>
 800e7d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	0759      	lsls	r1, r3, #29
 800e7da:	d505      	bpl.n	800e7e8 <__sflush_r+0x44>
 800e7dc:	6863      	ldr	r3, [r4, #4]
 800e7de:	1ad2      	subs	r2, r2, r3
 800e7e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e7e2:	b10b      	cbz	r3, 800e7e8 <__sflush_r+0x44>
 800e7e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e7e6:	1ad2      	subs	r2, r2, r3
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e7ec:	6a21      	ldr	r1, [r4, #32]
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	47b0      	blx	r6
 800e7f2:	1c43      	adds	r3, r0, #1
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	d106      	bne.n	800e806 <__sflush_r+0x62>
 800e7f8:	6829      	ldr	r1, [r5, #0]
 800e7fa:	291d      	cmp	r1, #29
 800e7fc:	d82b      	bhi.n	800e856 <__sflush_r+0xb2>
 800e7fe:	4a2a      	ldr	r2, [pc, #168]	@ (800e8a8 <__sflush_r+0x104>)
 800e800:	410a      	asrs	r2, r1
 800e802:	07d6      	lsls	r6, r2, #31
 800e804:	d427      	bmi.n	800e856 <__sflush_r+0xb2>
 800e806:	2200      	movs	r2, #0
 800e808:	6062      	str	r2, [r4, #4]
 800e80a:	04d9      	lsls	r1, r3, #19
 800e80c:	6922      	ldr	r2, [r4, #16]
 800e80e:	6022      	str	r2, [r4, #0]
 800e810:	d504      	bpl.n	800e81c <__sflush_r+0x78>
 800e812:	1c42      	adds	r2, r0, #1
 800e814:	d101      	bne.n	800e81a <__sflush_r+0x76>
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	b903      	cbnz	r3, 800e81c <__sflush_r+0x78>
 800e81a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e81c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e81e:	602f      	str	r7, [r5, #0]
 800e820:	b1b9      	cbz	r1, 800e852 <__sflush_r+0xae>
 800e822:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e826:	4299      	cmp	r1, r3
 800e828:	d002      	beq.n	800e830 <__sflush_r+0x8c>
 800e82a:	4628      	mov	r0, r5
 800e82c:	f7fe fa2c 	bl	800cc88 <_free_r>
 800e830:	2300      	movs	r3, #0
 800e832:	6363      	str	r3, [r4, #52]	@ 0x34
 800e834:	e00d      	b.n	800e852 <__sflush_r+0xae>
 800e836:	2301      	movs	r3, #1
 800e838:	4628      	mov	r0, r5
 800e83a:	47b0      	blx	r6
 800e83c:	4602      	mov	r2, r0
 800e83e:	1c50      	adds	r0, r2, #1
 800e840:	d1c9      	bne.n	800e7d6 <__sflush_r+0x32>
 800e842:	682b      	ldr	r3, [r5, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d0c6      	beq.n	800e7d6 <__sflush_r+0x32>
 800e848:	2b1d      	cmp	r3, #29
 800e84a:	d001      	beq.n	800e850 <__sflush_r+0xac>
 800e84c:	2b16      	cmp	r3, #22
 800e84e:	d11e      	bne.n	800e88e <__sflush_r+0xea>
 800e850:	602f      	str	r7, [r5, #0]
 800e852:	2000      	movs	r0, #0
 800e854:	e022      	b.n	800e89c <__sflush_r+0xf8>
 800e856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e85a:	b21b      	sxth	r3, r3
 800e85c:	e01b      	b.n	800e896 <__sflush_r+0xf2>
 800e85e:	690f      	ldr	r7, [r1, #16]
 800e860:	2f00      	cmp	r7, #0
 800e862:	d0f6      	beq.n	800e852 <__sflush_r+0xae>
 800e864:	0793      	lsls	r3, r2, #30
 800e866:	680e      	ldr	r6, [r1, #0]
 800e868:	bf08      	it	eq
 800e86a:	694b      	ldreq	r3, [r1, #20]
 800e86c:	600f      	str	r7, [r1, #0]
 800e86e:	bf18      	it	ne
 800e870:	2300      	movne	r3, #0
 800e872:	eba6 0807 	sub.w	r8, r6, r7
 800e876:	608b      	str	r3, [r1, #8]
 800e878:	f1b8 0f00 	cmp.w	r8, #0
 800e87c:	dde9      	ble.n	800e852 <__sflush_r+0xae>
 800e87e:	6a21      	ldr	r1, [r4, #32]
 800e880:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e882:	4643      	mov	r3, r8
 800e884:	463a      	mov	r2, r7
 800e886:	4628      	mov	r0, r5
 800e888:	47b0      	blx	r6
 800e88a:	2800      	cmp	r0, #0
 800e88c:	dc08      	bgt.n	800e8a0 <__sflush_r+0xfc>
 800e88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e896:	81a3      	strh	r3, [r4, #12]
 800e898:	f04f 30ff 	mov.w	r0, #4294967295
 800e89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a0:	4407      	add	r7, r0
 800e8a2:	eba8 0800 	sub.w	r8, r8, r0
 800e8a6:	e7e7      	b.n	800e878 <__sflush_r+0xd4>
 800e8a8:	dfbffffe 	.word	0xdfbffffe

0800e8ac <_fflush_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	690b      	ldr	r3, [r1, #16]
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	b913      	cbnz	r3, 800e8bc <_fflush_r+0x10>
 800e8b6:	2500      	movs	r5, #0
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	bd38      	pop	{r3, r4, r5, pc}
 800e8bc:	b118      	cbz	r0, 800e8c6 <_fflush_r+0x1a>
 800e8be:	6a03      	ldr	r3, [r0, #32]
 800e8c0:	b90b      	cbnz	r3, 800e8c6 <_fflush_r+0x1a>
 800e8c2:	f7fd fa31 	bl	800bd28 <__sinit>
 800e8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0f3      	beq.n	800e8b6 <_fflush_r+0xa>
 800e8ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e8d0:	07d0      	lsls	r0, r2, #31
 800e8d2:	d404      	bmi.n	800e8de <_fflush_r+0x32>
 800e8d4:	0599      	lsls	r1, r3, #22
 800e8d6:	d402      	bmi.n	800e8de <_fflush_r+0x32>
 800e8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8da:	f7fd fb70 	bl	800bfbe <__retarget_lock_acquire_recursive>
 800e8de:	4628      	mov	r0, r5
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	f7ff ff5f 	bl	800e7a4 <__sflush_r>
 800e8e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e8e8:	07da      	lsls	r2, r3, #31
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	d4e4      	bmi.n	800e8b8 <_fflush_r+0xc>
 800e8ee:	89a3      	ldrh	r3, [r4, #12]
 800e8f0:	059b      	lsls	r3, r3, #22
 800e8f2:	d4e1      	bmi.n	800e8b8 <_fflush_r+0xc>
 800e8f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8f6:	f7fd fb63 	bl	800bfc0 <__retarget_lock_release_recursive>
 800e8fa:	e7dd      	b.n	800e8b8 <_fflush_r+0xc>

0800e8fc <memmove>:
 800e8fc:	4288      	cmp	r0, r1
 800e8fe:	b510      	push	{r4, lr}
 800e900:	eb01 0402 	add.w	r4, r1, r2
 800e904:	d902      	bls.n	800e90c <memmove+0x10>
 800e906:	4284      	cmp	r4, r0
 800e908:	4623      	mov	r3, r4
 800e90a:	d807      	bhi.n	800e91c <memmove+0x20>
 800e90c:	1e43      	subs	r3, r0, #1
 800e90e:	42a1      	cmp	r1, r4
 800e910:	d008      	beq.n	800e924 <memmove+0x28>
 800e912:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e91a:	e7f8      	b.n	800e90e <memmove+0x12>
 800e91c:	4402      	add	r2, r0
 800e91e:	4601      	mov	r1, r0
 800e920:	428a      	cmp	r2, r1
 800e922:	d100      	bne.n	800e926 <memmove+0x2a>
 800e924:	bd10      	pop	{r4, pc}
 800e926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e92a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e92e:	e7f7      	b.n	800e920 <memmove+0x24>

0800e930 <strncmp>:
 800e930:	b510      	push	{r4, lr}
 800e932:	b16a      	cbz	r2, 800e950 <strncmp+0x20>
 800e934:	3901      	subs	r1, #1
 800e936:	1884      	adds	r4, r0, r2
 800e938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e93c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e940:	429a      	cmp	r2, r3
 800e942:	d103      	bne.n	800e94c <strncmp+0x1c>
 800e944:	42a0      	cmp	r0, r4
 800e946:	d001      	beq.n	800e94c <strncmp+0x1c>
 800e948:	2a00      	cmp	r2, #0
 800e94a:	d1f5      	bne.n	800e938 <strncmp+0x8>
 800e94c:	1ad0      	subs	r0, r2, r3
 800e94e:	bd10      	pop	{r4, pc}
 800e950:	4610      	mov	r0, r2
 800e952:	e7fc      	b.n	800e94e <strncmp+0x1e>

0800e954 <_sbrk_r>:
 800e954:	b538      	push	{r3, r4, r5, lr}
 800e956:	4d06      	ldr	r5, [pc, #24]	@ (800e970 <_sbrk_r+0x1c>)
 800e958:	2300      	movs	r3, #0
 800e95a:	4604      	mov	r4, r0
 800e95c:	4608      	mov	r0, r1
 800e95e:	602b      	str	r3, [r5, #0]
 800e960:	f7f2 fe8a 	bl	8001678 <_sbrk>
 800e964:	1c43      	adds	r3, r0, #1
 800e966:	d102      	bne.n	800e96e <_sbrk_r+0x1a>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	b103      	cbz	r3, 800e96e <_sbrk_r+0x1a>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	200017c8 	.word	0x200017c8
 800e974:	00000000 	.word	0x00000000

0800e978 <nan>:
 800e978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e980 <nan+0x8>
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	00000000 	.word	0x00000000
 800e984:	7ff80000 	.word	0x7ff80000

0800e988 <__assert_func>:
 800e988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e98a:	4614      	mov	r4, r2
 800e98c:	461a      	mov	r2, r3
 800e98e:	4b09      	ldr	r3, [pc, #36]	@ (800e9b4 <__assert_func+0x2c>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4605      	mov	r5, r0
 800e994:	68d8      	ldr	r0, [r3, #12]
 800e996:	b954      	cbnz	r4, 800e9ae <__assert_func+0x26>
 800e998:	4b07      	ldr	r3, [pc, #28]	@ (800e9b8 <__assert_func+0x30>)
 800e99a:	461c      	mov	r4, r3
 800e99c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9a0:	9100      	str	r1, [sp, #0]
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	4905      	ldr	r1, [pc, #20]	@ (800e9bc <__assert_func+0x34>)
 800e9a6:	f000 fba7 	bl	800f0f8 <fiprintf>
 800e9aa:	f000 fbb7 	bl	800f11c <abort>
 800e9ae:	4b04      	ldr	r3, [pc, #16]	@ (800e9c0 <__assert_func+0x38>)
 800e9b0:	e7f4      	b.n	800e99c <__assert_func+0x14>
 800e9b2:	bf00      	nop
 800e9b4:	20000188 	.word	0x20000188
 800e9b8:	0800fb0d 	.word	0x0800fb0d
 800e9bc:	0800fadf 	.word	0x0800fadf
 800e9c0:	0800fad2 	.word	0x0800fad2

0800e9c4 <_calloc_r>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	fba1 5402 	umull	r5, r4, r1, r2
 800e9ca:	b93c      	cbnz	r4, 800e9dc <_calloc_r+0x18>
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	f7fe f9cf 	bl	800cd70 <_malloc_r>
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	b928      	cbnz	r0, 800e9e2 <_calloc_r+0x1e>
 800e9d6:	2600      	movs	r6, #0
 800e9d8:	4630      	mov	r0, r6
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	220c      	movs	r2, #12
 800e9de:	6002      	str	r2, [r0, #0]
 800e9e0:	e7f9      	b.n	800e9d6 <_calloc_r+0x12>
 800e9e2:	462a      	mov	r2, r5
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	f7fd fa6c 	bl	800bec2 <memset>
 800e9ea:	e7f5      	b.n	800e9d8 <_calloc_r+0x14>

0800e9ec <rshift>:
 800e9ec:	6903      	ldr	r3, [r0, #16]
 800e9ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e9f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e9fa:	f100 0414 	add.w	r4, r0, #20
 800e9fe:	dd45      	ble.n	800ea8c <rshift+0xa0>
 800ea00:	f011 011f 	ands.w	r1, r1, #31
 800ea04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea0c:	d10c      	bne.n	800ea28 <rshift+0x3c>
 800ea0e:	f100 0710 	add.w	r7, r0, #16
 800ea12:	4629      	mov	r1, r5
 800ea14:	42b1      	cmp	r1, r6
 800ea16:	d334      	bcc.n	800ea82 <rshift+0x96>
 800ea18:	1a9b      	subs	r3, r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	1eea      	subs	r2, r5, #3
 800ea1e:	4296      	cmp	r6, r2
 800ea20:	bf38      	it	cc
 800ea22:	2300      	movcc	r3, #0
 800ea24:	4423      	add	r3, r4
 800ea26:	e015      	b.n	800ea54 <rshift+0x68>
 800ea28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea2c:	f1c1 0820 	rsb	r8, r1, #32
 800ea30:	40cf      	lsrs	r7, r1
 800ea32:	f105 0e04 	add.w	lr, r5, #4
 800ea36:	46a1      	mov	r9, r4
 800ea38:	4576      	cmp	r6, lr
 800ea3a:	46f4      	mov	ip, lr
 800ea3c:	d815      	bhi.n	800ea6a <rshift+0x7e>
 800ea3e:	1a9a      	subs	r2, r3, r2
 800ea40:	0092      	lsls	r2, r2, #2
 800ea42:	3a04      	subs	r2, #4
 800ea44:	3501      	adds	r5, #1
 800ea46:	42ae      	cmp	r6, r5
 800ea48:	bf38      	it	cc
 800ea4a:	2200      	movcc	r2, #0
 800ea4c:	18a3      	adds	r3, r4, r2
 800ea4e:	50a7      	str	r7, [r4, r2]
 800ea50:	b107      	cbz	r7, 800ea54 <rshift+0x68>
 800ea52:	3304      	adds	r3, #4
 800ea54:	1b1a      	subs	r2, r3, r4
 800ea56:	42a3      	cmp	r3, r4
 800ea58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea5c:	bf08      	it	eq
 800ea5e:	2300      	moveq	r3, #0
 800ea60:	6102      	str	r2, [r0, #16]
 800ea62:	bf08      	it	eq
 800ea64:	6143      	streq	r3, [r0, #20]
 800ea66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea6a:	f8dc c000 	ldr.w	ip, [ip]
 800ea6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea72:	ea4c 0707 	orr.w	r7, ip, r7
 800ea76:	f849 7b04 	str.w	r7, [r9], #4
 800ea7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea7e:	40cf      	lsrs	r7, r1
 800ea80:	e7da      	b.n	800ea38 <rshift+0x4c>
 800ea82:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea86:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea8a:	e7c3      	b.n	800ea14 <rshift+0x28>
 800ea8c:	4623      	mov	r3, r4
 800ea8e:	e7e1      	b.n	800ea54 <rshift+0x68>

0800ea90 <__hexdig_fun>:
 800ea90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ea94:	2b09      	cmp	r3, #9
 800ea96:	d802      	bhi.n	800ea9e <__hexdig_fun+0xe>
 800ea98:	3820      	subs	r0, #32
 800ea9a:	b2c0      	uxtb	r0, r0
 800ea9c:	4770      	bx	lr
 800ea9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eaa2:	2b05      	cmp	r3, #5
 800eaa4:	d801      	bhi.n	800eaaa <__hexdig_fun+0x1a>
 800eaa6:	3847      	subs	r0, #71	@ 0x47
 800eaa8:	e7f7      	b.n	800ea9a <__hexdig_fun+0xa>
 800eaaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eaae:	2b05      	cmp	r3, #5
 800eab0:	d801      	bhi.n	800eab6 <__hexdig_fun+0x26>
 800eab2:	3827      	subs	r0, #39	@ 0x27
 800eab4:	e7f1      	b.n	800ea9a <__hexdig_fun+0xa>
 800eab6:	2000      	movs	r0, #0
 800eab8:	4770      	bx	lr
	...

0800eabc <__gethex>:
 800eabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac0:	b085      	sub	sp, #20
 800eac2:	468a      	mov	sl, r1
 800eac4:	9302      	str	r3, [sp, #8]
 800eac6:	680b      	ldr	r3, [r1, #0]
 800eac8:	9001      	str	r0, [sp, #4]
 800eaca:	4690      	mov	r8, r2
 800eacc:	1c9c      	adds	r4, r3, #2
 800eace:	46a1      	mov	r9, r4
 800ead0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ead4:	2830      	cmp	r0, #48	@ 0x30
 800ead6:	d0fa      	beq.n	800eace <__gethex+0x12>
 800ead8:	eba9 0303 	sub.w	r3, r9, r3
 800eadc:	f1a3 0b02 	sub.w	fp, r3, #2
 800eae0:	f7ff ffd6 	bl	800ea90 <__hexdig_fun>
 800eae4:	4605      	mov	r5, r0
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d168      	bne.n	800ebbc <__gethex+0x100>
 800eaea:	49a0      	ldr	r1, [pc, #640]	@ (800ed6c <__gethex+0x2b0>)
 800eaec:	2201      	movs	r2, #1
 800eaee:	4648      	mov	r0, r9
 800eaf0:	f7ff ff1e 	bl	800e930 <strncmp>
 800eaf4:	4607      	mov	r7, r0
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d167      	bne.n	800ebca <__gethex+0x10e>
 800eafa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eafe:	4626      	mov	r6, r4
 800eb00:	f7ff ffc6 	bl	800ea90 <__hexdig_fun>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d062      	beq.n	800ebce <__gethex+0x112>
 800eb08:	4623      	mov	r3, r4
 800eb0a:	7818      	ldrb	r0, [r3, #0]
 800eb0c:	2830      	cmp	r0, #48	@ 0x30
 800eb0e:	4699      	mov	r9, r3
 800eb10:	f103 0301 	add.w	r3, r3, #1
 800eb14:	d0f9      	beq.n	800eb0a <__gethex+0x4e>
 800eb16:	f7ff ffbb 	bl	800ea90 <__hexdig_fun>
 800eb1a:	fab0 f580 	clz	r5, r0
 800eb1e:	096d      	lsrs	r5, r5, #5
 800eb20:	f04f 0b01 	mov.w	fp, #1
 800eb24:	464a      	mov	r2, r9
 800eb26:	4616      	mov	r6, r2
 800eb28:	3201      	adds	r2, #1
 800eb2a:	7830      	ldrb	r0, [r6, #0]
 800eb2c:	f7ff ffb0 	bl	800ea90 <__hexdig_fun>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d1f8      	bne.n	800eb26 <__gethex+0x6a>
 800eb34:	498d      	ldr	r1, [pc, #564]	@ (800ed6c <__gethex+0x2b0>)
 800eb36:	2201      	movs	r2, #1
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7ff fef9 	bl	800e930 <strncmp>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d13f      	bne.n	800ebc2 <__gethex+0x106>
 800eb42:	b944      	cbnz	r4, 800eb56 <__gethex+0x9a>
 800eb44:	1c74      	adds	r4, r6, #1
 800eb46:	4622      	mov	r2, r4
 800eb48:	4616      	mov	r6, r2
 800eb4a:	3201      	adds	r2, #1
 800eb4c:	7830      	ldrb	r0, [r6, #0]
 800eb4e:	f7ff ff9f 	bl	800ea90 <__hexdig_fun>
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d1f8      	bne.n	800eb48 <__gethex+0x8c>
 800eb56:	1ba4      	subs	r4, r4, r6
 800eb58:	00a7      	lsls	r7, r4, #2
 800eb5a:	7833      	ldrb	r3, [r6, #0]
 800eb5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eb60:	2b50      	cmp	r3, #80	@ 0x50
 800eb62:	d13e      	bne.n	800ebe2 <__gethex+0x126>
 800eb64:	7873      	ldrb	r3, [r6, #1]
 800eb66:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb68:	d033      	beq.n	800ebd2 <__gethex+0x116>
 800eb6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb6c:	d034      	beq.n	800ebd8 <__gethex+0x11c>
 800eb6e:	1c71      	adds	r1, r6, #1
 800eb70:	2400      	movs	r4, #0
 800eb72:	7808      	ldrb	r0, [r1, #0]
 800eb74:	f7ff ff8c 	bl	800ea90 <__hexdig_fun>
 800eb78:	1e43      	subs	r3, r0, #1
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b18      	cmp	r3, #24
 800eb7e:	d830      	bhi.n	800ebe2 <__gethex+0x126>
 800eb80:	f1a0 0210 	sub.w	r2, r0, #16
 800eb84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb88:	f7ff ff82 	bl	800ea90 <__hexdig_fun>
 800eb8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800eb90:	fa5f fc8c 	uxtb.w	ip, ip
 800eb94:	f1bc 0f18 	cmp.w	ip, #24
 800eb98:	f04f 030a 	mov.w	r3, #10
 800eb9c:	d91e      	bls.n	800ebdc <__gethex+0x120>
 800eb9e:	b104      	cbz	r4, 800eba2 <__gethex+0xe6>
 800eba0:	4252      	negs	r2, r2
 800eba2:	4417      	add	r7, r2
 800eba4:	f8ca 1000 	str.w	r1, [sl]
 800eba8:	b1ed      	cbz	r5, 800ebe6 <__gethex+0x12a>
 800ebaa:	f1bb 0f00 	cmp.w	fp, #0
 800ebae:	bf0c      	ite	eq
 800ebb0:	2506      	moveq	r5, #6
 800ebb2:	2500      	movne	r5, #0
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	b005      	add	sp, #20
 800ebb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebbc:	2500      	movs	r5, #0
 800ebbe:	462c      	mov	r4, r5
 800ebc0:	e7b0      	b.n	800eb24 <__gethex+0x68>
 800ebc2:	2c00      	cmp	r4, #0
 800ebc4:	d1c7      	bne.n	800eb56 <__gethex+0x9a>
 800ebc6:	4627      	mov	r7, r4
 800ebc8:	e7c7      	b.n	800eb5a <__gethex+0x9e>
 800ebca:	464e      	mov	r6, r9
 800ebcc:	462f      	mov	r7, r5
 800ebce:	2501      	movs	r5, #1
 800ebd0:	e7c3      	b.n	800eb5a <__gethex+0x9e>
 800ebd2:	2400      	movs	r4, #0
 800ebd4:	1cb1      	adds	r1, r6, #2
 800ebd6:	e7cc      	b.n	800eb72 <__gethex+0xb6>
 800ebd8:	2401      	movs	r4, #1
 800ebda:	e7fb      	b.n	800ebd4 <__gethex+0x118>
 800ebdc:	fb03 0002 	mla	r0, r3, r2, r0
 800ebe0:	e7ce      	b.n	800eb80 <__gethex+0xc4>
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	e7de      	b.n	800eba4 <__gethex+0xe8>
 800ebe6:	eba6 0309 	sub.w	r3, r6, r9
 800ebea:	3b01      	subs	r3, #1
 800ebec:	4629      	mov	r1, r5
 800ebee:	2b07      	cmp	r3, #7
 800ebf0:	dc0a      	bgt.n	800ec08 <__gethex+0x14c>
 800ebf2:	9801      	ldr	r0, [sp, #4]
 800ebf4:	f7fe f948 	bl	800ce88 <_Balloc>
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	b940      	cbnz	r0, 800ec0e <__gethex+0x152>
 800ebfc:	4b5c      	ldr	r3, [pc, #368]	@ (800ed70 <__gethex+0x2b4>)
 800ebfe:	4602      	mov	r2, r0
 800ec00:	21e4      	movs	r1, #228	@ 0xe4
 800ec02:	485c      	ldr	r0, [pc, #368]	@ (800ed74 <__gethex+0x2b8>)
 800ec04:	f7ff fec0 	bl	800e988 <__assert_func>
 800ec08:	3101      	adds	r1, #1
 800ec0a:	105b      	asrs	r3, r3, #1
 800ec0c:	e7ef      	b.n	800ebee <__gethex+0x132>
 800ec0e:	f100 0a14 	add.w	sl, r0, #20
 800ec12:	2300      	movs	r3, #0
 800ec14:	4655      	mov	r5, sl
 800ec16:	469b      	mov	fp, r3
 800ec18:	45b1      	cmp	r9, r6
 800ec1a:	d337      	bcc.n	800ec8c <__gethex+0x1d0>
 800ec1c:	f845 bb04 	str.w	fp, [r5], #4
 800ec20:	eba5 050a 	sub.w	r5, r5, sl
 800ec24:	10ad      	asrs	r5, r5, #2
 800ec26:	6125      	str	r5, [r4, #16]
 800ec28:	4658      	mov	r0, fp
 800ec2a:	f7fe fa1f 	bl	800d06c <__hi0bits>
 800ec2e:	016d      	lsls	r5, r5, #5
 800ec30:	f8d8 6000 	ldr.w	r6, [r8]
 800ec34:	1a2d      	subs	r5, r5, r0
 800ec36:	42b5      	cmp	r5, r6
 800ec38:	dd54      	ble.n	800ece4 <__gethex+0x228>
 800ec3a:	1bad      	subs	r5, r5, r6
 800ec3c:	4629      	mov	r1, r5
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f7fe fdb3 	bl	800d7aa <__any_on>
 800ec44:	4681      	mov	r9, r0
 800ec46:	b178      	cbz	r0, 800ec68 <__gethex+0x1ac>
 800ec48:	1e6b      	subs	r3, r5, #1
 800ec4a:	1159      	asrs	r1, r3, #5
 800ec4c:	f003 021f 	and.w	r2, r3, #31
 800ec50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ec54:	f04f 0901 	mov.w	r9, #1
 800ec58:	fa09 f202 	lsl.w	r2, r9, r2
 800ec5c:	420a      	tst	r2, r1
 800ec5e:	d003      	beq.n	800ec68 <__gethex+0x1ac>
 800ec60:	454b      	cmp	r3, r9
 800ec62:	dc36      	bgt.n	800ecd2 <__gethex+0x216>
 800ec64:	f04f 0902 	mov.w	r9, #2
 800ec68:	4629      	mov	r1, r5
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f7ff febe 	bl	800e9ec <rshift>
 800ec70:	442f      	add	r7, r5
 800ec72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec76:	42bb      	cmp	r3, r7
 800ec78:	da42      	bge.n	800ed00 <__gethex+0x244>
 800ec7a:	9801      	ldr	r0, [sp, #4]
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	f7fe f943 	bl	800cf08 <_Bfree>
 800ec82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec84:	2300      	movs	r3, #0
 800ec86:	6013      	str	r3, [r2, #0]
 800ec88:	25a3      	movs	r5, #163	@ 0xa3
 800ec8a:	e793      	b.n	800ebb4 <__gethex+0xf8>
 800ec8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ec90:	2a2e      	cmp	r2, #46	@ 0x2e
 800ec92:	d012      	beq.n	800ecba <__gethex+0x1fe>
 800ec94:	2b20      	cmp	r3, #32
 800ec96:	d104      	bne.n	800eca2 <__gethex+0x1e6>
 800ec98:	f845 bb04 	str.w	fp, [r5], #4
 800ec9c:	f04f 0b00 	mov.w	fp, #0
 800eca0:	465b      	mov	r3, fp
 800eca2:	7830      	ldrb	r0, [r6, #0]
 800eca4:	9303      	str	r3, [sp, #12]
 800eca6:	f7ff fef3 	bl	800ea90 <__hexdig_fun>
 800ecaa:	9b03      	ldr	r3, [sp, #12]
 800ecac:	f000 000f 	and.w	r0, r0, #15
 800ecb0:	4098      	lsls	r0, r3
 800ecb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	e7ae      	b.n	800ec18 <__gethex+0x15c>
 800ecba:	45b1      	cmp	r9, r6
 800ecbc:	d8ea      	bhi.n	800ec94 <__gethex+0x1d8>
 800ecbe:	492b      	ldr	r1, [pc, #172]	@ (800ed6c <__gethex+0x2b0>)
 800ecc0:	9303      	str	r3, [sp, #12]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff fe33 	bl	800e930 <strncmp>
 800ecca:	9b03      	ldr	r3, [sp, #12]
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d1e1      	bne.n	800ec94 <__gethex+0x1d8>
 800ecd0:	e7a2      	b.n	800ec18 <__gethex+0x15c>
 800ecd2:	1ea9      	subs	r1, r5, #2
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	f7fe fd68 	bl	800d7aa <__any_on>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0c2      	beq.n	800ec64 <__gethex+0x1a8>
 800ecde:	f04f 0903 	mov.w	r9, #3
 800ece2:	e7c1      	b.n	800ec68 <__gethex+0x1ac>
 800ece4:	da09      	bge.n	800ecfa <__gethex+0x23e>
 800ece6:	1b75      	subs	r5, r6, r5
 800ece8:	4621      	mov	r1, r4
 800ecea:	9801      	ldr	r0, [sp, #4]
 800ecec:	462a      	mov	r2, r5
 800ecee:	f7fe fb23 	bl	800d338 <__lshift>
 800ecf2:	1b7f      	subs	r7, r7, r5
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	f100 0a14 	add.w	sl, r0, #20
 800ecfa:	f04f 0900 	mov.w	r9, #0
 800ecfe:	e7b8      	b.n	800ec72 <__gethex+0x1b6>
 800ed00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed04:	42bd      	cmp	r5, r7
 800ed06:	dd6f      	ble.n	800ede8 <__gethex+0x32c>
 800ed08:	1bed      	subs	r5, r5, r7
 800ed0a:	42ae      	cmp	r6, r5
 800ed0c:	dc34      	bgt.n	800ed78 <__gethex+0x2bc>
 800ed0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed12:	2b02      	cmp	r3, #2
 800ed14:	d022      	beq.n	800ed5c <__gethex+0x2a0>
 800ed16:	2b03      	cmp	r3, #3
 800ed18:	d024      	beq.n	800ed64 <__gethex+0x2a8>
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d115      	bne.n	800ed4a <__gethex+0x28e>
 800ed1e:	42ae      	cmp	r6, r5
 800ed20:	d113      	bne.n	800ed4a <__gethex+0x28e>
 800ed22:	2e01      	cmp	r6, #1
 800ed24:	d10b      	bne.n	800ed3e <__gethex+0x282>
 800ed26:	9a02      	ldr	r2, [sp, #8]
 800ed28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed2c:	6013      	str	r3, [r2, #0]
 800ed2e:	2301      	movs	r3, #1
 800ed30:	6123      	str	r3, [r4, #16]
 800ed32:	f8ca 3000 	str.w	r3, [sl]
 800ed36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed38:	2562      	movs	r5, #98	@ 0x62
 800ed3a:	601c      	str	r4, [r3, #0]
 800ed3c:	e73a      	b.n	800ebb4 <__gethex+0xf8>
 800ed3e:	1e71      	subs	r1, r6, #1
 800ed40:	4620      	mov	r0, r4
 800ed42:	f7fe fd32 	bl	800d7aa <__any_on>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d1ed      	bne.n	800ed26 <__gethex+0x26a>
 800ed4a:	9801      	ldr	r0, [sp, #4]
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	f7fe f8db 	bl	800cf08 <_Bfree>
 800ed52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed54:	2300      	movs	r3, #0
 800ed56:	6013      	str	r3, [r2, #0]
 800ed58:	2550      	movs	r5, #80	@ 0x50
 800ed5a:	e72b      	b.n	800ebb4 <__gethex+0xf8>
 800ed5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1f3      	bne.n	800ed4a <__gethex+0x28e>
 800ed62:	e7e0      	b.n	800ed26 <__gethex+0x26a>
 800ed64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1dd      	bne.n	800ed26 <__gethex+0x26a>
 800ed6a:	e7ee      	b.n	800ed4a <__gethex+0x28e>
 800ed6c:	0800f960 	.word	0x0800f960
 800ed70:	0800f7f5 	.word	0x0800f7f5
 800ed74:	0800fb0e 	.word	0x0800fb0e
 800ed78:	1e6f      	subs	r7, r5, #1
 800ed7a:	f1b9 0f00 	cmp.w	r9, #0
 800ed7e:	d130      	bne.n	800ede2 <__gethex+0x326>
 800ed80:	b127      	cbz	r7, 800ed8c <__gethex+0x2d0>
 800ed82:	4639      	mov	r1, r7
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7fe fd10 	bl	800d7aa <__any_on>
 800ed8a:	4681      	mov	r9, r0
 800ed8c:	117a      	asrs	r2, r7, #5
 800ed8e:	2301      	movs	r3, #1
 800ed90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ed94:	f007 071f 	and.w	r7, r7, #31
 800ed98:	40bb      	lsls	r3, r7
 800ed9a:	4213      	tst	r3, r2
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4620      	mov	r0, r4
 800eda0:	bf18      	it	ne
 800eda2:	f049 0902 	orrne.w	r9, r9, #2
 800eda6:	f7ff fe21 	bl	800e9ec <rshift>
 800edaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800edae:	1b76      	subs	r6, r6, r5
 800edb0:	2502      	movs	r5, #2
 800edb2:	f1b9 0f00 	cmp.w	r9, #0
 800edb6:	d047      	beq.n	800ee48 <__gethex+0x38c>
 800edb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d015      	beq.n	800edec <__gethex+0x330>
 800edc0:	2b03      	cmp	r3, #3
 800edc2:	d017      	beq.n	800edf4 <__gethex+0x338>
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d109      	bne.n	800eddc <__gethex+0x320>
 800edc8:	f019 0f02 	tst.w	r9, #2
 800edcc:	d006      	beq.n	800eddc <__gethex+0x320>
 800edce:	f8da 3000 	ldr.w	r3, [sl]
 800edd2:	ea49 0903 	orr.w	r9, r9, r3
 800edd6:	f019 0f01 	tst.w	r9, #1
 800edda:	d10e      	bne.n	800edfa <__gethex+0x33e>
 800eddc:	f045 0510 	orr.w	r5, r5, #16
 800ede0:	e032      	b.n	800ee48 <__gethex+0x38c>
 800ede2:	f04f 0901 	mov.w	r9, #1
 800ede6:	e7d1      	b.n	800ed8c <__gethex+0x2d0>
 800ede8:	2501      	movs	r5, #1
 800edea:	e7e2      	b.n	800edb2 <__gethex+0x2f6>
 800edec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edee:	f1c3 0301 	rsb	r3, r3, #1
 800edf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800edf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d0f0      	beq.n	800eddc <__gethex+0x320>
 800edfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800edfe:	f104 0314 	add.w	r3, r4, #20
 800ee02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ee06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee0a:	f04f 0c00 	mov.w	ip, #0
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee18:	d01b      	beq.n	800ee52 <__gethex+0x396>
 800ee1a:	3201      	adds	r2, #1
 800ee1c:	6002      	str	r2, [r0, #0]
 800ee1e:	2d02      	cmp	r5, #2
 800ee20:	f104 0314 	add.w	r3, r4, #20
 800ee24:	d13c      	bne.n	800eea0 <__gethex+0x3e4>
 800ee26:	f8d8 2000 	ldr.w	r2, [r8]
 800ee2a:	3a01      	subs	r2, #1
 800ee2c:	42b2      	cmp	r2, r6
 800ee2e:	d109      	bne.n	800ee44 <__gethex+0x388>
 800ee30:	1171      	asrs	r1, r6, #5
 800ee32:	2201      	movs	r2, #1
 800ee34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee38:	f006 061f 	and.w	r6, r6, #31
 800ee3c:	fa02 f606 	lsl.w	r6, r2, r6
 800ee40:	421e      	tst	r6, r3
 800ee42:	d13a      	bne.n	800eeba <__gethex+0x3fe>
 800ee44:	f045 0520 	orr.w	r5, r5, #32
 800ee48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee4a:	601c      	str	r4, [r3, #0]
 800ee4c:	9b02      	ldr	r3, [sp, #8]
 800ee4e:	601f      	str	r7, [r3, #0]
 800ee50:	e6b0      	b.n	800ebb4 <__gethex+0xf8>
 800ee52:	4299      	cmp	r1, r3
 800ee54:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee58:	d8d9      	bhi.n	800ee0e <__gethex+0x352>
 800ee5a:	68a3      	ldr	r3, [r4, #8]
 800ee5c:	459b      	cmp	fp, r3
 800ee5e:	db17      	blt.n	800ee90 <__gethex+0x3d4>
 800ee60:	6861      	ldr	r1, [r4, #4]
 800ee62:	9801      	ldr	r0, [sp, #4]
 800ee64:	3101      	adds	r1, #1
 800ee66:	f7fe f80f 	bl	800ce88 <_Balloc>
 800ee6a:	4681      	mov	r9, r0
 800ee6c:	b918      	cbnz	r0, 800ee76 <__gethex+0x3ba>
 800ee6e:	4b1a      	ldr	r3, [pc, #104]	@ (800eed8 <__gethex+0x41c>)
 800ee70:	4602      	mov	r2, r0
 800ee72:	2184      	movs	r1, #132	@ 0x84
 800ee74:	e6c5      	b.n	800ec02 <__gethex+0x146>
 800ee76:	6922      	ldr	r2, [r4, #16]
 800ee78:	3202      	adds	r2, #2
 800ee7a:	f104 010c 	add.w	r1, r4, #12
 800ee7e:	0092      	lsls	r2, r2, #2
 800ee80:	300c      	adds	r0, #12
 800ee82:	f7fd f89e 	bl	800bfc2 <memcpy>
 800ee86:	4621      	mov	r1, r4
 800ee88:	9801      	ldr	r0, [sp, #4]
 800ee8a:	f7fe f83d 	bl	800cf08 <_Bfree>
 800ee8e:	464c      	mov	r4, r9
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	1c5a      	adds	r2, r3, #1
 800ee94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee98:	6122      	str	r2, [r4, #16]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	615a      	str	r2, [r3, #20]
 800ee9e:	e7be      	b.n	800ee1e <__gethex+0x362>
 800eea0:	6922      	ldr	r2, [r4, #16]
 800eea2:	455a      	cmp	r2, fp
 800eea4:	dd0b      	ble.n	800eebe <__gethex+0x402>
 800eea6:	2101      	movs	r1, #1
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f7ff fd9f 	bl	800e9ec <rshift>
 800eeae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeb2:	3701      	adds	r7, #1
 800eeb4:	42bb      	cmp	r3, r7
 800eeb6:	f6ff aee0 	blt.w	800ec7a <__gethex+0x1be>
 800eeba:	2501      	movs	r5, #1
 800eebc:	e7c2      	b.n	800ee44 <__gethex+0x388>
 800eebe:	f016 061f 	ands.w	r6, r6, #31
 800eec2:	d0fa      	beq.n	800eeba <__gethex+0x3fe>
 800eec4:	4453      	add	r3, sl
 800eec6:	f1c6 0620 	rsb	r6, r6, #32
 800eeca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eece:	f7fe f8cd 	bl	800d06c <__hi0bits>
 800eed2:	42b0      	cmp	r0, r6
 800eed4:	dbe7      	blt.n	800eea6 <__gethex+0x3ea>
 800eed6:	e7f0      	b.n	800eeba <__gethex+0x3fe>
 800eed8:	0800f7f5 	.word	0x0800f7f5

0800eedc <L_shift>:
 800eedc:	f1c2 0208 	rsb	r2, r2, #8
 800eee0:	0092      	lsls	r2, r2, #2
 800eee2:	b570      	push	{r4, r5, r6, lr}
 800eee4:	f1c2 0620 	rsb	r6, r2, #32
 800eee8:	6843      	ldr	r3, [r0, #4]
 800eeea:	6804      	ldr	r4, [r0, #0]
 800eeec:	fa03 f506 	lsl.w	r5, r3, r6
 800eef0:	432c      	orrs	r4, r5
 800eef2:	40d3      	lsrs	r3, r2
 800eef4:	6004      	str	r4, [r0, #0]
 800eef6:	f840 3f04 	str.w	r3, [r0, #4]!
 800eefa:	4288      	cmp	r0, r1
 800eefc:	d3f4      	bcc.n	800eee8 <L_shift+0xc>
 800eefe:	bd70      	pop	{r4, r5, r6, pc}

0800ef00 <__match>:
 800ef00:	b530      	push	{r4, r5, lr}
 800ef02:	6803      	ldr	r3, [r0, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef0a:	b914      	cbnz	r4, 800ef12 <__match+0x12>
 800ef0c:	6003      	str	r3, [r0, #0]
 800ef0e:	2001      	movs	r0, #1
 800ef10:	bd30      	pop	{r4, r5, pc}
 800ef12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ef1a:	2d19      	cmp	r5, #25
 800ef1c:	bf98      	it	ls
 800ef1e:	3220      	addls	r2, #32
 800ef20:	42a2      	cmp	r2, r4
 800ef22:	d0f0      	beq.n	800ef06 <__match+0x6>
 800ef24:	2000      	movs	r0, #0
 800ef26:	e7f3      	b.n	800ef10 <__match+0x10>

0800ef28 <__hexnan>:
 800ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2c:	680b      	ldr	r3, [r1, #0]
 800ef2e:	6801      	ldr	r1, [r0, #0]
 800ef30:	115e      	asrs	r6, r3, #5
 800ef32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef36:	f013 031f 	ands.w	r3, r3, #31
 800ef3a:	b087      	sub	sp, #28
 800ef3c:	bf18      	it	ne
 800ef3e:	3604      	addne	r6, #4
 800ef40:	2500      	movs	r5, #0
 800ef42:	1f37      	subs	r7, r6, #4
 800ef44:	4682      	mov	sl, r0
 800ef46:	4690      	mov	r8, r2
 800ef48:	9301      	str	r3, [sp, #4]
 800ef4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef4e:	46b9      	mov	r9, r7
 800ef50:	463c      	mov	r4, r7
 800ef52:	9502      	str	r5, [sp, #8]
 800ef54:	46ab      	mov	fp, r5
 800ef56:	784a      	ldrb	r2, [r1, #1]
 800ef58:	1c4b      	adds	r3, r1, #1
 800ef5a:	9303      	str	r3, [sp, #12]
 800ef5c:	b342      	cbz	r2, 800efb0 <__hexnan+0x88>
 800ef5e:	4610      	mov	r0, r2
 800ef60:	9105      	str	r1, [sp, #20]
 800ef62:	9204      	str	r2, [sp, #16]
 800ef64:	f7ff fd94 	bl	800ea90 <__hexdig_fun>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d151      	bne.n	800f010 <__hexnan+0xe8>
 800ef6c:	9a04      	ldr	r2, [sp, #16]
 800ef6e:	9905      	ldr	r1, [sp, #20]
 800ef70:	2a20      	cmp	r2, #32
 800ef72:	d818      	bhi.n	800efa6 <__hexnan+0x7e>
 800ef74:	9b02      	ldr	r3, [sp, #8]
 800ef76:	459b      	cmp	fp, r3
 800ef78:	dd13      	ble.n	800efa2 <__hexnan+0x7a>
 800ef7a:	454c      	cmp	r4, r9
 800ef7c:	d206      	bcs.n	800ef8c <__hexnan+0x64>
 800ef7e:	2d07      	cmp	r5, #7
 800ef80:	dc04      	bgt.n	800ef8c <__hexnan+0x64>
 800ef82:	462a      	mov	r2, r5
 800ef84:	4649      	mov	r1, r9
 800ef86:	4620      	mov	r0, r4
 800ef88:	f7ff ffa8 	bl	800eedc <L_shift>
 800ef8c:	4544      	cmp	r4, r8
 800ef8e:	d952      	bls.n	800f036 <__hexnan+0x10e>
 800ef90:	2300      	movs	r3, #0
 800ef92:	f1a4 0904 	sub.w	r9, r4, #4
 800ef96:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef9a:	f8cd b008 	str.w	fp, [sp, #8]
 800ef9e:	464c      	mov	r4, r9
 800efa0:	461d      	mov	r5, r3
 800efa2:	9903      	ldr	r1, [sp, #12]
 800efa4:	e7d7      	b.n	800ef56 <__hexnan+0x2e>
 800efa6:	2a29      	cmp	r2, #41	@ 0x29
 800efa8:	d157      	bne.n	800f05a <__hexnan+0x132>
 800efaa:	3102      	adds	r1, #2
 800efac:	f8ca 1000 	str.w	r1, [sl]
 800efb0:	f1bb 0f00 	cmp.w	fp, #0
 800efb4:	d051      	beq.n	800f05a <__hexnan+0x132>
 800efb6:	454c      	cmp	r4, r9
 800efb8:	d206      	bcs.n	800efc8 <__hexnan+0xa0>
 800efba:	2d07      	cmp	r5, #7
 800efbc:	dc04      	bgt.n	800efc8 <__hexnan+0xa0>
 800efbe:	462a      	mov	r2, r5
 800efc0:	4649      	mov	r1, r9
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7ff ff8a 	bl	800eedc <L_shift>
 800efc8:	4544      	cmp	r4, r8
 800efca:	d936      	bls.n	800f03a <__hexnan+0x112>
 800efcc:	f1a8 0204 	sub.w	r2, r8, #4
 800efd0:	4623      	mov	r3, r4
 800efd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800efd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800efda:	429f      	cmp	r7, r3
 800efdc:	d2f9      	bcs.n	800efd2 <__hexnan+0xaa>
 800efde:	1b3b      	subs	r3, r7, r4
 800efe0:	f023 0303 	bic.w	r3, r3, #3
 800efe4:	3304      	adds	r3, #4
 800efe6:	3401      	adds	r4, #1
 800efe8:	3e03      	subs	r6, #3
 800efea:	42b4      	cmp	r4, r6
 800efec:	bf88      	it	hi
 800efee:	2304      	movhi	r3, #4
 800eff0:	4443      	add	r3, r8
 800eff2:	2200      	movs	r2, #0
 800eff4:	f843 2b04 	str.w	r2, [r3], #4
 800eff8:	429f      	cmp	r7, r3
 800effa:	d2fb      	bcs.n	800eff4 <__hexnan+0xcc>
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	b91b      	cbnz	r3, 800f008 <__hexnan+0xe0>
 800f000:	4547      	cmp	r7, r8
 800f002:	d128      	bne.n	800f056 <__hexnan+0x12e>
 800f004:	2301      	movs	r3, #1
 800f006:	603b      	str	r3, [r7, #0]
 800f008:	2005      	movs	r0, #5
 800f00a:	b007      	add	sp, #28
 800f00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f010:	3501      	adds	r5, #1
 800f012:	2d08      	cmp	r5, #8
 800f014:	f10b 0b01 	add.w	fp, fp, #1
 800f018:	dd06      	ble.n	800f028 <__hexnan+0x100>
 800f01a:	4544      	cmp	r4, r8
 800f01c:	d9c1      	bls.n	800efa2 <__hexnan+0x7a>
 800f01e:	2300      	movs	r3, #0
 800f020:	f844 3c04 	str.w	r3, [r4, #-4]
 800f024:	2501      	movs	r5, #1
 800f026:	3c04      	subs	r4, #4
 800f028:	6822      	ldr	r2, [r4, #0]
 800f02a:	f000 000f 	and.w	r0, r0, #15
 800f02e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f032:	6020      	str	r0, [r4, #0]
 800f034:	e7b5      	b.n	800efa2 <__hexnan+0x7a>
 800f036:	2508      	movs	r5, #8
 800f038:	e7b3      	b.n	800efa2 <__hexnan+0x7a>
 800f03a:	9b01      	ldr	r3, [sp, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d0dd      	beq.n	800effc <__hexnan+0xd4>
 800f040:	f1c3 0320 	rsb	r3, r3, #32
 800f044:	f04f 32ff 	mov.w	r2, #4294967295
 800f048:	40da      	lsrs	r2, r3
 800f04a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f04e:	4013      	ands	r3, r2
 800f050:	f846 3c04 	str.w	r3, [r6, #-4]
 800f054:	e7d2      	b.n	800effc <__hexnan+0xd4>
 800f056:	3f04      	subs	r7, #4
 800f058:	e7d0      	b.n	800effc <__hexnan+0xd4>
 800f05a:	2004      	movs	r0, #4
 800f05c:	e7d5      	b.n	800f00a <__hexnan+0xe2>

0800f05e <__ascii_mbtowc>:
 800f05e:	b082      	sub	sp, #8
 800f060:	b901      	cbnz	r1, 800f064 <__ascii_mbtowc+0x6>
 800f062:	a901      	add	r1, sp, #4
 800f064:	b142      	cbz	r2, 800f078 <__ascii_mbtowc+0x1a>
 800f066:	b14b      	cbz	r3, 800f07c <__ascii_mbtowc+0x1e>
 800f068:	7813      	ldrb	r3, [r2, #0]
 800f06a:	600b      	str	r3, [r1, #0]
 800f06c:	7812      	ldrb	r2, [r2, #0]
 800f06e:	1e10      	subs	r0, r2, #0
 800f070:	bf18      	it	ne
 800f072:	2001      	movne	r0, #1
 800f074:	b002      	add	sp, #8
 800f076:	4770      	bx	lr
 800f078:	4610      	mov	r0, r2
 800f07a:	e7fb      	b.n	800f074 <__ascii_mbtowc+0x16>
 800f07c:	f06f 0001 	mvn.w	r0, #1
 800f080:	e7f8      	b.n	800f074 <__ascii_mbtowc+0x16>

0800f082 <_realloc_r>:
 800f082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f086:	4680      	mov	r8, r0
 800f088:	4615      	mov	r5, r2
 800f08a:	460c      	mov	r4, r1
 800f08c:	b921      	cbnz	r1, 800f098 <_realloc_r+0x16>
 800f08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f092:	4611      	mov	r1, r2
 800f094:	f7fd be6c 	b.w	800cd70 <_malloc_r>
 800f098:	b92a      	cbnz	r2, 800f0a6 <_realloc_r+0x24>
 800f09a:	f7fd fdf5 	bl	800cc88 <_free_r>
 800f09e:	2400      	movs	r4, #0
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a6:	f000 f840 	bl	800f12a <_malloc_usable_size_r>
 800f0aa:	4285      	cmp	r5, r0
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	d802      	bhi.n	800f0b6 <_realloc_r+0x34>
 800f0b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0b4:	d8f4      	bhi.n	800f0a0 <_realloc_r+0x1e>
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	f7fd fe59 	bl	800cd70 <_malloc_r>
 800f0be:	4607      	mov	r7, r0
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d0ec      	beq.n	800f09e <_realloc_r+0x1c>
 800f0c4:	42b5      	cmp	r5, r6
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	bf28      	it	cs
 800f0cc:	4632      	movcs	r2, r6
 800f0ce:	f7fc ff78 	bl	800bfc2 <memcpy>
 800f0d2:	4621      	mov	r1, r4
 800f0d4:	4640      	mov	r0, r8
 800f0d6:	f7fd fdd7 	bl	800cc88 <_free_r>
 800f0da:	463c      	mov	r4, r7
 800f0dc:	e7e0      	b.n	800f0a0 <_realloc_r+0x1e>

0800f0de <__ascii_wctomb>:
 800f0de:	4603      	mov	r3, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	b141      	cbz	r1, 800f0f6 <__ascii_wctomb+0x18>
 800f0e4:	2aff      	cmp	r2, #255	@ 0xff
 800f0e6:	d904      	bls.n	800f0f2 <__ascii_wctomb+0x14>
 800f0e8:	228a      	movs	r2, #138	@ 0x8a
 800f0ea:	601a      	str	r2, [r3, #0]
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f0:	4770      	bx	lr
 800f0f2:	700a      	strb	r2, [r1, #0]
 800f0f4:	2001      	movs	r0, #1
 800f0f6:	4770      	bx	lr

0800f0f8 <fiprintf>:
 800f0f8:	b40e      	push	{r1, r2, r3}
 800f0fa:	b503      	push	{r0, r1, lr}
 800f0fc:	4601      	mov	r1, r0
 800f0fe:	ab03      	add	r3, sp, #12
 800f100:	4805      	ldr	r0, [pc, #20]	@ (800f118 <fiprintf+0x20>)
 800f102:	f853 2b04 	ldr.w	r2, [r3], #4
 800f106:	6800      	ldr	r0, [r0, #0]
 800f108:	9301      	str	r3, [sp, #4]
 800f10a:	f000 f83f 	bl	800f18c <_vfiprintf_r>
 800f10e:	b002      	add	sp, #8
 800f110:	f85d eb04 	ldr.w	lr, [sp], #4
 800f114:	b003      	add	sp, #12
 800f116:	4770      	bx	lr
 800f118:	20000188 	.word	0x20000188

0800f11c <abort>:
 800f11c:	b508      	push	{r3, lr}
 800f11e:	2006      	movs	r0, #6
 800f120:	f000 fa08 	bl	800f534 <raise>
 800f124:	2001      	movs	r0, #1
 800f126:	f7f2 fa2f 	bl	8001588 <_exit>

0800f12a <_malloc_usable_size_r>:
 800f12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f12e:	1f18      	subs	r0, r3, #4
 800f130:	2b00      	cmp	r3, #0
 800f132:	bfbc      	itt	lt
 800f134:	580b      	ldrlt	r3, [r1, r0]
 800f136:	18c0      	addlt	r0, r0, r3
 800f138:	4770      	bx	lr

0800f13a <__sfputc_r>:
 800f13a:	6893      	ldr	r3, [r2, #8]
 800f13c:	3b01      	subs	r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	b410      	push	{r4}
 800f142:	6093      	str	r3, [r2, #8]
 800f144:	da08      	bge.n	800f158 <__sfputc_r+0x1e>
 800f146:	6994      	ldr	r4, [r2, #24]
 800f148:	42a3      	cmp	r3, r4
 800f14a:	db01      	blt.n	800f150 <__sfputc_r+0x16>
 800f14c:	290a      	cmp	r1, #10
 800f14e:	d103      	bne.n	800f158 <__sfputc_r+0x1e>
 800f150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f154:	f000 b932 	b.w	800f3bc <__swbuf_r>
 800f158:	6813      	ldr	r3, [r2, #0]
 800f15a:	1c58      	adds	r0, r3, #1
 800f15c:	6010      	str	r0, [r2, #0]
 800f15e:	7019      	strb	r1, [r3, #0]
 800f160:	4608      	mov	r0, r1
 800f162:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <__sfputs_r>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	4606      	mov	r6, r0
 800f16c:	460f      	mov	r7, r1
 800f16e:	4614      	mov	r4, r2
 800f170:	18d5      	adds	r5, r2, r3
 800f172:	42ac      	cmp	r4, r5
 800f174:	d101      	bne.n	800f17a <__sfputs_r+0x12>
 800f176:	2000      	movs	r0, #0
 800f178:	e007      	b.n	800f18a <__sfputs_r+0x22>
 800f17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f17e:	463a      	mov	r2, r7
 800f180:	4630      	mov	r0, r6
 800f182:	f7ff ffda 	bl	800f13a <__sfputc_r>
 800f186:	1c43      	adds	r3, r0, #1
 800f188:	d1f3      	bne.n	800f172 <__sfputs_r+0xa>
 800f18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f18c <_vfiprintf_r>:
 800f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f190:	460d      	mov	r5, r1
 800f192:	b09d      	sub	sp, #116	@ 0x74
 800f194:	4614      	mov	r4, r2
 800f196:	4698      	mov	r8, r3
 800f198:	4606      	mov	r6, r0
 800f19a:	b118      	cbz	r0, 800f1a4 <_vfiprintf_r+0x18>
 800f19c:	6a03      	ldr	r3, [r0, #32]
 800f19e:	b90b      	cbnz	r3, 800f1a4 <_vfiprintf_r+0x18>
 800f1a0:	f7fc fdc2 	bl	800bd28 <__sinit>
 800f1a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1a6:	07d9      	lsls	r1, r3, #31
 800f1a8:	d405      	bmi.n	800f1b6 <_vfiprintf_r+0x2a>
 800f1aa:	89ab      	ldrh	r3, [r5, #12]
 800f1ac:	059a      	lsls	r2, r3, #22
 800f1ae:	d402      	bmi.n	800f1b6 <_vfiprintf_r+0x2a>
 800f1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1b2:	f7fc ff04 	bl	800bfbe <__retarget_lock_acquire_recursive>
 800f1b6:	89ab      	ldrh	r3, [r5, #12]
 800f1b8:	071b      	lsls	r3, r3, #28
 800f1ba:	d501      	bpl.n	800f1c0 <_vfiprintf_r+0x34>
 800f1bc:	692b      	ldr	r3, [r5, #16]
 800f1be:	b99b      	cbnz	r3, 800f1e8 <_vfiprintf_r+0x5c>
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f000 f938 	bl	800f438 <__swsetup_r>
 800f1c8:	b170      	cbz	r0, 800f1e8 <_vfiprintf_r+0x5c>
 800f1ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1cc:	07dc      	lsls	r4, r3, #31
 800f1ce:	d504      	bpl.n	800f1da <_vfiprintf_r+0x4e>
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d4:	b01d      	add	sp, #116	@ 0x74
 800f1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1da:	89ab      	ldrh	r3, [r5, #12]
 800f1dc:	0598      	lsls	r0, r3, #22
 800f1de:	d4f7      	bmi.n	800f1d0 <_vfiprintf_r+0x44>
 800f1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1e2:	f7fc feed 	bl	800bfc0 <__retarget_lock_release_recursive>
 800f1e6:	e7f3      	b.n	800f1d0 <_vfiprintf_r+0x44>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ec:	2320      	movs	r3, #32
 800f1ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1f6:	2330      	movs	r3, #48	@ 0x30
 800f1f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3a8 <_vfiprintf_r+0x21c>
 800f1fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f200:	f04f 0901 	mov.w	r9, #1
 800f204:	4623      	mov	r3, r4
 800f206:	469a      	mov	sl, r3
 800f208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f20c:	b10a      	cbz	r2, 800f212 <_vfiprintf_r+0x86>
 800f20e:	2a25      	cmp	r2, #37	@ 0x25
 800f210:	d1f9      	bne.n	800f206 <_vfiprintf_r+0x7a>
 800f212:	ebba 0b04 	subs.w	fp, sl, r4
 800f216:	d00b      	beq.n	800f230 <_vfiprintf_r+0xa4>
 800f218:	465b      	mov	r3, fp
 800f21a:	4622      	mov	r2, r4
 800f21c:	4629      	mov	r1, r5
 800f21e:	4630      	mov	r0, r6
 800f220:	f7ff ffa2 	bl	800f168 <__sfputs_r>
 800f224:	3001      	adds	r0, #1
 800f226:	f000 80a7 	beq.w	800f378 <_vfiprintf_r+0x1ec>
 800f22a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f22c:	445a      	add	r2, fp
 800f22e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f230:	f89a 3000 	ldrb.w	r3, [sl]
 800f234:	2b00      	cmp	r3, #0
 800f236:	f000 809f 	beq.w	800f378 <_vfiprintf_r+0x1ec>
 800f23a:	2300      	movs	r3, #0
 800f23c:	f04f 32ff 	mov.w	r2, #4294967295
 800f240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f244:	f10a 0a01 	add.w	sl, sl, #1
 800f248:	9304      	str	r3, [sp, #16]
 800f24a:	9307      	str	r3, [sp, #28]
 800f24c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f250:	931a      	str	r3, [sp, #104]	@ 0x68
 800f252:	4654      	mov	r4, sl
 800f254:	2205      	movs	r2, #5
 800f256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f25a:	4853      	ldr	r0, [pc, #332]	@ (800f3a8 <_vfiprintf_r+0x21c>)
 800f25c:	f7f0 ffb8 	bl	80001d0 <memchr>
 800f260:	9a04      	ldr	r2, [sp, #16]
 800f262:	b9d8      	cbnz	r0, 800f29c <_vfiprintf_r+0x110>
 800f264:	06d1      	lsls	r1, r2, #27
 800f266:	bf44      	itt	mi
 800f268:	2320      	movmi	r3, #32
 800f26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f26e:	0713      	lsls	r3, r2, #28
 800f270:	bf44      	itt	mi
 800f272:	232b      	movmi	r3, #43	@ 0x2b
 800f274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f278:	f89a 3000 	ldrb.w	r3, [sl]
 800f27c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f27e:	d015      	beq.n	800f2ac <_vfiprintf_r+0x120>
 800f280:	9a07      	ldr	r2, [sp, #28]
 800f282:	4654      	mov	r4, sl
 800f284:	2000      	movs	r0, #0
 800f286:	f04f 0c0a 	mov.w	ip, #10
 800f28a:	4621      	mov	r1, r4
 800f28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f290:	3b30      	subs	r3, #48	@ 0x30
 800f292:	2b09      	cmp	r3, #9
 800f294:	d94b      	bls.n	800f32e <_vfiprintf_r+0x1a2>
 800f296:	b1b0      	cbz	r0, 800f2c6 <_vfiprintf_r+0x13a>
 800f298:	9207      	str	r2, [sp, #28]
 800f29a:	e014      	b.n	800f2c6 <_vfiprintf_r+0x13a>
 800f29c:	eba0 0308 	sub.w	r3, r0, r8
 800f2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	9304      	str	r3, [sp, #16]
 800f2a8:	46a2      	mov	sl, r4
 800f2aa:	e7d2      	b.n	800f252 <_vfiprintf_r+0xc6>
 800f2ac:	9b03      	ldr	r3, [sp, #12]
 800f2ae:	1d19      	adds	r1, r3, #4
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	9103      	str	r1, [sp, #12]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	bfbb      	ittet	lt
 800f2b8:	425b      	neglt	r3, r3
 800f2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f2be:	9307      	strge	r3, [sp, #28]
 800f2c0:	9307      	strlt	r3, [sp, #28]
 800f2c2:	bfb8      	it	lt
 800f2c4:	9204      	strlt	r2, [sp, #16]
 800f2c6:	7823      	ldrb	r3, [r4, #0]
 800f2c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2ca:	d10a      	bne.n	800f2e2 <_vfiprintf_r+0x156>
 800f2cc:	7863      	ldrb	r3, [r4, #1]
 800f2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2d0:	d132      	bne.n	800f338 <_vfiprintf_r+0x1ac>
 800f2d2:	9b03      	ldr	r3, [sp, #12]
 800f2d4:	1d1a      	adds	r2, r3, #4
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	9203      	str	r2, [sp, #12]
 800f2da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2de:	3402      	adds	r4, #2
 800f2e0:	9305      	str	r3, [sp, #20]
 800f2e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3b8 <_vfiprintf_r+0x22c>
 800f2e6:	7821      	ldrb	r1, [r4, #0]
 800f2e8:	2203      	movs	r2, #3
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	f7f0 ff70 	bl	80001d0 <memchr>
 800f2f0:	b138      	cbz	r0, 800f302 <_vfiprintf_r+0x176>
 800f2f2:	9b04      	ldr	r3, [sp, #16]
 800f2f4:	eba0 000a 	sub.w	r0, r0, sl
 800f2f8:	2240      	movs	r2, #64	@ 0x40
 800f2fa:	4082      	lsls	r2, r0
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	3401      	adds	r4, #1
 800f300:	9304      	str	r3, [sp, #16]
 800f302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f306:	4829      	ldr	r0, [pc, #164]	@ (800f3ac <_vfiprintf_r+0x220>)
 800f308:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f30c:	2206      	movs	r2, #6
 800f30e:	f7f0 ff5f 	bl	80001d0 <memchr>
 800f312:	2800      	cmp	r0, #0
 800f314:	d03f      	beq.n	800f396 <_vfiprintf_r+0x20a>
 800f316:	4b26      	ldr	r3, [pc, #152]	@ (800f3b0 <_vfiprintf_r+0x224>)
 800f318:	bb1b      	cbnz	r3, 800f362 <_vfiprintf_r+0x1d6>
 800f31a:	9b03      	ldr	r3, [sp, #12]
 800f31c:	3307      	adds	r3, #7
 800f31e:	f023 0307 	bic.w	r3, r3, #7
 800f322:	3308      	adds	r3, #8
 800f324:	9303      	str	r3, [sp, #12]
 800f326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f328:	443b      	add	r3, r7
 800f32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f32c:	e76a      	b.n	800f204 <_vfiprintf_r+0x78>
 800f32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f332:	460c      	mov	r4, r1
 800f334:	2001      	movs	r0, #1
 800f336:	e7a8      	b.n	800f28a <_vfiprintf_r+0xfe>
 800f338:	2300      	movs	r3, #0
 800f33a:	3401      	adds	r4, #1
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	4619      	mov	r1, r3
 800f340:	f04f 0c0a 	mov.w	ip, #10
 800f344:	4620      	mov	r0, r4
 800f346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f34a:	3a30      	subs	r2, #48	@ 0x30
 800f34c:	2a09      	cmp	r2, #9
 800f34e:	d903      	bls.n	800f358 <_vfiprintf_r+0x1cc>
 800f350:	2b00      	cmp	r3, #0
 800f352:	d0c6      	beq.n	800f2e2 <_vfiprintf_r+0x156>
 800f354:	9105      	str	r1, [sp, #20]
 800f356:	e7c4      	b.n	800f2e2 <_vfiprintf_r+0x156>
 800f358:	fb0c 2101 	mla	r1, ip, r1, r2
 800f35c:	4604      	mov	r4, r0
 800f35e:	2301      	movs	r3, #1
 800f360:	e7f0      	b.n	800f344 <_vfiprintf_r+0x1b8>
 800f362:	ab03      	add	r3, sp, #12
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	462a      	mov	r2, r5
 800f368:	4b12      	ldr	r3, [pc, #72]	@ (800f3b4 <_vfiprintf_r+0x228>)
 800f36a:	a904      	add	r1, sp, #16
 800f36c:	4630      	mov	r0, r6
 800f36e:	f7fb fe83 	bl	800b078 <_printf_float>
 800f372:	4607      	mov	r7, r0
 800f374:	1c78      	adds	r0, r7, #1
 800f376:	d1d6      	bne.n	800f326 <_vfiprintf_r+0x19a>
 800f378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d405      	bmi.n	800f38a <_vfiprintf_r+0x1fe>
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	059a      	lsls	r2, r3, #22
 800f382:	d402      	bmi.n	800f38a <_vfiprintf_r+0x1fe>
 800f384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f386:	f7fc fe1b 	bl	800bfc0 <__retarget_lock_release_recursive>
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	065b      	lsls	r3, r3, #25
 800f38e:	f53f af1f 	bmi.w	800f1d0 <_vfiprintf_r+0x44>
 800f392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f394:	e71e      	b.n	800f1d4 <_vfiprintf_r+0x48>
 800f396:	ab03      	add	r3, sp, #12
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	462a      	mov	r2, r5
 800f39c:	4b05      	ldr	r3, [pc, #20]	@ (800f3b4 <_vfiprintf_r+0x228>)
 800f39e:	a904      	add	r1, sp, #16
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	f7fc f901 	bl	800b5a8 <_printf_i>
 800f3a6:	e7e4      	b.n	800f372 <_vfiprintf_r+0x1e6>
 800f3a8:	0800fab9 	.word	0x0800fab9
 800f3ac:	0800fac3 	.word	0x0800fac3
 800f3b0:	0800b079 	.word	0x0800b079
 800f3b4:	0800f169 	.word	0x0800f169
 800f3b8:	0800fabf 	.word	0x0800fabf

0800f3bc <__swbuf_r>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	460e      	mov	r6, r1
 800f3c0:	4614      	mov	r4, r2
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	b118      	cbz	r0, 800f3ce <__swbuf_r+0x12>
 800f3c6:	6a03      	ldr	r3, [r0, #32]
 800f3c8:	b90b      	cbnz	r3, 800f3ce <__swbuf_r+0x12>
 800f3ca:	f7fc fcad 	bl	800bd28 <__sinit>
 800f3ce:	69a3      	ldr	r3, [r4, #24]
 800f3d0:	60a3      	str	r3, [r4, #8]
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	071a      	lsls	r2, r3, #28
 800f3d6:	d501      	bpl.n	800f3dc <__swbuf_r+0x20>
 800f3d8:	6923      	ldr	r3, [r4, #16]
 800f3da:	b943      	cbnz	r3, 800f3ee <__swbuf_r+0x32>
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f000 f82a 	bl	800f438 <__swsetup_r>
 800f3e4:	b118      	cbz	r0, 800f3ee <__swbuf_r+0x32>
 800f3e6:	f04f 37ff 	mov.w	r7, #4294967295
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	6922      	ldr	r2, [r4, #16]
 800f3f2:	1a98      	subs	r0, r3, r2
 800f3f4:	6963      	ldr	r3, [r4, #20]
 800f3f6:	b2f6      	uxtb	r6, r6
 800f3f8:	4283      	cmp	r3, r0
 800f3fa:	4637      	mov	r7, r6
 800f3fc:	dc05      	bgt.n	800f40a <__swbuf_r+0x4e>
 800f3fe:	4621      	mov	r1, r4
 800f400:	4628      	mov	r0, r5
 800f402:	f7ff fa53 	bl	800e8ac <_fflush_r>
 800f406:	2800      	cmp	r0, #0
 800f408:	d1ed      	bne.n	800f3e6 <__swbuf_r+0x2a>
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	3b01      	subs	r3, #1
 800f40e:	60a3      	str	r3, [r4, #8]
 800f410:	6823      	ldr	r3, [r4, #0]
 800f412:	1c5a      	adds	r2, r3, #1
 800f414:	6022      	str	r2, [r4, #0]
 800f416:	701e      	strb	r6, [r3, #0]
 800f418:	6962      	ldr	r2, [r4, #20]
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d004      	beq.n	800f42a <__swbuf_r+0x6e>
 800f420:	89a3      	ldrh	r3, [r4, #12]
 800f422:	07db      	lsls	r3, r3, #31
 800f424:	d5e1      	bpl.n	800f3ea <__swbuf_r+0x2e>
 800f426:	2e0a      	cmp	r6, #10
 800f428:	d1df      	bne.n	800f3ea <__swbuf_r+0x2e>
 800f42a:	4621      	mov	r1, r4
 800f42c:	4628      	mov	r0, r5
 800f42e:	f7ff fa3d 	bl	800e8ac <_fflush_r>
 800f432:	2800      	cmp	r0, #0
 800f434:	d0d9      	beq.n	800f3ea <__swbuf_r+0x2e>
 800f436:	e7d6      	b.n	800f3e6 <__swbuf_r+0x2a>

0800f438 <__swsetup_r>:
 800f438:	b538      	push	{r3, r4, r5, lr}
 800f43a:	4b29      	ldr	r3, [pc, #164]	@ (800f4e0 <__swsetup_r+0xa8>)
 800f43c:	4605      	mov	r5, r0
 800f43e:	6818      	ldr	r0, [r3, #0]
 800f440:	460c      	mov	r4, r1
 800f442:	b118      	cbz	r0, 800f44c <__swsetup_r+0x14>
 800f444:	6a03      	ldr	r3, [r0, #32]
 800f446:	b90b      	cbnz	r3, 800f44c <__swsetup_r+0x14>
 800f448:	f7fc fc6e 	bl	800bd28 <__sinit>
 800f44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f450:	0719      	lsls	r1, r3, #28
 800f452:	d422      	bmi.n	800f49a <__swsetup_r+0x62>
 800f454:	06da      	lsls	r2, r3, #27
 800f456:	d407      	bmi.n	800f468 <__swsetup_r+0x30>
 800f458:	2209      	movs	r2, #9
 800f45a:	602a      	str	r2, [r5, #0]
 800f45c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f460:	81a3      	strh	r3, [r4, #12]
 800f462:	f04f 30ff 	mov.w	r0, #4294967295
 800f466:	e033      	b.n	800f4d0 <__swsetup_r+0x98>
 800f468:	0758      	lsls	r0, r3, #29
 800f46a:	d512      	bpl.n	800f492 <__swsetup_r+0x5a>
 800f46c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f46e:	b141      	cbz	r1, 800f482 <__swsetup_r+0x4a>
 800f470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f474:	4299      	cmp	r1, r3
 800f476:	d002      	beq.n	800f47e <__swsetup_r+0x46>
 800f478:	4628      	mov	r0, r5
 800f47a:	f7fd fc05 	bl	800cc88 <_free_r>
 800f47e:	2300      	movs	r3, #0
 800f480:	6363      	str	r3, [r4, #52]	@ 0x34
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f488:	81a3      	strh	r3, [r4, #12]
 800f48a:	2300      	movs	r3, #0
 800f48c:	6063      	str	r3, [r4, #4]
 800f48e:	6923      	ldr	r3, [r4, #16]
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	f043 0308 	orr.w	r3, r3, #8
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	6923      	ldr	r3, [r4, #16]
 800f49c:	b94b      	cbnz	r3, 800f4b2 <__swsetup_r+0x7a>
 800f49e:	89a3      	ldrh	r3, [r4, #12]
 800f4a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4a8:	d003      	beq.n	800f4b2 <__swsetup_r+0x7a>
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	f000 f883 	bl	800f5b8 <__smakebuf_r>
 800f4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4b6:	f013 0201 	ands.w	r2, r3, #1
 800f4ba:	d00a      	beq.n	800f4d2 <__swsetup_r+0x9a>
 800f4bc:	2200      	movs	r2, #0
 800f4be:	60a2      	str	r2, [r4, #8]
 800f4c0:	6962      	ldr	r2, [r4, #20]
 800f4c2:	4252      	negs	r2, r2
 800f4c4:	61a2      	str	r2, [r4, #24]
 800f4c6:	6922      	ldr	r2, [r4, #16]
 800f4c8:	b942      	cbnz	r2, 800f4dc <__swsetup_r+0xa4>
 800f4ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4ce:	d1c5      	bne.n	800f45c <__swsetup_r+0x24>
 800f4d0:	bd38      	pop	{r3, r4, r5, pc}
 800f4d2:	0799      	lsls	r1, r3, #30
 800f4d4:	bf58      	it	pl
 800f4d6:	6962      	ldrpl	r2, [r4, #20]
 800f4d8:	60a2      	str	r2, [r4, #8]
 800f4da:	e7f4      	b.n	800f4c6 <__swsetup_r+0x8e>
 800f4dc:	2000      	movs	r0, #0
 800f4de:	e7f7      	b.n	800f4d0 <__swsetup_r+0x98>
 800f4e0:	20000188 	.word	0x20000188

0800f4e4 <_raise_r>:
 800f4e4:	291f      	cmp	r1, #31
 800f4e6:	b538      	push	{r3, r4, r5, lr}
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	d904      	bls.n	800f4f8 <_raise_r+0x14>
 800f4ee:	2316      	movs	r3, #22
 800f4f0:	6003      	str	r3, [r0, #0]
 800f4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4fa:	b112      	cbz	r2, 800f502 <_raise_r+0x1e>
 800f4fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f500:	b94b      	cbnz	r3, 800f516 <_raise_r+0x32>
 800f502:	4628      	mov	r0, r5
 800f504:	f000 f830 	bl	800f568 <_getpid_r>
 800f508:	4622      	mov	r2, r4
 800f50a:	4601      	mov	r1, r0
 800f50c:	4628      	mov	r0, r5
 800f50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f512:	f000 b817 	b.w	800f544 <_kill_r>
 800f516:	2b01      	cmp	r3, #1
 800f518:	d00a      	beq.n	800f530 <_raise_r+0x4c>
 800f51a:	1c59      	adds	r1, r3, #1
 800f51c:	d103      	bne.n	800f526 <_raise_r+0x42>
 800f51e:	2316      	movs	r3, #22
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	2001      	movs	r0, #1
 800f524:	e7e7      	b.n	800f4f6 <_raise_r+0x12>
 800f526:	2100      	movs	r1, #0
 800f528:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f52c:	4620      	mov	r0, r4
 800f52e:	4798      	blx	r3
 800f530:	2000      	movs	r0, #0
 800f532:	e7e0      	b.n	800f4f6 <_raise_r+0x12>

0800f534 <raise>:
 800f534:	4b02      	ldr	r3, [pc, #8]	@ (800f540 <raise+0xc>)
 800f536:	4601      	mov	r1, r0
 800f538:	6818      	ldr	r0, [r3, #0]
 800f53a:	f7ff bfd3 	b.w	800f4e4 <_raise_r>
 800f53e:	bf00      	nop
 800f540:	20000188 	.word	0x20000188

0800f544 <_kill_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4d07      	ldr	r5, [pc, #28]	@ (800f564 <_kill_r+0x20>)
 800f548:	2300      	movs	r3, #0
 800f54a:	4604      	mov	r4, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	4611      	mov	r1, r2
 800f550:	602b      	str	r3, [r5, #0]
 800f552:	f7f2 f809 	bl	8001568 <_kill>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	d102      	bne.n	800f560 <_kill_r+0x1c>
 800f55a:	682b      	ldr	r3, [r5, #0]
 800f55c:	b103      	cbz	r3, 800f560 <_kill_r+0x1c>
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	bd38      	pop	{r3, r4, r5, pc}
 800f562:	bf00      	nop
 800f564:	200017c8 	.word	0x200017c8

0800f568 <_getpid_r>:
 800f568:	f7f1 bff6 	b.w	8001558 <_getpid>

0800f56c <__swhatbuf_r>:
 800f56c:	b570      	push	{r4, r5, r6, lr}
 800f56e:	460c      	mov	r4, r1
 800f570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f574:	2900      	cmp	r1, #0
 800f576:	b096      	sub	sp, #88	@ 0x58
 800f578:	4615      	mov	r5, r2
 800f57a:	461e      	mov	r6, r3
 800f57c:	da0d      	bge.n	800f59a <__swhatbuf_r+0x2e>
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f584:	f04f 0100 	mov.w	r1, #0
 800f588:	bf14      	ite	ne
 800f58a:	2340      	movne	r3, #64	@ 0x40
 800f58c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f590:	2000      	movs	r0, #0
 800f592:	6031      	str	r1, [r6, #0]
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	b016      	add	sp, #88	@ 0x58
 800f598:	bd70      	pop	{r4, r5, r6, pc}
 800f59a:	466a      	mov	r2, sp
 800f59c:	f000 f848 	bl	800f630 <_fstat_r>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	dbec      	blt.n	800f57e <__swhatbuf_r+0x12>
 800f5a4:	9901      	ldr	r1, [sp, #4]
 800f5a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f5ae:	4259      	negs	r1, r3
 800f5b0:	4159      	adcs	r1, r3
 800f5b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5b6:	e7eb      	b.n	800f590 <__swhatbuf_r+0x24>

0800f5b8 <__smakebuf_r>:
 800f5b8:	898b      	ldrh	r3, [r1, #12]
 800f5ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5bc:	079d      	lsls	r5, r3, #30
 800f5be:	4606      	mov	r6, r0
 800f5c0:	460c      	mov	r4, r1
 800f5c2:	d507      	bpl.n	800f5d4 <__smakebuf_r+0x1c>
 800f5c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f5c8:	6023      	str	r3, [r4, #0]
 800f5ca:	6123      	str	r3, [r4, #16]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	6163      	str	r3, [r4, #20]
 800f5d0:	b003      	add	sp, #12
 800f5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5d4:	ab01      	add	r3, sp, #4
 800f5d6:	466a      	mov	r2, sp
 800f5d8:	f7ff ffc8 	bl	800f56c <__swhatbuf_r>
 800f5dc:	9f00      	ldr	r7, [sp, #0]
 800f5de:	4605      	mov	r5, r0
 800f5e0:	4639      	mov	r1, r7
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f7fd fbc4 	bl	800cd70 <_malloc_r>
 800f5e8:	b948      	cbnz	r0, 800f5fe <__smakebuf_r+0x46>
 800f5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ee:	059a      	lsls	r2, r3, #22
 800f5f0:	d4ee      	bmi.n	800f5d0 <__smakebuf_r+0x18>
 800f5f2:	f023 0303 	bic.w	r3, r3, #3
 800f5f6:	f043 0302 	orr.w	r3, r3, #2
 800f5fa:	81a3      	strh	r3, [r4, #12]
 800f5fc:	e7e2      	b.n	800f5c4 <__smakebuf_r+0xc>
 800f5fe:	89a3      	ldrh	r3, [r4, #12]
 800f600:	6020      	str	r0, [r4, #0]
 800f602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f606:	81a3      	strh	r3, [r4, #12]
 800f608:	9b01      	ldr	r3, [sp, #4]
 800f60a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f60e:	b15b      	cbz	r3, 800f628 <__smakebuf_r+0x70>
 800f610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f614:	4630      	mov	r0, r6
 800f616:	f000 f81d 	bl	800f654 <_isatty_r>
 800f61a:	b128      	cbz	r0, 800f628 <__smakebuf_r+0x70>
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	f023 0303 	bic.w	r3, r3, #3
 800f622:	f043 0301 	orr.w	r3, r3, #1
 800f626:	81a3      	strh	r3, [r4, #12]
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	431d      	orrs	r5, r3
 800f62c:	81a5      	strh	r5, [r4, #12]
 800f62e:	e7cf      	b.n	800f5d0 <__smakebuf_r+0x18>

0800f630 <_fstat_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	4d07      	ldr	r5, [pc, #28]	@ (800f650 <_fstat_r+0x20>)
 800f634:	2300      	movs	r3, #0
 800f636:	4604      	mov	r4, r0
 800f638:	4608      	mov	r0, r1
 800f63a:	4611      	mov	r1, r2
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	f7f1 fff3 	bl	8001628 <_fstat>
 800f642:	1c43      	adds	r3, r0, #1
 800f644:	d102      	bne.n	800f64c <_fstat_r+0x1c>
 800f646:	682b      	ldr	r3, [r5, #0]
 800f648:	b103      	cbz	r3, 800f64c <_fstat_r+0x1c>
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	bd38      	pop	{r3, r4, r5, pc}
 800f64e:	bf00      	nop
 800f650:	200017c8 	.word	0x200017c8

0800f654 <_isatty_r>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	4d06      	ldr	r5, [pc, #24]	@ (800f670 <_isatty_r+0x1c>)
 800f658:	2300      	movs	r3, #0
 800f65a:	4604      	mov	r4, r0
 800f65c:	4608      	mov	r0, r1
 800f65e:	602b      	str	r3, [r5, #0]
 800f660:	f7f1 fff2 	bl	8001648 <_isatty>
 800f664:	1c43      	adds	r3, r0, #1
 800f666:	d102      	bne.n	800f66e <_isatty_r+0x1a>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	b103      	cbz	r3, 800f66e <_isatty_r+0x1a>
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	bd38      	pop	{r3, r4, r5, pc}
 800f670:	200017c8 	.word	0x200017c8

0800f674 <_init>:
 800f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f676:	bf00      	nop
 800f678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f67a:	bc08      	pop	{r3}
 800f67c:	469e      	mov	lr, r3
 800f67e:	4770      	bx	lr

0800f680 <_fini>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	bf00      	nop
 800f684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f686:	bc08      	pop	{r3}
 800f688:	469e      	mov	lr, r3
 800f68a:	4770      	bx	lr
